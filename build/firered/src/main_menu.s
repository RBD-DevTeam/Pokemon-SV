@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sString_Dummy,object
sString_Dummy:
	.byte	0xff
	.size	 sString_Dummy,1
	.type	 sString_Newline,object
sString_Newline:
	.byte	0xfe
	.byte	0xff
	.size	 sString_Newline,2
	.align	2, 0
	.type	 sWindowTemplate,object
sWindowTemplate:
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x18
	.byte	0x2
	.byte	0xf
	.short	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x18
	.byte	0xa
	.byte	0xf
	.short	0x1
	.byte	0x0
	.byte	0x3
	.byte	0xd
	.byte	0x18
	.byte	0x2
	.byte	0xf
	.short	0xf1
	.byte	0x0
	.byte	0x3
	.byte	0x11
	.byte	0x18
	.byte	0x2
	.byte	0xf
	.short	0x121
	.byte	0x0
	.byte	0x3
	.byte	0xf
	.byte	0x18
	.byte	0x4
	.byte	0xf
	.short	0x1
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplate,48
	.align	1, 0
	.type	 sBgPal00,object
sBgPal00:
	.short	0x7e51
	.short	0x7fff
	.short	0x28e6
	.short	0x398b
	.short	0x821
	.short	0x5672
	.short	0x7779
	.short	0x5ed6
	.short	0x6f37
	.short	0x1884
	.short	0x460f
	.short	0x3d46
	.short	0x61e5
	.short	0x6a27
	.short	0x728b
	.short	0x7b11
	.size	 sBgPal00,32
	.align	1, 0
	.type	 sBgPal15,object
sBgPal15:
	.short	0x7fff
	.short	0x7fff
	.short	0x318c
	.short	0x675a
	.short	0x43c
	.short	0x3aff
	.short	0x664
	.short	0x4bd2
	.short	0x6546
	.short	0x7b14
	.short	0x7fff
	.short	0x318c
	.short	0x675a
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sBgPal15,32
	.type	 sTextColor1,object
sTextColor1:
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.size	 sTextColor1,3
	.type	 sTextColor2,object
sTextColor2:
	.byte	0xa
	.byte	0x1
	.byte	0xc
	.size	 sTextColor2,3
	.align	2, 0
	.type	 sBgTemplate,object
	.size	 sBgTemplate,4
sBgTemplate:
	.byte	0xe0
	.byte	0x1
	.space	2
	.type	 sMenuCursorYMax,object
sMenuCursorYMax:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.size	 sMenuCursorYMax,3
.text
	.align	2, 0
	.type	 CB2_MainMenu,function
	.thumb_func
CB2_MainMenu:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 CB2_MainMenu,.Lfe1-CB2_MainMenu
	.align	2, 0
	.type	 VBlankCB_MainMenu,function
	.thumb_func
VBlankCB_MainMenu:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 VBlankCB_MainMenu,.Lfe2-VBlankCB_MainMenu
	.align	2, 0
	.globl	CB2_InitMainMenu
	.type	 CB2_InitMainMenu,function
	.thumb_func
CB2_InitMainMenu:
	push	{lr}
	mov	r0, #0x1
	bl	MainMenuGpuInit
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 CB2_InitMainMenu,.Lfe3-CB2_InitMainMenu
	.align	2, 0
	.type	 CB2_InitMainMenu_2,function
	.thumb_func
CB2_InitMainMenu_2:
	push	{lr}
	mov	r0, #0x1
	bl	MainMenuGpuInit
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 CB2_InitMainMenu_2,.Lfe4-CB2_InitMainMenu_2
	.align	2, 0
	.type	 MainMenuGpuInit,function
	.thumb_func
MainMenuGpuInit:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xc
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x18
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L7
	mov	r0, sp
	str	r0, [r1]
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	str	r0, [r1, #0x4]
	ldr	r0, .L7+0x4
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r5, #0x0
	str	r5, [sp, #0x4]
	add	r0, sp, #0x4
	str	r0, [r1]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	str	r0, [r1, #0x4]
	ldr	r0, .L7+0x8
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, sp
	strh	r5, [r0]
	str	r0, [r1]
	ldr	r0, .L7+0xc
	str	r0, [r1, #0x4]
	ldr	r0, .L7+0x10
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	bl	ScanlineEffect_Stop
	bl	ResetTasks
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetPaletteFade
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L7+0x14
	mov	r0, #0x0
	mov	r2, #0x1
	bl	InitBgsFromTemplates
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r0, .L7+0x18
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	ldr	r0, .L7+0x1c
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L7+0x20
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L7+0x24
	bl	SetMainCallback2
	mov	r1, #0xc1
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuReg
	ldr	r0, .L7+0x28
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L7+0x2c
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r5, [r1, #0xa]
	strh	r4, [r1, #0x18]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L8:
	.align	2, 0
.L7:
	.word	0x40000d4
	.word	-0x7eff4000
	.word	-0x7affff00
	.word	0x5000002
	.word	-0x7efffe01
	.word	sBgTemplate
	.word	sWindowTemplate
	.word	sBgPal00
	.word	sBgPal15
	.word	CB2_MainMenu
	.word	Task_SetWin0BldRegsAndCheckSaveFile
	.word	gTasks
.Lfe5:
	.size	 MainMenuGpuInit,.Lfe5-MainMenuGpuInit
	.align	2, 0
	.type	 Task_SetWin0BldRegsAndCheckSaveFile,function
	.thumb_func
Task_SetWin0BldRegsAndCheckSaveFile:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L25
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.LCB266
	b	.L10	@long jump
.LCB266:
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x1
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x21
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0xff
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x7
	bl	SetGpuReg
	ldr	r0, .L25+0x4
	ldrh	r4, [r0]
	cmp	r4, #0x2
	beq	.L15	@cond_branch
	cmp	r4, #0x2
	bgt	.L23	@cond_branch
	cmp	r4, #0
	beq	.L20	@cond_branch
	cmp	r4, #0x1
	beq	.L12	@cond_branch
	b	.L20
.L26:
	.align	2, 0
.L25:
	.word	gPaletteFade
	.word	gSaveFileStatus
.L23:
	cmp	r4, #0x4
	beq	.L21	@cond_branch
	cmp	r4, #0xff
	beq	.L16	@cond_branch
	b	.L20
.L12:
	mov	r0, #0x0
	bl	LoadUserFrameToBg
	bl	IsMysteryGiftEnabled
	cmp	r0, #0x1
	bne	.L13	@cond_branch
	ldr	r2, .L27
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	add	r1, r2, #0
	add	r2, r3, #0
	b	.L14
.L28:
	.align	2, 0
.L27:
	.word	gTasks
.L13:
	ldr	r0, .L29
	lsl	r2, r5, #0x2
	add	r1, r2, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r4, [r1, #0x8]
	add	r1, r0, #0
.L14:
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	b	.L24
.L30:
	.align	2, 0
.L29:
	.word	gTasks
.L15:
	mov	r0, #0x0
	bl	SetStdFrame0OnBg
	ldr	r0, .L31
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r6, [r1, #0x8]
	ldr	r1, .L31+0x4
	add	r0, r5, #0
	bl	PrintSaveErrorStatus
	b	.L10
.L32:
	.align	2, 0
.L31:
	.word	gTasks
	.word	gText_SaveFileHasBeenDeleted
.L16:
	mov	r0, #0x0
	bl	SetStdFrame0OnBg
	ldr	r1, .L33
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r6, #0x1
	strh	r6, [r4, #0x8]
	ldr	r1, .L33+0x4
	add	r0, r5, #0
	bl	PrintSaveErrorStatus
	bl	IsMysteryGiftEnabled
	cmp	r0, #0x1
	bne	.L17	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L10
.L34:
	.align	2, 0
.L33:
	.word	gTasks
	.word	gText_SaveFileCorrupted
.L17:
	strh	r6, [r4, #0x8]
	b	.L10
.L20:
	mov	r0, #0x0
	bl	LoadUserFrameToBg
	ldr	r1, .L35
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
.L24:
	ldr	r1, .L35+0x4
	str	r1, [r0]
	b	.L10
.L36:
	.align	2, 0
.L35:
	.word	gTasks
	.word	Task_SetWin0BldRegsNoSaveFileCheck
.L21:
	mov	r0, #0x0
	bl	SetStdFrame0OnBg
	ldr	r0, .L37
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r6, [r1, #0x8]
	ldr	r1, .L37+0x4
	add	r0, r5, #0
	bl	PrintSaveErrorStatus
.L10:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gTasks
	.word	gText_1MSubCircuitBoardNotInstalled
.Lfe6:
	.size	 Task_SetWin0BldRegsAndCheckSaveFile,.Lfe6-Task_SetWin0BldRegsAndCheckSaveFile
	.align	2, 0
	.type	 PrintSaveErrorStatus,function
	.thumb_func
PrintSaveErrorStatus:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	PrintMessageOnWindow4
	ldr	r1, .L40
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L40+0x4
	str	r1, [r0]
	mov	r0, #0x1
	neg	r0, r0
	ldr	r1, .L40+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	bl	ShowBg
	ldr	r0, .L40+0xc
	bl	SetVBlankCallback
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	gTasks
	.word	Task_SaveErrorStatus_RunPrinterThenWaitButton
	.word	0xffff
	.word	VBlankCB_MainMenu
.Lfe7:
	.size	 PrintSaveErrorStatus,.Lfe7-PrintSaveErrorStatus
	.align	2, 0
	.type	 Task_SaveErrorStatus_RunPrinterThenWaitButton,function
	.thumb_func
Task_SaveErrorStatus_RunPrinterThenWaitButton:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L48
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L43	@cond_branch
	bl	RunTextPrinters
	mov	r0, #0x4
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L43	@cond_branch
	ldr	r0, .L48+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L43	@cond_branch
	mov	r0, #0x4
	bl	ClearWindowTilemap
	ldr	r0, .L48+0x8
	bl	MainMenu_EraseWindow
	mov	r0, #0x0
	bl	LoadUserFrameToBg
	ldr	r1, .L48+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L45	@cond_branch
	ldr	r0, .L48+0x10
	b	.L47
.L49:
	.align	2, 0
.L48:
	.word	gPaletteFade
	.word	gMain
	.word	sWindowTemplate+0x20
	.word	gTasks
	.word	Task_SetWin0BldRegsNoSaveFileCheck
.L45:
	ldr	r0, .L50
.L47:
	str	r0, [r1]
.L43:
	pop	{r4}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	Task_PrintMainMenuText
.Lfe8:
	.size	 Task_SaveErrorStatus_RunPrinterThenWaitButton,.Lfe8-Task_SaveErrorStatus_RunPrinterThenWaitButton
	.align	2, 0
	.type	 Task_SetWin0BldRegsNoSaveFileCheck,function
	.thumb_func
Task_SetWin0BldRegsNoSaveFileCheck:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L57
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L53	@cond_branch
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x1
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x21
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0xff
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x7
	bl	SetGpuReg
	ldr	r0, .L57+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L54	@cond_branch
	ldr	r0, .L57+0x8
	b	.L56
.L58:
	.align	2, 0
.L57:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_ExecuteMainMenuSelection
.L54:
	ldr	r0, .L59
.L56:
	str	r0, [r1]
.L53:
	pop	{r4}
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	Task_WaitFadeAndPrintMainMenuText
.Lfe9:
	.size	 Task_SetWin0BldRegsNoSaveFileCheck,.Lfe9-Task_SetWin0BldRegsNoSaveFileCheck
	.align	2, 0
	.type	 Task_WaitFadeAndPrintMainMenuText,function
	.thumb_func
Task_WaitFadeAndPrintMainMenuText:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L63
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L62	@cond_branch
	add	r0, r2, #0
	bl	Task_PrintMainMenuText
.L62:
	pop	{r0}
	bx	r0
.L64:
	.align	2, 0
.L63:
	.word	gPaletteFade
.Lfe10:
	.size	 Task_WaitFadeAndPrintMainMenuText,.Lfe10-Task_WaitFadeAndPrintMainMenuText
	.align	2, 0
	.type	 Task_PrintMainMenuText,function
	.thumb_func
Task_PrintMainMenuText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x1
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x21
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0xff
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x7
	bl	SetGpuReg
	ldr	r0, .L77
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L66	@cond_branch
	ldr	r1, .L77+0x4
	b	.L75
.L78:
	.align	2, 0
.L77:
	.word	gSaveBlock2Ptr
	.word	0x7e04
.L66:
	ldr	r1, .L79
.L75:
	add	r0, sp, #0xc
	strh	r1, [r0]
	add	r0, sp, #0xc
	mov	r1, #0xf1
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r2, .L79+0x4
	lsl	r1, r7, #0x2
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r2
	mov	r2, #0x8
	ldrsh	r0, [r6, r2]
	mov	r8, r1
	cmp	r0, #0x1
	beq	.L71	@cond_branch
	cmp	r0, #0x1
	ble	.L70	@cond_branch
	cmp	r0, #0x2
	beq	.L72	@cond_branch
.L70:
	mov	r0, #0x0
	mov	r1, #0xaa
	bl	FillWindowPixelBuffer
	ldr	r0, .L79+0x8
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L79+0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	AddTextPrinterParameterized3
	ldr	r0, .L79+0x10
	bl	MainMenu_DrawWindow
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	b	.L76
.L80:
	.align	2, 0
.L79:
	.word	0x547f
	.word	gTasks
	.word	sTextColor1
	.word	gText_NewGame
	.word	sWindowTemplate
.L71:
	mov	r0, #0x1
	mov	r1, #0xaa
	bl	FillWindowPixelBuffer
	mov	r0, #0x2
	mov	r1, #0xaa
	bl	FillWindowPixelBuffer
	ldr	r5, .L81
	str	r5, [sp]
	mov	r4, #0x1
	neg	r4, r4
	str	r4, [sp, #0x4]
	ldr	r0, .L81+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	AddTextPrinterParameterized3
	str	r5, [sp]
	str	r4, [sp, #0x4]
	ldr	r0, .L81+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	AddTextPrinterParameterized3
	bl	PrintContinueStats
	ldr	r4, .L81+0xc
	add	r0, r4, #0
	bl	MainMenu_DrawWindow
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	MainMenu_DrawWindow
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x2
.L76:
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L68
.L82:
	.align	2, 0
.L81:
	.word	sTextColor1
	.word	gText_Continue
	.word	gText_NewGame
	.word	sWindowTemplate+0x8
.L72:
	mov	r0, #0x1
	mov	r1, #0xaa
	bl	FillWindowPixelBuffer
	mov	r0, #0x2
	mov	r1, #0xaa
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	mov	r1, #0xaa
	bl	FillWindowPixelBuffer
	ldr	r5, .L83
	str	r5, [sp]
	mov	r4, #0x1
	neg	r4, r4
	str	r4, [sp, #0x4]
	ldr	r0, .L83+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	AddTextPrinterParameterized3
	str	r5, [sp]
	str	r4, [sp, #0x4]
	ldr	r0, .L83+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	AddTextPrinterParameterized3
	mov	r0, #0x1
	strh	r0, [r6, #0x1c]
	str	r5, [sp]
	str	r4, [sp, #0x4]
	ldr	r0, .L83+0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	AddTextPrinterParameterized3
	bl	PrintContinueStats
	ldr	r4, .L83+0x10
	add	r0, r4, #0
	bl	MainMenu_DrawWindow
	add	r0, r4, #0
	add	r0, r0, #0x8
	bl	MainMenu_DrawWindow
	add	r4, r4, #0x10
	add	r0, r4, #0
	bl	MainMenu_DrawWindow
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x3
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x3
	mov	r1, #0x3
	bl	CopyWindowToVram
.L68:
	ldr	r0, .L83+0x14
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L83+0x18
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	sTextColor1
	.word	gText_Continue
	.word	gText_NewGame
	.word	gText_MysteryGift
	.word	sWindowTemplate+0x8
	.word	gTasks
	.word	Task_WaitDma3AndFadeIn
.Lfe11:
	.size	 Task_PrintMainMenuText,.Lfe11-Task_PrintMainMenuText
	.align	2, 0
	.type	 Task_WaitDma3AndFadeIn,function
	.thumb_func
Task_WaitDma3AndFadeIn:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r5, #0x1
	neg	r5, r5
	add	r0, r5, #0
	bl	WaitDma3Request
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r5
	beq	.L86	@cond_branch
	ldr	r1, .L87
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L87+0x4
	str	r1, [r0]
	ldr	r0, .L87+0x8
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	bl	ShowBg
	ldr	r0, .L87+0xc
	bl	SetVBlankCallback
.L86:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gTasks
	.word	Task_UpdateVisualSelection
	.word	0xffff
	.word	VBlankCB_MainMenu
.Lfe12:
	.size	 Task_WaitDma3AndFadeIn,.Lfe12-Task_WaitDma3AndFadeIn
	.align	2, 0
	.type	 Task_UpdateVisualSelection,function
	.thumb_func
Task_UpdateVisualSelection:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L90
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0xa]
	bl	MoveWindowByMenuTypeAndCursorPos
	ldr	r0, .L90+0x4
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gTasks
	.word	Task_HandleMenuInput
.Lfe13:
	.size	 Task_UpdateVisualSelection,.Lfe13-Task_UpdateVisualSelection
	.align	2, 0
	.type	 Task_HandleMenuInput,function
	.thumb_func
Task_HandleMenuInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L94
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L93	@cond_branch
	add	r0, r4, #0
	bl	HandleMenuInput
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L93	@cond_branch
	ldr	r0, .L94+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L94+0x8
	str	r0, [r1]
.L93:
	pop	{r4}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_UpdateVisualSelection
.Lfe14:
	.size	 Task_HandleMenuInput,.Lfe14-Task_HandleMenuInput
	.align	2, 0
	.type	 Task_ExecuteMainMenuSelection,function
	.thumb_func
Task_ExecuteMainMenuSelection:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L126
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L96	@cond_branch
	ldr	r1, .L126+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L101	@cond_branch
	cmp	r0, #0x1
	ble	.L111	@cond_branch
	cmp	r0, #0x2
	beq	.L107	@cond_branch
	b	.L111
.L127:
	.align	2, 0
.L126:
	.word	gPaletteFade
	.word	gTasks
.L101:
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L110	@cond_branch
	cmp	r0, #0x1
	bne	.L110	@cond_branch
	b	.L111
.L107:
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L111	@cond_branch
	cmp	r0, #0x1
	ble	.L110	@cond_branch
	cmp	r0, #0x2
	beq	.L112	@cond_branch
.L110:
	mov	r0, #0x1
	b	.L98
.L111:
	mov	r0, #0x0
	b	.L98
.L112:
	bl	IsWirelessAdapterConnected
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L113	@cond_branch
	mov	r0, #0x0
	bl	SetStdFrame0OnBg
	ldr	r0, .L128
	str	r0, [r4]
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L96
.L129:
	.align	2, 0
.L128:
	.word	Task_MysteryGiftError
.L113:
	mov	r0, #0x2
.L98:
	cmp	r0, #0x1
	beq	.L122	@cond_branch
	cmp	r0, #0x1
	ble	.L121	@cond_branch
	cmp	r0, #0x2
	beq	.L123	@cond_branch
.L121:
	ldr	r1, .L130
	mov	r0, #0x0
	strb	r0, [r1]
	bl	FreeAllWindowBuffers
	add	r0, r6, #0
	bl	DestroyTask
	bl	StartNewGameScene
	b	.L96
.L131:
	.align	2, 0
.L130:
	.word	gExitStairsMovementDisabled
.L122:
	ldr	r0, .L132
	mov	r2, #0x0
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L132+0x4
	strh	r1, [r0]
	ldr	r0, .L132+0x8
	strb	r2, [r0]
	bl	FreeAllWindowBuffers
	add	r0, r6, #0
	bl	TrySetUpQuestLogScenes_ElseContinueFromSave
	b	.L96
.L133:
	.align	2, 0
.L132:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	gExitStairsMovementDisabled
.L123:
	ldr	r0, .L134
	bl	SetMainCallback2
	bl	HelpSystem_Disable
	bl	FreeAllWindowBuffers
	add	r0, r6, #0
	bl	DestroyTask
.L96:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L135:
	.align	2, 0
.L134:
	.word	c2_mystery_gift
.Lfe15:
	.size	 Task_ExecuteMainMenuSelection,.Lfe15-Task_ExecuteMainMenuSelection
	.align	2, 0
	.type	 Task_MysteryGiftError,function
	.thumb_func
Task_MysteryGiftError:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L151
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r0, #0x1a
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L141	@cond_branch
	cmp	r1, #0x1
	bgt	.L149	@cond_branch
	cmp	r1, #0
	beq	.L138	@cond_branch
	b	.L137
.L152:
	.align	2, 0
.L151:
	.word	gTasks
.L149:
	cmp	r1, #0x2
	beq	.L143	@cond_branch
	cmp	r1, #0x3
	beq	.L145	@cond_branch
	b	.L137
.L138:
	mov	r0, #0x1e
	str	r0, [sp]
	mov	r0, #0x14
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r1, #0x1c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L139	@cond_branch
	ldr	r0, .L153
	bl	PrintMessageOnWindow4
	b	.L140
.L154:
	.align	2, 0
.L153:
	.word	gText_WirelessNotConnected
.L139:
	ldr	r0, .L155
	bl	PrintMessageOnWindow4
.L140:
	ldr	r0, .L155+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	b	.L137
.L156:
	.align	2, 0
.L155:
	.word	gText_MysteryGiftCantUse
	.word	gTasks
.L141:
	ldr	r0, .L157
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	b	.L150
.L158:
	.align	2, 0
.L157:
	.word	gPaletteFade
.L143:
	bl	RunTextPrinters
	mov	r0, #0x4
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
.L150:
	cmp	r0, #0
	bne	.L137	@cond_branch
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	b	.L137
.L145:
	ldr	r0, .L159
	ldrh	r0, [r0, #0x2e]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L137	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L159+0x4
	str	r0, [r4]
.L137:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	gMain
	.word	Task_ReturnToTileScreen
.Lfe16:
	.size	 Task_MysteryGiftError,.Lfe16-Task_MysteryGiftError
	.align	2, 0
	.type	 Task_ReturnToTileScreen,function
	.thumb_func
Task_ReturnToTileScreen:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L163
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L162	@cond_branch
	ldr	r0, .L163+0x4
	bl	SetMainCallback2
	add	r0, r4, #0
	bl	DestroyTask
.L162:
	pop	{r4}
	pop	{r0}
	bx	r0
.L164:
	.align	2, 0
.L163:
	.word	gPaletteFade
	.word	CB2_InitTitleScreen
.Lfe17:
	.size	 Task_ReturnToTileScreen,.Lfe17-Task_ReturnToTileScreen
	.align	2, 0
	.type	 MoveWindowByMenuTypeAndCursorPos,function
	.thumb_func
MoveWindowByMenuTypeAndCursorPos:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r1, .L179
	mov	r0, #0x40
	bl	SetGpuReg
	cmp	r4, #0
	beq	.L168	@cond_branch
	cmp	r4, #0
	blt	.L168	@cond_branch
	cmp	r4, #0x2
	ble	.L170	@cond_branch
.L168:
	mov	r2, #0x0
	mov	r0, #0x20
	b	.L166
.L180:
	.align	2, 0
.L179:
	.word	0x12de
.L170:
	cmp	r5, #0x1
	beq	.L174	@cond_branch
	cmp	r5, #0x1
	ble	.L173	@cond_branch
	cmp	r5, #0x2
	beq	.L175	@cond_branch
.L173:
	mov	r2, #0x0
	mov	r0, #0x60
	b	.L166
.L174:
	mov	r2, #0xc0
	lsl	r2, r2, #0x7
	mov	r0, #0x80
	b	.L166
.L175:
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	mov	r0, #0xa0
.L166:
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	add	r1, r3, #0
	add	r1, r2, r1
	sub	r0, r0, #0x2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x44
	bl	SetGpuReg
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 MoveWindowByMenuTypeAndCursorPos,.Lfe18-MoveWindowByMenuTypeAndCursorPos
	.align	2, 0
	.type	 HandleMenuInput,function
	.thumb_func
HandleMenuInput:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L190
	ldrh	r1, [r0, #0x2e]
	mov	r5, #0x1
	and	r5, r5, r1
	add	r3, r0, #0
	cmp	r5, #0
	beq	.L182	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	IsWirelessAdapterConnected
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L190+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L190+0x8
	str	r1, [r0]
	b	.L183
.L191:
	.align	2, 0
.L190:
	.word	gMain
	.word	gTasks
	.word	Task_ExecuteMainMenuSelection
.L182:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L184	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0xa0
	bl	SetGpuReg
	ldr	r1, .L192
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L192+0x4
	str	r1, [r0]
	b	.L183
.L193:
	.align	2, 0
.L192:
	.word	gTasks
	.word	Task_ReturnToTileScreen
.L184:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L186	@cond_branch
	ldr	r0, .L194
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xa]
	mov	r5, #0xa
	ldrsh	r0, [r1, r5]
	cmp	r0, #0
	ble	.L186	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	mov	r0, #0x1
	b	.L189
.L195:
	.align	2, 0
.L194:
	.word	gTasks
.L186:
	ldrh	r1, [r3, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
	ldr	r1, .L196
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r0, #0xa
	ldrsh	r2, [r3, r0]
	ldr	r1, .L196+0x4
	mov	r4, #0x8
	ldrsh	r0, [r3, r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L183	@cond_branch
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	mov	r0, #0x1
	b	.L189
.L197:
	.align	2, 0
.L196:
	.word	gTasks
	.word	sMenuCursorYMax
.L183:
	mov	r0, #0x0
.L189:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 HandleMenuInput,.Lfe19-HandleMenuInput
	.align	2, 0
	.type	 PrintMessageOnWindow4,function
	.thumb_func
PrintMessageOnWindow4:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r0, #0x4
	mov	r1, #0xaa
	bl	FillWindowPixelBuffer
	ldr	r0, .L199
	bl	MainMenu_DrawWindow
	ldr	r0, .L199+0x4
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x4
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	AddTextPrinterParameterized3
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x4
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldr	r1, .L199+0x8
	mov	r0, #0x40
	bl	SetGpuReg
	ldr	r1, .L199+0xc
	mov	r0, #0x44
	bl	SetGpuReg
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L200:
	.align	2, 0
.L199:
	.word	sWindowTemplate+0x20
	.word	sTextColor1
	.word	0x13dd
	.word	0x739d
.Lfe20:
	.size	 PrintMessageOnWindow4,.Lfe20-PrintMessageOnWindow4
	.align	2, 0
	.type	 PrintContinueStats,function
	.thumb_func
PrintContinueStats:
	push	{lr}
	bl	PrintPlayerName
	bl	PrintDexCount
	bl	PrintPlayTime
	bl	PrintBadgeCount
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 PrintContinueStats,.Lfe21-PrintContinueStats
	.align	2, 0
	.type	 PrintPlayerName,function
	.thumb_func
PrintPlayerName:
	push	{lr}
	add	sp, sp, #-0x14
	ldr	r0, .L208
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, .L208+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x12
	bl	AddTextPrinterParameterized3
	add	r1, sp, #0xc
	mov	r2, #0x0
	ldr	r0, .L208+0x8
	ldr	r3, [r0]
.L206:
	add	r0, r3, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r1, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x6
	ble	.L206	@cond_branch
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r0, .L208
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x3e
	mov	r3, #0x12
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x14
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	sTextColor2
	.word	gText_Player
	.word	gSaveBlock2Ptr
.Lfe22:
	.size	 PrintPlayerName,.Lfe22-PrintPlayerName
	.align	2, 0
	.type	 PrintPlayTime,function
	.thumb_func
PrintPlayTime:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x2c
	ldr	r6, .L211
	str	r6, [sp]
	mov	r5, #0x1
	neg	r5, r5
	str	r5, [sp, #0x4]
	ldr	r0, .L211+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x22
	bl	AddTextPrinterParameterized3
	ldr	r4, .L211+0x8
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xe]
	add	r0, sp, #0xc
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r1, #0xf0
	strb	r1, [r0]
	add	r0, r0, #0x1
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x10]
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	str	r6, [sp]
	str	r5, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x3e
	mov	r3, #0x22
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x2c
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L212:
	.align	2, 0
.L211:
	.word	sTextColor2
	.word	gText_Time
	.word	gSaveBlock2Ptr
.Lfe23:
	.size	 PrintPlayTime,.Lfe23-PrintPlayTime
	.align	2, 0
	.type	 PrintDexCount,function
	.thumb_func
PrintDexCount:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x2c
	ldr	r0, .L218
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L214	@cond_branch
	bl	IsNationalPokedexEnabled
	cmp	r0, #0
	beq	.L215	@cond_branch
	mov	r0, #0x1
	bl	GetNationalPokedexCount
	b	.L217
.L219:
	.align	2, 0
.L218:
	.word	0x829
.L215:
	mov	r0, #0x1
	bl	GetKantoPokedexCount
.L217:
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r5, .L220
	str	r5, [sp]
	mov	r4, #0x1
	neg	r4, r4
	str	r4, [sp, #0x4]
	ldr	r0, .L220+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x32
	bl	AddTextPrinterParameterized3
	add	r0, sp, #0xc
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L220+0x8
	bl	StringAppend
	str	r5, [sp]
	str	r4, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x3e
	mov	r3, #0x32
	bl	AddTextPrinterParameterized3
.L214:
	add	sp, sp, #0x2c
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	sTextColor2
	.word	gText_Pokedex
	.word	gTextJPDummy_Hiki
.Lfe24:
	.size	 PrintDexCount,.Lfe24-PrintDexCount
	.align	2, 0
	.type	 PrintBadgeCount,function
	.thumb_func
PrintBadgeCount:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x2c
	mov	r6, #0x0
	mov	r4, #0x82
	lsl	r4, r4, #0x4
.L226:
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L225	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L225:
	add	r4, r4, #0x1
	ldr	r0, .L229
	cmp	r4, r0
	bls	.L226	@cond_branch
	ldr	r5, .L229+0x4
	str	r5, [sp]
	mov	r4, #0x1
	neg	r4, r4
	str	r4, [sp, #0x4]
	ldr	r0, .L229+0x8
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x42
	bl	AddTextPrinterParameterized3
	add	r0, sp, #0xc
	add	r1, r6, #0
	mov	r2, #0x2
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L229+0xc
	bl	StringAppend
	str	r5, [sp]
	str	r4, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x3e
	mov	r3, #0x42
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x2c
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L230:
	.align	2, 0
.L229:
	.word	0x827
	.word	sTextColor2
	.word	gText_Badges
	.word	gTextJPDummy_Ko
.Lfe25:
	.size	 PrintBadgeCount,.Lfe25-PrintBadgeCount
	.align	2, 0
	.type	 LoadUserFrameToBg,function
	.thumb_func
LoadUserFrameToBg:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L232
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x14]
	lsr	r0, r0, #0x3
	bl	GetUserWindowGraphics
	ldr	r1, [r0]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	ldr	r3, .L232+0x4
	add	r0, r4, #0
	bl	LoadBgTiles
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x14]
	lsr	r0, r0, #0x3
	bl	GetUserWindowGraphics
	ldr	r0, [r0, #0x4]
	mov	r1, #0x20
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L232+0x8
	bl	MainMenu_EraseWindow
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L233:
	.align	2, 0
.L232:
	.word	gSaveBlock2Ptr
	.word	0x1b1
	.word	sWindowTemplate+0x20
.Lfe26:
	.size	 LoadUserFrameToBg,.Lfe26-LoadUserFrameToBg
	.align	2, 0
	.type	 SetStdFrame0OnBg,function
	.thumb_func
SetStdFrame0OnBg:
	push	{lr}
	ldr	r1, .L235
	mov	r0, #0x0
	mov	r2, #0x20
	bl	LoadStdWindowGfx
	ldr	r0, .L235+0x4
	bl	MainMenu_EraseWindow
	pop	{r0}
	bx	r0
.L236:
	.align	2, 0
.L235:
	.word	0x1b1
	.word	sWindowTemplate+0x20
.Lfe27:
	.size	 SetStdFrame0OnBg,.Lfe27-SetStdFrame0OnBg
	.align	2, 0
	.type	 MainMenu_DrawWindow,function
	.thumb_func
MainMenu_DrawWindow:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	ldrb	r0, [r5]
	ldr	r1, .L238
	ldrb	r2, [r5, #0x1]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r5, #0x2]
	sub	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r6, #0x1
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r4, #0x2
	mov	r8, r4
	str	r4, [sp, #0x8]
	bl	FillBgTilemapBufferRect
	ldrb	r0, [r5]
	mov	r1, #0xd9
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x1]
	ldrb	r3, [r5, #0x2]
	sub	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r4, [r5, #0x3]
	str	r4, [sp]
	ldrb	r4, [r5, #0x4]
	str	r4, [sp, #0x4]
	mov	r4, r8
	str	r4, [sp, #0x8]
	bl	FillBgTilemapBufferRect
	ldrb	r0, [r5]
	ldr	r1, .L238+0x4
	ldrb	r2, [r5, #0x3]
	ldrb	r3, [r5, #0x1]
	add	r2, r2, r3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r5, #0x2]
	sub	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r6, [sp]
	str	r6, [sp, #0x4]
	str	r4, [sp, #0x8]
	bl	FillBgTilemapBufferRect
	ldrb	r0, [r5]
	mov	r1, #0xda
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x1]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r5, #0x2]
	str	r6, [sp]
	ldrb	r4, [r5, #0x4]
	str	r4, [sp, #0x4]
	mov	r4, r8
	str	r4, [sp, #0x8]
	bl	FillBgTilemapBufferRect
	ldrb	r0, [r5]
	mov	r1, #0xdb
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x3]
	ldrb	r3, [r5, #0x1]
	add	r2, r2, r3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r5, #0x2]
	str	r6, [sp]
	ldrb	r4, [r5, #0x4]
	str	r4, [sp, #0x4]
	mov	r4, r8
	str	r4, [sp, #0x8]
	bl	FillBgTilemapBufferRect
	ldrb	r0, [r5]
	ldr	r1, .L238+0x8
	ldrb	r2, [r5, #0x1]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r5, #0x4]
	ldrb	r4, [r5, #0x2]
	add	r3, r3, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r4, r8
	str	r4, [sp, #0x8]
	bl	FillBgTilemapBufferRect
	ldrb	r0, [r5]
	mov	r1, #0xdc
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x1]
	ldrb	r3, [r5, #0x4]
	ldrb	r4, [r5, #0x2]
	add	r3, r3, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r4, [r5, #0x3]
	str	r4, [sp]
	str	r6, [sp, #0x4]
	mov	r4, r8
	str	r4, [sp, #0x8]
	bl	FillBgTilemapBufferRect
	ldrb	r0, [r5]
	ldr	r1, .L238+0xc
	ldrb	r2, [r5, #0x3]
	ldrb	r3, [r5, #0x1]
	add	r2, r2, r3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r5, #0x4]
	ldrb	r4, [r5, #0x2]
	add	r3, r3, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r4, r8
	str	r4, [sp, #0x8]
	bl	FillBgTilemapBufferRect
	ldrb	r0, [r5]
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	0x1b1
	.word	0x1b3
	.word	0x1b7
	.word	0x1b9
.Lfe28:
	.size	 MainMenu_DrawWindow,.Lfe28-MainMenu_DrawWindow
	.align	2, 0
	.type	 MainMenu_EraseWindow,function
	.thumb_func
MainMenu_EraseWindow:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	ldrb	r0, [r6]
	ldrb	r1, [r6, #0x1]
	sub	r2, r1, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r4, [r6, #0x2]
	sub	r3, r4, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r5, [r6, #0x3]
	add	r1, r1, r5
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	ldrb	r1, [r6, #0x4]
	add	r4, r4, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x4]
	mov	r1, #0x2
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	bl	FillBgTilemapBufferRect
	ldrb	r0, [r6]
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 MainMenu_EraseWindow,.Lfe29-MainMenu_EraseWindow
.text
	.align	2, 0 @ Don't pad with nop

