@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sTransitionStructPtr,object
	.size	 sTransitionStructPtr,4
sTransitionStructPtr:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBigPokeballTileset,object
sBigPokeballTileset:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	-0x100000
	.word	0x19fff000
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	-0x10000
	.word	0x19fffff0
	.word	0x11119fff
	.word	0x1111119f
	.word	0x11111111
	.word	0x0
	.word	-0x1000
	.word	-0x60000001
	.word	0x111111ff
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	-0x10
	.word	-0x1
	.word	0x11111119
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	0x0
	.word	-0x10000000
	.word	-0x1000000
	.word	0x1fff0000
	.word	0x119ff000
	.word	0x1111fff0
	.word	0x111119ff
	.word	0x1111119f
	.word	0x1119fff0
	.word	0x111111ff
	.word	0x11111119
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	-0x1000000
	.word	0x1ff00000
	.word	0x11ff0000
	.word	0x1119f000
	.word	0x11119f00
	.word	0x11111ff0
	.word	0x111111ff
	.word	0x1111111f
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x1000000
	.word	0x1ff00000
	.word	0x19f00000
	.word	0x11ff0000
	.word	0x111ff000
	.word	0x1119f000
	.word	0x1111ff00
	.word	0x11111ff0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x1000000
	.word	-0x61000000
	.word	0x1ff00000
	.word	0x111119f0
	.word	0x111111ff
	.word	0x1111111f
	.word	0x1111111f
	.word	0x11111119
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x1ff00000
	.word	0x11ff0000
	.word	0x11ff0000
	.word	0x119f0000
	.word	0x111ff000
	.word	0x111ff000
	.word	0x1119f000
	.word	0x1111ff00
	.word	0x1111ff00
	.word	0x1111ff00
	.word	0x11111f00
	.word	0x11111ff0
	.word	0x11111ff0
	.word	0x11111ff0
	.word	0x111119f0
	.word	0x111119f0
	.word	0x111111f0
	.word	0x111111ff
	.word	0x111111ff
	.word	0x1111119f
	.word	0x1111119f
	.word	0x1111119f
	.word	-0x1
	.word	-0x1000
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	-0x1
	.word	-0x1
	.word	-0x1000
	.word	-0x1
	.word	0x4444448f
	.word	0x4444448f
	.word	0x4444448f
	.word	0x444444ff
	.word	0x444444ff
	.word	0x444444f0
	.word	-0x1
	.word	-0x1
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444af0
	.word	0x44444af0
	.word	0x44444ff0
	.word	0x44444ff0
	.word	0x44444ff0
	.word	0x4444af00
	.word	0x4444ff00
	.word	0x4444ff00
	.word	0x4444ff00
	.word	0x444af000
	.word	0x444ff000
	.word	0x444ff000
	.word	0x44af0000
	.word	0x44ff0000
	.word	0x4aff0000
	.word	0x4ff00000
	.word	0x4ff00000
	.word	-0x51000000
	.word	-0x1000000
	.word	-0x10000000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x4444444a
	.word	0x4444444f
	.word	0x444444af
	.word	0x444444ff
	.word	0x44444af0
	.word	0x44444ff0
	.word	0x4444ff00
	.word	0x444af000
	.word	0x444ff000
	.word	0x44ff0000
	.word	0x4af00000
	.word	0x4ff00000
	.word	-0x1000000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x4444444f
	.word	0x444444ff
	.word	0x44444ff0
	.word	0x4444af00
	.word	0x444af000
	.word	0x44ff0000
	.word	0x4ff00000
	.word	-0x1000000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x4444444f
	.word	0x44444aff
	.word	0x4444fff0
	.word	0x44aff000
	.word	0x4fff0000
	.word	-0x1000000
	.word	-0x10000000
	.word	0x0
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x4444444a
	.word	0x444444ff
	.word	0x444afff0
	.word	0x4afff000
	.word	-0x100000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x44444444
	.word	0x4444444f
	.word	0x4444afff
	.word	0x4afffff0
	.word	-0x10000
	.word	-0x10000000
	.word	0x0
	.word	0x0
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x4444aaff
	.word	-0x1
	.word	-0x1000
	.word	0x0
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444aaa
	.word	-0x1
	.word	-0x10
	.word	0x11111111
	.word	0x11111111
	.word	-0x6eeeeeef
	.word	-0x6eeeeef
	.word	-0x6eeeef
	.word	-0x6eeef
	.word	-0x6eef
	.word	0x4ffff111
	.word	-0x6eeef
	.word	-0x6f
	.word	-0x1
	.word	0x557fffff
	.word	0x44445fff
	.word	0x444444af
	.word	0x44444444
	.word	0x44444444
	.word	0x44ffff11
	.word	0x44afff91
	.word	0x4447fff1
	.word	0x4444fff1
	.word	0x4444fff9
	.word	0x44447fff
	.word	0x4444afff
	.word	0x44445fff
	.word	-0xabbbc
	.word	0x44aff444
	.word	0x4444af44
	.word	0x44444af4
	.word	0x444444f5
	.word	0x444444af
	.word	0x4444444f
	.word	0x4444444f
	.word	0x44444fff
	.word	0x44444fff
	.word	0x4444afff
	.word	0x44447ff7
	.word	0x4444fffa
	.word	0x4447fff4
	.word	0x444fffa4
	.word	0x44ffff44
	.word	0x4444444f
	.word	0x4444444f
	.word	0x444444af
	.word	0x444444f5
	.word	0x44444af4
	.word	0x4444af44
	.word	0x44aff444
	.word	-0xabbbc
	.word	0x4ffffa44
	.word	-0x8bbc
	.word	-0x8bbbc
	.word	-0x8bbbbc
	.word	-0x8bbbbbc
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x44444444
	.word	0x4444444f
	.word	0x444447ff
	.word	0x557fffff
	.word	-0x1
	.word	-0x8c
	.word	-0x85bbc
	.size	 sBigPokeballTileset,1408
	.align	2, 0
	.type	 sSlidingPokeballTilemap,object
sSlidingPokeballTilemap:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.size	 sSlidingPokeballTilemap,64
	.type	 sSpriteImage_SlidingPokeball,object
sSpriteImage_SlidingPokeball:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1f
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x1f
	.byte	0x11
	.byte	0x0
	.byte	0xf0
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x19
	.byte	0x11
	.byte	0xff
	.byte	0x19
	.byte	0x11
	.byte	0x11
	.byte	0x19
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xff
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x91
	.byte	0xff
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x91
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x91
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0xf1
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x1f
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x19
	.byte	0x11
	.byte	0x11
	.byte	0xf0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x90
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x1f
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x1f
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf0
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0xf9
	.byte	0xff
	.byte	0x11
	.byte	0x91
	.byte	0xff
	.byte	0x46
	.byte	0x11
	.byte	0xf1
	.byte	0x6f
	.byte	0xfa
	.byte	0xff
	.byte	0xff
	.byte	0x4f
	.byte	0x4f
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xff
	.byte	0x9f
	.byte	0x11
	.byte	0x11
	.byte	0x64
	.byte	0xff
	.byte	0x19
	.byte	0x11
	.byte	0xaf
	.byte	0xf6
	.byte	0x1f
	.byte	0x11
	.byte	0xf4
	.byte	0xf4
	.byte	0xff
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0xf1
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x91
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x9
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf1
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xf1
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xf
	.byte	0xf0
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x4f
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x4f
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xa0
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf0
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf0
	.byte	0x4a
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x4f
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0xaf
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0x4f
	.byte	0x4f
	.byte	0x44
	.byte	0xf4
	.byte	0x6f
	.byte	0xfa
	.byte	0x44
	.byte	0x64
	.byte	0xff
	.byte	0x46
	.byte	0x44
	.byte	0x44
	.byte	0xf6
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf4
	.byte	0xf4
	.byte	0xff
	.byte	0xff
	.byte	0xaf
	.byte	0xf6
	.byte	0x4f
	.byte	0x44
	.byte	0x64
	.byte	0xff
	.byte	0x46
	.byte	0x44
	.byte	0xff
	.byte	0x6f
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xf
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf4
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf4
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xa
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xf
	.byte	0x44
	.byte	0x44
	.byte	0xa4
	.byte	0xf
	.byte	0x44
	.byte	0x44
	.byte	0xf4
	.byte	0x0
	.byte	0x44
	.byte	0x44
	.byte	0xfa
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x4f
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4f
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x4a
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0x4a
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0xff
	.byte	0x5a
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0xf0
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xa4
	.byte	0x44
	.byte	0x44
	.byte	0xa4
	.byte	0xff
	.byte	0x44
	.byte	0xa5
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x44
	.byte	0xf
	.byte	0x0
	.byte	0x44
	.byte	0xf4
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0xf4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sSpriteImage_SlidingPokeball,512
	.align	2, 0
	.type	 sVsBarTileset,object
sVsBarTileset:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x11111111
	.word	0x22222222
	.word	0x33333333
	.word	0x44444444
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x55555555
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x77777778
	.word	-0x66666667
	.word	-0x66666667
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	-0x1
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x66666666
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	-0x1
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x77777777
	.word	0x0
	.word	0x0
	.word	0x11111111
	.word	0x22222222
	.word	0x33333333
	.word	0x44444444
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x33333334
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x22222223
	.word	-0x11111112
	.word	-0x11111112
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x1
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x55555556
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x1
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.word	-0x44444445
	.size	 sVsBarTileset,480
	.type	 sSpriteImage_UnusedBrendan,object
sSpriteImage_UnusedBrendan:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x99
	.byte	0xcc
	.byte	0x88
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0xcc
	.byte	0xcc
	.byte	0x88
	.byte	0x44
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0xee
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0xee
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x99
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x55
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x88
	.byte	0xdd
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0xdd
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x44
	.byte	0x88
	.byte	0x44
	.byte	0x22
	.byte	0x33
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0xdd
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0xdd
	.byte	0xcc
	.byte	0xcc
	.byte	0xdd
	.byte	0xcc
	.byte	0xcc
	.byte	0xcc
	.byte	0xdd
	.byte	0xcc
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x33
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0x99
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0x99
	.byte	0xdd
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x22
	.byte	0x22
	.byte	0x88
	.byte	0x88
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0xff
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x99
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x99
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x33
	.byte	0xee
	.byte	0xff
	.byte	0x88
	.byte	0x33
	.byte	0xee
	.byte	0xff
	.byte	0x44
	.byte	0x33
	.byte	0xee
	.byte	0x55
	.byte	0x44
	.byte	0x33
	.byte	0xee
	.byte	0x55
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x44
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x44
	.byte	0x33
	.byte	0x11
	.byte	0xee
	.byte	0x55
	.byte	0x11
	.byte	0xff
	.byte	0xee
	.byte	0x55
	.byte	0x11
	.byte	0xff
	.byte	0xee
	.byte	0xff
	.byte	0x11
	.byte	0x33
	.byte	0xee
	.byte	0xff
	.byte	0x11
	.byte	0x33
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x44
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x44
	.byte	0xff
	.byte	0x11
	.byte	0x33
	.byte	0x88
	.byte	0x0
	.byte	0x22
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x44
	.byte	0xdd
	.byte	0x0
	.byte	0xff
	.byte	0x44
	.byte	0xdd
	.byte	0xff
	.byte	0x88
	.byte	0xdd
	.byte	0xdd
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x66
	.byte	0xff
	.byte	0x44
	.byte	0xff
	.byte	0x66
	.byte	0xff
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0xff
	.byte	0xbb
	.byte	0x0
	.byte	0xdd
	.byte	0xaa
	.byte	0xaa
	.byte	0xff
	.byte	0xdd
	.byte	0xaa
	.byte	0xaa
	.byte	0xff
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x44
	.byte	0xcc
	.byte	0xcc
	.byte	0x44
	.byte	0x44
	.byte	0xcc
	.byte	0xcc
	.byte	0x44
	.byte	0xdd
	.byte	0xcc
	.byte	0xdd
	.byte	0x44
	.byte	0x33
	.byte	0x44
	.byte	0xee
	.byte	0x55
	.byte	0x33
	.byte	0x44
	.byte	0xee
	.byte	0x55
	.byte	0x44
	.byte	0x55
	.byte	0x99
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xdd
	.byte	0x0
	.byte	0xff
	.byte	0xdd
	.byte	0x88
	.byte	0x0
	.byte	0xff
	.byte	0xdd
	.byte	0x88
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xdd
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xdd
	.byte	0x88
	.byte	0x55
	.byte	0x88
	.byte	0xdd
	.byte	0x88
	.byte	0x55
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x55
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x55
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x55
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x55
	.byte	0xbb
	.byte	0xcc
	.byte	0xcc
	.byte	0xdd
	.byte	0xaa
	.byte	0xcc
	.byte	0xcc
	.byte	0xdd
	.byte	0xaa
	.byte	0xcc
	.byte	0xdd
	.byte	0xaa
	.byte	0xaa
	.byte	0xcc
	.byte	0xdd
	.byte	0xaa
	.byte	0xaa
	.byte	0x88
	.byte	0xaa
	.byte	0xaa
	.byte	0x88
	.byte	0xaa
	.byte	0xaa
	.byte	0x44
	.byte	0x55
	.byte	0xaa
	.byte	0xaa
	.byte	0x44
	.byte	0x55
	.byte	0xaa
	.byte	0x44
	.byte	0x55
	.byte	0x66
	.byte	0xaa
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xaa
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0x88
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x88
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x55
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0xdd
	.byte	0x66
	.byte	0xff
	.byte	0xff
	.byte	0xdd
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x0
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x88
	.byte	0xff
	.byte	0x22
	.byte	0x44
	.byte	0x88
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0xdd
	.byte	0x44
	.byte	0xff
	.byte	0xff
	.byte	0xdd
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x88
	.byte	0xbb
	.byte	0xbb
	.byte	0xff
	.byte	0x88
	.byte	0xbb
	.byte	0xbb
	.byte	0x0
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0x0
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0x44
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0x44
	.byte	0xbb
	.byte	0xbb
	.byte	0x88
	.byte	0x44
	.byte	0xbb
	.byte	0xbb
	.byte	0x88
	.byte	0x0
	.byte	0xff
	.byte	0x44
	.byte	0xbb
	.byte	0xbb
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xbb
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xdd
	.byte	0x88
	.byte	0x66
	.byte	0xdd
	.byte	0xdd
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xaa
	.byte	0xdd
	.byte	0xdd
	.byte	0xff
	.byte	0x44
	.byte	0xdd
	.byte	0xdd
	.byte	0xff
	.byte	0x44
	.byte	0xdd
	.byte	0x44
	.byte	0x44
	.byte	0xbb
	.byte	0xdd
	.byte	0x44
	.byte	0x44
	.byte	0xbb
	.byte	0xdd
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0xbb
	.byte	0xff
	.byte	0xbb
	.byte	0xbb
	.byte	0xaa
	.byte	0x66
	.byte	0xbb
	.byte	0xbb
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0xdd
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0x66
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0xff
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xcc
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0xcc
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0xcc
	.byte	0x88
	.byte	0x0
	.byte	0x66
	.byte	0xdd
	.byte	0xcc
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0xcc
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0xdd
	.byte	0xcc
	.size	 sSpriteImage_UnusedBrendan,2048
	.type	 sSpriteImage_UnusedLass,object
sSpriteImage_UnusedLass:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x33
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x33
	.byte	0x66
	.byte	0x88
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x88
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x88
	.byte	0x11
	.byte	0x11
	.byte	0x88
	.byte	0x66
	.byte	0x33
	.byte	0x11
	.byte	0x88
	.byte	0x66
	.byte	0x55
	.byte	0xff
	.byte	0x88
	.byte	0x66
	.byte	0x55
	.byte	0xff
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x11
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x88
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x88
	.byte	0x11
	.byte	0x22
	.byte	0x33
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x11
	.byte	0xee
	.byte	0x66
	.byte	0x88
	.byte	0x11
	.byte	0xee
	.byte	0x66
	.byte	0x33
	.byte	0x22
	.byte	0xee
	.byte	0xff
	.byte	0x33
	.byte	0x22
	.byte	0xee
	.byte	0xff
	.byte	0x44
	.byte	0x22
	.byte	0x11
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x44
	.byte	0x44
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0xff
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x66
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x66
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x11
	.byte	0xdd
	.byte	0x33
	.byte	0x22
	.byte	0xee
	.byte	0x22
	.byte	0xff
	.byte	0xff
	.byte	0xee
	.byte	0x22
	.byte	0xff
	.byte	0xff
	.byte	0xee
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0xee
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0xff
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0xff
	.byte	0x33
	.byte	0x44
	.byte	0x88
	.byte	0x88
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0xff
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x33
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x33
	.byte	0x44
	.byte	0xcc
	.byte	0xcc
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x22
	.byte	0x33
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x44
	.byte	0x11
	.byte	0x44
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x0
	.byte	0x22
	.byte	0x11
	.byte	0x22
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x44
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x33
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x99
	.byte	0x99
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x99
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x99
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x55
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x44
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x44
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x55
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x33
	.byte	0x22
	.byte	0x22
	.byte	0x33
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x66
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x66
	.byte	0x99
	.byte	0x88
	.byte	0x44
	.byte	0x44
	.byte	0x55
	.byte	0x33
	.byte	0x33
	.byte	0x55
	.byte	0x55
	.byte	0x33
	.byte	0x33
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x33
	.byte	0x55
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x44
	.byte	0xff
	.byte	0x88
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0x0
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0x88
	.byte	0x66
	.byte	0x66
	.byte	0x88
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x99
	.byte	0x77
	.byte	0x33
	.byte	0x44
	.byte	0x99
	.byte	0x77
	.byte	0x33
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x66
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x66
	.byte	0x0
	.byte	0x66
	.byte	0x66
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x11
	.byte	0x44
	.byte	0x44
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x66
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x66
	.byte	0x99
	.byte	0xee
	.byte	0xee
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0xee
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x66
	.byte	0x55
	.byte	0xee
	.byte	0x66
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0x66
	.byte	0x55
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0xee
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0xee
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x66
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0xff
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0xff
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x66
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x44
	.byte	0x99
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x66
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x44
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x44
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x44
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x66
	.byte	0x0
	.byte	0x0
	.size	 sSpriteImage_UnusedLass,2048
	.align	2, 0
	.type	 sGridSquareTileset,object
sGridSquareTileset:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x1
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	-0x1
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x1
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x10000000
	.word	-0x1
	.word	-0x1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0xffffff1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0xfffff1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xffff01
	.word	-0xffff01
	.word	-0xffff01
	.word	-0xffff01
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xffff01
	.word	-0xffff01
	.word	-0xffff01
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xfff01
	.word	-0xfff01
	.word	-0xfff01
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xfff01
	.word	-0xfff01
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xff001
	.word	-0xff001
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0xff001
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.word	-0x1
	.size	 sGridSquareTileset,480
	.align	2, 0
	.type	 sBT_Phase1Tasks,object
sBT_Phase1Tasks:
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.word	BT_Phase1Task
	.size	 sBT_Phase1Tasks,72
	.align	2, 0
	.type	 sBT_Phase2Tasks,object
sBT_Phase2Tasks:
	.word	BT_Phase2Blur
	.word	BT_Phase2DistortedWave
	.word	BT_Phase2HorizontalCorrugate
	.word	BT_Phase2BigPokeball
	.word	BT_Phase2SlidingPokeballs
	.word	BT_Phase2ClockwiseBlackFade
	.word	BT_Phase2FullScreenWave
	.word	BT_Phase2BlackWaveToRight
	.word	BT_Phase2SlicedScreen
	.word	BT_Phase2WhiteFadeInStripes
	.word	BT_Phase2GridSquares
	.word	BT_Phase2BlackDoodles
	.word	BT_Phase2StartLoreleiMugshot
	.word	BT_Phase2StartBrunoMugshot
	.word	BT_Phase2StartAgathaMugshot
	.word	BT_Phase2StartLanceMugshot
	.word	BT_Phase2StartBlueMugshot
	.word	BT_Phase2AntiClockwiseSpiral
	.size	 sBT_Phase2Tasks,72
	.align	2, 0
	.type	 sBT_MainPhases,object
sBT_MainPhases:
	.word	BT_Phase1Blink
	.word	BT_WaitForPhase1
	.word	BT_Phase2LaunchAnimTask
	.word	BT_WaitForPhase2
	.size	 sBT_MainPhases,16
	.align	2, 0
	.type	 sBT_Phase2BlurFuncs,object
sBT_Phase2BlurFuncs:
	.word	BT_Phase2Blur_InitBgMosaic
	.word	BT_Phase2Blur_Anim
	.word	BT_Phase2Blur_IsDone
	.size	 sBT_Phase2BlurFuncs,12
	.align	2, 0
	.type	 sBT_Phase2DistortedWaveFuncs,object
sBT_Phase2DistortedWaveFuncs:
	.word	BT_Phase2DistortedWave_InitWave
	.word	BT_Phase2DistortedWave_UpdateWave
	.size	 sBT_Phase2DistortedWaveFuncs,8
	.align	2, 0
	.type	 sBT_Phase2HorizontalCorrugateFuncs,object
sBT_Phase2HorizontalCorrugateFuncs:
	.word	BT_Phase2HorizontalCorrugate_Init
	.word	BT_Phase2HorizontalCorrugate_UpdateWave
	.size	 sBT_Phase2HorizontalCorrugateFuncs,8
	.align	2, 0
	.type	 sBT_Phase2BigPokeballFuncs,object
sBT_Phase2BigPokeballFuncs:
	.word	BT_Phase2BigPokeball_Init
	.word	BT_Phase2BigPokeball_LoadTilemapAndWave
	.word	BT_Phase2BigPokeball_UpdateWave1IncEva
	.word	BT_Phase2BigPokeball_UpdateWave2DecEvb
	.word	BT_Phase2BigPokeball_UpdateWave3
	.word	BT_Phase2BigPokeball_CircleEffect
	.size	 sBT_Phase2BigPokeballFuncs,24
	.align	2, 0
	.type	 sBT_Phase2SlidingPokeballsFuncs,object
sBT_Phase2SlidingPokeballsFuncs:
	.word	BT_Phase2SlidingPokeballs_LoadBgGfx
	.word	BT_Phase2SlidingPokeballs_SetupFldeffArgs
	.word	BT_Phase2SlidingPokeballs_IsDone
	.size	 sBT_Phase2SlidingPokeballsFuncs,12
	.align	1, 0
	.type	 gUnknown_83FA400,object
gUnknown_83FA400:
	.short	-0x10
	.short	0x100
	.size	 gUnknown_83FA400,4
	.align	1, 0
	.type	 gUnknown_83FA404,object
gUnknown_83FA404:
	.short	0x0
	.short	0x10
	.short	0x20
	.short	0x8
	.short	0x18
	.size	 gUnknown_83FA404,10
	.align	1, 0
	.type	 gUnknown_83FA40E,object
gUnknown_83FA40E:
	.short	0x8
	.short	-0x8
	.size	 gUnknown_83FA40E,4
	.align	2, 0
	.type	 sBT_Phase2ClockwiseBlackFadeFuncs,object
sBT_Phase2ClockwiseBlackFadeFuncs:
	.word	BT_Phase2ClockwiseBlackFade_Init
	.word	BT_Phase2ClockwiseBlackFade_Step1
	.word	BT_Phase2ClockwiseBlackFade_Step2
	.word	BT_Phase2ClockwiseBlackFade_Step3
	.word	BT_Phase2ClockwiseBlackFade_Step4
	.word	BT_Phase2ClockwiseBlackFade_Step5
	.word	BT_Phase2ClockwiseBlackFade_End
	.size	 sBT_Phase2ClockwiseBlackFadeFuncs,28
	.align	2, 0
	.type	 sBT_Phase2FullScreenWaveFuncs,object
sBT_Phase2FullScreenWaveFuncs:
	.word	BT_Phase2FullScreenWave_Init
	.word	BT_Phase2FullScreenWave_UpdateWave
	.size	 sBT_Phase2FullScreenWaveFuncs,8
	.align	2, 0
	.type	 sBT_Phase2BlackWaveToRightFuncs,object
sBT_Phase2BlackWaveToRightFuncs:
	.word	BT_Phase2BlackWaveToRight_Init
	.word	BT_Phase2BlackWaveToRight_UpdateWave
	.word	BT_Phase2BlackWaveToRight_End
	.size	 sBT_Phase2BlackWaveToRightFuncs,12
	.align	1, 0
	.type	 gUnknown_83FA444,object
gUnknown_83FA444:
	.short	0x0
	.short	0x26e
	.short	0x100
	.short	0x69
	.short	0x0
	.short	-0x69
	.short	-0x100
	.short	-0x266e
	.short	0x0
	.short	0x26e
	.short	0x100
	.short	0x69
	.short	0x0
	.short	-0x69
	.short	-0x100
	.short	-0x266e
	.size	 gUnknown_83FA444,32
	.align	2, 0
	.type	 sBT_Phase2AntiClockwiseSpiralFuncs,object
sBT_Phase2AntiClockwiseSpiralFuncs:
	.word	BT_Phase2AntiClockwiseSpiral_Init
	.word	BT_Phase2AntiClockwiseSpiral_Update
	.size	 sBT_Phase2AntiClockwiseSpiralFuncs,8
	.align	2, 0
	.type	 sBT_Phase2MugshotFuncs,object
sBT_Phase2MugshotFuncs:
	.word	BT_Phase2Mugshot_Init
	.word	BT_Phase2Mugshot_LoadGfx
	.word	BT_Phase2Mugshot_VsBarsSlideIn
	.word	BT_Phase2Mugshot_StartSpriteSlide
	.word	BT_Phase2Mugshot_WaitForOpponentInPlace
	.word	BT_Phase2Mugshot_WaitForPlayerInPlace
	.word	BT_Phase2Mugshot_ExpandWhiteBand
	.word	BT_Phase2Mugshot_StartBlackFade
	.word	BT_Phase2Mugshot_WaitForBlackFade
	.word	BT_Phase2Mugshot_End
	.size	 sBT_Phase2MugshotFuncs,40
	.type	 sMugshotsTrainerPicIDsTable,object
	.size	 sMugshotsTrainerPicIDsTable,5
sMugshotsTrainerPicIDsTable:
	.byte	0x70
	.byte	0x71
	.byte	0x72
	.byte	0x73
	.byte	0x7d
	.align	1, 0
	.type	 sMugshotsOpponentRotationScales,object
	.size	 sMugshotsOpponentRotationScales,20
sMugshotsOpponentRotationScales:
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.short	0x200
	.align	1, 0
	.type	 sMugshotsOpponentCoords,object
	.size	 sMugshotsOpponentCoords,20
sMugshotsOpponentCoords:
	.short	-0x8
	.short	0x0
	.short	-0xa
	.short	0x0
	.short	0x0
	.short	0x0
	.short	-0x20
	.short	0x0
	.short	0x0
	.short	0x0
	.align	2, 0
	.type	 sBT_Phase2MugshotSpriteFuncs,object
sBT_Phase2MugshotSpriteFuncs:
	.word	BT_Phase2MugshotsSpriteFuncs_Wait
	.word	BT_Phase2MugshotsSpriteFuncs_InitParams
	.word	BT_Phase2MugshotsSpriteFuncs_SlideSpriteIn
	.word	BT_Phase2MugshotsSpriteFuncs_DecelerateSprite
	.word	BT_Phase2MugshotsSpriteFuncs_Wait
	.word	BT_Phase2MugshotsSpriteFuncs_DecelerateSprite2
	.word	BT_Phase2MugshotsSpriteFuncs_Wait
	.size	 sBT_Phase2MugshotSpriteFuncs,28
	.align	1, 0
	.type	 sMugShotSlideVelocity,object
sMugShotSlideVelocity:
	.short	0xc
	.short	-0xc
	.size	 sMugShotSlideVelocity,4
	.align	1, 0
	.type	 sMugShotSlideDeceleration,object
sMugShotSlideDeceleration:
	.short	-0x1
	.short	0x1
	.size	 sMugShotSlideDeceleration,4
	.align	2, 0
	.type	 sBT_Phase2SlicedScreenFuncs,object
sBT_Phase2SlicedScreenFuncs:
	.word	BT_Phase2SlicedScreen_Init
	.word	BT_Phase2SlicedScreen_UpdateOffsets
	.word	BT_Phase2SlicedScreen_End
	.size	 sBT_Phase2SlicedScreenFuncs,12
	.align	2, 0
	.type	 sBT_Phase2WhiteFadeInStripesFuncs,object
sBT_Phase2WhiteFadeInStripesFuncs:
	.word	BT_Phase2WhiteFadeInStripes_Init
	.word	BT_Phase2WhiteFadeInStripes_SetupSprites
	.word	BT_Phase2WhiteFadeInStripes_IsWhiteFadeDone
	.word	BT_Phase2WhiteFadeInStripes_Stop
	.word	BT_Phase2WhiteFadeInStripes_IsDone
	.size	 sBT_Phase2WhiteFadeInStripesFuncs,20
	.align	1, 0
	.type	 sWhiteStripeDelay,object
sWhiteStripeDelay:
	.short	0x0
	.short	0x9
	.short	0xf
	.short	0x6
	.short	0xc
	.short	0x3
	.size	 sWhiteStripeDelay,12
	.align	2, 0
	.type	 sBT_Phase2GridSquaresFuncs,object
sBT_Phase2GridSquaresFuncs:
	.word	BT_Phase2GridSquares_LoadGfx
	.word	BT_Phase2GridSquares_UpdateTileset
	.word	BT_Phase2GridSquares_IsDone
	.size	 sBT_Phase2GridSquaresFuncs,12
	.align	2, 0
	.type	 sBT_Phase2BlackDoodlesFuncs,object
sBT_Phase2BlackDoodlesFuncs:
	.word	BT_Phase2BlackDoodles_Init
	.word	BT_Phase2BlackDoodles_InitSingleBrush
	.word	BT_Phase2BlackDoodles_DrawSingleBrush
	.word	BT_Phase2BlackDoodles_IsDone
	.word	BT_Phase2BlackDoodles_NextBrush
	.size	 sBT_Phase2BlackDoodlesFuncs,20
	.align	1, 0
	.type	 sBlackDoodlesSegments,object
sBlackDoodlesSegments:
	.short	0x38
	.short	0x0
	.short	0x0
	.short	0xa0
	.short	0x0
	.short	0x68
	.short	0xa0
	.short	0xf0
	.short	0x58
	.short	0x1
	.short	0xf0
	.short	0x48
	.short	0x38
	.short	0x0
	.short	0x1
	.short	0x0
	.short	0x20
	.short	0x90
	.short	0xa0
	.short	0x0
	.short	0x90
	.short	0xa0
	.short	0xb8
	.short	0x0
	.short	0x1
	.short	0x38
	.short	0x0
	.short	0xa8
	.short	0xa0
	.short	0x0
	.short	0xa8
	.short	0xa0
	.short	0x30
	.short	0x0
	.short	0x1
	.size	 sBlackDoodlesSegments,70
	.align	1, 0
	.type	 sBlackDoodlesDelay,object
sBlackDoodlesDelay:
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x0
	.size	 sBlackDoodlesDelay,14
	.align	2, 0
	.type	 sBT_Phase1FadeFuncs,object
sBT_Phase1FadeFuncs:
	.word	BT_Phase1_FadeOut
	.word	BT_Phase1_FadeIn
	.size	 sBT_Phase1FadeFuncs,8
	.align	2, 0
	.type	 sSpriteImageTable_SlidingPokeball,object
sSpriteImageTable_SlidingPokeball:
	.word	sSpriteImage_SlidingPokeball
	.short	0x200
	.space	2
	.size	 sSpriteImageTable_SlidingPokeball,8
	.align	2, 0
	.type	 sSpriteAnim_SlidingPokeball,object
sSpriteAnim_SlidingPokeball:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_SlidingPokeball,8
	.align	2, 0
	.type	 sSpriteAnimTable_SlidingPokeball,object
sSpriteAnimTable_SlidingPokeball:
	.word	sSpriteAnim_SlidingPokeball
	.size	 sSpriteAnimTable_SlidingPokeball,4
	.align	2, 0
	.type	 sSpriteAffineAnim_SlidingPokeball1,object
sSpriteAffineAnim_SlidingPokeball1:
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSpriteAffineAnim_SlidingPokeball1,16
	.align	2, 0
	.type	 sSpriteAffineAnim_SlidingPokeball2,object
sSpriteAffineAnim_SlidingPokeball2:
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSpriteAffineAnim_SlidingPokeball2,16
	.align	2, 0
	.type	 sSpriteAffineAnimTable_SlidingPokeball,object
sSpriteAffineAnimTable_SlidingPokeball:
	.word	sSpriteAffineAnim_SlidingPokeball1
	.word	sSpriteAffineAnim_SlidingPokeball2
	.size	 sSpriteAffineAnimTable_SlidingPokeball,8
	.align	2, 0
	.type	 sSpriteTemplate_SlidingPokeball,object
	.size	 sSpriteTemplate_SlidingPokeball,24
sSpriteTemplate_SlidingPokeball:
	.short	0xffff
	.short	0x1009
	.word	gObjectEventBaseOam_32x32
	.word	sSpriteAnimTable_SlidingPokeball
	.word	sSpriteImageTable_SlidingPokeball
	.word	sSpriteAffineAnimTable_SlidingPokeball
	.word	SpriteCB_BT_Phase2SlidingPokeballs
	.align	2, 0
	.type	 sOamData_Unused,object
	.size	 sOamData_Unused,8
sOamData_Unused:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteImageTable_UnusedBrendan,object
sSpriteImageTable_UnusedBrendan:
	.word	sSpriteImage_UnusedBrendan
	.short	0x800
	.space	2
	.size	 sSpriteImageTable_UnusedBrendan,8
	.align	2, 0
	.type	 sSpriteImageTable_UnusedLass,object
sSpriteImageTable_UnusedLass:
	.word	sSpriteImage_UnusedLass
	.short	0x800
	.space	2
	.size	 sSpriteImageTable_UnusedLass,8
	.align	2, 0
	.type	 sSpriteAnim_Unused,object
sSpriteAnim_Unused:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_Unused,8
	.align	2, 0
	.type	 sSpriteAnimTable_Unused,object
sSpriteAnimTable_Unused:
	.word	sSpriteAnim_Unused
	.size	 sSpriteAnimTable_Unused,4
	.align	2, 0
	.type	 sSpriteTemplateTable_Unused,object
sSpriteTemplateTable_Unused:
	.short	0xffff
	.short	0x100a
	.word	sOamData_Unused
	.word	sSpriteAnimTable_Unused
	.word	sSpriteImageTable_UnusedBrendan
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_BT_Phase2Mugshots
	.short	0xffff
	.short	0x100a
	.word	sOamData_Unused
	.word	sSpriteAnimTable_Unused
	.word	sSpriteImageTable_UnusedLass
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_BT_Phase2Mugshots
	.size	 sSpriteTemplateTable_Unused,48
	.align	1, 0
	.type	 sSlidingPokeballBigPokeballPalette,object
sSlidingPokeballBigPokeballPalette:
	.short	0x76ac
	.short	0x3e
	.short	0x5b5d
	.short	0x4adb
	.short	0x7fff
	.short	0x779b
	.short	0x7337
	.short	0x6ed3
	.short	0x5a6c
	.short	0x12
	.short	0x6318
	.short	0x539d
	.short	0x433b
	.short	0x36da
	.short	0x2a79
	.short	0x0
	.size	 sSlidingPokeballBigPokeballPalette,32
	.globl	sSpritePalette_SlidingPokeball
	.align	2, 0
	.type	 sSpritePalette_SlidingPokeball,object
	.size	 sSpritePalette_SlidingPokeball,8
sSpritePalette_SlidingPokeball:
	.word	sSlidingPokeballBigPokeballPalette
	.short	0x1009
	.space	2
	.align	1, 0
	.type	 sVsBarLoreleiPalette,object
sVsBarLoreleiPalette:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x5c17
	.short	0x6459
	.short	0x6c9b
	.short	0x74dd
	.short	0x7d1f
	.short	0x6acd
	.short	0x730f
	.short	0x7b51
	.short	0x7f93
	.short	0x7fd5
	.short	0x7fff
	.size	 sVsBarLoreleiPalette,32
	.align	1, 0
	.type	 sVsBarBrunoPalette,object
sVsBarBrunoPalette:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x741
	.short	0x13a4
	.short	0x1bc6
	.short	0x27e9
	.short	0x3fef
	.short	0x45fc
	.short	0x4e3e
	.short	0x567f
	.short	0x5ebf
	.short	0x66ff
	.short	0x45fc
	.size	 sVsBarBrunoPalette,32
	.align	1, 0
	.type	 sVsBarAgathaPalette,object
sVsBarAgathaPalette:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x555f
	.short	0x5d9f
	.short	0x65df
	.short	0x6e1f
	.short	0x765f
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sVsBarAgathaPalette,32
	.align	1, 0
	.type	 sVsBarLancePalette,object
sVsBarLancePalette:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x4000
	.short	0x4842
	.short	0x5084
	.short	0x58c6
	.short	0x6108
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sVsBarLancePalette,32
	.align	1, 0
	.type	 sVsBarBluePalette,object
sVsBarBluePalette:
	.short	0x18d5
	.short	0x39ce
	.short	0x4a52
	.short	0x5ad6
	.short	0x6b5a
	.short	0x2318
	.short	0x2b5a
	.short	0x339c
	.short	0x3bde
	.short	0x43ff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sVsBarBluePalette,32
	.align	1, 0
	.type	 sVsBarMalePlayerPalette,object
sVsBarMalePlayerPalette:
	.short	0x6acd
	.short	0x730f
	.short	0x7b51
	.short	0x7f93
	.short	0x7fd5
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sVsBarMalePlayerPalette,32
	.align	1, 0
	.type	 sVsBarFemalePlayerPalette,object
sVsBarFemalePlayerPalette:
	.short	0x45fc
	.short	0x4e3e
	.short	0x567f
	.short	0x5ebf
	.short	0x66ff
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sVsBarFemalePlayerPalette,32
	.align	2, 0
	.type	 sVsBarOpponentPalettes,object
	.size	 sVsBarOpponentPalettes,20
sVsBarOpponentPalettes:
	.word	sVsBarLoreleiPalette
	.word	sVsBarBrunoPalette
	.word	sVsBarAgathaPalette
	.word	sVsBarLancePalette
	.word	sVsBarBluePalette
	.align	2, 0
	.type	 sVsBarPlayerPalettes,object
sVsBarPlayerPalettes:
	.word	sVsBarMalePlayerPalette
	.word	sVsBarFemalePlayerPalette
	.size	 sVsBarPlayerPalettes,8
	.align	1, 0
	.type	 sUnusedTrainerPalette,object
sUnusedTrainerPalette:
	.short	0x530e
	.short	0x677f
	.short	0x4a9b
	.short	0x3a19
	.short	0x296f
	.short	0x3d27
	.short	0x30e5
	.short	0x28a3
	.short	0x1c82
	.short	0x779b
	.short	0x2f1f
	.short	0x2e77
	.short	0x2d9f
	.short	0x2118
	.short	0x7fff
	.short	0x0
	.size	 sUnusedTrainerPalette,32
	.align	2, 0
	.type	 sSpritePalette_UnusedTrainer,object
	.size	 sSpritePalette_UnusedTrainer,8
sSpritePalette_UnusedTrainer:
	.word	sUnusedTrainerPalette
	.short	0x100a
	.space	2
	.align	1, 0
	.type	 sBigPokeballTilemap,object
sBigPokeballTilemap:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x3
	.short	0x4
	.short	0x5
	.short	0x6
	.short	0x406
	.short	0x405
	.short	0x404
	.short	0x403
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x7
	.short	0x8
	.short	0x9
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x409
	.short	0x408
	.short	0x407
	.short	0x400
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xa
	.short	0xb
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x40b
	.short	0x40a
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xd
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x40d
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xe
	.short	0xf
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x40f
	.short	0x40e
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x10
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x410
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x11
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x24
	.short	0x25
	.short	0x425
	.short	0x424
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x401
	.short	0x411
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x12
	.short	0x13
	.short	0x13
	.short	0x13
	.short	0x13
	.short	0x13
	.short	0x26
	.short	0x27
	.short	0x427
	.short	0x426
	.short	0x413
	.short	0x413
	.short	0x413
	.short	0x413
	.short	0x413
	.short	0x412
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x14
	.short	0x15
	.short	0x15
	.short	0x15
	.short	0x15
	.short	0x15
	.short	0x28
	.short	0x29
	.short	0x429
	.short	0x428
	.short	0x415
	.short	0x415
	.short	0x415
	.short	0x415
	.short	0x415
	.short	0x414
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x16
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2a
	.short	0x2b
	.short	0x42b
	.short	0x42a
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x416
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x17
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x417
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x18
	.short	0x19
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x419
	.short	0x418
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1a
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x41a
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1b
	.short	0x1c
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x41c
	.short	0x41b
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1d
	.short	0x1e
	.short	0x1f
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x402
	.short	0x402
	.short	0x402
	.short	0x41f
	.short	0x41e
	.short	0x41d
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x20
	.short	0x21
	.short	0x22
	.short	0x23
	.short	0x423
	.short	0x422
	.short	0x421
	.short	0x420
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x400
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sBigPokeballTilemap,1200
	.align	1, 0
	.type	 sVsBarTilemap,object
sVsBarTilemap:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x1
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x6
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x3
	.short	0x6
	.short	0x3
	.short	0x3
	.short	0x4
	.short	0x4
	.short	0x7
	.short	0x4
	.short	0x7
	.short	0x7
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x7
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x7
	.short	0x7
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x7
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x4
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x5
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x805
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x7
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x7
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x7
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x804
	.short	0x7
	.short	0x7
	.short	0x804
	.short	0x804
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x6
	.short	0x6
	.short	0x6
	.short	0x803
	.short	0x803
	.short	0x803
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x801
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x8
	.short	0x9
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0xd
	.short	0xd
	.short	0x9
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0xd
	.short	0xd
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0x9
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xe
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xe
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xe
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xa
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0xa
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0xc
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0x80c
	.short	0xe
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0xe
	.short	0xe
	.short	0xe
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0xe
	.short	0xe
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0xe
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0x80a
	.short	0xe
	.short	0xe
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0xd
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0x809
	.short	0xd
	.short	0xd
	.short	0x809
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x808
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x800
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sVsBarTilemap,1280
.text
	.align	2, 0
	.globl	BT_StartOnField
	.type	 BT_StartOnField,function
	.thumb_func
BT_StartOnField:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L3
	mov	r0, #0x3c
	bl	AllocZeroed
	str	r0, [r5]
	ldr	r1, .L3+0x4
	ldr	r0, .L3+0x8
	str	r0, [r1, #0x4]
	add	r0, r4, #0
	bl	BT_LaunchTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sTransitionStructPtr
	.word	gMain
	.word	CB2_OverworldBasic
.Lfe1:
	.size	 BT_StartOnField,.Lfe1-BT_StartOnField
	.align	2, 0
	.type	 BT_StartWithoutAlloc,function
	.thumb_func
BT_StartWithoutAlloc:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	BT_LaunchTask
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 BT_StartWithoutAlloc,.Lfe2-BT_StartWithoutAlloc
	.align	2, 0
	.globl	BT_IsDone
	.type	 BT_IsDone,function
	.thumb_func
BT_IsDone:
	push	{r4, r5, lr}
	ldr	r0, .L10
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L10+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x26
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L7	@cond_branch
	mov	r0, #0x0
	b	.L9
.L11:
	.align	2, 0
.L10:
	.word	BT_TaskMain
	.word	gTasks
.L7:
	bl	BT_InitCtrlBlk
	ldr	r4, .L12
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	add	r0, r5, #0
	bl	DestroyTask
	mov	r0, #0x1
.L9:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L13:
	.align	2, 0
.L12:
	.word	sTransitionStructPtr
.Lfe3:
	.size	 BT_IsDone,.Lfe3-BT_IsDone
	.align	2, 0
	.type	 BT_LaunchTask,function
	.thumb_func
BT_LaunchTask:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L15
	mov	r1, #0x2
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L15+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0xa]
	pop	{r4}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	BT_TaskMain
	.word	gTasks
.Lfe4:
	.size	 BT_LaunchTask,.Lfe4-BT_LaunchTask
	.align	2, 0
	.type	 BT_TaskMain,function
	.thumb_func
BT_TaskMain:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L22
	ldr	r2, .L22+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L18:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L18	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	sBT_MainPhases
	.word	gTasks
.Lfe5:
	.size	 BT_TaskMain,.Lfe5-BT_TaskMain
	.align	2, 0
	.type	 BT_Phase1Blink,function
	.thumb_func
BT_Phase1Blink:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetWeatherScreenFadeOut
	ldr	r0, .L28
	ldr	r1, .L28+0x4
	ldr	r2, .L28+0x8
	bl	CpuSet
	ldr	r1, .L28+0xc
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L25	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	b	.L27
.L29:
	.align	2, 0
.L28:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000100
	.word	sBT_Phase1Tasks
.L25:
	mov	r1, #0x4
	bl	CreateTask
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
.L27:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 BT_Phase1Blink,.Lfe6-BT_Phase1Blink
	.align	2, 0
	.type	 BT_WaitForPhase1,function
	.thumb_func
BT_WaitForPhase1:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L34
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L31	@cond_branch
	mov	r0, #0x0
	b	.L33
.L35:
	.align	2, 0
.L34:
	.word	sBT_Phase1Tasks
.L31:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
.L33:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 BT_WaitForPhase1,.Lfe7-BT_WaitForPhase1
	.align	2, 0
	.type	 BT_Phase2LaunchAnimTask,function
	.thumb_func
BT_Phase2LaunchAnimTask:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L37
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	CreateTask
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L38:
	.align	2, 0
.L37:
	.word	sBT_Phase2Tasks
.Lfe8:
	.size	 BT_Phase2LaunchAnimTask,.Lfe8-BT_Phase2LaunchAnimTask
	.align	2, 0
	.type	 BT_WaitForPhase2,function
	.thumb_func
BT_WaitForPhase2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	ldr	r1, .L41
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L40	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x26]
.L40:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L42:
	.align	2, 0
.L41:
	.word	sBT_Phase2Tasks
.Lfe9:
	.size	 BT_WaitForPhase2,.Lfe9-BT_WaitForPhase2
	.align	2, 0
	.type	 BT_Phase1Task,function
	.thumb_func
BT_Phase1Task:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r1, .L47
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0x8]
	mov	r3, #0x8
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L44	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	BT_CreatePhase1SubTask
	b	.L45
.L48:
	.align	2, 0
.L47:
	.word	gTasks
.L44:
	bl	BT_IsPhase1Done
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L45	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
.L45:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 BT_Phase1Task,.Lfe10-BT_Phase1Task
	.align	2, 0
	.type	 BT_Phase2Blur,function
	.thumb_func
BT_Phase2Blur:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L54
	ldr	r2, .L54+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L50:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L50	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L55:
	.align	2, 0
.L54:
	.word	sBT_Phase2BlurFuncs
	.word	gTasks
.Lfe11:
	.size	 BT_Phase2Blur,.Lfe11-BT_Phase2Blur
	.align	2, 0
	.type	 BT_Phase2Blur_InitBgMosaic,function
	.thumb_func
BT_Phase2Blur_InitBgMosaic:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x40
	bl	SetGpuRegBits
	mov	r0, #0xc
	mov	r1, #0x40
	bl	SetGpuRegBits
	mov	r0, #0xe
	mov	r1, #0x40
	bl	SetGpuRegBits
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 BT_Phase2Blur_InitBgMosaic,.Lfe12-BT_Phase2Blur_InitBgMosaic
	.align	2, 0
	.type	 BT_Phase2Blur_Anim,function
	.thumb_func
BT_Phase2Blur_Anim:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldrh	r0, [r4, #0xa]
	mov	r1, #0xa
	ldrsh	r2, [r4, r1]
	cmp	r2, #0
	beq	.L58	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L59
.L58:
	mov	r0, #0x2
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L60	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	str	r2, [sp]
	add	r0, r1, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L60:
	ldrh	r1, [r4, #0xc]
	mov	r0, #0xf
	and	r0, r0, r1
	lsl	r1, r0, #0x4
	orr	r1, r1, r0
	mov	r0, #0x4c
	bl	SetGpuReg
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xe
	ble	.L59	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L59:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 BT_Phase2Blur_Anim,.Lfe13-BT_Phase2Blur_Anim
	.align	2, 0
	.type	 BT_Phase2Blur_IsDone,function
	.thumb_func
BT_Phase2Blur_IsDone:
	push	{lr}
	ldr	r0, .L64
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L63	@cond_branch
	ldr	r0, .L64+0x4
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L63:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L65:
	.align	2, 0
.L64:
	.word	gPaletteFade
	.word	BT_Phase2Blur
.Lfe14:
	.size	 BT_Phase2Blur_IsDone,.Lfe14-BT_Phase2Blur_IsDone
	.align	2, 0
	.type	 BT_Phase2DistortedWave,function
	.thumb_func
BT_Phase2DistortedWave:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L71
	ldr	r2, .L71+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L67:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L67	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L72:
	.align	2, 0
.L71:
	.word	sBT_Phase2DistortedWaveFuncs
	.word	gTasks
.Lfe15:
	.size	 BT_Phase2DistortedWave,.Lfe15-BT_Phase2DistortedWave
	.align	2, 0
	.type	 BT_Phase2DistortedWave_InitWave,function
	.thumb_func
BT_Phase2DistortedWave_InitWave:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	mov	r0, #0x1
	neg	r0, r0
	mov	r4, #0x0
	str	r4, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L74
	ldr	r1, .L74+0x4
	ldr	r1, [r1]
	mov	r2, #0x14
	ldrsh	r1, [r1, r2]
	str	r4, [sp]
	mov	r2, #0xa0
	str	r2, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BT_LoadWaveIntoBuffer
	ldr	r0, .L74+0x8
	bl	SetVBlankCallback
	ldr	r0, .L74+0xc
	bl	SetHBlankCallback
	mov	r0, #0x3
	bl	EnableInterrupts
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L75:
	.align	2, 0
.L74:
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionStructPtr
	.word	VBCB_BT_Phase2DistortedWave
	.word	HBCB_BT_Phase2DistortedWave
.Lfe16:
	.size	 BT_Phase2DistortedWave_InitWave,.Lfe16-BT_Phase2DistortedWave_InitWave
	.align	2, 0
	.type	 BT_Phase2DistortedWave_UpdateWave,function
	.thumb_func
BT_Phase2DistortedWave_UpdateWave:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	ldr	r4, .L78
	ldr	r2, [r4]
	ldrb	r1, [r2]
	mov	r1, #0x0
	strb	r1, [r2]
	ldrh	r1, [r0, #0xa]
	add	r1, r1, #0x4
	strh	r1, [r0, #0xa]
	ldrh	r1, [r0, #0xc]
	add	r1, r1, #0x8
	strh	r1, [r0, #0xc]
	ldr	r3, .L78+0x4
	ldr	r1, [r4]
	mov	r2, #0x14
	ldrsh	r1, [r1, r2]
	mov	r5, #0xa
	ldrsh	r2, [r0, r5]
	mov	r5, #0xc
	ldrsh	r0, [r0, r5]
	str	r0, [sp]
	mov	r0, #0xa0
	str	r0, [sp, #0x4]
	add	r0, r3, #0
	mov	r3, #0x2
	bl	BT_LoadWaveIntoBuffer
	ldr	r0, .L78+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L77	@cond_branch
	ldr	r0, .L78+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L77:
	ldr	r0, [r4]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L79:
	.align	2, 0
.L78:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
	.word	gPaletteFade
	.word	BT_Phase2DistortedWave
.Lfe17:
	.size	 BT_Phase2DistortedWave_UpdateWave,.Lfe17-BT_Phase2DistortedWave_UpdateWave
	.align	2, 0
	.type	 VBCB_BT_Phase2DistortedWave,function
	.thumb_func
VBCB_BT_Phase2DistortedWave:
	push	{lr}
	bl	BT_VBSyncOamAndPltt
	ldr	r0, .L82
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L81	@cond_branch
	ldr	r1, .L82+0x4
	ldr	r0, .L82+0x8
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L82+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L81:
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
.Lfe18:
	.size	 VBCB_BT_Phase2DistortedWave,.Lfe18-VBCB_BT_Phase2DistortedWave
	.align	2, 0
	.type	 HBCB_BT_Phase2DistortedWave,function
	.thumb_func
HBCB_BT_Phase2DistortedWave:
	ldr	r1, .L85
	ldr	r0, .L85+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L85+0x8
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	bx	lr
.L86:
	.align	2, 0
.L85:
	.word	gScanlineEffectRegBuffers
	.word	0x4000006
	.word	0x4000014
.Lfe19:
	.size	 HBCB_BT_Phase2DistortedWave,.Lfe19-HBCB_BT_Phase2DistortedWave
	.align	2, 0
	.type	 BT_Phase2HorizontalCorrugate,function
	.thumb_func
BT_Phase2HorizontalCorrugate:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L92
	ldr	r2, .L92+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L88:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L88	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	sBT_Phase2HorizontalCorrugateFuncs
	.word	gTasks
.Lfe20:
	.size	 BT_Phase2HorizontalCorrugate,.Lfe20-BT_Phase2HorizontalCorrugate
	.align	2, 0
	.type	 BT_Phase2HorizontalCorrugate_Init,function
	.thumb_func
BT_Phase2HorizontalCorrugate_Init:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L95
	ldr	r1, [r0]
	ldr	r0, .L95+0x4
	mov	r2, #0x16
	ldrsh	r1, [r1, r2]
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	bl	memset
	ldr	r0, .L95+0x8
	bl	SetVBlankCallback
	ldr	r0, .L95+0xc
	bl	SetHBlankCallback
	mov	r0, #0x3
	bl	EnableInterrupts
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.L96:
	.align	2, 0
.L95:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers+0x780
	.word	VBCB_BT_Phase2HorizontalCorrugate
	.word	HBCB_BT_Phase2HorizontalCorrugate
.Lfe21:
	.size	 BT_Phase2HorizontalCorrugate_Init,.Lfe21-BT_Phase2HorizontalCorrugate_Init
	.align	2, 0
	.type	 BT_Phase2HorizontalCorrugate_UpdateWave,function
	.thumb_func
BT_Phase2HorizontalCorrugate_UpdateWave:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L104
	ldr	r2, [r1]
	ldrb	r1, [r2]
	mov	r1, #0x0
	strb	r1, [r2]
	ldrh	r4, [r0, #0xa]
	ldrh	r2, [r0, #0xc]
	lsl	r3, r2, #0x10
	asr	r3, r3, #0x18
	mov	r5, #0x84
	lsl	r5, r5, #0x5
	add	r1, r4, r5
	strh	r1, [r0, #0xa]
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	add	r2, r2, r1
	strh	r2, [r0, #0xc]
	mov	r5, #0x0
	lsl	r7, r3, #0x10
.L101:
	lsr	r0, r4, #0x8
	asr	r1, r7, #0x10
	bl	Sin
	ldr	r1, .L104+0x4
	lsl	r2, r5, #0x1
	add	r2, r2, r1
	ldr	r6, .L104
	ldr	r1, [r6]
	ldrh	r1, [r1, #0x16]
	add	r0, r0, r1
	strh	r0, [r2]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x84
	lsl	r1, r1, #0x5
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r5, #0x9f
	bls	.L101	@cond_branch
	ldr	r0, .L104+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L103	@cond_branch
	ldr	r0, .L104+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L103:
	ldr	r0, [r6]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L105:
	.align	2, 0
.L104:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
	.word	gPaletteFade
	.word	BT_Phase2HorizontalCorrugate
.Lfe22:
	.size	 BT_Phase2HorizontalCorrugate_UpdateWave,.Lfe22-BT_Phase2HorizontalCorrugate_UpdateWave
	.align	2, 0
	.type	 VBCB_BT_Phase2HorizontalCorrugate,function
	.thumb_func
VBCB_BT_Phase2HorizontalCorrugate:
	push	{lr}
	bl	BT_VBSyncOamAndPltt
	ldr	r0, .L108
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L107	@cond_branch
	ldr	r1, .L108+0x4
	ldr	r0, .L108+0x8
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L108+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L107:
	pop	{r0}
	bx	r0
.L109:
	.align	2, 0
.L108:
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
.Lfe23:
	.size	 VBCB_BT_Phase2HorizontalCorrugate,.Lfe23-VBCB_BT_Phase2HorizontalCorrugate
	.align	2, 0
	.type	 HBCB_BT_Phase2HorizontalCorrugate,function
	.thumb_func
HBCB_BT_Phase2HorizontalCorrugate:
	ldr	r1, .L111
	ldr	r0, .L111+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L111+0x8
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	bx	lr
.L112:
	.align	2, 0
.L111:
	.word	gScanlineEffectRegBuffers
	.word	0x4000006
	.word	0x4000016
.Lfe24:
	.size	 HBCB_BT_Phase2HorizontalCorrugate,.Lfe24-HBCB_BT_Phase2HorizontalCorrugate
	.align	2, 0
	.type	 BT_Phase2BigPokeball,function
	.thumb_func
BT_Phase2BigPokeball:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L118
	ldr	r2, .L118+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L114:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L114	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	sBT_Phase2BigPokeballFuncs
	.word	gTasks
.Lfe25:
	.size	 BT_Phase2BigPokeball,.Lfe25-BT_Phase2BigPokeball
	.align	2, 0
	.type	 BT_Phase2BigPokeball_Init,function
	.thumb_func
BT_Phase2BigPokeball_Init:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	mov	r1, #0x0
	mov	r0, #0x10
	strh	r0, [r4, #0xa]
	strh	r1, [r4, #0xc]
	strh	r1, [r4, #0x10]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	strh	r0, [r4, #0x12]
	ldr	r0, .L126
	ldr	r2, [r0]
	mov	r0, #0x3f
	strh	r0, [r2, #0x2]
	strh	r1, [r2, #0x4]
	mov	r0, #0xf0
	strh	r0, [r2, #0x6]
	mov	r0, #0xa0
	strh	r0, [r2, #0x8]
	ldr	r0, .L126+0x4
	strh	r0, [r2, #0xe]
	ldrh	r0, [r4, #0xa]
	lsl	r0, r0, #0x8
	ldrh	r1, [r4, #0xc]
	orr	r0, r0, r1
	strh	r0, [r2, #0x10]
	mov	r1, #0x0
	add	r5, sp, #0x4
	add	r6, sp, #0x8
	ldr	r3, .L126+0x8
	mov	r2, #0xf0
.L124:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x9f
	bls	.L124	@cond_branch
	ldr	r0, .L126+0xc
	bl	SetVBlankCallback
	add	r0, r5, #0
	add	r1, r6, #0
	bl	BT_GetBg0TilemapAndTilesetBase
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, [sp, #0x4]
	ldr	r2, .L126+0x10
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L126+0x14
	ldr	r1, [sp, #0x8]
	mov	r2, #0xb0
	lsl	r2, r2, #0x2
	bl	CpuSet
	ldr	r0, .L126+0x18
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L127:
	.align	2, 0
.L126:
	.word	sTransitionStructPtr
	.word	0x3f41
	.word	gScanlineEffectRegBuffers+0x780
	.word	VBCB_BT_Phase2BigPokeball1
	.word	0x1000400
	.word	sBigPokeballTileset
	.word	sSlidingPokeballBigPokeballPalette
.Lfe26:
	.size	 BT_Phase2BigPokeball_Init,.Lfe26-BT_Phase2BigPokeball_Init
	.align	2, 0
	.type	 BT_Phase2BigPokeball_LoadTilemapAndWave,function
	.thumb_func
BT_Phase2BigPokeball_LoadTilemapAndWave:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	ldr	r5, .L139
	add	r1, sp, #0xc
	add	r0, sp, #0x8
	bl	BT_GetBg0TilemapAndTilesetBase
	mov	r1, #0x0
	ldr	r0, [sp, #0x8]
	mov	r9, r0
	ldr	r6, .L139+0x4
	mov	r8, r6
	mov	r0, #0xf0
	lsl	r0, r0, #0x8
	mov	ip, r0
.L132:
	mov	r0, #0x0
	lsl	r3, r1, #0x10
	asr	r4, r3, #0xb
.L136:
	lsl	r2, r0, #0x10
	asr	r2, r2, #0x10
	add	r1, r4, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r9
	ldrh	r0, [r5]
	mov	r6, ip
	orr	r0, r0, r6
	strh	r0, [r1]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	add	r5, r5, #0x2
	lsr	r0, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0x1d
	ble	.L136	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r3, r1
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L132	@cond_branch
	mov	r6, #0x10
	ldrsh	r2, [r7, r6]
	mov	r1, #0x12
	ldrsh	r0, [r7, r1]
	str	r0, [sp]
	mov	r0, #0xa0
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r1, #0x0
	mov	r3, #0x84
	bl	BT_LoadWaveIntoBuffer
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x8]
	mov	r0, #0x1
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L140:
	.align	2, 0
.L139:
	.word	sBigPokeballTilemap
	.word	gScanlineEffectRegBuffers
.Lfe27:
	.size	 BT_Phase2BigPokeball_LoadTilemapAndWave,.Lfe27-BT_Phase2BigPokeball_LoadTilemapAndWave
	.align	2, 0
	.type	 BT_Phase2BigPokeball_UpdateWave1IncEva,function
	.thumb_func
BT_Phase2BigPokeball_UpdateWave1IncEva:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	ldr	r2, .L145
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r1, [r3, #0xe]
	mov	r4, #0xe
	ldrsh	r0, [r3, r4]
	add	r4, r2, #0
	cmp	r0, #0
	beq	.L143	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L142	@cond_branch
.L143:
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
.L142:
	ldr	r2, [r4]
	ldrh	r0, [r3, #0xa]
	lsl	r0, r0, #0x8
	ldrh	r1, [r3, #0xc]
	orr	r0, r0, r1
	strh	r0, [r2, #0x10]
	mov	r5, #0xc
	ldrsh	r0, [r3, r5]
	cmp	r0, #0xf
	ble	.L144	@cond_branch
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
.L144:
	ldrh	r0, [r3, #0x10]
	add	r0, r0, #0xc
	strh	r0, [r3, #0x10]
	ldr	r0, .L145+0x4
	add	r1, r0, #0
	ldrh	r5, [r3, #0x12]
	add	r1, r1, r5
	strh	r1, [r3, #0x12]
	ldr	r0, .L145+0x8
	mov	r5, #0x10
	ldrsh	r2, [r3, r5]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, #0xa0
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r3, #0x84
	bl	BT_LoadWaveIntoBuffer
	ldr	r1, [r4]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L146:
	.align	2, 0
.L145:
	.word	sTransitionStructPtr
	.word	-0x180
	.word	gScanlineEffectRegBuffers
.Lfe28:
	.size	 BT_Phase2BigPokeball_UpdateWave1IncEva,.Lfe28-BT_Phase2BigPokeball_UpdateWave1IncEva
	.align	2, 0
	.type	 BT_Phase2BigPokeball_UpdateWave2DecEvb,function
	.thumb_func
BT_Phase2BigPokeball_UpdateWave2DecEvb:
	push	{r4, lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	ldr	r2, .L154
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r1, [r3, #0xe]
	mov	r4, #0xe
	ldrsh	r0, [r3, r4]
	cmp	r0, #0
	beq	.L149	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L148	@cond_branch
.L149:
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	mov	r0, #0x2
	strh	r0, [r3, #0xe]
.L148:
	ldr	r2, [r2]
	ldrh	r0, [r3, #0xa]
	lsl	r0, r0, #0x8
	ldrh	r1, [r3, #0xc]
	orr	r0, r0, r1
	strh	r0, [r2, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L150	@cond_branch
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
.L150:
	ldrh	r1, [r3, #0x12]
	mov	r2, #0x12
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L151	@cond_branch
	ldrh	r0, [r3, #0x10]
	add	r0, r0, #0xc
	strh	r0, [r3, #0x10]
	ldr	r4, .L154+0x4
	add	r0, r1, r4
	b	.L153
.L155:
	.align	2, 0
.L154:
	.word	sTransitionStructPtr
	.word	-0x180
.L151:
	mov	r0, #0x0
.L153:
	strh	r0, [r3, #0x12]
	ldr	r0, .L156
	mov	r1, #0x10
	ldrsh	r2, [r3, r1]
	ldrh	r1, [r3, #0x12]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, #0xa0
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r3, #0x84
	bl	BT_LoadWaveIntoBuffer
	ldr	r0, .L156+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r1}
	bx	r1
.L157:
	.align	2, 0
.L156:
	.word	gScanlineEffectRegBuffers
	.word	sTransitionStructPtr
.Lfe29:
	.size	 BT_Phase2BigPokeball_UpdateWave2DecEvb,.Lfe29-BT_Phase2BigPokeball_UpdateWave2DecEvb
	.align	2, 0
	.type	 BT_Phase2BigPokeball_UpdateWave3,function
	.thumb_func
BT_Phase2BigPokeball_UpdateWave3:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldr	r0, .L162
	ldr	r0, [r0]
	ldrb	r1, [r0]
	mov	r2, #0x0
	strb	r2, [r0]
	ldrh	r1, [r4, #0x12]
	mov	r3, #0x12
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	ble	.L159	@cond_branch
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0xc
	strh	r0, [r4, #0x10]
	ldr	r2, .L162+0x4
	add	r0, r1, r2
	strh	r0, [r4, #0x12]
	b	.L160
.L163:
	.align	2, 0
.L162:
	.word	sTransitionStructPtr
	.word	-0x180
.L159:
	strh	r2, [r4, #0x12]
.L160:
	ldr	r0, .L164
	mov	r3, #0x10
	ldrsh	r2, [r4, r3]
	ldrh	r1, [r4, #0x12]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	str	r1, [sp]
	mov	r5, #0xa0
	str	r5, [sp, #0x4]
	mov	r1, #0x0
	mov	r3, #0x84
	bl	BT_LoadWaveIntoBuffer
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bgt	.L161	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x8]
	strh	r5, [r4, #0xa]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	strh	r1, [r4, #0xe]
.L161:
	ldr	r0, .L164+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L165:
	.align	2, 0
.L164:
	.word	gScanlineEffectRegBuffers
	.word	sTransitionStructPtr
.Lfe30:
	.size	 BT_Phase2BigPokeball_UpdateWave3,.Lfe30-BT_Phase2BigPokeball_UpdateWave3
	.align	2, 0
	.type	 BT_Phase2BigPokeball_CircleEffect,function
	.thumb_func
BT_Phase2BigPokeball_CircleEffect:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L172
	ldr	r0, [r0]
	ldrb	r1, [r0]
	mov	r3, #0x0
	strb	r3, [r0]
	ldrh	r2, [r4, #0xc]
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	ldr	r0, .L172+0x4
	cmp	r1, r0
	bgt	.L167	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r2, r1
	strh	r0, [r4, #0xc]
.L167:
	ldrh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L168	@cond_branch
	ldrh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	sub	r0, r1, r0
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L168	@cond_branch
	strh	r3, [r4, #0xa]
.L168:
	ldr	r0, .L172+0x8
	mov	r1, #0xa
	ldrsh	r3, [r4, r1]
	mov	r1, #0x78
	mov	r2, #0x50
	bl	BT_GenerateCircle
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L170	@cond_branch
	ldr	r1, .L172+0xc
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L172+0x10
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L172+0x14
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	BT_BlendPalettesToBlack
	ldr	r0, .L172+0x18
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L170:
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L171	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	ldr	r0, .L172+0x1c
	bl	SetVBlankCallback
.L171:
	ldr	r0, .L172
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L173:
	.align	2, 0
.L172:
	.word	sTransitionStructPtr
	.word	0x7ff
	.word	gScanlineEffectRegBuffers
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	BT_Phase2BigPokeball
	.word	VBCB_BT_Phase2BigPokeball2
.Lfe31:
	.size	 BT_Phase2BigPokeball_CircleEffect,.Lfe31-BT_Phase2BigPokeball_CircleEffect
	.align	2, 0
	.type	 BT_VBStopDma0SyncSrcBufferSetLcdRegs,function
	.thumb_func
BT_VBStopDma0SyncSrcBufferSetLcdRegs:
	push	{r4, lr}
	ldr	r1, .L176
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L176+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L176+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	BT_VBSyncOamAndPltt
	ldr	r4, .L176+0xc
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L175	@cond_branch
	ldr	r1, .L176+0x10
	ldr	r0, .L176+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L176+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L175:
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x10]
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
.Lfe32:
	.size	 BT_VBStopDma0SyncSrcBufferSetLcdRegs,.Lfe32-BT_VBStopDma0SyncSrcBufferSetLcdRegs
	.align	2, 0
	.type	 VBCB_BT_Phase2BigPokeball1,function
	.thumb_func
VBCB_BT_Phase2BigPokeball1:
	push	{lr}
	bl	BT_VBStopDma0SyncSrcBufferSetLcdRegs
	ldr	r1, .L179
	ldr	r0, .L179+0x4
	str	r0, [r1]
	ldr	r0, .L179+0x8
	str	r0, [r1, #0x4]
	ldr	r0, .L179+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L180:
	.align	2, 0
.L179:
	.word	0x40000b0
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000010
	.word	-0x5dbfffff
.Lfe33:
	.size	 VBCB_BT_Phase2BigPokeball1,.Lfe33-VBCB_BT_Phase2BigPokeball1
	.align	2, 0
	.type	 VBCB_BT_Phase2BigPokeball2,function
	.thumb_func
VBCB_BT_Phase2BigPokeball2:
	push	{lr}
	bl	BT_VBStopDma0SyncSrcBufferSetLcdRegs
	ldr	r1, .L182
	ldr	r0, .L182+0x4
	str	r0, [r1]
	ldr	r0, .L182+0x8
	str	r0, [r1, #0x4]
	ldr	r0, .L182+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	0x40000b0
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe34:
	.size	 VBCB_BT_Phase2BigPokeball2,.Lfe34-VBCB_BT_Phase2BigPokeball2
	.align	2, 0
	.type	 BT_Phase2SlidingPokeballs,function
	.thumb_func
BT_Phase2SlidingPokeballs:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L189
	ldr	r2, .L189+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L185:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L185	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L190:
	.align	2, 0
.L189:
	.word	sBT_Phase2SlidingPokeballsFuncs
	.word	gTasks
.Lfe35:
	.size	 BT_Phase2SlidingPokeballs,.Lfe35-BT_Phase2SlidingPokeballs
	.align	2, 0
	.type	 BT_Phase2SlidingPokeballs_LoadBgGfx,function
	.thumb_func
BT_Phase2SlidingPokeballs_LoadBgGfx:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r0, sp, #0x4
	add	r1, sp, #0x8
	bl	BT_GetBg0TilemapAndTilesetBase
	ldr	r0, .L192
	ldr	r1, [sp, #0x8]
	mov	r2, #0x20
	bl	CpuSet
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, .L192+0x4
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L192+0x8
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.L193:
	.align	2, 0
.L192:
	.word	sSlidingPokeballTilemap
	.word	0x5000200
	.word	sSlidingPokeballBigPokeballPalette
.Lfe36:
	.size	 BT_Phase2SlidingPokeballs_LoadBgGfx,.Lfe36-BT_Phase2SlidingPokeballs_LoadBgGfx
	.align	2, 0
	.type	 BT_Phase2SlidingPokeballs_SetupFldeffArgs,function
	.thumb_func
BT_Phase2SlidingPokeballs_SetupFldeffArgs:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	ldr	r1, .L200
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	add	r4, sp, #0x4
	ldr	r1, .L200+0x4
	add	r0, r4, #0
	mov	r2, #0xa
	bl	memcpy
	bl	Random
	mov	r5, #0x1
	and	r5, r5, r0
	mov	r1, #0x0
	mov	r8, r4
	ldr	r6, .L200+0x8
.L198:
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	lsl	r0, r5, #0x1
	add	r0, r0, sp
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	str	r0, [r6]
	lsl	r4, r1, #0x10
	asr	r4, r4, #0x10
	lsl	r0, r4, #0x5
	add	r0, r0, #0x10
	str	r0, [r6, #0x4]
	str	r5, [r6, #0x8]
	lsl	r0, r4, #0x1
	add	r0, r0, r8
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	str	r0, [r6, #0xc]
	mov	r0, #0x2d
	bl	FieldEffectStart
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	mov	r0, #0x1
	eor	r5, r5, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsr	r1, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0x4
	ble	.L198	@cond_branch
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L201:
	.align	2, 0
.L200:
	.word	gUnknown_83FA400
	.word	gUnknown_83FA404
	.word	gFieldEffectArguments
.Lfe37:
	.size	 BT_Phase2SlidingPokeballs_SetupFldeffArgs,.Lfe37-BT_Phase2SlidingPokeballs_SetupFldeffArgs
	.align	2, 0
	.type	 BT_Phase2SlidingPokeballs_IsDone,function
	.thumb_func
BT_Phase2SlidingPokeballs_IsDone:
	push	{lr}
	mov	r0, #0x2d
	bl	FieldEffectActiveListContains
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L203	@cond_branch
	bl	BT_BlendPalettesToBlack
	ldr	r0, .L204
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L203:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L205:
	.align	2, 0
.L204:
	.word	BT_Phase2SlidingPokeballs
.Lfe38:
	.size	 BT_Phase2SlidingPokeballs_IsDone,.Lfe38-BT_Phase2SlidingPokeballs_IsDone
	.align	2, 0
	.globl	FldEff_Pokeball
	.type	 FldEff_Pokeball,function
	.thumb_func
FldEff_Pokeball:
	push	{r4, r5, lr}
	ldr	r0, .L207
	ldr	r5, .L207+0x4
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	mov	r3, #0x4
	ldrsh	r2, [r5, r3]
	mov	r3, #0x0
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L207+0x8
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x5]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldr	r0, [r5, #0x8]
	strh	r0, [r4, #0x2e]
	ldr	r0, [r5, #0xc]
	strh	r0, [r4, #0x30]
	ldr	r0, .L207+0xc
	strh	r0, [r4, #0x32]
	add	r0, r4, #0
	bl	InitSpriteAffineAnim
	ldrb	r1, [r5, #0x8]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L208:
	.align	2, 0
.L207:
	.word	sSpriteTemplate_SlidingPokeball
	.word	gFieldEffectArguments
	.word	gSprites
	.word	0xffff
.Lfe39:
	.size	 FldEff_Pokeball,.Lfe39-FldEff_Pokeball
	.align	2, 0
	.type	 SpriteCB_BT_Phase2SlidingPokeballs,function
	.thumb_func
SpriteCB_BT_Phase2SlidingPokeballs:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r1, .L215
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L210	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L211
.L216:
	.align	2, 0
.L215:
	.word	gUnknown_83FA40E
.L210:
	ldrh	r0, [r4, #0x20]
	lsl	r1, r0, #0x10
	lsr	r0, r1, #0x10
	cmp	r0, #0xf0
	bhi	.L212	@cond_branch
	asr	r0, r1, #0x13
	lsl	r0, r0, #0x10
	ldrh	r1, [r4, #0x22]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsr	r1, r0, #0x10
	asr	r5, r0, #0x10
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r5, r0
	beq	.L212	@cond_branch
	strh	r1, [r4, #0x32]
	mov	r0, #0x8
	bl	GetGpuReg
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0xb
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	sub	r1, r2, #0x2
	lsl	r1, r1, #0x5
	add	r1, r1, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r6, .L217
	add	r3, r6, #0
	strh	r3, [r1]
	sub	r1, r2, #0x1
	lsl	r1, r1, #0x5
	add	r1, r1, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	strh	r3, [r1]
	lsl	r1, r2, #0x5
	add	r1, r1, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	strh	r3, [r1]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x5
	add	r2, r2, r5
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	strh	r3, [r2]
.L212:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r0, r0, #0xf
	lsl	r0, r0, #0x10
	mov	r1, #0x87
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bls	.L211	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	FieldEffectStop
.L211:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L218:
	.align	2, 0
.L217:
	.word	0xf001
.Lfe40:
	.size	 SpriteCB_BT_Phase2SlidingPokeballs,.Lfe40-SpriteCB_BT_Phase2SlidingPokeballs
	.align	2, 0
	.type	 BT_Phase2ClockwiseBlackFade,function
	.thumb_func
BT_Phase2ClockwiseBlackFade:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L224
	ldr	r2, .L224+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L220:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L220	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	sBT_Phase2ClockwiseBlackFadeFuncs
	.word	gTasks
.Lfe41:
	.size	 BT_Phase2ClockwiseBlackFade,.Lfe41-BT_Phase2ClockwiseBlackFade
	.align	2, 0
	.type	 BT_Phase2ClockwiseBlackFade_Init,function
	.thumb_func
BT_Phase2ClockwiseBlackFade_Init:
	push	{r4, lr}
	add	r4, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	ldr	r0, .L232
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1, #0x2]
	mov	r0, #0x3f
	strh	r0, [r1, #0x4]
	ldr	r0, .L232+0x4
	strh	r0, [r1, #0x6]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r3, .L232+0x8
	ldr	r2, .L232+0xc
.L230:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x9f
	bls	.L230	@cond_branch
	ldr	r0, .L232+0x10
	bl	SetVBlankCallback
	ldr	r0, .L232
	ldr	r1, [r0]
	mov	r0, #0x78
	strh	r0, [r1, #0x2c]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L233:
	.align	2, 0
.L232:
	.word	sTransitionStructPtr
	.word	0xf0f1
	.word	gScanlineEffectRegBuffers+0x780
	.word	0xf3f4
	.word	VBCB_BT_Phase2ClockwiseBlackFade
.Lfe42:
	.size	 BT_Phase2ClockwiseBlackFade_Init,.Lfe42-BT_Phase2ClockwiseBlackFade_Init
	.align	2, 0
	.type	 BT_Phase2ClockwiseBlackFade_Step1,function
	.thumb_func
BT_Phase2ClockwiseBlackFade_Step1:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	ldr	r2, .L241
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r2]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r2, #0x2c
	ldrsh	r3, [r1, r2]
	mov	r1, #0x1
	neg	r1, r1
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	bl	BT_DiagonalSegment_InitParams
	ldr	r5, .L241+0x4
.L235:
	ldr	r4, .L241
	ldr	r0, [r4]
	mov	r7, #0x2a
	ldrsh	r3, [r0, r7]
	lsl	r3, r3, #0x1
	add	r3, r3, r5
	ldrh	r1, [r0, #0x28]
	add	r1, r1, #0x1
	mov	r7, #0xf0
	lsl	r7, r7, #0x7
	add	r2, r7, #0
	orr	r1, r1, r2
	strh	r1, [r3]
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	BT_DiagonalSegment_ComputePointOnSegment
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L235	@cond_branch
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x2c]
	add	r0, r0, #0x20
	strh	r0, [r1, #0x2c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xef
	ble	.L240	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
.L240:
	ldr	r0, [r4]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L242:
	.align	2, 0
.L241:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.Lfe43:
	.size	 BT_Phase2ClockwiseBlackFade_Step1,.Lfe43-BT_Phase2ClockwiseBlackFade_Step1
	.align	2, 0
	.type	 BT_Phase2ClockwiseBlackFade_Step2,function
	.thumb_func
BT_Phase2ClockwiseBlackFade_Step2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	mov	r8, r0
	add	r1, sp, #0xc
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r4, .L256
	ldr	r1, [r4]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r2, #0x2e
	ldrsh	r1, [r1, r2]
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0xf0
	bl	BT_DiagonalSegment_InitParams
	mov	r9, r4
	mov	r7, r9
	add	r5, sp, #0xc
.L246:
	mov	r1, #0x78
	ldr	r3, [r7]
	ldrh	r0, [r3, #0x28]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r0, [r3, r2]
	cmp	r0, #0x4f
	ble	.L247	@cond_branch
	ldrh	r1, [r3, #0x28]
	mov	r4, #0xf0
.L247:
	ldr	r6, .L256+0x4
	mov	r0, #0x2a
	ldrsh	r2, [r3, r0]
	lsl	r2, r2, #0x1
	add	r2, r2, r6
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x8
	lsl	r0, r4, #0x10
	asr	r4, r0, #0x10
	orr	r4, r4, r1
	strh	r4, [r2]
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L245	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	BT_DiagonalSegment_ComputePointOnSegment
	strb	r0, [r5]
	b	.L246
.L257:
	.align	2, 0
.L256:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.L245:
	ldr	r1, [r7]
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x10
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x9f
	ble	.L250	@cond_branch
	mov	r0, #0xf0
	strh	r0, [r1, #0x2c]
	mov	r1, r8
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L251
.L250:
	mov	r3, #0x2a
	ldrsh	r0, [r1, r3]
	cmp	r0, r2
	bge	.L251	@cond_branch
	add	r3, r4, #0
	ldr	r5, .L258
.L254:
	ldr	r2, [r5]
	ldrh	r0, [r2, #0x2a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0xf
	add	r0, r0, r6
	strh	r3, [r0]
	mov	r4, #0x2a
	ldrsh	r1, [r2, r4]
	mov	r4, #0x2e
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	blt	.L254	@cond_branch
.L251:
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L259:
	.align	2, 0
.L258:
	.word	sTransitionStructPtr
.Lfe44:
	.size	 BT_Phase2ClockwiseBlackFade_Step2,.Lfe44-BT_Phase2ClockwiseBlackFade_Step2
	.align	2, 0
	.type	 BT_Phase2ClockwiseBlackFade_Step3,function
	.thumb_func
BT_Phase2ClockwiseBlackFade_Step3:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	ldr	r2, .L267
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r2]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r2, #0x2c
	ldrsh	r3, [r1, r2]
	mov	r1, #0xa0
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	bl	BT_DiagonalSegment_InitParams
	ldr	r5, .L267+0x4
.L261:
	ldr	r4, .L267
	ldr	r0, [r4]
	mov	r1, #0x2a
	ldrsh	r3, [r0, r1]
	lsl	r3, r3, #0x1
	add	r3, r3, r5
	ldrh	r1, [r0, #0x28]
	lsl	r1, r1, #0x8
	mov	r2, #0xf0
	orr	r1, r1, r2
	strh	r1, [r3]
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	BT_DiagonalSegment_ComputePointOnSegment
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L261	@cond_branch
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x2c]
	sub	r0, r0, #0x20
	strh	r0, [r1, #0x2c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L266	@cond_branch
	mov	r0, #0xa0
	strh	r0, [r1, #0x2e]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
.L266:
	ldr	r0, [r4]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L268:
	.align	2, 0
.L267:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.Lfe45:
	.size	 BT_Phase2ClockwiseBlackFade_Step3,.Lfe45-BT_Phase2ClockwiseBlackFade_Step3
	.align	2, 0
	.type	 BT_Phase2ClockwiseBlackFade_Step4,function
	.thumb_func
BT_Phase2ClockwiseBlackFade_Step4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r9, r0
	add	r1, sp, #0xc
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r4, .L282
	ldr	r1, [r4]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r2, #0x2e
	ldrsh	r1, [r1, r2]
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	mov	r3, #0x0
	bl	BT_DiagonalSegment_InitParams
	ldr	r7, .L282+0x4
	mov	sl, r7
	ldr	r0, .L282
	mov	r8, r0
	add	r6, sp, #0xc
.L272:
	mov	r1, r8
	ldr	r4, [r1]
	mov	r2, #0x2a
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	mov	r7, sl
	add	r5, r0, r7
	ldrb	r1, [r5]
	ldrh	r2, [r4, #0x28]
	add	r3, r2, #0
	mov	r7, #0x2e
	ldrsh	r0, [r4, r7]
	cmp	r0, #0x50
	bgt	.L273	@cond_branch
	mov	r2, #0x78
	add	r1, r3, #0
.L273:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x8
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	orr	r1, r1, r0
	mov	r7, #0x0
	strh	r1, [r5]
	ldrb	r0, [r6]
	cmp	r0, #0
	bne	.L271	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	BT_DiagonalSegment_ComputePointOnSegment
	strb	r0, [r6]
	b	.L272
.L283:
	.align	2, 0
.L282:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.L271:
	mov	r0, r8
	ldr	r2, [r0]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x10
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0
	bgt	.L276	@cond_branch
	strh	r7, [r2, #0x2c]
	mov	r1, r9
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L277
.L276:
	mov	r4, #0x2a
	ldrsh	r0, [r2, r4]
	cmp	r0, r3
	ble	.L277	@cond_branch
	ldr	r6, .L284
	add	r3, r1, #0
	ldr	r5, .L284+0x4
.L280:
	ldr	r2, [r5]
	ldrh	r0, [r2, #0x2a]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0xf
	add	r0, r0, r6
	strh	r3, [r0]
	mov	r7, #0x2a
	ldrsh	r1, [r2, r7]
	mov	r4, #0x2e
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	bgt	.L280	@cond_branch
.L277:
	ldr	r7, .L284+0x4
	ldr	r0, [r7]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L285:
	.align	2, 0
.L284:
	.word	gScanlineEffectRegBuffers
	.word	sTransitionStructPtr
.Lfe46:
	.size	 BT_Phase2ClockwiseBlackFade_Step4,.Lfe46-BT_Phase2ClockwiseBlackFade_Step4
	.align	2, 0
	.type	 BT_Phase2ClockwiseBlackFade_Step5,function
	.thumb_func
BT_Phase2ClockwiseBlackFade_Step5:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r7, r0, #0
	ldr	r1, .L294
	ldr	r0, [r1]
	ldrb	r2, [r0]
	mov	r2, #0x0
	strb	r2, [r0]
	ldr	r1, [r1]
	add	r0, r1, #0
	add	r0, r0, #0x24
	mov	r4, #0x2c
	ldrsh	r3, [r1, r4]
	str	r2, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x78
	mov	r2, #0x50
	bl	BT_DiagonalSegment_InitParams
	ldr	r6, .L294+0x4
.L287:
	mov	r2, #0x78
	ldr	r5, .L294
	ldr	r3, [r5]
	ldrh	r4, [r3, #0x28]
	mov	r1, #0x28
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x77
	ble	.L290	@cond_branch
	mov	r2, #0x0
	mov	r4, #0xf0
.L290:
	mov	r0, #0x2a
	ldrsh	r1, [r3, r0]
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	lsl	r2, r2, #0x8
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	orr	r0, r0, r2
	strh	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	BT_DiagonalSegment_ComputePointOnSegment
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L287	@cond_branch
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x2c]
	add	r1, r1, #0x20
	strh	r1, [r0, #0x2c]
	mov	r1, #0x28
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x78
	ble	.L293	@cond_branch
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x8]
.L293:
	ldr	r0, [r5]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L295:
	.align	2, 0
.L294:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.Lfe47:
	.size	 BT_Phase2ClockwiseBlackFade_Step5,.Lfe47-BT_Phase2ClockwiseBlackFade_Step5
	.align	2, 0
	.type	 BT_Phase2ClockwiseBlackFade_End,function
	.thumb_func
BT_Phase2ClockwiseBlackFade_End:
	push	{lr}
	ldr	r1, .L297
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L297+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L297+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	BT_BlendPalettesToBlack
	ldr	r0, .L297+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L298:
	.align	2, 0
.L297:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	BT_Phase2ClockwiseBlackFade
.Lfe48:
	.size	 BT_Phase2ClockwiseBlackFade_End,.Lfe48-BT_Phase2ClockwiseBlackFade_End
	.align	2, 0
	.type	 VBCB_BT_Phase2ClockwiseBlackFade,function
	.thumb_func
VBCB_BT_Phase2ClockwiseBlackFade:
	push	{r4, r5, lr}
	ldr	r5, .L301
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L301+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L301+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	BT_VBSyncOamAndPltt
	ldr	r4, .L301+0xc
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L300	@cond_branch
	ldr	r1, .L301+0x10
	ldr	r0, .L301+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L301+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L300:
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r4, .L301+0x14
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r4, r4, r0
	ldrh	r1, [r4]
	mov	r0, #0x40
	bl	SetGpuReg
	str	r4, [r5]
	ldr	r0, .L301+0x1c
	str	r0, [r5, #0x4]
	ldr	r0, .L301+0x20
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe49:
	.size	 VBCB_BT_Phase2ClockwiseBlackFade,.Lfe49-VBCB_BT_Phase2ClockwiseBlackFade
	.align	2, 0
	.type	 BT_Phase2FullScreenWave,function
	.thumb_func
BT_Phase2FullScreenWave:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L308
	ldr	r2, .L308+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L304:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L304	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	sBT_Phase2FullScreenWaveFuncs
	.word	gTasks
.Lfe50:
	.size	 BT_Phase2FullScreenWave,.Lfe50-BT_Phase2FullScreenWave
	.align	2, 0
	.type	 BT_Phase2FullScreenWave_Init,function
	.thumb_func
BT_Phase2FullScreenWave_Init:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	mov	r2, #0x0
	ldr	r4, .L316
	ldr	r3, .L316+0x4
.L314:
	lsl	r1, r2, #0x1
	add	r1, r1, r4
	ldr	r0, [r3]
	ldrh	r0, [r0, #0x16]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x9f
	bls	.L314	@cond_branch
	ldr	r0, .L316+0x8
	bl	SetVBlankCallback
	ldr	r0, .L316+0xc
	bl	SetHBlankCallback
	mov	r0, #0x2
	bl	EnableInterrupts
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x1
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L317:
	.align	2, 0
.L316:
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionStructPtr
	.word	VBCB_BT_Phase2FullScreenWave
	.word	HBCB_BT_Phase2FullScreenWave
.Lfe51:
	.size	 BT_Phase2FullScreenWave_Init,.Lfe51-BT_Phase2FullScreenWave_Init
	.align	2, 0
	.type	 BT_Phase2FullScreenWave_UpdateWave,function
	.thumb_func
BT_Phase2FullScreenWave_UpdateWave:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r0, .L327
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r2, [r6, #0xc]
	lsl	r1, r2, #0x10
	asr	r0, r1, #0x18
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrh	r4, [r6, #0xa]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	mov	r8, r0
	mov	r5, #0x80
	lsl	r5, r5, #0x3
	add	r0, r4, r5
	strh	r0, [r6, #0xa]
	ldr	r0, .L327+0x4
	cmp	r1, r0
	bgt	.L319	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	add	r0, r2, r1
	strh	r0, [r6, #0xc]
.L319:
	mov	r5, #0x0
	lsl	r7, r3, #0x10
.L323:
	lsr	r0, r4, #0x8
	asr	r1, r7, #0x10
	bl	Sin
	ldr	r1, .L327+0x8
	lsl	r2, r5, #0x1
	add	r2, r2, r1
	ldr	r1, .L327
	ldr	r1, [r1]
	ldrh	r1, [r1, #0x16]
	add	r0, r0, r1
	strh	r0, [r2]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, r8
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r5, #0x9f
	bls	.L323	@cond_branch
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x29
	bne	.L325	@cond_branch
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x10]
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x8
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L325:
	mov	r5, #0x10
	ldrsh	r0, [r6, r5]
	cmp	r0, #0
	beq	.L326	@cond_branch
	ldr	r0, .L327+0xc
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L326	@cond_branch
	ldr	r0, .L327+0x10
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L326:
	ldr	r0, .L327
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L328:
	.align	2, 0
.L327:
	.word	sTransitionStructPtr
	.word	0x1fff0000
	.word	gScanlineEffectRegBuffers
	.word	gPaletteFade
	.word	BT_Phase2FullScreenWave
.Lfe52:
	.size	 BT_Phase2FullScreenWave_UpdateWave,.Lfe52-BT_Phase2FullScreenWave_UpdateWave
	.align	2, 0
	.type	 VBCB_BT_Phase2FullScreenWave,function
	.thumb_func
VBCB_BT_Phase2FullScreenWave:
	push	{lr}
	bl	BT_VBSyncOamAndPltt
	ldr	r0, .L331
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L330	@cond_branch
	ldr	r1, .L331+0x4
	ldr	r0, .L331+0x8
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L331+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L330:
	pop	{r0}
	bx	r0
.L332:
	.align	2, 0
.L331:
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
.Lfe53:
	.size	 VBCB_BT_Phase2FullScreenWave,.Lfe53-VBCB_BT_Phase2FullScreenWave
	.align	2, 0
	.type	 HBCB_BT_Phase2FullScreenWave,function
	.thumb_func
HBCB_BT_Phase2FullScreenWave:
	ldr	r1, .L334
	ldr	r0, .L334+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L334+0x8
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	bx	lr
.L335:
	.align	2, 0
.L334:
	.word	gScanlineEffectRegBuffers
	.word	0x4000006
	.word	0x4000016
.Lfe54:
	.size	 HBCB_BT_Phase2FullScreenWave,.Lfe54-HBCB_BT_Phase2FullScreenWave
	.align	2, 0
	.type	 BT_Phase2BlackWaveToRight,function
	.thumb_func
BT_Phase2BlackWaveToRight:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L341
	ldr	r2, .L341+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L337:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L337	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L342:
	.align	2, 0
.L341:
	.word	sBT_Phase2BlackWaveToRightFuncs
	.word	gTasks
.Lfe55:
	.size	 BT_Phase2BlackWaveToRight,.Lfe55-BT_Phase2BlackWaveToRight
	.align	2, 0
	.type	 BT_Phase2BlackWaveToRight_Init,function
	.thumb_func
BT_Phase2BlackWaveToRight_Init:
	push	{r4, lr}
	add	r4, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	ldr	r0, .L349
	ldr	r1, [r0]
	mov	r2, #0x0
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	strh	r2, [r1, #0x4]
	mov	r0, #0xf0
	strh	r0, [r1, #0x6]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r3, .L349+0x4
	mov	r2, #0xf2
.L347:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9f
	bls	.L347	@cond_branch
	ldr	r0, .L349+0x8
	bl	SetVBlankCallback
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L350:
	.align	2, 0
.L349:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers+0x780
	.word	VBCB_BT_Phase2BlackWaveToRight
.Lfe56:
	.size	 BT_Phase2BlackWaveToRight_Init,.Lfe56-BT_Phase2BlackWaveToRight_Init
	.align	2, 0
	.type	 BT_Phase2BlackWaveToRight_UpdateWave,function
	.thumb_func
BT_Phase2BlackWaveToRight_UpdateWave:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	ldr	r0, .L361
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r7, .L361+0x4
	ldrh	r0, [r4, #0xc]
	ldrb	r5, [r4, #0xc]
	add	r0, r0, #0x10
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x8
	strh	r0, [r4, #0xa]
	mov	r6, #0x0
	mov	r0, #0x1
	mov	r8, r0
.L355:
	add	r0, r5, #0
	mov	r1, #0x28
	bl	Sin
	ldrh	r1, [r4, #0xa]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r0, #0
	bge	.L356	@cond_branch
	mov	r1, #0x0
.L356:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf0
	ble	.L357	@cond_branch
	mov	r1, #0xf0
.L357:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x8
	mov	r2, #0xf1
	orr	r1, r1, r2
	strh	r1, [r7]
	cmp	r0, #0xef
	bgt	.L354	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
.L354:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r5, #0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r7, #0x2
	cmp	r6, #0x9f
	bls	.L355	@cond_branch
	mov	r1, r8
	cmp	r1, #0
	beq	.L360	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L360:
	ldr	r0, .L361
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L362:
	.align	2, 0
.L361:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.Lfe57:
	.size	 BT_Phase2BlackWaveToRight_UpdateWave,.Lfe57-BT_Phase2BlackWaveToRight_UpdateWave
	.align	2, 0
	.type	 BT_Phase2BlackWaveToRight_End,function
	.thumb_func
BT_Phase2BlackWaveToRight_End:
	push	{lr}
	ldr	r1, .L364
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L364+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L364+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	BT_BlendPalettesToBlack
	ldr	r0, .L364+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L365:
	.align	2, 0
.L364:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	BT_Phase2BlackWaveToRight
.Lfe58:
	.size	 BT_Phase2BlackWaveToRight_End,.Lfe58-BT_Phase2BlackWaveToRight_End
	.align	2, 0
	.type	 VBCB_BT_Phase2BlackWaveToRight,function
	.thumb_func
VBCB_BT_Phase2BlackWaveToRight:
	push	{r4, r5, lr}
	ldr	r4, .L368
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L368+0x4
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L368+0x8
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xa]
	bl	BT_VBSyncOamAndPltt
	ldr	r5, .L368+0xc
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L367	@cond_branch
	ldr	r1, .L368+0x10
	ldr	r0, .L368+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L368+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L367:
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L368+0x1c
	str	r0, [r4]
	ldr	r0, .L368+0x20
	str	r0, [r4, #0x4]
	ldr	r0, .L368+0x24
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe59:
	.size	 VBCB_BT_Phase2BlackWaveToRight,.Lfe59-VBCB_BT_Phase2BlackWaveToRight
	.align	2, 0
	.type	 BT_Phase2AntiClockwiseSpiral,function
	.thumb_func
BT_Phase2AntiClockwiseSpiral:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L375
	ldr	r2, .L375+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L371:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L371	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	sBT_Phase2AntiClockwiseSpiralFuncs
	.word	gTasks
.Lfe60:
	.size	 BT_Phase2AntiClockwiseSpiral,.Lfe60-BT_Phase2AntiClockwiseSpiral
	.align	2, 0
	.type	 BT_AntiClockwiseSpiral_DoUpdateFrame,function
	.thumb_func
BT_AntiClockwiseSpiral_DoUpdateFrame:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x4]
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0xa0
	lsl	r1, r1, #0x11
	ldr	r4, .L493
	ldr	r3, .L493+0x4
	mov	r2, #0x78
.L381:
	asr	r0, r1, #0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r4
	strh	r2, [r1]
	add	r0, r0, #0x1
	lsl	r1, r0, #0x10
	asr	r0, r1, #0x10
	cmp	r0, r3
	ble	.L381	@cond_branch
	lsl	r0, r5, #0x10
	mov	r1, #0x0
	mov	r9, r1
	str	r0, [sp, #0xc]
	cmp	r0, #0
	bgt	.LCB3979
	b	.L384	@long jump
.LCB3979:
.L386:
	mov	r3, sl
	lsr	r2, r3, #0x3
	ldr	r4, [sp]
	add	r0, r2, r4
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r0, sl
	add	r0, r0, #0x1
	asr	r1, r0, #0x3
	str	r0, [sp, #0x8]
	cmp	r2, r1
	beq	.L387	@cond_branch
	lsl	r1, r3, #0x10
	mov	r6, #0x80
	lsl	r6, r6, #0x9
	add	r0, r1, r6
	lsr	r0, r0, #0x10
	mov	r8, r0
	add	r0, r1, #0
	b	.L388
.L494:
	.align	2, 0
.L493:
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x3bf
.L387:
	lsl	r0, r3, #0x10
	lsr	r1, r0, #0x10
	mov	r8, r1
.L388:
	asr	r4, r0, #0x10
	mov	r0, sl
	add	r1, r4, #0
	bl	Sin
	mov	r5, #0x50
	sub	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r0, sl
	add	r1, r4, #0
	str	r2, [sp, #0x10]
	bl	Cos
	add	r0, r0, #0x78
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r6, [sp, #0x8]
	mov	r3, r8
	lsl	r4, r3, #0x10
	asr	r4, r4, #0x10
	add	r0, r6, #0
	add	r1, r4, #0
	bl	Sin
	sub	r5, r5, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	add	r1, r4, #0
	bl	Cos
	add	r0, r0, #0x78
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bge	.L389	@cond_branch
	lsl	r0, r5, #0x10
	cmp	r0, #0
	bge	.LCB4071
	b	.L385	@long jump
.LCB4071:
.L389:
	cmp	r1, #0x9f
	ble	.L390	@cond_branch
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.LCB4078
	b	.L385	@long jump
.LCB4078:
.L390:
	cmp	r1, #0
	bge	.L391	@cond_branch
	mov	r2, #0x0
.L391:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L392	@cond_branch
	mov	r2, #0x9f
.L392:
	lsl	r0, r7, #0x10
	cmp	r0, #0
	bge	.L393	@cond_branch
	mov	r7, #0x0
.L393:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L394	@cond_branch
	mov	r7, #0xff
.L394:
	lsl	r0, r5, #0x10
	cmp	r0, #0
	bge	.L395	@cond_branch
	mov	r5, #0x0
.L395:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L396	@cond_branch
	mov	r5, #0x9f
.L396:
	lsl	r0, r3, #0x10
	cmp	r0, #0
	bge	.L397	@cond_branch
	mov	r3, #0x0
.L397:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L398	@cond_branch
	mov	r3, #0xff
.L398:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r2, #0x10
	asr	r2, r1, #0x10
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, sl
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x18
	add	r6, r1, #0
	cmp	r0, #0
	blt	.L399	@cond_branch
	mov	r4, #0xa0
	lsl	r4, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x1
	ldr	r1, .L495
	add	r0, r0, r1
	strh	r7, [r0]
	lsl	r0, r5, #0x10
	add	r4, r0, #0
	cmp	r4, #0
	bne	.LCB4154
	b	.L385	@long jump
.LCB4154:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r7, #0x10
	asr	r2, r1, #0x10
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	mov	r8, r0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r8, r0
	bge	.L401	@cond_branch
	cmp	r2, #0x1
	ble	.L401	@cond_branch
	sub	r0, r2, #0x1
	b	.L491
.L496:
	.align	2, 0
.L495:
	.word	gScanlineEffectRegBuffers+0x780
.L401:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L402	@cond_branch
	asr	r0, r1, #0x10
	cmp	r0, #0xfe
	bgt	.L402	@cond_branch
	add	r0, r0, #0x1
.L491:
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
.L402:
	add	r0, r4, #0
	asr	r1, r0, #0x10
	cmp	r1, #0
	bge	.L404	@cond_branch
	asr	r2, r6, #0x10
	ldr	r3, .L497
.L408:
	asr	r1, r0, #0x10
	add	r0, r2, r1
	mov	r4, #0xa0
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	strh	r7, [r0]
	add	r1, r1, #0x1
	lsl	r0, r1, #0x10
	cmp	r0, #0
	blt	.L408	@cond_branch
	b	.L385
.L498:
	.align	2, 0
.L497:
	.word	gScanlineEffectRegBuffers+0x780
.L404:
	cmp	r1, #0
	ble	.L385	@cond_branch
	asr	r2, r6, #0x10
	ldr	r3, .L499
.L414:
	lsl	r1, r5, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, r1
	mov	r6, #0xa0
	lsl	r6, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	strh	r7, [r0]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	cmp	r1, #0
	bgt	.L414	@cond_branch
	b	.L385
.L500:
	.align	2, 0
.L499:
	.word	gScanlineEffectRegBuffers+0x780
.L399:
	mov	r1, #0xf0
	lsl	r1, r1, #0x1
	add	r0, r2, r1
	lsl	r0, r0, #0x1
	ldr	r2, .L501
	add	r0, r0, r2
	strh	r7, [r0]
	lsl	r0, r5, #0x10
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L385	@cond_branch
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r7, #0x10
	asr	r2, r1, #0x10
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	mov	r8, r0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r8, r0
	bge	.L418	@cond_branch
	cmp	r2, #0x1
	ble	.L418	@cond_branch
	sub	r0, r2, #0x1
	b	.L492
.L502:
	.align	2, 0
.L501:
	.word	gScanlineEffectRegBuffers+0x780
.L418:
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L419	@cond_branch
	asr	r0, r1, #0x10
	cmp	r0, #0xfe
	bgt	.L419	@cond_branch
	add	r0, r0, #0x1
.L492:
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
.L419:
	add	r0, r4, #0
	asr	r1, r0, #0x10
	cmp	r1, #0
	bge	.L421	@cond_branch
	asr	r2, r6, #0x10
	ldr	r3, .L503
.L425:
	asr	r1, r0, #0x10
	add	r0, r2, r1
	mov	r4, #0xf0
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	strh	r7, [r0]
	add	r1, r1, #0x1
	lsl	r0, r1, #0x10
	cmp	r0, #0
	blt	.L425	@cond_branch
	b	.L385
.L504:
	.align	2, 0
.L503:
	.word	gScanlineEffectRegBuffers+0x780
.L421:
	cmp	r1, #0
	ble	.L385	@cond_branch
	asr	r2, r6, #0x10
	ldr	r3, .L505
.L431:
	lsl	r1, r5, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, r1
	mov	r6, #0xf0
	lsl	r6, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	strh	r7, [r0]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	cmp	r1, #0
	bgt	.L431	@cond_branch
.L385:
	mov	r1, r9
	lsl	r0, r1, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r0, r0, r2
	ldr	r3, [sp, #0x8]
	lsl	r1, r3, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsr	r4, r0, #0x10
	mov	r9, r4
	asr	r0, r0, #0x10
	ldr	r6, [sp, #0xc]
	asr	r1, r6, #0xc
	cmp	r0, r1
	bge	.LCB4420
	b	.L386	@long jump
.LCB4420:
.L384:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	beq	.L435	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0xa
	ldr	r1, [sp, #0xc]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L434	@cond_branch
.L435:
	mov	r2, #0x0
	mov	r9, r2
	ldr	r4, .L505
	mov	r5, #0xa0
	lsl	r5, r5, #0x1
.L439:
	mov	r3, r9
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x10
	lsl	r3, r1, #0x1
	ldr	r6, [sp, #0x4]
	add	r3, r3, r6
	lsl	r3, r3, #0x1
	add	r3, r3, r4
	add	r0, r1, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	mov	r6, #0xf0
	lsl	r6, r6, #0x1
	add	r0, r1, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	orr	r2, r2, r0
	strh	r2, [r3]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	mov	r9, r0
	asr	r1, r1, #0x10
	cmp	r1, #0x9f
	ble	.L439	@cond_branch
	b	.L377
.L506:
	.align	2, 0
.L505:
	.word	gScanlineEffectRegBuffers+0x780
.L434:
	ldr	r1, [sp, #0xc]
	asr	r4, r1, #0x10
	lsl	r0, r4, #0x14
	asr	r0, r0, #0x10
	lsl	r5, r4, #0x1
	ldr	r2, [sp]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r1, r1, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r4, #0
	bge	.L484	@cond_branch
	add	r4, r4, #0x3
.L484:
	asr	r0, r4, #0x2
	cmp	r0, #0x1
	beq	.L453	@cond_branch
	cmp	r0, #0x1
	bgt	.L485	@cond_branch
	cmp	r0, #0
	beq	.L442	@cond_branch
	b	.L441
.L485:
	cmp	r0, #0x2
	bne	.LCB4527
	b	.L462	@long jump
.LCB4527:
	cmp	r0, #0x3
	bne	.LCB4529
	b	.L473	@long jump
.LCB4529:
	b	.L441
.L442:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x50
	ble	.L443	@cond_branch
	mov	r2, #0x50
.L443:
	mov	r9, r2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bgt	.LCB4547
	b	.L441	@long jump
.LCB4547:
	ldr	r0, .L507
	add	r0, r5, r0
	mov	r3, #0x0
	ldrsh	r4, [r0, r3]
	ldr	r6, .L507+0x4
.L447:
	ldr	r0, .L507+0x8
	ldr	r5, [r0]
	asr	r2, r1, #0x10
	mov	r0, r2
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	add	r0, r0, #0x78
	lsl	r1, r0, #0x10
	lsr	r7, r1, #0x10
	strh	r0, [r5, #0x28]
	lsl	r1, r7, #0x10
	lsr	r0, r1, #0x10
	cmp	r0, #0xff
	bhi	.L446	@cond_branch
	mov	r3, #0xc8
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	sub	r0, r0, r2
	strh	r0, [r5, #0x14]
	add	r0, r3, #0
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r3, r0, r6
	ldrh	r0, [r3]
	strh	r0, [r5, #0x38]
	mov	r0, #0x8c
	lsl	r0, r0, #0x2
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r6
	ldrh	r0, [r2]
	asr	r1, r1, #0x10
	cmp	r0, r1
	bge	.L449	@cond_branch
	mov	r0, #0x78
	strh	r0, [r2]
	b	.L446
.L508:
	.align	2, 0
.L507:
	.word	gUnknown_83FA444
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionStructPtr
.L449:
	ldrh	r0, [r3]
	cmp	r0, r1
	bge	.L446	@cond_branch
	strh	r7, [r3]
.L446:
	mov	r1, r9
	lsl	r0, r1, #0x10
	ldr	r2, .L509
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r0, #0x10
	cmp	r1, #0
	bgt	.L447	@cond_branch
	b	.L441
.L510:
	.align	2, 0
.L509:
	.word	-0x10000
.L453:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x50
	ble	.L454	@cond_branch
	mov	r2, #0x50
.L454:
	mov	r9, r2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bgt	.LCB4646
	b	.L441	@long jump
.LCB4646:
	ldr	r0, .L511
	add	r0, r5, r0
	mov	r3, #0x0
	ldrsh	r4, [r0, r3]
	ldr	r6, .L511+0x4
.L458:
	ldr	r0, .L511+0x8
	ldr	r3, [r0]
	asr	r2, r1, #0x10
	mov	r0, r2
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	add	r0, r0, #0x78
	lsl	r1, r0, #0x10
	lsr	r7, r1, #0x10
	strh	r0, [r3, #0x28]
	lsl	r5, r7, #0x10
	lsr	r0, r5, #0x10
	cmp	r0, #0xff
	bhi	.L457	@cond_branch
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	sub	r0, r0, r2
	strh	r0, [r3, #0x14]
	add	r0, r1, #0
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r6
	ldrh	r0, [r2]
	strh	r0, [r3, #0x38]
	ldrh	r1, [r2]
	asr	r0, r5, #0x10
	cmp	r1, r0
	bge	.L457	@cond_branch
	strh	r7, [r2]
.L457:
	mov	r2, r9
	lsl	r0, r2, #0x10
	ldr	r3, .L511+0xc
	add	r0, r0, r3
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r0, #0x10
	cmp	r1, #0
	bgt	.L458	@cond_branch
	b	.L441
.L512:
	.align	2, 0
.L511:
	.word	gUnknown_83FA444
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionStructPtr
	.word	-0x10000
.L462:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x4f
	neg	r1, r1
	cmp	r0, r1
	bge	.L463	@cond_branch
	ldr	r2, .L513
.L463:
	mov	r9, r2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bgt	.L441	@cond_branch
	ldr	r0, .L513+0x4
	add	r0, r5, r0
	mov	r6, #0x0
	ldrsh	r4, [r0, r6]
	ldr	r6, .L513+0x8
.L467:
	ldr	r0, .L513+0xc
	ldr	r5, [r0]
	asr	r2, r1, #0x10
	mov	r0, r2
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	add	r0, r0, #0x78
	lsl	r1, r0, #0x10
	lsr	r7, r1, #0x10
	strh	r0, [r5, #0x28]
	lsl	r1, r7, #0x10
	lsr	r0, r1, #0x10
	cmp	r0, #0xff
	bhi	.L466	@cond_branch
	mov	r3, #0x8c
	lsl	r3, r3, #0x2
	add	r0, r3, #0
	sub	r0, r0, r2
	strh	r0, [r5, #0x14]
	add	r0, r3, #0
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r3, r0, r6
	ldrh	r0, [r3]
	strh	r0, [r5, #0x38]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r6
	ldrh	r0, [r2]
	asr	r1, r1, #0x10
	cmp	r0, r1
	blt	.L469	@cond_branch
	mov	r0, #0x78
	strh	r0, [r2]
	b	.L466
.L514:
	.align	2, 0
.L513:
	.word	0xffb1
	.word	gUnknown_83FA444
	.word	gScanlineEffectRegBuffers+0x780
	.word	sTransitionStructPtr
.L469:
	ldrh	r0, [r3]
	cmp	r0, r1
	ble	.L466	@cond_branch
	strh	r7, [r3]
.L466:
	mov	r1, r9
	lsl	r0, r1, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r0, #0x10
	cmp	r1, #0
	ble	.L467	@cond_branch
	b	.L441
.L473:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x4f
	neg	r1, r1
	cmp	r0, r1
	bge	.L474	@cond_branch
	ldr	r2, .L515
.L474:
	mov	r9, r2
	lsl	r1, r2, #0x10
	cmp	r1, #0
	bgt	.L441	@cond_branch
	ldr	r0, .L515+0x4
	add	r0, r5, r0
	mov	r3, #0x0
	ldrsh	r4, [r0, r3]
	ldr	r6, .L515+0x8
	mov	r8, r6
	ldr	r6, .L515+0xc
.L478:
	mov	r0, r8
	ldr	r3, [r0]
	asr	r2, r1, #0x10
	mov	r0, r2
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	add	r0, r0, #0x78
	lsl	r1, r0, #0x10
	lsr	r7, r1, #0x10
	strh	r0, [r3, #0x28]
	lsl	r5, r7, #0x10
	lsr	r0, r5, #0x10
	cmp	r0, #0xff
	bhi	.L477	@cond_branch
	mov	r1, #0x8c
	lsl	r1, r1, #0x2
	add	r0, r1, #0
	sub	r0, r0, r2
	strh	r0, [r3, #0x14]
	add	r0, r1, #0
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r6
	ldrh	r0, [r2]
	strh	r0, [r3, #0x38]
	ldrh	r1, [r2]
	asr	r0, r5, #0x10
	cmp	r1, r0
	ble	.L477	@cond_branch
	strh	r7, [r2]
.L477:
	mov	r2, r9
	lsl	r0, r2, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r0, r3
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r0, #0x10
	cmp	r1, #0
	ble	.L478	@cond_branch
.L441:
	mov	r4, #0x0
	mov	r9, r4
	ldr	r4, .L515+0xc
	mov	r5, #0xa0
	lsl	r5, r5, #0x1
.L489:
	mov	r6, r9
	lsl	r1, r6, #0x10
	asr	r1, r1, #0x10
	lsl	r3, r1, #0x1
	ldr	r0, [sp, #0x4]
	add	r3, r3, r0
	lsl	r3, r3, #0x1
	add	r3, r3, r4
	add	r0, r1, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	mov	r6, #0xf0
	lsl	r6, r6, #0x1
	add	r0, r1, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	orr	r2, r2, r0
	strh	r2, [r3]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	mov	r9, r0
	asr	r1, r1, #0x10
	cmp	r1, #0x9f
	ble	.L489	@cond_branch
.L377:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L516:
	.align	2, 0
.L515:
	.word	0xffb1
	.word	gUnknown_83FA444
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers+0x780
.Lfe61:
	.size	 BT_AntiClockwiseSpiral_DoUpdateFrame,.Lfe61-BT_AntiClockwiseSpiral_DoUpdateFrame
	.align	2, 0
	.type	 BT_Phase2AntiClockwiseSpiral_Init,function
	.thumb_func
BT_Phase2AntiClockwiseSpiral_Init:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	ldr	r0, .L518
	ldr	r1, [r0]
	mov	r4, #0x0
	strh	r4, [r1, #0x2]
	mov	r0, #0x3f
	strh	r0, [r1, #0x4]
	ldr	r0, .L518+0x4
	strh	r0, [r1, #0x6]
	ldr	r0, .L518+0x8
	strh	r0, [r1, #0x8]
	ldr	r0, .L518+0xc
	strh	r0, [r1, #0xc]
	strh	r4, [r1, #0x20]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BT_AntiClockwiseSpiral_DoUpdateFrame
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1
	bl	BT_AntiClockwiseSpiral_DoUpdateFrame
	ldr	r1, .L518+0x10
	ldr	r0, .L518+0x14
	str	r0, [r1]
	ldr	r2, .L518+0x18
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L518+0x1c
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldr	r0, .L518+0x20
	bl	SetVBlankCallback
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	strh	r4, [r5, #0xa]
	strh	r4, [r5, #0xc]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L519:
	.align	2, 0
.L518:
	.word	sTransitionStructPtr
	.word	0x7878
	.word	0x3070
	.word	0x1090
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers+0x780
	.word	-0x780
	.word	-0x7ffffec0
	.word	VBCB_BT_Phase2AntiClockwiseBlackFade
.Lfe62:
	.size	 BT_Phase2AntiClockwiseSpiral_Init,.Lfe62-BT_Phase2AntiClockwiseSpiral_Init
	.align	2, 0
	.type	 BT_Phase2AntiClockwiseSpiral_Update,function
	.thumb_func
BT_Phase2AntiClockwiseSpiral_Update:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	mov	r2, #0x1
	bl	BT_AntiClockwiseSpiral_DoUpdateFrame
	ldr	r5, .L527
	ldr	r1, [r5]
	ldrb	r0, [r1]
	mov	r2, #0x1
	mov	r8, r2
	ldrb	r2, [r1]
	mov	r7, #0x0
	mov	r2, r8
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	bne	.L521	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BT_AntiClockwiseSpiral_DoUpdateFrame
	ldrh	r1, [r4, #0xc]
	mov	r6, #0x30
	sub	r0, r6, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r0, #0
	bge	.L522	@cond_branch
	mov	r3, #0x0
.L522:
	add	r0, r1, #0
	add	r0, r0, #0x70
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L523	@cond_branch
	mov	r2, #0xff
.L523:
	ldr	r0, [r5]
	orr	r2, r2, r3
	strh	r2, [r0, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x20
	strh	r0, [r4, #0xc]
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	mov	r1, #0x0
	mov	r2, #0x1
	bl	BT_AntiClockwiseSpiral_DoUpdateFrame
	ldrh	r1, [r4, #0xc]
	sub	r0, r6, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r0, #0
	bge	.L524	@cond_branch
	mov	r3, #0x0
.L524:
	add	r0, r1, #0
	add	r0, r0, #0x70
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L525	@cond_branch
	mov	r2, #0xff
.L525:
	ldr	r1, [r5]
	orr	r2, r2, r3
	strh	r2, [r1, #0xc]
	ldrb	r0, [r1]
	mov	r2, r8
	orr	r0, r0, r2
	ldrb	r2, [r1]
	orr	r0, r0, r7
	strb	r0, [r1]
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x9f
	ble	.L521	@cond_branch
	ldr	r1, [r5]
	mov	r0, #0x1
	strh	r0, [r1, #0x20]
	bl	BT_BlendPalettesToBlack
.L521:
	mov	r0, #0x0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L528:
	.align	2, 0
.L527:
	.word	sTransitionStructPtr
.Lfe63:
	.size	 BT_Phase2AntiClockwiseSpiral_Update,.Lfe63-BT_Phase2AntiClockwiseSpiral_Update
	.align	2, 0
	.type	 VBCB_BT_Phase2AntiClockwiseBlackFade,function
	.thumb_func
VBCB_BT_Phase2AntiClockwiseBlackFade:
	push	{r4, r5, r6, lr}
	ldr	r5, .L533
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L533+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L533+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	BT_VBSyncOamAndPltt
	ldr	r4, .L533+0xc
	ldr	r2, [r4]
	mov	r0, #0x20
	ldrsh	r3, [r2, r0]
	cmp	r3, #0
	beq	.L530	@cond_branch
	ldr	r0, .L533+0x10
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	b	.L531
.L534:
	.align	2, 0
.L533:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionStructPtr
	.word	BT_Phase2AntiClockwiseSpiral
.L530:
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L532	@cond_branch
	ldr	r1, .L535
	ldr	r0, .L535+0x4
	str	r0, [r1]
	ldr	r6, .L535+0x8
	add	r0, r0, r6
	str	r0, [r1, #0x4]
	ldr	r0, .L535+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r2]
	strb	r3, [r2]
.L532:
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xc]
	mov	r0, #0x46
	bl	SetGpuReg
	ldr	r4, .L535+0x10
	ldrh	r1, [r4]
	mov	r0, #0x40
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2]
	mov	r0, #0x42
	bl	SetGpuReg
	str	r4, [r5]
	ldr	r0, .L535+0x14
	str	r0, [r5, #0x4]
	ldr	r0, .L535+0x18
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
.L531:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L536:
	.align	2, 0
.L535:
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers+0x780
	.word	-0x780
	.word	-0x7ffffec0
	.word	gScanlineEffectRegBuffers
	.word	0x4000040
	.word	-0x59bfffff
.Lfe64:
	.size	 VBCB_BT_Phase2AntiClockwiseBlackFade,.Lfe64-VBCB_BT_Phase2AntiClockwiseBlackFade
	.align	2, 0
	.type	 BT_Phase2StartLoreleiMugshot,function
	.thumb_func
BT_Phase2StartLoreleiMugshot:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L538
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x26]
	bl	BT_Phase2Mugshot
	pop	{r0}
	bx	r0
.L539:
	.align	2, 0
.L538:
	.word	gTasks
.Lfe65:
	.size	 BT_Phase2StartLoreleiMugshot,.Lfe65-BT_Phase2StartLoreleiMugshot
	.align	2, 0
	.type	 BT_Phase2StartBrunoMugshot,function
	.thumb_func
BT_Phase2StartBrunoMugshot:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L541
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x1
	strh	r2, [r1, #0x26]
	bl	BT_Phase2Mugshot
	pop	{r0}
	bx	r0
.L542:
	.align	2, 0
.L541:
	.word	gTasks
.Lfe66:
	.size	 BT_Phase2StartBrunoMugshot,.Lfe66-BT_Phase2StartBrunoMugshot
	.align	2, 0
	.type	 BT_Phase2StartAgathaMugshot,function
	.thumb_func
BT_Phase2StartAgathaMugshot:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L544
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x2
	strh	r2, [r1, #0x26]
	bl	BT_Phase2Mugshot
	pop	{r0}
	bx	r0
.L545:
	.align	2, 0
.L544:
	.word	gTasks
.Lfe67:
	.size	 BT_Phase2StartAgathaMugshot,.Lfe67-BT_Phase2StartAgathaMugshot
	.align	2, 0
	.type	 BT_Phase2StartLanceMugshot,function
	.thumb_func
BT_Phase2StartLanceMugshot:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L547
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x3
	strh	r2, [r1, #0x26]
	bl	BT_Phase2Mugshot
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	gTasks
.Lfe68:
	.size	 BT_Phase2StartLanceMugshot,.Lfe68-BT_Phase2StartLanceMugshot
	.align	2, 0
	.type	 BT_Phase2StartBlueMugshot,function
	.thumb_func
BT_Phase2StartBlueMugshot:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L550
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x4
	strh	r2, [r1, #0x26]
	bl	BT_Phase2Mugshot
	pop	{r0}
	bx	r0
.L551:
	.align	2, 0
.L550:
	.word	gTasks
.Lfe69:
	.size	 BT_Phase2StartBlueMugshot,.Lfe69-BT_Phase2StartBlueMugshot
	.align	2, 0
	.type	 BT_Phase2Mugshot,function
	.thumb_func
BT_Phase2Mugshot:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L557
	ldr	r2, .L557+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L553:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L553	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L558:
	.align	2, 0
.L557:
	.word	sBT_Phase2MugshotFuncs
	.word	gTasks
.Lfe70:
	.size	 BT_Phase2Mugshot,.Lfe70-BT_Phase2Mugshot
	.align	2, 0
	.type	 BT_Phase2Mugshot_Init,function
	.thumb_func
BT_Phase2Mugshot_Init:
	push	{r4, lr}
	add	r4, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	add	r0, r4, #0
	bl	BT_Phase2Mugshots_CreateSprites
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	mov	r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r0, #0xef
	strh	r0, [r4, #0xe]
	ldr	r0, .L565
	ldr	r1, [r0]
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	mov	r0, #0x3e
	strh	r0, [r1, #0x4]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r3, .L565+0x4
	ldr	r2, .L565+0x8
.L563:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9f
	bls	.L563	@cond_branch
	ldr	r0, .L565+0xc
	bl	SetVBlankCallback
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L566:
	.align	2, 0
.L565:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers+0x780
	.word	0xf0f1
	.word	VBCB_BT_Phase2Mugshot1_Slide
.Lfe71:
	.size	 BT_Phase2Mugshot_Init,.Lfe71-BT_Phase2Mugshot_Init
	.align	2, 0
	.type	 BT_Phase2Mugshot_LoadGfx,function
	.thumb_func
BT_Phase2Mugshot_LoadGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r8, r0
	ldr	r6, .L578
	add	r1, sp, #0x4
	mov	r0, sp
	bl	BT_GetBg0TilemapAndTilesetBase
	ldr	r0, .L578+0x4
	ldr	r1, [sp, #0x4]
	mov	r2, #0xf0
	bl	CpuSet
	ldr	r1, .L578+0x8
	mov	r2, r8
	mov	r3, #0x26
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L578+0xc
	ldr	r0, .L578+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xfa
	mov	r2, #0xc
	bl	LoadPalette
	mov	r1, #0x0
	ldr	r5, [sp]
	mov	r0, #0xf0
	lsl	r0, r0, #0x8
	add	r7, r0, #0
.L571:
	mov	r0, #0x0
	lsl	r3, r1, #0x10
	asr	r4, r3, #0xb
.L575:
	lsl	r2, r0, #0x10
	asr	r2, r2, #0x10
	add	r1, r4, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r6]
	orr	r0, r0, r7
	strh	r0, [r1]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	add	r6, r6, #0x2
	lsr	r0, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0x1f
	ble	.L575	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r3, r1
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L571	@cond_branch
	mov	r0, #0x2
	bl	EnableInterrupts
	ldr	r0, .L578+0x14
	bl	SetHBlankCallback
	mov	r2, r8
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L579:
	.align	2, 0
.L578:
	.word	sVsBarTilemap
	.word	sVsBarTileset
	.word	sVsBarOpponentPalettes
	.word	sVsBarPlayerPalettes
	.word	gSaveBlock2Ptr
	.word	HBCB_BT_Phase2Mugshot
.Lfe72:
	.size	 BT_Phase2Mugshot_LoadGfx,.Lfe72-BT_Phase2Mugshot_LoadGfx
	.align	2, 0
	.type	 BT_Phase2Mugshot_VsBarsSlideIn,function
	.thumb_func
BT_Phase2Mugshot_VsBarsSlideIn:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L599
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r7, .L599+0x4
	ldrh	r0, [r4, #0xa]
	ldrb	r5, [r4, #0xa]
	add	r0, r0, #0x10
	strh	r0, [r4, #0xa]
	mov	r6, #0x0
.L584:
	add	r0, r5, #0
	mov	r1, #0x10
	bl	Sin
	ldrh	r1, [r4, #0xc]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r0, #0
	bge	.L585	@cond_branch
	mov	r2, #0x1
.L585:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf0
	ble	.L586	@cond_branch
	mov	r2, #0xf0
.L586:
	strh	r2, [r7]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r7, r7, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r6, #0x4f
	bls	.L584	@cond_branch
	cmp	r6, #0x9f
	bhi	.L598	@cond_branch
.L591:
	add	r0, r5, #0
	mov	r1, #0x10
	bl	Sin
	ldrh	r1, [r4, #0xe]
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	cmp	r1, #0
	bge	.L592	@cond_branch
	mov	r2, #0x0
.L592:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xef
	ble	.L593	@cond_branch
	mov	r2, #0xef
.L593:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x8
	mov	r1, #0xf0
	orr	r0, r0, r1
	strh	r0, [r7]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r7, r7, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r6, #0x9f
	bls	.L591	@cond_branch
.L598:
	ldrh	r1, [r4, #0xc]
	add	r1, r1, #0x8
	strh	r1, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x8
	strh	r0, [r4, #0xe]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0xf0
	ble	.L595	@cond_branch
	mov	r0, #0xf0
	strh	r0, [r4, #0xc]
.L595:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L596	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
.L596:
	ldr	r0, [r4, #0xc]
	cmp	r0, #0xf0
	bne	.L597	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L597:
	ldr	r0, .L599
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L600:
	.align	2, 0
.L599:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.Lfe73:
	.size	 BT_Phase2Mugshot_VsBarsSlideIn,.Lfe73-BT_Phase2Mugshot_VsBarsSlideIn
	.align	2, 0
	.type	 BT_Phase2Mugshot_StartSpriteSlide,function
	.thumb_func
BT_Phase2Mugshot_StartSpriteSlide:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r2, .L607
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L607+0x4
	add	r5, r2, #0
	mov	r2, #0xf0
.L605:
	strh	r2, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x2
	cmp	r0, #0x9f
	bls	.L605	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x8]
	strh	r1, [r4, #0xa]
	strh	r1, [r4, #0xc]
	strh	r1, [r4, #0xe]
	ldr	r1, [r5]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r1, #0x0
	bl	BT_SetSpriteAsOpponentOrPlayer
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r1, #0x1
	bl	BT_SetSpriteAsOpponentOrPlayer
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	bl	BT_StartSpriteSlide
	mov	r0, #0x61
	bl	PlaySE
	ldr	r1, [r5]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L608:
	.align	2, 0
.L607:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.Lfe74:
	.size	 BT_Phase2Mugshot_StartSpriteSlide,.Lfe74-BT_Phase2Mugshot_StartSpriteSlide
	.align	2, 0
	.type	 BT_Phase2Mugshot_WaitForOpponentInPlace,function
	.thumb_func
BT_Phase2Mugshot_WaitForOpponentInPlace:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L611
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	bl	BT_IsSpriteSlideFinished
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L610	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	bl	BT_StartSpriteSlide
.L610:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L612:
	.align	2, 0
.L611:
	.word	sTransitionStructPtr
.Lfe75:
	.size	 BT_Phase2Mugshot_WaitForOpponentInPlace,.Lfe75-BT_Phase2Mugshot_WaitForOpponentInPlace
	.align	2, 0
	.type	 BT_Phase2Mugshot_WaitForPlayerInPlace,function
	.thumb_func
BT_Phase2Mugshot_WaitForPlayerInPlace:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldr	r7, .L615
	ldr	r1, [r7]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	mov	r2, #0x0
	mov	r8, r2
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	mov	r1, #0x24
	ldrsh	r0, [r6, r1]
	bl	BT_IsSpriteSlideFinished
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L614	@cond_branch
	ldr	r1, [r7]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x0
	bl	SetVBlankCallback
	ldr	r1, .L615+0x4
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L615+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L615+0xc
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	ldr	r4, .L615+0x10
	mov	r5, #0xa0
	lsl	r5, r5, #0x1
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r4, r4, r2
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	mov	r0, r8
	strh	r0, [r6, #0xe]
	strh	r0, [r6, #0x10]
	ldr	r1, [r7]
	mov	r0, #0xbf
	strh	r0, [r1, #0xe]
	ldr	r0, .L615+0x14
	bl	SetVBlankCallback
.L614:
	mov	r0, #0x0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L616:
	.align	2, 0
.L615:
	.word	sTransitionStructPtr
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	gScanlineEffectRegBuffers
	.word	VBCB_BT_Phase2Mugshot2_WhiteFade
.Lfe76:
	.size	 BT_Phase2Mugshot_WaitForPlayerInPlace,.Lfe76-BT_Phase2Mugshot_WaitForPlayerInPlace
	.align	2, 0
	.type	 BT_Phase2Mugshot_ExpandWhiteBand,function
	.thumb_func
BT_Phase2Mugshot_ExpandWhiteBand:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r2, .L629
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r6, #0x1
	ldr	r1, [r2]
	ldrh	r0, [r1, #0x18]
	sub	r0, r0, #0x8
	strh	r0, [r1, #0x18]
	ldrh	r0, [r1, #0x1a]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x1a]
	ldrh	r1, [r4, #0x10]
	mov	r3, #0x10
	ldrsh	r0, [r4, r3]
	mov	ip, r2
	cmp	r0, #0x4f
	bgt	.L618	@cond_branch
	add	r0, r1, #0x2
	strh	r0, [r4, #0x10]
.L618:
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	ble	.L619	@cond_branch
	mov	r0, #0x50
	strh	r0, [r4, #0x10]
.L619:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	mov	r1, #0x1
	and	r0, r0, r1
	ldrh	r3, [r4, #0x10]
	cmp	r0, #0
	beq	.L620	@cond_branch
	mov	r2, #0x0
	lsl	r0, r3, #0x10
	mov	r6, #0x0
	cmp	r0, #0
	blt	.L620	@cond_branch
	mov	r7, #0x50
	ldr	r5, .L629+0x4
.L624:
	lsl	r0, r2, #0x10
	asr	r3, r0, #0x10
	sub	r1, r7, r3
	add	r0, r3, #0
	add	r0, r0, #0x50
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0xf
	add	r1, r1, r5
	ldrh	r0, [r1]
	cmp	r0, #0xf
	bhi	.L625	@cond_branch
	mov	r6, #0x1
	add	r0, r0, #0x1
	strh	r0, [r1]
.L625:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0xf
	add	r1, r0, r5
	ldrh	r0, [r1]
	cmp	r0, #0xf
	bhi	.L623	@cond_branch
	mov	r6, #0x1
	add	r0, r0, #0x1
	strh	r0, [r1]
.L623:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	ldrh	r3, [r4, #0x10]
	cmp	r0, r1
	ble	.L624	@cond_branch
.L620:
	cmp	r3, #0x50
	bne	.L628	@cond_branch
	cmp	r6, #0
	bne	.L628	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L628:
	mov	r1, ip
	ldr	r0, [r1]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L630:
	.align	2, 0
.L629:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.Lfe77:
	.size	 BT_Phase2Mugshot_ExpandWhiteBand,.Lfe77-BT_Phase2Mugshot_ExpandWhiteBand
	.align	2, 0
	.type	 BT_Phase2Mugshot_StartBlackFade,function
	.thumb_func
BT_Phase2Mugshot_StartBlackFade:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L632
	ldr	r0, [r5]
	ldrb	r1, [r0]
	mov	r6, #0x0
	strb	r6, [r0]
	mov	r0, #0x1
	neg	r0, r0
	ldr	r2, .L632+0x4
	mov	r1, #0x10
	bl	BlendPalettes
	ldr	r1, [r5]
	mov	r0, #0xff
	strh	r0, [r1, #0xe]
	strh	r6, [r4, #0xe]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x1
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L633:
	.align	2, 0
.L632:
	.word	sTransitionStructPtr
	.word	0x7fff
.Lfe78:
	.size	 BT_Phase2Mugshot_StartBlackFade,.Lfe78-BT_Phase2Mugshot_StartBlackFade
	.align	2, 0
	.type	 BT_Phase2Mugshot_WaitForBlackFade,function
	.thumb_func
BT_Phase2Mugshot_WaitForBlackFade:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L636
	ldr	r1, [r5]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	ldr	r0, .L636+0x4
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	bl	memset
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf
	ble	.L635	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L635:
	ldr	r0, [r5]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L637:
	.align	2, 0
.L636:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.Lfe79:
	.size	 BT_Phase2Mugshot_WaitForBlackFade,.Lfe79-BT_Phase2Mugshot_WaitForBlackFade
	.align	2, 0
	.type	 BT_Phase2Mugshot_End,function
	.thumb_func
BT_Phase2Mugshot_End:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L639
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L639+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L639+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	BT_BlendPalettesToBlack
	ldr	r0, [r4]
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L640:
	.align	2, 0
.L639:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
.Lfe80:
	.size	 BT_Phase2Mugshot_End,.Lfe80-BT_Phase2Mugshot_End
	.align	2, 0
	.type	 VBCB_BT_Phase2Mugshot1_Slide,function
	.thumb_func
VBCB_BT_Phase2Mugshot1_Slide:
	push	{r4, r5, lr}
	ldr	r4, .L643
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L643+0x4
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L643+0x8
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xa]
	bl	BT_VBSyncOamAndPltt
	ldr	r5, .L643+0xc
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L642	@cond_branch
	ldr	r1, .L643+0x10
	ldr	r0, .L643+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L643+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L642:
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x1c]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r5]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L643+0x1c
	str	r0, [r4]
	ldr	r0, .L643+0x20
	str	r0, [r4, #0x4]
	ldr	r0, .L643+0x24
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe81:
	.size	 VBCB_BT_Phase2Mugshot1_Slide,.Lfe81-VBCB_BT_Phase2Mugshot1_Slide
	.align	2, 0
	.type	 VBCB_BT_Phase2Mugshot2_WhiteFade,function
	.thumb_func
VBCB_BT_Phase2Mugshot2_WhiteFade:
	push	{r4, lr}
	ldr	r4, .L647
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L647+0x4
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0xa]
	ldr	r0, .L647+0x8
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xa]
	bl	BT_VBSyncOamAndPltt
	ldr	r2, .L647+0xc
	ldr	r0, [r2]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L646	@cond_branch
	ldr	r1, .L647+0x10
	ldr	r0, .L647+0x14
	str	r0, [r1]
	mov	r3, #0xf0
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	str	r0, [r1, #0x4]
	ldr	r0, .L647+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L646:
	ldr	r0, [r2]
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, .L647+0x1c
	str	r0, [r4]
	ldr	r0, .L647+0x20
	str	r0, [r4, #0x4]
	ldr	r0, .L647+0x24
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L648:
	.align	2, 0
.L647:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	gScanlineEffectRegBuffers+0x780
	.word	0x4000054
	.word	-0x5dbfffff
.Lfe82:
	.size	 VBCB_BT_Phase2Mugshot2_WhiteFade,.Lfe82-VBCB_BT_Phase2Mugshot2_WhiteFade
	.align	2, 0
	.type	 HBCB_BT_Phase2Mugshot,function
	.thumb_func
HBCB_BT_Phase2Mugshot:
	push	{lr}
	ldr	r0, .L653
	ldrh	r0, [r0]
	cmp	r0, #0x4f
	bhi	.L650	@cond_branch
	ldr	r1, .L653+0x4
	ldr	r0, .L653+0x8
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x18]
	b	.L652
.L654:
	.align	2, 0
.L653:
	.word	0x4000006
	.word	0x4000010
	.word	sTransitionStructPtr
.L650:
	ldr	r1, .L655
	ldr	r0, .L655+0x4
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1a]
.L652:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	0x4000010
	.word	sTransitionStructPtr
.Lfe83:
	.size	 HBCB_BT_Phase2Mugshot,.Lfe83-HBCB_BT_Phase2Mugshot
	.align	2, 0
	.type	 BT_Phase2Mugshots_CreateSprites,function
	.thumb_func
BT_Phase2Mugshots_CreateSprites:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r6, .L658
	mov	r0, #0xa
	strb	r0, [r6]
	ldr	r0, .L658+0x4
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	mov	r9, r1
	add	r0, r0, r9
	ldrb	r0, [r0]
	ldr	r2, .L658+0x8
	lsl	r1, r1, #0x2
	mov	r9, r1
	add	r1, r1, r2
	ldrh	r1, [r1]
	sub	r1, r1, #0x20
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r2, [r2]
	add	r2, r2, #0x2a
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r5, .L658+0xc
	str	r5, [sp]
	mov	r3, #0x0
	bl	CreateTrainerSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r0, .L658+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x1
	bl	PlayerGenderToFrontTrainerPicId_Debug
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	str	r5, [sp]
	mov	r2, #0x6a
	mov	r3, #0x0
	bl	CreateTrainerSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r0, #0xc
	strb	r0, [r6]
	mov	r3, #0x22
	ldrsh	r0, [r4, r3]
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	ldr	r1, .L658+0x14
	add	r5, r5, r1
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	lsl	r6, r0, #0x4
	add	r6, r6, r0
	lsl	r6, r6, #0x2
	add	r6, r6, r1
	ldr	r0, .L658+0x18
	str	r0, [r5, #0x1c]
	str	r0, [r6, #0x1c]
	ldrb	r0, [r5, #0x1]
	mov	r1, #0x3
	orr	r0, r0, r1
	strb	r0, [r5, #0x1]
	ldrb	r0, [r6, #0x1]
	orr	r0, r0, r1
	strb	r0, [r6, #0x1]
	bl	AllocOamMatrix
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x1f
	mov	r8, r3
	mov	r4, r8
	and	r0, r0, r4
	lsl	r0, r0, #0x1
	ldrb	r2, [r5, #0x3]
	mov	r4, #0x3f
	neg	r4, r4
	add	r1, r4, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
	bl	AllocOamMatrix
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrb	r1, [r6, #0x3]
	and	r4, r4, r1
	orr	r4, r4, r0
	strb	r4, [r6, #0x3]
	ldrb	r2, [r5, #0x1]
	mov	r1, #0x3f
	add	r0, r1, #0
	and	r0, r0, r2
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r5, #0x1]
	ldrb	r0, [r6, #0x1]
	and	r1, r1, r0
	orr	r1, r1, r2
	strb	r1, [r6, #0x1]
	ldrb	r0, [r5, #0x3]
	mov	r1, #0xc0
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldrb	r0, [r6, #0x3]
	orr	r0, r0, r1
	strb	r0, [r6, #0x3]
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x3
	mov	r3, #0x3
	bl	CalcCenterToCornerVec
	add	r0, r6, #0
	mov	r1, #0x1
	mov	r2, #0x3
	mov	r3, #0x3
	bl	CalcCenterToCornerVec
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	ldr	r2, .L658+0x1c
	mov	r3, r9
	add	r1, r3, r2
	mov	r4, #0x0
	ldrsh	r1, [r1, r4]
	add	r2, r2, #0x2
	add	r9, r9, r2
	mov	r3, r9
	mov	r4, #0x0
	ldrsh	r2, [r3, r4]
	mov	r3, #0x0
	bl	SetOamMatrixRotationScaling
	ldrb	r0, [r6, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	ldr	r1, .L658+0x20
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r3, #0x0
	bl	SetOamMatrixRotationScaling
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gReservedSpritePaletteCount
	.word	sMugshotsTrainerPicIDsTable
	.word	sMugshotsOpponentCoords
	.word	gDecompressionBuffer
	.word	gSaveBlock2Ptr
	.word	gSprites
	.word	SpriteCB_BT_Phase2Mugshots
	.word	sMugshotsOpponentRotationScales
	.word	-0x200
.Lfe84:
	.size	 BT_Phase2Mugshots_CreateSprites,.Lfe84-BT_Phase2Mugshots_CreateSprites
	.align	2, 0
	.type	 SpriteCB_BT_Phase2Mugshots,function
	.thumb_func
SpriteCB_BT_Phase2Mugshots:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L665
.L661:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L661	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L666:
	.align	2, 0
.L665:
	.word	sBT_Phase2MugshotSpriteFuncs
.Lfe85:
	.size	 SpriteCB_BT_Phase2Mugshots,.Lfe85-SpriteCB_BT_Phase2Mugshots
	.align	2, 0
	.type	 BT_Phase2MugshotsSpriteFuncs_Wait,function
	.thumb_func
BT_Phase2MugshotsSpriteFuncs_Wait:
	mov	r0, #0x0
	bx	lr
.Lfe86:
	.size	 BT_Phase2MugshotsSpriteFuncs_Wait,.Lfe86-BT_Phase2MugshotsSpriteFuncs_Wait
	.align	2, 0
	.type	 BT_Phase2MugshotsSpriteFuncs_InitParams,function
	.thumb_func
BT_Phase2MugshotsSpriteFuncs_InitParams:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	ldr	r1, .L669
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	add	r4, sp, #0x4
	ldr	r1, .L669+0x4
	add	r0, r4, #0
	mov	r2, #0x4
	bl	memcpy
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r5, #0x30]
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	strh	r0, [r5, #0x32]
	mov	r0, #0x1
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L670:
	.align	2, 0
.L669:
	.word	sMugShotSlideVelocity
	.word	sMugShotSlideDeceleration
.Lfe87:
	.size	 BT_Phase2MugshotsSpriteFuncs_InitParams,.Lfe87-BT_Phase2MugshotsSpriteFuncs_InitParams
	.align	2, 0
	.type	 BT_Phase2MugshotsSpriteFuncs_SlideSpriteIn,function
	.thumb_func
BT_Phase2MugshotsSpriteFuncs_SlideSpriteIn:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	ldrh	r3, [r1, #0x20]
	add	r2, r0, r3
	strh	r2, [r1, #0x20]
	mov	r3, #0x3c
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L675	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x84
	bgt	.L673	@cond_branch
	b	.L676
.L675:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x67
	ble	.L673	@cond_branch
.L676:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
.L673:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe88:
	.size	 BT_Phase2MugshotsSpriteFuncs_SlideSpriteIn,.Lfe88-BT_Phase2MugshotsSpriteFuncs_SlideSpriteIn
	.align	2, 0
	.type	 BT_Phase2MugshotsSpriteFuncs_DecelerateSprite,function
	.thumb_func
BT_Phase2MugshotsSpriteFuncs_DecelerateSprite:
	push	{lr}
	add	r2, r0, #0
	ldrh	r3, [r2, #0x32]
	ldrh	r0, [r2, #0x30]
	add	r1, r3, r0
	strh	r1, [r2, #0x30]
	ldrh	r0, [r2, #0x20]
	add	r0, r0, r1
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bne	.L678	@cond_branch
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	neg	r0, r3
	strh	r0, [r2, #0x32]
	mov	r0, #0x1
	strh	r0, [r2, #0x3a]
.L678:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe89:
	.size	 BT_Phase2MugshotsSpriteFuncs_DecelerateSprite,.Lfe89-BT_Phase2MugshotsSpriteFuncs_DecelerateSprite
	.align	2, 0
	.type	 BT_Phase2MugshotsSpriteFuncs_DecelerateSprite2,function
	.thumb_func
BT_Phase2MugshotsSpriteFuncs_DecelerateSprite2:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x30]
	add	r0, r0, r1
	strh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x20]
	add	r1, r1, r0
	strh	r1, [r2, #0x20]
	add	r1, r1, #0x1f
	lsl	r1, r1, #0x10
	mov	r0, #0x97
	lsl	r0, r0, #0x11
	cmp	r1, r0
	bls	.L680	@cond_branch
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
.L680:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 BT_Phase2MugshotsSpriteFuncs_DecelerateSprite2,.Lfe90-BT_Phase2MugshotsSpriteFuncs_DecelerateSprite2
	.align	2, 0
	.type	 BT_SetSpriteAsOpponentOrPlayer,function
	.thumb_func
BT_SetSpriteAsOpponentOrPlayer:
	ldr	r3, .L682
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	strh	r1, [r2, #0x3c]
	bx	lr
.L683:
	.align	2, 0
.L682:
	.word	gSprites
.Lfe91:
	.size	 BT_SetSpriteAsOpponentOrPlayer,.Lfe91-BT_SetSpriteAsOpponentOrPlayer
	.align	2, 0
	.type	 BT_StartSpriteSlide,function
	.thumb_func
BT_StartSpriteSlide:
	ldr	r2, .L685
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	bx	lr
.L686:
	.align	2, 0
.L685:
	.word	gSprites
.Lfe92:
	.size	 BT_StartSpriteSlide,.Lfe92-BT_StartSpriteSlide
	.align	2, 0
	.type	 BT_IsSpriteSlideFinished,function
	.thumb_func
BT_IsSpriteSlideFinished:
	ldr	r2, .L688
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r2, #0x3a
	ldrsh	r0, [r1, r2]
	bx	lr
.L689:
	.align	2, 0
.L688:
	.word	gSprites
.Lfe93:
	.size	 BT_IsSpriteSlideFinished,.Lfe93-BT_IsSpriteSlideFinished
	.align	2, 0
	.type	 BT_Phase2SlicedScreen,function
	.thumb_func
BT_Phase2SlicedScreen:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L695
	ldr	r2, .L695+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L691:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L691	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L696:
	.align	2, 0
.L695:
	.word	sBT_Phase2SlicedScreenFuncs
	.word	gTasks
.Lfe94:
	.size	 BT_Phase2SlicedScreen,.Lfe94-BT_Phase2SlicedScreen
	.align	2, 0
	.type	 BT_Phase2SlicedScreen_Init,function
	.thumb_func
BT_Phase2SlicedScreen_Init:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	mov	r3, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	mov	r0, #0x1
	strh	r0, [r5, #0xe]
	ldr	r2, .L703
	ldr	r1, [r2]
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	strh	r3, [r1, #0x4]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	ldr	r4, .L703+0x4
	add	r6, r2, #0
	mov	r2, #0xf0
.L701:
	lsl	r1, r3, #0x1
	add	r1, r1, r4
	ldr	r0, [r6]
	ldrh	r0, [r0, #0x14]
	strh	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0xa0
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	strh	r2, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x9f
	bls	.L701	@cond_branch
	mov	r0, #0x2
	bl	EnableInterrupts
	ldr	r0, .L703+0x8
	bl	SetVBlankCallback
	ldr	r0, .L703+0xc
	bl	SetHBlankCallback
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x1
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L704:
	.align	2, 0
.L703:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers+0x780
	.word	VBCB_BT_Phase2SlicedScreen
	.word	HBCB_BT_Phase2SlicedScreen
.Lfe95:
	.size	 BT_Phase2SlicedScreen_Init,.Lfe95-BT_Phase2SlicedScreen_Init
	.align	2, 0
	.type	 BT_Phase2SlicedScreen_UpdateOffsets,function
	.thumb_func
BT_Phase2SlicedScreen_UpdateOffsets:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r3, r0, #0
	ldr	r2, .L718
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldrh	r0, [r3, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r3, #0xa]
	add	r0, r0, r1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r8, r2
	cmp	r0, #0xf0
	ble	.L706	@cond_branch
	mov	r0, #0xf0
	strh	r0, [r3, #0xa]
.L706:
	ldrh	r4, [r3, #0xc]
	mov	r0, #0xc
	ldrsh	r1, [r3, r0]
	ldr	r0, .L718+0x4
	ldrh	r2, [r3, #0xe]
	cmp	r1, r0
	bgt	.L707	@cond_branch
	add	r0, r4, r2
	strh	r0, [r3, #0xc]
.L707:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7f
	bgt	.L708	@cond_branch
	lsl	r0, r2, #0x1
	strh	r0, [r3, #0xe]
.L708:
	mov	r5, #0x0
	ldr	r7, .L718+0x8
	mov	r1, #0xa0
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	mov	ip, r1
	mov	r6, r8
.L712:
	lsl	r0, r5, #0x1
	add	r2, r0, r7
	mov	r1, ip
	add	r4, r0, r1
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L713	@cond_branch
	ldr	r1, [r6]
	ldrh	r0, [r3, #0xa]
	ldrh	r1, [r1, #0x14]
	add	r0, r0, r1
	strh	r0, [r2]
	ldrh	r1, [r3, #0xa]
	mov	r0, #0xf0
	sub	r0, r0, r1
	b	.L717
.L719:
	.align	2, 0
.L718:
	.word	sTransitionStructPtr
	.word	0xfff
	.word	gScanlineEffectRegBuffers
.L713:
	ldr	r0, [r6]
	ldrh	r0, [r0, #0x14]
	ldrh	r1, [r3, #0xa]
	sub	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r3, #0xa]
	lsl	r0, r0, #0x8
	mov	r1, #0xf1
	orr	r0, r0, r1
.L717:
	strh	r0, [r4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x9f
	bls	.L712	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0xef
	ble	.L716	@cond_branch
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
.L716:
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r0, #0x0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 BT_Phase2SlicedScreen_UpdateOffsets,.Lfe96-BT_Phase2SlicedScreen_UpdateOffsets
	.align	2, 0
	.type	 BT_Phase2SlicedScreen_End,function
	.thumb_func
BT_Phase2SlicedScreen_End:
	push	{lr}
	ldr	r1, .L721
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L721+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L721+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	BT_BlendPalettesToBlack
	ldr	r0, .L721+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L722:
	.align	2, 0
.L721:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	BT_Phase2SlicedScreen
.Lfe97:
	.size	 BT_Phase2SlicedScreen_End,.Lfe97-BT_Phase2SlicedScreen_End
	.align	2, 0
	.type	 VBCB_BT_Phase2SlicedScreen,function
	.thumb_func
VBCB_BT_Phase2SlicedScreen:
	push	{r4, r5, lr}
	ldr	r5, .L725
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L725+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L725+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	BT_VBSyncOamAndPltt
	ldr	r4, .L725+0xc
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L724	@cond_branch
	ldr	r1, .L725+0x10
	ldr	r0, .L725+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L725+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L724:
	ldr	r0, .L725+0x1c
	str	r0, [r5]
	ldr	r0, .L725+0x20
	str	r0, [r5, #0x4]
	ldr	r0, .L725+0x24
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L726:
	.align	2, 0
.L725:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7ffffec0
	.word	gScanlineEffectRegBuffers+0x8c0
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe98:
	.size	 VBCB_BT_Phase2SlicedScreen,.Lfe98-VBCB_BT_Phase2SlicedScreen
	.align	2, 0
	.type	 HBCB_BT_Phase2SlicedScreen,function
	.thumb_func
HBCB_BT_Phase2SlicedScreen:
	ldr	r1, .L728
	ldr	r0, .L728+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L728+0x8
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	bx	lr
.L729:
	.align	2, 0
.L728:
	.word	gScanlineEffectRegBuffers
	.word	0x4000006
	.word	0x4000014
.Lfe99:
	.size	 HBCB_BT_Phase2SlicedScreen,.Lfe99-HBCB_BT_Phase2SlicedScreen
	.align	2, 0
	.type	 BT_Phase2WhiteFadeInStripes,function
	.thumb_func
BT_Phase2WhiteFadeInStripes:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L735
	ldr	r2, .L735+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L731:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L731	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L736:
	.align	2, 0
.L735:
	.word	sBT_Phase2WhiteFadeInStripesFuncs
	.word	gTasks
.Lfe100:
	.size	 BT_Phase2WhiteFadeInStripes,.Lfe100-BT_Phase2WhiteFadeInStripes
	.align	2, 0
	.type	 BT_Phase2WhiteFadeInStripes_Init,function
	.thumb_func
BT_Phase2WhiteFadeInStripes_Init:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	ldr	r0, .L743
	ldr	r1, [r0]
	mov	r2, #0x0
	mov	r0, #0xbf
	strh	r0, [r1, #0xe]
	strh	r2, [r1, #0x12]
	mov	r0, #0x1e
	strh	r0, [r1, #0x2]
	mov	r0, #0x3f
	strh	r0, [r1, #0x4]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r2, .L743+0x4
	mov	r4, #0x0
	mov	r3, #0xf0
.L741:
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	strh	r4, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xa0
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	strh	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x9f
	bls	.L741	@cond_branch
	mov	r0, #0x2
	bl	EnableInterrupts
	ldr	r0, .L743+0x8
	bl	SetHBlankCallback
	ldr	r0, .L743+0xc
	bl	SetVBlankCallback
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L744:
	.align	2, 0
.L743:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers+0x780
	.word	HBCB_BT_Phase2WhiteFadeInStripes
	.word	VBCB_BT_Phase2WhiteFadeInStripes1
.Lfe101:
	.size	 BT_Phase2WhiteFadeInStripes_Init,.Lfe101-BT_Phase2WhiteFadeInStripes_Init
	.align	2, 0
	.type	 BT_Phase2WhiteFadeInStripes_SetupSprites,function
	.thumb_func
BT_Phase2WhiteFadeInStripes_SetupSprites:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	ldr	r1, .L751
	mov	r0, sp
	mov	r2, #0xc
	bl	memcpy
	mov	r5, #0x0
	mov	r4, #0x0
.L749:
	ldr	r0, .L751+0x4
	bl	CreateInvisibleSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L751+0x8
	add	r2, r1, r0
	mov	r0, #0xf0
	strh	r0, [r2, #0x20]
	strh	r4, [r2, #0x22]
	lsl	r1, r5, #0x10
	asr	r1, r1, #0x10
	lsl	r0, r1, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r2, #0x38]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsl	r0, r4, #0x10
	mov	r3, #0xd8
	lsl	r3, r3, #0xd
	add	r0, r0, r3
	lsr	r4, r0, #0x10
	lsr	r5, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x5
	ble	.L749	@cond_branch
	ldrh	r0, [r2, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x3a]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L752:
	.align	2, 0
.L751:
	.word	sWhiteStripeDelay
	.word	SpriteCB_BT_Phase2WhiteFadeInStripes
	.word	gSprites
.Lfe102:
	.size	 BT_Phase2WhiteFadeInStripes_SetupSprites,.Lfe102-BT_Phase2WhiteFadeInStripes_SetupSprites
	.align	2, 0
	.type	 BT_Phase2WhiteFadeInStripes_IsWhiteFadeDone,function
	.thumb_func
BT_Phase2WhiteFadeInStripes_IsWhiteFadeDone:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, .L755
	ldr	r1, [r2]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, [r2]
	mov	r1, #0x20
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x5
	ble	.L754	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	ldr	r2, .L755+0x4
	mov	r1, #0x10
	bl	BlendPalettes
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L754:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L756:
	.align	2, 0
.L755:
	.word	sTransitionStructPtr
	.word	0x7fff
.Lfe103:
	.size	 BT_Phase2WhiteFadeInStripes_IsWhiteFadeDone,.Lfe103-BT_Phase2WhiteFadeInStripes_IsWhiteFadeDone
	.align	2, 0
	.type	 BT_Phase2WhiteFadeInStripes_Stop,function
	.thumb_func
BT_Phase2WhiteFadeInStripes_Stop:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r5, .L758
	ldr	r0, [r5]
	ldrb	r1, [r0]
	mov	r4, #0x0
	strb	r4, [r0]
	ldr	r1, .L758+0x4
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L758+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L758+0xc
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	ldr	r1, [r5]
	mov	r0, #0xf0
	strh	r0, [r1, #0x6]
	strh	r4, [r1, #0x12]
	mov	r0, #0xff
	strh	r0, [r1, #0xe]
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	strh	r4, [r1, #0x20]
	ldr	r0, .L758+0x10
	bl	SetVBlankCallback
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L759:
	.align	2, 0
.L758:
	.word	sTransitionStructPtr
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	VBCB_BT_Phase2WhiteFadeInStripes2
.Lfe104:
	.size	 BT_Phase2WhiteFadeInStripes_Stop,.Lfe104-BT_Phase2WhiteFadeInStripes_Stop
	.align	2, 0
	.type	 BT_Phase2WhiteFadeInStripes_IsDone,function
	.thumb_func
BT_Phase2WhiteFadeInStripes_IsDone:
	push	{lr}
	ldr	r0, .L762
	ldr	r1, [r0]
	mov	r2, #0xf0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	ldrh	r2, [r1, #0x20]
	add	r0, r0, r2
	strh	r0, [r1, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x10
	bls	.L761	@cond_branch
	bl	BT_BlendPalettesToBlack
	ldr	r0, .L762+0x4
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L761:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L763:
	.align	2, 0
.L762:
	.word	sTransitionStructPtr
	.word	BT_Phase2WhiteFadeInStripes
.Lfe105:
	.size	 BT_Phase2WhiteFadeInStripes_IsDone,.Lfe105-BT_Phase2WhiteFadeInStripes_IsDone
	.align	2, 0
	.type	 VBCB_BT_Phase2WhiteFadeInStripes1,function
	.thumb_func
VBCB_BT_Phase2WhiteFadeInStripes1:
	push	{r4, r5, lr}
	ldr	r5, .L766
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L766+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L766+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	BT_VBSyncOamAndPltt
	ldr	r4, .L766+0xc
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x6]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L765	@cond_branch
	ldr	r1, .L766+0x10
	ldr	r0, .L766+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L766+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L765:
	ldr	r0, .L766+0x1c
	str	r0, [r5]
	ldr	r0, .L766+0x20
	str	r0, [r5, #0x4]
	ldr	r0, .L766+0x24
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L767:
	.align	2, 0
.L766:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7ffffec0
	.word	gScanlineEffectRegBuffers+0x8c0
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe106:
	.size	 VBCB_BT_Phase2WhiteFadeInStripes1,.Lfe106-VBCB_BT_Phase2WhiteFadeInStripes1
	.align	2, 0
	.type	 VBCB_BT_Phase2WhiteFadeInStripes2,function
	.thumb_func
VBCB_BT_Phase2WhiteFadeInStripes2:
	push	{r4, lr}
	bl	BT_VBSyncOamAndPltt
	ldr	r4, .L769
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x12]
	mov	r0, #0x54
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x6]
	mov	r0, #0x40
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L770:
	.align	2, 0
.L769:
	.word	sTransitionStructPtr
.Lfe107:
	.size	 VBCB_BT_Phase2WhiteFadeInStripes2,.Lfe107-VBCB_BT_Phase2WhiteFadeInStripes2
	.align	2, 0
	.type	 HBCB_BT_Phase2WhiteFadeInStripes,function
	.thumb_func
HBCB_BT_Phase2WhiteFadeInStripes:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	ldr	r0, .L773
	ldrh	r0, [r0]
	strh	r0, [r1]
	mov	r0, sp
	ldrh	r0, [r0]
	cmp	r0, #0xe3
	bne	.L772	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
.L772:
	ldr	r2, .L773+0x4
	ldr	r1, .L773+0x8
	mov	r0, sp
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r3, #0xf0
	lsl	r3, r3, #0x3
	add	r1, r1, r3
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L774:
	.align	2, 0
.L773:
	.word	0x4000006
	.word	0x4000054
	.word	gScanlineEffectRegBuffers
.Lfe108:
	.size	 HBCB_BT_Phase2WhiteFadeInStripes,.Lfe108-HBCB_BT_Phase2WhiteFadeInStripes
	.align	2, 0
	.type	 SpriteCB_BT_Phase2WhiteFadeInStripes,function
	.thumb_func
SpriteCB_BT_Phase2WhiteFadeInStripes:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x38]
	mov	r2, #0x38
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L776	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x38]
	mov	r1, #0x3a
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L778	@cond_branch
	ldr	r0, .L793
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L778
.L794:
	.align	2, 0
.L793:
	.word	sTransitionStructPtr
.L776:
	mov	r2, #0x22
	ldrsh	r0, [r3, r2]
	lsl	r0, r0, #0x1
	ldr	r1, .L795
	add	r7, r0, r1
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	add	r6, r0, r1
	mov	r1, #0x3a
	ldrsh	r0, [r3, r1]
	mov	r5, #0x1b
	cmp	r0, #0
	beq	.L779	@cond_branch
	mov	r5, #0x19
.L779:
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L782	@cond_branch
.L784:
	lsl	r1, r4, #0x1
	add	r2, r1, r7
	ldrh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r3, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r5
	bcc	.L784	@cond_branch
.L782:
	mov	r2, #0x20
	ldrsh	r0, [r3, r2]
	ldrh	r2, [r3, #0x20]
	cmp	r0, #0
	bne	.L786	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	bne	.L786	@cond_branch
	mov	r0, #0x1
	strh	r0, [r3, #0x30]
.L786:
	add	r1, r2, #0
	sub	r1, r1, #0x18
	strh	r1, [r3, #0x20]
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0xc0
	strh	r0, [r3, #0x2e]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bge	.L787	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x20]
.L787:
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	cmp	r0, r1
	ble	.L788	@cond_branch
	strh	r1, [r3, #0x2e]
.L788:
	mov	r2, #0x3a
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L789	@cond_branch
	ldr	r0, .L795+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1]
.L789:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L778	@cond_branch
	mov	r2, #0x3a
	ldrsh	r0, [r3, r2]
	ldr	r1, .L795+0x4
	cmp	r0, #0
	beq	.L792	@cond_branch
	ldr	r0, [r1]
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	cmp	r0, #0x4
	ble	.L778	@cond_branch
.L792:
	ldr	r1, [r1]
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	add	r0, r3, #0
	bl	DestroySprite
.L778:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L796:
	.align	2, 0
.L795:
	.word	gScanlineEffectRegBuffers
	.word	sTransitionStructPtr
.Lfe109:
	.size	 SpriteCB_BT_Phase2WhiteFadeInStripes,.Lfe109-SpriteCB_BT_Phase2WhiteFadeInStripes
	.align	2, 0
	.type	 BT_Phase2GridSquares,function
	.thumb_func
BT_Phase2GridSquares:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L802
	ldr	r2, .L802+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L798:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L798	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L803:
	.align	2, 0
.L802:
	.word	sBT_Phase2GridSquaresFuncs
	.word	gTasks
.Lfe110:
	.size	 BT_Phase2GridSquares,.Lfe110-BT_Phase2GridSquares
	.align	2, 0
	.type	 BT_Phase2GridSquares_LoadGfx,function
	.thumb_func
BT_Phase2GridSquares_LoadGfx:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r0, sp, #0x4
	add	r1, sp, #0x8
	bl	BT_GetBg0TilemapAndTilesetBase
	ldr	r0, .L805
	ldr	r1, [sp, #0x8]
	mov	r2, #0x10
	bl	CpuSet
	mov	r1, sp
	mov	r2, #0xf0
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, [sp, #0x4]
	ldr	r2, .L805+0x4
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L805+0x8
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x0
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.L806:
	.align	2, 0
.L805:
	.word	sGridSquareTileset
	.word	0x1000400
	.word	sSlidingPokeballBigPokeballPalette
.Lfe111:
	.size	 BT_Phase2GridSquares_LoadGfx,.Lfe111-BT_Phase2GridSquares_LoadGfx
	.align	2, 0
	.type	 BT_Phase2GridSquares_UpdateTileset,function
	.thumb_func
BT_Phase2GridSquares_UpdateTileset:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L808	@cond_branch
	mov	r0, sp
	bl	BT_GetBg0TilesetBase
	mov	r0, #0x3
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x5
	ldr	r1, .L810
	add	r0, r0, r1
	ldr	r1, [sp]
	mov	r2, #0x10
	bl	CpuSet
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xd
	ble	.L808	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x10
	strh	r0, [r4, #0xa]
.L808:
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.L811:
	.align	2, 0
.L810:
	.word	sGridSquareTileset
.Lfe112:
	.size	 BT_Phase2GridSquares_UpdateTileset,.Lfe112-BT_Phase2GridSquares_UpdateTileset
	.align	2, 0
	.type	 BT_Phase2GridSquares_IsDone,function
	.thumb_func
BT_Phase2GridSquares_IsDone:
	push	{lr}
	ldrh	r1, [r0, #0xa]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xa]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bne	.L813	@cond_branch
	bl	BT_BlendPalettesToBlack
	ldr	r0, .L814
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L813:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L815:
	.align	2, 0
.L814:
	.word	BT_Phase2GridSquares
.Lfe113:
	.size	 BT_Phase2GridSquares_IsDone,.Lfe113-BT_Phase2GridSquares_IsDone
	.align	2, 0
	.type	 BT_Phase2BlackDoodles,function
	.thumb_func
BT_Phase2BlackDoodles:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L821
	ldr	r2, .L821+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L817:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L817	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L822:
	.align	2, 0
.L821:
	.word	sBT_Phase2BlackDoodlesFuncs
	.word	gTasks
.Lfe114:
	.size	 BT_Phase2BlackDoodles,.Lfe114-BT_Phase2BlackDoodles
	.align	2, 0
	.type	 BT_Phase2BlackDoodles_Init,function
	.thumb_func
BT_Phase2BlackDoodles_Init:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	BT_InitCtrlBlk
	bl	ScanlineEffect_Clear
	ldr	r0, .L829
	ldr	r1, [r0]
	mov	r2, #0x0
	mov	r0, #0x3f
	strh	r0, [r1, #0x2]
	strh	r2, [r1, #0x4]
	mov	r0, #0xa0
	strh	r0, [r1, #0x8]
	mov	r1, #0x0
	ldr	r2, .L829+0x4
	mov	r3, #0xf0
	add	r4, r2, #0
.L827:
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	strh	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x9f
	bls	.L827	@cond_branch
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r1, r4, r0
	add	r0, r4, #0
	mov	r2, #0xa0
	bl	CpuSet
	ldr	r0, .L829+0x8
	bl	SetVBlankCallback
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x1
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L830:
	.align	2, 0
.L829:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
	.word	VBCB_BT_Phase2BlackDoodles
.Lfe115:
	.size	 BT_Phase2BlackDoodles_Init,.Lfe115-BT_Phase2BlackDoodles_Init
	.align	2, 0
	.type	 BT_Phase2BlackDoodles_InitSingleBrush,function
	.thumb_func
BT_Phase2BlackDoodles_InitSingleBrush:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	mov	r8, r0
	ldr	r0, .L832
	ldr	r0, [r0]
	add	r0, r0, #0x24
	ldr	r6, .L832+0x4
	mov	r2, r8
	mov	r3, #0xa
	ldrsh	r1, [r2, r3]
	lsl	r4, r1, #0x2
	add	r4, r4, r1
	lsl	r4, r4, #0x1
	add	r1, r4, r6
	mov	r5, #0x0
	ldrsh	r1, [r1, r5]
	add	r2, r6, #0x2
	add	r2, r4, r2
	mov	r3, #0x0
	ldrsh	r2, [r2, r3]
	add	r3, r6, #0x4
	add	r3, r4, r3
	mov	r5, #0x0
	ldrsh	r3, [r3, r5]
	add	r5, r6, #0x6
	add	r4, r4, r5
	mov	r5, #0x0
	ldrsh	r4, [r4, r5]
	str	r4, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	bl	BT_DiagonalSegment_InitParams
	mov	r0, r8
	mov	r2, #0xa
	ldrsh	r1, [r0, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r6, r6, #0x8
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r3, r8
	strh	r0, [r3, #0xc]
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	mov	r0, #0x1
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L833:
	.align	2, 0
.L832:
	.word	sTransitionStructPtr
	.word	sBlackDoodlesSegments
.Lfe116:
	.size	 BT_Phase2BlackDoodles_InitSingleBrush,.Lfe116-BT_Phase2BlackDoodles_InitSingleBrush
	.align	2, 0
	.type	 BT_Phase2BlackDoodles_DrawSingleBrush,function
	.thumb_func
BT_Phase2BlackDoodles_DrawSingleBrush:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r6, r0, #0
	ldr	r0, .L848
	ldr	r1, [r0]
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r8, r0
	mov	r7, #0x0
	ldr	r0, .L848+0x4
	mov	r9, r0
.L838:
	ldr	r1, .L848+0x4
	ldr	r0, .L848
	ldr	r2, [r0]
	mov	r3, #0x2a
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsr	r3, r0, #0x8
	mov	r5, #0xff
	and	r5, r5, r0
	mov	r4, #0xc
	ldrsh	r0, [r6, r4]
	cmp	r0, #0
	bne	.L839	@cond_branch
	mov	r1, #0x28
	ldrsh	r0, [r2, r1]
	cmp	r3, r0
	bge	.L840	@cond_branch
	ldrh	r3, [r2, #0x28]
.L840:
	lsl	r0, r3, #0x10
	lsl	r1, r5, #0x10
	cmp	r0, r1
	ble	.L842	@cond_branch
	lsr	r3, r1, #0x10
	b	.L842
.L849:
	.align	2, 0
.L848:
	.word	sTransitionStructPtr
	.word	gScanlineEffectRegBuffers
.L839:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r4, #0x28
	ldrsh	r1, [r2, r4]
	cmp	r0, r1
	ble	.L843	@cond_branch
	ldrh	r5, [r2, #0x28]
.L843:
	lsl	r0, r5, #0x10
	lsl	r1, r3, #0x10
	cmp	r0, r1
	bgt	.L842	@cond_branch
	lsr	r5, r1, #0x10
.L842:
	ldr	r0, .L850
	ldr	r4, [r0]
	mov	r0, #0x2a
	ldrsh	r2, [r4, r0]
	lsl	r2, r2, #0x1
	add	r2, r2, r9
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x8
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	orr	r0, r0, r1
	strh	r0, [r2]
	cmp	r7, #0
	beq	.L845	@cond_branch
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L836
.L851:
	.align	2, 0
.L850:
	.word	sTransitionStructPtr
.L845:
	add	r0, r4, #0
	add	r0, r0, #0x24
	mov	r1, #0x1
	mov	r2, #0x1
	bl	BT_DiagonalSegment_ComputePointOnSegment
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r1, r8
	lsl	r0, r1, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r0, r3
	lsr	r4, r0, #0x10
	mov	r8, r4
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L838	@cond_branch
.L836:
	ldr	r0, .L852
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L853:
	.align	2, 0
.L852:
	.word	sTransitionStructPtr
.Lfe117:
	.size	 BT_Phase2BlackDoodles_DrawSingleBrush,.Lfe117-BT_Phase2BlackDoodles_DrawSingleBrush
	.align	2, 0
	.type	 BT_Phase2BlackDoodles_IsDone,function
	.thumb_func
BT_Phase2BlackDoodles_IsDone:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L855	@cond_branch
	ldr	r1, .L858
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L858+0x4
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L858+0x8
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bl	BT_BlendPalettesToBlack
	ldr	r0, .L858+0xc
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	b	.L857
.L859:
	.align	2, 0
.L858:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	BT_Phase2BlackDoodles
.L855:
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	ldr	r1, .L860
	mov	r3, #0xa
	ldrsh	r0, [r2, r3]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2, #0xe]
	mov	r0, #0x1
.L857:
	pop	{r1}
	bx	r1
.L861:
	.align	2, 0
.L860:
	.word	sBlackDoodlesDelay
.Lfe118:
	.size	 BT_Phase2BlackDoodles_IsDone,.Lfe118-BT_Phase2BlackDoodles_IsDone
	.align	2, 0
	.type	 BT_Phase2BlackDoodles_NextBrush,function
	.thumb_func
BT_Phase2BlackDoodles_NextBrush:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L863	@cond_branch
	mov	r0, #0x0
	b	.L865
.L863:
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
.L865:
	pop	{r1}
	bx	r1
.Lfe119:
	.size	 BT_Phase2BlackDoodles_NextBrush,.Lfe119-BT_Phase2BlackDoodles_NextBrush
	.align	2, 0
	.type	 VBCB_BT_Phase2BlackDoodles,function
	.thumb_func
VBCB_BT_Phase2BlackDoodles:
	push	{r4, r5, lr}
	ldr	r5, .L868
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L868+0x4
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r1, [r5, #0xa]
	ldr	r0, .L868+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xa]
	bl	BT_VBSyncOamAndPltt
	ldr	r4, .L868+0xc
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L867	@cond_branch
	ldr	r1, .L868+0x10
	ldr	r0, .L868+0x14
	str	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	str	r0, [r1, #0x4]
	ldr	r0, .L868+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
.L867:
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x8]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r4, .L868+0x14
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r4, r4, r0
	ldrh	r1, [r4]
	mov	r0, #0x40
	bl	SetGpuReg
	str	r4, [r5]
	ldr	r0, .L868+0x1c
	str	r0, [r5, #0x4]
	ldr	r0, .L868+0x20
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L869:
	.align	2, 0
.L868:
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
	.word	sTransitionStructPtr
	.word	0x40000d4
	.word	gScanlineEffectRegBuffers
	.word	-0x7fffff60
	.word	0x4000040
	.word	-0x5dbfffff
.Lfe120:
	.size	 VBCB_BT_Phase2BlackDoodles,.Lfe120-VBCB_BT_Phase2BlackDoodles
	.align	2, 0
	.type	 BT_CreatePhase1SubTask,function
	.thumb_func
BT_CreatePhase1SubTask:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x4
	mov	r8, r0
	add	r4, r1, #0
	add	r5, r2, #0
	add	r6, r3, #0
	ldr	r3, [sp, #0x18]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r0, .L871
	mov	r1, #0x3
	str	r3, [sp]
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L871+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, r8
	strh	r0, [r1, #0xa]
	strh	r4, [r1, #0xc]
	strh	r5, [r1, #0xe]
	strh	r6, [r1, #0x10]
	ldr	r3, [sp]
	strh	r3, [r1, #0x12]
	strh	r0, [r1, #0x14]
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L872:
	.align	2, 0
.L871:
	.word	BT_Phase1SubTask
	.word	gTasks
.Lfe121:
	.size	 BT_CreatePhase1SubTask,.Lfe121-BT_CreatePhase1SubTask
	.align	2, 0
	.type	 BT_IsPhase1Done,function
	.thumb_func
BT_IsPhase1Done:
	push	{lr}
	ldr	r0, .L877
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L874	@cond_branch
	mov	r0, #0x0
	b	.L876
.L878:
	.align	2, 0
.L877:
	.word	BT_Phase1SubTask
.L874:
	mov	r0, #0x1
.L876:
	pop	{r1}
	bx	r1
.Lfe122:
	.size	 BT_IsPhase1Done,.Lfe122-BT_IsPhase1Done
	.align	2, 0
	.type	 BT_Phase1SubTask,function
	.thumb_func
BT_Phase1SubTask:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L884
	ldr	r2, .L884+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L880:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L880	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L885:
	.align	2, 0
.L884:
	.word	sBT_Phase1FadeFuncs
	.word	gTasks
.Lfe123:
	.size	 BT_Phase1SubTask,.Lfe123-BT_Phase1SubTask
	.align	2, 0
	.type	 BT_Phase1_FadeOut,function
	.thumb_func
BT_Phase1_FadeOut:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L888	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L887	@cond_branch
.L888:
	ldrh	r0, [r4, #0xa]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0x16]
	add	r0, r0, r1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L889	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0x16]
.L889:
	mov	r0, #0x1
	neg	r0, r0
	ldrb	r1, [r4, #0x16]
	ldr	r2, .L891
	bl	BlendPalettes
.L887:
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	ble	.L890	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	strh	r0, [r4, #0x14]
.L890:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L892:
	.align	2, 0
.L891:
	.word	0x2d6b
.Lfe124:
	.size	 BT_Phase1_FadeOut,.Lfe124-BT_Phase1_FadeOut
	.align	2, 0
	.type	 BT_Phase1_FadeIn,function
	.thumb_func
BT_Phase1_FadeIn:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L895	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L894	@cond_branch
.L895:
	ldrh	r0, [r4, #0xc]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x16]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L896	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x16]
.L896:
	mov	r0, #0x1
	neg	r0, r0
	ldrb	r1, [r4, #0x16]
	ldr	r2, .L900
	bl	BlendPalettes
.L894:
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L897	@cond_branch
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L898	@cond_branch
	ldr	r0, .L900+0x4
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	b	.L897
.L901:
	.align	2, 0
.L900:
	.word	0x2d6b
	.word	BT_Phase1SubTask
.L898:
	ldrh	r0, [r4, #0xa]
	strh	r0, [r4, #0x14]
	strh	r1, [r4, #0x8]
.L897:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe125:
	.size	 BT_Phase1_FadeIn,.Lfe125-BT_Phase1_FadeIn
	.align	2, 0
	.type	 BT_InitCtrlBlk,function
	.thumb_func
BT_InitCtrlBlk:
	push	{r4, lr}
	ldr	r4, .L903
	ldr	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x3c
	bl	memset
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x14
	add	r1, r1, #0x16
	bl	FieldCameraGetPixelOffsetAtGround
	pop	{r4}
	pop	{r0}
	bx	r0
.L904:
	.align	2, 0
.L903:
	.word	sTransitionStructPtr
.Lfe126:
	.size	 BT_InitCtrlBlk,.Lfe126-BT_InitCtrlBlk
	.align	2, 0
	.type	 BT_VBSyncOamAndPltt,function
	.thumb_func
BT_VBSyncOamAndPltt:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 BT_VBSyncOamAndPltt,.Lfe127-BT_VBSyncOamAndPltt
	.align	2, 0
	.type	 BT_GetBg0TilesetBase,function
	.thumb_func
BT_GetBg0TilesetBase:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x8
	bl	GetGpuReg
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x12
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe128:
	.size	 BT_GetBg0TilesetBase,.Lfe128-BT_GetBg0TilesetBase
	.align	2, 0
	.type	 BT_GetBg0TilemapAndTilesetBase,function
	.thumb_func
BT_GetBg0TilemapAndTilesetBase:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r0, #0x8
	bl	GetGpuReg
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x18
	mov	r0, #0x1f
	and	r4, r4, r0
	mov	r0, #0x8
	bl	GetGpuReg
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x12
	lsl	r4, r4, #0xb
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r4, r4, r1
	str	r4, [r5]
	add	r0, r0, r1
	str	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 BT_GetBg0TilemapAndTilesetBase,.Lfe129-BT_GetBg0TilemapAndTilesetBase
	.align	2, 0
	.type	 BT_BlendPalettesToBlack,function
	.thumb_func
BT_BlendPalettesToBlack:
	push	{lr}
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	pop	{r0}
	bx	r0
.Lfe130:
	.size	 BT_BlendPalettesToBlack,.Lfe130-BT_BlendPalettesToBlack
	.align	2, 0
	.type	 BT_LoadWaveIntoBuffer,function
	.thumb_func
BT_LoadWaveIntoBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	ldr	r0, [sp, #0x20]
	ldr	r4, [sp, #0x24]
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	lsl	r4, r4, #0x10
	mov	r6, #0x0
	lsr	r5, r4, #0x10
	cmp	r4, #0
	ble	.L911	@cond_branch
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	mov	r9, r0
	lsl	r1, r1, #0x10
	mov	r8, r1
	lsl	r0, r3, #0x10
	asr	r7, r0, #0x10
.L913:
	lsl	r4, r2, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0xff
	and	r0, r0, r4
	mov	r2, r8
	asr	r1, r2, #0x10
	bl	Sin
	lsl	r1, r6, #0x1
	add	r1, r1, sl
	add	r0, r0, r9
	strh	r0, [r1]
	lsl	r1, r5, #0x10
	ldr	r0, .L915
	add	r1, r1, r0
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r4, r4, r7
	lsl	r4, r4, #0x10
	lsr	r2, r4, #0x10
	lsr	r5, r1, #0x10
	cmp	r1, #0
	bgt	.L913	@cond_branch
.L911:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L916:
	.align	2, 0
.L915:
	.word	-0x10000
.Lfe131:
	.size	 BT_LoadWaveIntoBuffer,.Lfe131-BT_LoadWaveIntoBuffer
	.align	2, 0
	.type	 BT_GenerateCircle,function
	.thumb_func
BT_GenerateCircle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	r9, r0
	add	r5, r2, #0
	add	r4, r3, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp]
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	mov	r1, #0xa
	bl	memset
	mov	r1, #0x0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	str	r4, [sp, #0x4]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	str	r5, [sp, #0x8]
.L921:
	lsl	r5, r1, #0x10
	asr	r0, r5, #0x10
	mov	sl, r0
	ldr	r1, [sp, #0x4]
	bl	Sin
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, sl
	ldr	r1, [sp, #0x4]
	bl	Cos
	ldr	r2, [sp]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	sub	r2, r1, r4
	lsl	r2, r2, #0x10
	add	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r3, [sp, #0x8]
	sub	r1, r3, r0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	add	r0, r3, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsr	r1, r2, #0x10
	str	r5, [sp, #0x10]
	cmp	r2, #0
	bge	.L922	@cond_branch
	mov	r1, #0x0
.L922:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf0
	ble	.L923	@cond_branch
	mov	r6, #0xf0
.L923:
	lsl	r0, r7, #0x10
	cmp	r0, #0
	bge	.L924	@cond_branch
	mov	r7, #0x0
.L924:
	mov	r2, r8
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L925	@cond_branch
	mov	r3, #0x9f
	mov	r8, r3
.L925:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x10
	orr	r6, r6, r0
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	strh	r6, [r0]
	mov	r0, r8
	lsl	r4, r0, #0x10
	asr	r0, r4, #0xf
	add	r0, r0, r9
	strh	r6, [r0]
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r1, [sp, #0x4]
	bl	Cos
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, [sp, #0x8]
	sub	r1, r2, r0
	lsl	r1, r1, #0x10
	add	r0, r2, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsr	r3, r1, #0x10
	cmp	r1, #0
	bge	.L926	@cond_branch
	mov	r3, #0x0
.L926:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L927	@cond_branch
	mov	r2, #0x9f
.L927:
	lsl	r0, r3, #0x10
	asr	r1, r0, #0x10
	add	r3, r0, #0
	lsl	r5, r2, #0x10
	ldr	r0, [sp, #0xc]
	cmp	r0, r1
	ble	.L929	@cond_branch
	add	r2, r1, #0
.L930:
	lsl	r1, r7, #0x10
	ldr	r0, .L948
	add	r1, r1, r0
	asr	r0, r1, #0xf
	add	r0, r0, r9
	strh	r6, [r0]
	lsr	r7, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, r2
	bgt	.L930	@cond_branch
.L929:
	lsl	r1, r7, #0x10
	asr	r0, r3, #0x10
	cmp	r1, r3
	bge	.L945	@cond_branch
	add	r2, r0, #0
.L934:
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r1, r3
	asr	r1, r0, #0xf
	add	r1, r1, r9
	strh	r6, [r1]
	add	r1, r0, #0
	asr	r0, r1, #0x10
	cmp	r0, r2
	blt	.L934	@cond_branch
.L945:
	asr	r0, r5, #0x10
	cmp	r4, r5
	ble	.L946	@cond_branch
	add	r1, r0, #0
.L938:
	ldr	r2, .L948
	add	r0, r4, r2
	lsr	r3, r0, #0x10
	mov	r8, r3
	asr	r0, r0, #0xf
	add	r0, r0, r9
	strh	r6, [r0]
	lsl	r4, r3, #0x10
	asr	r0, r4, #0x10
	cmp	r0, r1
	bgt	.L938	@cond_branch
.L946:
	mov	r0, r8
	lsl	r4, r0, #0x10
	asr	r0, r5, #0x10
	cmp	r4, r5
	bge	.L947	@cond_branch
	add	r2, r0, #0
.L942:
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r4, r1
	asr	r1, r0, #0xf
	add	r1, r1, r9
	strh	r6, [r1]
	add	r4, r0, #0
	asr	r0, r4, #0x10
	cmp	r0, r2
	blt	.L942	@cond_branch
.L947:
	ldr	r2, [sp, #0x10]
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r2, r3
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	bgt	.LCB9638
	b	.L921	@long jump
.LCB9638:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L949:
	.align	2, 0
.L948:
	.word	-0x10000
.Lfe132:
	.size	 BT_GenerateCircle,.Lfe132-BT_GenerateCircle
	.align	2, 0
	.type	 BT_DiagonalSegment_InitParams,function
	.thumb_func
BT_DiagonalSegment_InitParams:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r0, [sp, #0x14]
	ldr	r5, [sp, #0x18]
	ldr	r4, [sp, #0x1c]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r7, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	strh	r1, [r6]
	strh	r2, [r6, #0x2]
	strh	r1, [r6, #0x4]
	strh	r2, [r6, #0x6]
	strh	r3, [r6, #0x8]
	strh	r7, [r6, #0xa]
	strh	r5, [r6, #0xc]
	strh	r4, [r6, #0xe]
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	sub	r3, r3, r1
	strh	r3, [r6, #0x10]
	lsl	r0, r3, #0x10
	cmp	r0, #0
	bge	.L951	@cond_branch
	neg	r0, r3
	strh	r0, [r6, #0x10]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r6, #0xc]
.L951:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	sub	r1, r0, r1
	strh	r1, [r6, #0x12]
	lsl	r0, r1, #0x10
	cmp	r0, #0
	bge	.L952	@cond_branch
	neg	r0, r1
	strh	r0, [r6, #0x12]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r6, #0xe]
.L952:
	mov	r0, #0x0
	strh	r0, [r6, #0x14]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe133:
	.size	 BT_DiagonalSegment_InitParams,.Lfe133-BT_DiagonalSegment_InitParams
	.align	2, 0
	.type	 BT_DiagonalSegment_ComputePointOnSegment,function
	.thumb_func
BT_DiagonalSegment_ComputePointOnSegment:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	ldrh	r0, [r3, #0x10]
	mov	r8, r0
	mov	r1, #0x10
	ldrsh	r6, [r3, r1]
	ldrh	r2, [r3, #0x12]
	mov	ip, r2
	mov	r4, #0x12
	ldrsh	r5, [r3, r4]
	cmp	r6, r5
	ble	.L954	@cond_branch
	ldrh	r0, [r3, #0xc]
	ldrh	r2, [r3, #0x4]
	add	r1, r0, r2
	strh	r1, [r3, #0x4]
	ldrh	r2, [r3, #0x14]
	add	r2, r2, ip
	strh	r2, [r3, #0x14]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r4, r0, #0
	ldrh	r7, [r3, #0xe]
	cmp	r1, r6
	ble	.L956	@cond_branch
	ldrh	r1, [r3, #0x6]
	add	r0, r7, r1
	strh	r0, [r3, #0x6]
	mov	r1, r8
	b	.L969
.L954:
	ldrh	r0, [r3, #0xe]
	ldrh	r2, [r3, #0x6]
	add	r1, r0, r2
	strh	r1, [r3, #0x6]
	ldrh	r2, [r3, #0x14]
	add	r2, r2, r8
	strh	r2, [r3, #0x14]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	ldrh	r4, [r3, #0xc]
	add	r7, r0, #0
	cmp	r1, r5
	ble	.L956	@cond_branch
	ldrh	r1, [r3, #0x4]
	add	r0, r4, r1
	strh	r0, [r3, #0x4]
	mov	r1, ip
.L969:
	sub	r0, r2, r1
	strh	r0, [r3, #0x14]
.L956:
	mov	r5, #0x0
	lsl	r0, r4, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	ble	.L960	@cond_branch
	mov	r4, #0x4
	ldrsh	r1, [r3, r4]
	mov	r4, #0x8
	ldrsh	r0, [r3, r4]
	ldrh	r4, [r3, #0x8]
	cmp	r1, r0
	bge	.L959	@cond_branch
.L960:
	cmp	r2, #0
	bge	.L958	@cond_branch
	mov	r0, #0x4
	ldrsh	r1, [r3, r0]
	mov	r2, #0x8
	ldrsh	r0, [r3, r2]
	ldrh	r4, [r3, #0x8]
	cmp	r1, r0
	bgt	.L958	@cond_branch
.L959:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r9
	cmp	r0, #0
	beq	.L958	@cond_branch
	strh	r4, [r3, #0x4]
.L958:
	lsl	r0, r7, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	ble	.L964	@cond_branch
	mov	r4, #0x6
	ldrsh	r1, [r3, r4]
	mov	r4, #0xa
	ldrsh	r0, [r3, r4]
	ldrh	r4, [r3, #0xa]
	cmp	r1, r0
	bge	.L963	@cond_branch
.L964:
	cmp	r2, #0
	bge	.L962	@cond_branch
	mov	r0, #0x6
	ldrsh	r1, [r3, r0]
	mov	r2, #0xa
	ldrsh	r0, [r3, r2]
	ldrh	r4, [r3, #0xa]
	cmp	r1, r0
	bgt	.L962	@cond_branch
.L963:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, sl
	cmp	r0, #0
	beq	.L962	@cond_branch
	strh	r4, [r3, #0x6]
.L962:
	cmp	r5, #0x2
	beq	.L966	@cond_branch
	mov	r0, #0x0
	b	.L968
.L966:
	mov	r0, #0x1
.L968:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe134:
	.size	 BT_DiagonalSegment_ComputePointOnSegment,.Lfe134-BT_DiagonalSegment_ComputePointOnSegment
.text
	.align	2, 0 @ Don't pad with nop

