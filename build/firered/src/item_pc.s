@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sStateDataPtr,object
	.size	 sStateDataPtr,4
sStateDataPtr:
	.word	0x0
	.align	2, 0
	.type	 sBg1TilemapBuffer,object
	.size	 sBg1TilemapBuffer,4
sBg1TilemapBuffer:
	.word	0x0
	.align	2, 0
	.type	 sListMenuItems,object
	.size	 sListMenuItems,4
sListMenuItems:
	.word	0x0
	.align	2, 0
	.type	 sUnusedStringAllocation,object
	.size	 sUnusedStringAllocation,4
sUnusedStringAllocation:
	.word	0x0
	.align	2, 0
	.type	 sListMenuState,object
	.size	 sListMenuState,12
sListMenuState:
	.space	12
	.type	 sSubmenuWindowIds,object
	.size	 sSubmenuWindowIds,3
sSubmenuWindowIds:
	.space	3
	.section .rodata
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,8
sBgTemplates:
	.byte	0xf0
	.byte	0x1
	.space	2
	.byte	0xed
	.byte	0x11
	.space	2
	.align	2, 0
	.type	 sItemPcSubmenuOptions,object
sItemPcSubmenuOptions:
	.word	gText_Withdraw
	.word	Task_ItemPcWithdraw
	.word	gOtherText_Give
	.word	Task_ItemPcGive
	.word	gFameCheckerText_Cancel
	.word	Task_ItemPcCancel
	.size	 sItemPcSubmenuOptions,24
	.type	 sTextColors,object
sTextColors:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0xa
	.byte	0x2
	.size	 sTextColors,12
	.align	2, 0
	.type	 sWindowTemplates,object
sWindowTemplates:
	.byte	0x0
	.byte	0x7
	.byte	0x1
	.byte	0x13
	.byte	0xc
	.byte	0xf
	.short	0x2bf
	.byte	0x0
	.byte	0x5
	.byte	0xe
	.byte	0x19
	.byte	0x6
	.byte	0xd
	.short	0x229
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x5
	.byte	0x4
	.byte	0xf
	.short	0x215
	.byte	0x0
	.byte	0x18
	.byte	0xf
	.byte	0x5
	.byte	0x4
	.byte	0xf
	.short	0x201
	.byte	0x0
	.byte	0x16
	.byte	0xd
	.byte	0x7
	.byte	0x6
	.byte	0xf
	.short	0x1d7
	.byte	0x0
	.byte	0x2
	.byte	0xf
	.byte	0x1a
	.byte	0x4
	.byte	0xb
	.short	0x16f
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates,56
	.align	2, 0
	.type	 sSubwindowTemplates,object
sSubwindowTemplates:
	.byte	0x0
	.byte	0x6
	.byte	0xf
	.byte	0xe
	.byte	0x4
	.byte	0xc
	.short	0x137
	.byte	0x0
	.byte	0x6
	.byte	0xf
	.byte	0x10
	.byte	0x4
	.byte	0xc
	.short	0x137
	.byte	0x0
	.byte	0x6
	.byte	0xf
	.byte	0x17
	.byte	0x4
	.byte	0xc
	.short	0x9b
	.size	 sSubwindowTemplates,24
.text
	.align	2, 0
	.globl	ItemPc_Init
	.type	 ItemPc_Init,function
	.thumb_func
ItemPc_Init:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	cmp	r5, #0x1
	bhi	.L11	@cond_branch
	ldr	r6, .L12
	mov	r0, #0x14
	bl	Alloc
	str	r0, [r6]
	cmp	r0, #0
	bne	.L4	@cond_branch
.L11:
	add	r0, r4, #0
	bl	SetMainCallback2
	b	.L2
.L13:
	.align	2, 0
.L12:
	.word	sStateDataPtr
.L4:
	cmp	r5, #0x1
	beq	.L5	@cond_branch
	ldr	r0, .L14
	str	r4, [r0]
	mov	r1, #0x0
	strh	r1, [r0, #0x6]
	strh	r1, [r0, #0x4]
.L5:
	ldr	r1, [r6]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r0, [r6]
	mov	r2, #0x0
	strb	r2, [r0, #0x5]
	ldr	r1, [r6]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x8]
	ldr	r0, [r6]
	str	r2, [r0]
	ldr	r5, .L14+0x4
	add	r4, r6, #0
	mov	r3, #0x0
.L9:
	ldr	r0, [r4]
	lsl	r1, r2, #0x1
	add	r0, r0, #0xc
	add	r0, r0, r1
	strh	r3, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x2
	bls	.L9	@cond_branch
	add	r0, r5, #0
	bl	SetMainCallback2
.L2:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	sListMenuState
	.word	ItemPc_RunSetup
.Lfe1:
	.size	 ItemPc_Init,.Lfe1-ItemPc_Init
	.align	2, 0
	.type	 ItemPc_MainCB,function
	.thumb_func
ItemPc_MainCB:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	DoScheduledBgTilemapCopiesToVram
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 ItemPc_MainCB,.Lfe2-ItemPc_MainCB
	.align	2, 0
	.type	 ItemPc_VBlankCB,function
	.thumb_func
ItemPc_VBlankCB:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 ItemPc_VBlankCB,.Lfe3-ItemPc_VBlankCB
	.align	2, 0
	.type	 ItemPc_RunSetup,function
	.thumb_func
ItemPc_RunSetup:
	push	{lr}
.L19:
	bl	ItemPc_DoGfxSetup
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L20	@cond_branch
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L19	@cond_branch
.L20:
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 ItemPc_RunSetup,.Lfe4-ItemPc_RunSetup
	.align	2, 0
	.type	 ItemPc_DoGfxSetup,function
	.thumb_func
ItemPc_DoGfxSetup:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L61
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bls	.LCB164
	b	.L57	@long jump
.LCB164:
	lsl	r0, r0, #0x2
	ldr	r1, .L61+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L62:
	.align	2, 0
.L61:
	.word	gMain
	.word	.L58
	.align	2, 0
	.align	2, 0
.L58:
	.word	.L27
	.word	.L28
	.word	.L29
	.word	.L30
	.word	.L31
	.word	.L32
	.word	.L33
	.word	.L34
	.word	.L37
	.word	.L39
	.word	.L40
	.word	.L41
	.word	.L44
	.word	.L45
	.word	.L46
	.word	.L47
	.word	.L48
	.word	.L49
	.word	.L50
	.word	.L52
	.word	.L55
.L27:
	bl	SetVBlankHBlankCallbacksToNull
	bl	ClearScheduledBgCopiesToVram
	b	.L60
.L28:
	bl	ScanlineEffect_Stop
	b	.L60
.L29:
	bl	FreeAllSpritePalettes
	b	.L60
.L30:
	bl	ResetPaletteFade
	b	.L60
.L31:
	bl	ResetSpriteData
	b	.L60
.L32:
	bl	ResetItemMenuIconState
	b	.L60
.L33:
	bl	ResetTasks
	b	.L60
.L34:
	bl	ItemPc_InitBgs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L42	@cond_branch
	ldr	r0, .L63
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1, #0xc]
	b	.L60
.L64:
	.align	2, 0
.L63:
	.word	sStateDataPtr
.L37:
	bl	ItemPc_LoadGraphics
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB247
	b	.L26	@long jump
.LCB247:
	b	.L60
.L39:
	bl	ItemPc_InitWindows
	b	.L60
.L40:
	bl	ItemPc_CountPcItems
	bl	ItemPc_SetCursorPosition
	bl	ItemPc_SetScrollPosition
	b	.L60
.L41:
	bl	ItemPc_AllocateResourcesForListMenu
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L60	@cond_branch
.L42:
	bl	ItemPc_FadeAndBail
	mov	r0, #0x1
	b	.L59
.L44:
	bl	ItemPc_BuildListMenuTemplate
	b	.L60
.L45:
	bl	ItemPc_PrintWithdrawItem
	b	.L60
.L46:
	bl	CreateSwapLine
	b	.L60
.L47:
	ldr	r0, .L65
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L65+0x4
	ldr	r2, .L65+0x8
	ldrh	r1, [r2, #0x4]
	ldrh	r2, [r2, #0x6]
	bl	ListMenuInit
	ldr	r2, .L65+0xc
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x8]
	b	.L60
.L66:
	.align	2, 0
.L65:
	.word	Task_ItemPcMain
	.word	gMultiuseListMenuTemplate
	.word	sListMenuState
	.word	gTasks
.L48:
	bl	ItemPc_PlaceTopMenuScrollIndicatorArrows
	b	.L60
.L49:
	mov	r0, #0x1d
	bl	SetHelpContext
	b	.L60
.L50:
	ldr	r0, .L67
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x1
	bne	.L60	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	b	.L60
.L68:
	.align	2, 0
.L67:
	.word	sListMenuState
.L52:
	ldr	r0, .L69
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x1
	bne	.L53	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L60
.L70:
	.align	2, 0
.L69:
	.word	sListMenuState
.L53:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BeginPCScreenEffect_TurnOn
	mov	r0, #0x1
	bl	ItemPc_SetInitializedFlag
	mov	r0, #0x2
	bl	PlaySE
	b	.L60
.L55:
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L26	@cond_branch
.L60:
	ldr	r1, .L71
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L26
.L72:
	.align	2, 0
.L71:
	.word	gMain
.L57:
	ldr	r0, .L73
	bl	SetVBlankCallback
	ldr	r0, .L73+0x4
	bl	SetMainCallback2
	mov	r0, #0x1
	b	.L59
.L74:
	.align	2, 0
.L73:
	.word	ItemPc_VBlankCB
	.word	ItemPc_MainCB
.L26:
	mov	r0, #0x0
.L59:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 ItemPc_DoGfxSetup,.Lfe5-ItemPc_DoGfxSetup
	.align	2, 0
	.type	 ItemPc_FadeAndBail,function
	.thumb_func
ItemPc_FadeAndBail:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L76
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L76+0x4
	bl	SetVBlankCallback
	ldr	r0, .L76+0x8
	bl	SetMainCallback2
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	Task_ItemPcWaitFadeAndBail
	.word	ItemPc_VBlankCB
	.word	ItemPc_MainCB
.Lfe6:
	.size	 ItemPc_FadeAndBail,.Lfe6-ItemPc_FadeAndBail
	.align	2, 0
	.type	 Task_ItemPcWaitFadeAndBail,function
	.thumb_func
Task_ItemPcWaitFadeAndBail:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L80
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L79	@cond_branch
	ldr	r0, .L80+0x4
	ldr	r0, [r0]
	bl	SetMainCallback2
	bl	ItemPc_FreeResources
	add	r0, r4, #0
	bl	DestroyTask
.L79:
	pop	{r4}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gPaletteFade
	.word	sListMenuState
.Lfe7:
	.size	 Task_ItemPcWaitFadeAndBail,.Lfe7-Task_ItemPcWaitFadeAndBail
	.align	2, 0
	.type	 ItemPc_InitBgs,function
	.thumb_func
ItemPc_InitBgs:
	push	{r4, r5, lr}
	bl	ResetAllBgsCoordinatesAndBgCntRegs
	ldr	r5, .L85
	mov	r4, #0x80
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	bl	Alloc
	str	r0, [r5]
	cmp	r0, #0
	beq	.L83	@cond_branch
	mov	r1, #0x0
	add	r2, r4, #0
	bl	memset
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L85+0x4
	mov	r0, #0x0
	mov	r2, #0x2
	bl	InitBgsFromTemplates
	ldr	r1, [r5]
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x1
	b	.L84
.L86:
	.align	2, 0
.L85:
	.word	sBg1TilemapBuffer
	.word	sBgTemplates
.L83:
	mov	r0, #0x0
.L84:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 ItemPc_InitBgs,.Lfe8-ItemPc_InitBgs
	.align	2, 0
	.type	 ItemPc_LoadGraphics,function
	.thumb_func
ItemPc_LoadGraphics:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L99
	ldr	r0, [r5]
	mov	r1, #0xc
	ldrsh	r4, [r0, r1]
	cmp	r4, #0x1
	beq	.L90	@cond_branch
	cmp	r4, #0x1
	bgt	.L96	@cond_branch
	cmp	r4, #0
	beq	.L89	@cond_branch
	b	.L94
.L100:
	.align	2, 0
.L99:
	.word	sStateDataPtr
.L96:
	cmp	r4, #0x2
	beq	.L92	@cond_branch
	cmp	r4, #0x3
	beq	.L93	@cond_branch
	b	.L94
.L89:
	bl	ResetTempTileDataBuffers
	ldr	r1, .L101
	str	r4, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	b	.L98
.L102:
	.align	2, 0
.L101:
	.word	gItemPcTiles
.L90:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L88	@cond_branch
	ldr	r0, .L103
	ldr	r1, .L103+0x4
	ldr	r1, [r1]
	bl	LZDecompressWram
	b	.L98
.L104:
	.align	2, 0
.L103:
	.word	gItemPcTilemap
	.word	sBg1TilemapBuffer
.L92:
	ldr	r0, .L105
	mov	r1, #0x0
	mov	r2, #0x60
	bl	LoadCompressedPalette
	b	.L98
.L106:
	.align	2, 0
.L105:
	.word	gItemPcBgPals
.L93:
	ldr	r0, .L107
	bl	LoadCompressedSpriteSheet
.L98:
	ldr	r1, [r5]
	ldrh	r0, [r1, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	b	.L88
.L108:
	.align	2, 0
.L107:
	.word	gBagSwapSpriteSheet
.L94:
	ldr	r0, .L109
	bl	LoadCompressedSpritePalette
	ldr	r0, .L109+0x4
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1, #0xc]
	mov	r0, #0x1
	b	.L97
.L110:
	.align	2, 0
.L109:
	.word	gBagSwapSpritePalette
	.word	sStateDataPtr
.L88:
	mov	r0, #0x0
.L97:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 ItemPc_LoadGraphics,.Lfe9-ItemPc_LoadGraphics
	.align	2, 0
	.type	 ItemPc_AllocateResourcesForListMenu,function
	.thumb_func
ItemPc_AllocateResourcesForListMenu:
	push	{r4, lr}
	ldr	r4, .L115
	mov	r0, #0xf8
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L113	@cond_branch
	ldr	r4, .L115+0x4
	mov	r0, #0xd9
	lsl	r0, r0, #0x1
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L113	@cond_branch
	mov	r0, #0x1
	b	.L114
.L116:
	.align	2, 0
.L115:
	.word	sListMenuItems
	.word	sUnusedStringAllocation
.L113:
	bl	ItemPc_FreeResources
	bl	ItemPc_FadeAndBail
	mov	r0, #0x0
.L114:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 ItemPc_AllocateResourcesForListMenu,.Lfe10-ItemPc_AllocateResourcesForListMenu
	.align	2, 0
	.type	 ItemPc_BuildListMenuTemplate,function
	.thumb_func
ItemPc_BuildListMenuTemplate:
	push	{r4, r5, lr}
	mov	r4, #0x0
	b	.L123
.L121:
	ldr	r0, .L124
	ldr	r0, [r0]
	lsl	r1, r4, #0x2
	add	r0, r0, r1
	mov	r1, #0xa6
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	ItemId_GetName
	ldr	r1, .L124+0x4
	ldr	r2, [r1]
	lsl	r1, r4, #0x3
	add	r1, r1, r2
	str	r0, [r1]
	str	r4, [r1, #0x4]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L123:
	ldr	r0, .L124+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	cmp	r4, r0
	bcc	.L121	@cond_branch
	ldr	r0, .L124+0x4
	ldr	r3, [r0]
	lsl	r0, r4, #0x3
	add	r0, r0, r3
	ldr	r1, .L124+0xc
	str	r1, [r0]
	mov	r1, #0x2
	neg	r1, r1
	str	r1, [r0, #0x4]
	ldr	r2, .L124+0x10
	str	r3, [r2]
	ldr	r0, .L124+0x8
	ldr	r3, [r0]
	ldrb	r0, [r3, #0x7]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r2, #0xc]
	strb	r1, [r2, #0x10]
	strb	r1, [r2, #0x11]
	mov	r0, #0x9
	strb	r0, [r2, #0x12]
	mov	r1, #0x1
	mov	r0, #0x1
	strb	r0, [r2, #0x13]
	ldrb	r0, [r2, #0x16]
	mov	r4, #0x8
	neg	r4, r4
	and	r4, r4, r0
	orr	r4, r4, r1
	mov	r0, #0x39
	neg	r0, r0
	and	r4, r4, r0
	mov	r0, #0x10
	orr	r4, r4, r0
	strb	r4, [r2, #0x16]
	ldrb	r1, [r2, #0x14]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r5, #0x2
	orr	r0, r0, r5
	strb	r0, [r2, #0x14]
	ldrb	r1, [r3, #0x6]
	strh	r1, [r2, #0xe]
	ldrb	r1, [r2, #0x17]
	mov	r3, #0x40
	neg	r3, r3
	and	r3, r3, r1
	orr	r3, r3, r5
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2, #0x14]
	mov	r0, #0x30
	strb	r0, [r2, #0x15]
	ldr	r0, .L124+0x14
	str	r0, [r2, #0x4]
	ldr	r0, .L124+0x18
	str	r0, [r2, #0x8]
	mov	r0, #0x3f
	and	r4, r4, r0
	strb	r4, [r2, #0x16]
	and	r3, r3, r0
	strb	r3, [r2, #0x17]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	gSaveBlock1Ptr
	.word	sListMenuItems
	.word	sStateDataPtr
	.word	gFameCheckerText_Cancel
	.word	gMultiuseListMenuTemplate
	.word	ItemPc_MoveCursorFunc
	.word	ItemPc_ItemPrintFunc
.Lfe11:
	.size	 ItemPc_BuildListMenuTemplate,.Lfe11-ItemPc_BuildListMenuTemplate
	.align	2, 0
	.type	 ItemPc_MoveCursorFunc,function
	.thumb_func
ItemPc_MoveCursorFunc:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	beq	.L127	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L127:
	ldr	r5, .L133
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0xff
	bne	.L128	@cond_branch
	ldrb	r1, [r1, #0x5]
	mov	r0, #0x1
	eor	r0, r0, r1
	bl	DestroyItemMenuIcon
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L129	@cond_branch
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	bl	ItemPc_GetItemIdBySlotId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x5]
	add	r0, r4, #0
	bl	CreateItemMenuIcon
	add	r0, r4, #0
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L130	@cond_branch
	add	r0, r4, #0
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xd
	mul	r1, r1, r0
	ldr	r0, .L133+0x4
	add	r5, r1, r0
	b	.L132
.L134:
	.align	2, 0
.L133:
	.word	sStateDataPtr
	.word	gMoveNames
.L130:
	add	r0, r4, #0
	bl	ItemId_GetDescription
	add	r5, r0, #0
	b	.L132
.L129:
	ldr	r0, .L135
	ldr	r1, [r5]
	ldrb	r1, [r1, #0x5]
	bl	CreateItemMenuIcon
	ldr	r5, .L135+0x4
.L132:
	ldr	r0, .L135+0x8
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x5]
	mov	r1, #0x1
	eor	r0, r0, r1
	mov	r4, #0x0
	strb	r0, [r2, #0x5]
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r1, #0x3
	str	r1, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	str	r4, [sp, #0xc]
	str	r1, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	ItemPc_AddTextPrinterParameterized
.L128:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	0x177
	.word	gText_ReturnToPC
	.word	sStateDataPtr
.Lfe12:
	.size	 ItemPc_MoveCursorFunc,.Lfe12-ItemPc_MoveCursorFunc
	.align	2, 0
	.type	 ItemPc_ItemPrintFunc,function
	.thumb_func
ItemPc_ItemPrintFunc:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	ldr	r0, .L142
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x4]
	cmp	r1, #0xff
	beq	.L138	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L139	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	bl	ItemPc_PrintOrRemoveCursorAt
	b	.L138
.L143:
	.align	2, 0
.L142:
	.word	sStateDataPtr
.L139:
	add	r0, r5, #0
	mov	r1, #0xff
	bl	ItemPc_PrintOrRemoveCursorAt
.L138:
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L141	@cond_branch
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	bl	ItemPc_GetItemQuantityBySlotId
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L144
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L144+0x4
	ldr	r1, .L144+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	str	r5, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	mov	r0, #0x1
	str	r0, [sp, #0x10]
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0x6e
	bl	ItemPc_AddTextPrinterParameterized
.L141:
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TimesStrVar1
.Lfe13:
	.size	 ItemPc_ItemPrintFunc,.Lfe13-ItemPc_ItemPrintFunc
	.align	2, 0
	.type	 ItemPc_PrintOrRemoveCursor,function
	.thumb_func
ItemPc_PrintOrRemoveCursor:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ListMenuGetYCoordForPrintingArrowCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	ItemPc_PrintOrRemoveCursorAt
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 ItemPc_PrintOrRemoveCursor,.Lfe14-ItemPc_PrintOrRemoveCursor
	.align	2, 0
	.type	 ItemPc_PrintOrRemoveCursorAt,function
	.thumb_func
ItemPc_PrintOrRemoveCursorAt:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0xff
	bne	.L148	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x0
	bl	GetFontAttribute
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	add	r3, r5, #0
	bl	FillWindowPixelRect
	b	.L149
.L148:
	ldr	r2, .L150
	str	r5, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	mov	r1, #0x2
	mov	r3, #0x0
	bl	ItemPc_AddTextPrinterParameterized
.L149:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	gText_SelectorArrow2
.Lfe15:
	.size	 ItemPc_PrintOrRemoveCursorAt,.Lfe15-ItemPc_PrintOrRemoveCursorAt
	.align	2, 0
	.type	 ItemPc_PrintWithdrawItem,function
	.thumb_func
ItemPc_PrintWithdrawItem:
	push	{lr}
	add	sp, sp, #-0x14
	ldr	r2, .L153
	mov	r1, #0x1
	str	r1, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r3, #0x0
	bl	ItemPc_AddTextPrinterParameterized
	add	sp, sp, #0x14
	pop	{r0}
	bx	r0
.L154:
	.align	2, 0
.L153:
	.word	gText_WithdrawItem
.Lfe16:
	.size	 ItemPc_PrintWithdrawItem,.Lfe16-ItemPc_PrintWithdrawItem
	.align	2, 0
	.type	 ItemPc_PlaceTopMenuScrollIndicatorArrows,function
	.thumb_func
ItemPc_PlaceTopMenuScrollIndicatorArrows:
	push	{r4, lr}
	add	sp, sp, #-0x10
	ldr	r4, .L156
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x7]
	ldrb	r1, [r1, #0x6]
	sub	r0, r0, r1
	add	r0, r0, #0x1
	str	r0, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	ldr	r0, .L156+0x4
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0x80
	mov	r2, #0x8
	mov	r3, #0x68
	bl	AddScrollIndicatorArrowPairParameterized
	ldr	r1, [r4]
	strb	r0, [r1, #0x8]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L157:
	.align	2, 0
.L156:
	.word	sStateDataPtr
	.word	sListMenuState+0x4
.Lfe17:
	.size	 ItemPc_PlaceTopMenuScrollIndicatorArrows,.Lfe17-ItemPc_PlaceTopMenuScrollIndicatorArrows
	.align	2, 0
	.type	 ItemPc_PlaceWithdrawQuantityScrollIndicatorArrows,function
	.thumb_func
ItemPc_PlaceWithdrawQuantityScrollIndicatorArrows:
	push	{r4, lr}
	add	sp, sp, #-0x10
	ldr	r4, .L159
	ldr	r1, [r4]
	mov	r0, #0x1
	strh	r0, [r1, #0xa]
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r1, r1, #0xa
	str	r1, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xd4
	mov	r2, #0x78
	mov	r3, #0x98
	bl	AddScrollIndicatorArrowPairParameterized
	ldr	r1, [r4]
	strb	r0, [r1, #0x8]
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	sStateDataPtr
.Lfe18:
	.size	 ItemPc_PlaceWithdrawQuantityScrollIndicatorArrows,.Lfe18-ItemPc_PlaceWithdrawQuantityScrollIndicatorArrows
	.align	2, 0
	.type	 ItemPc_RemoveScrollIndicatorArrowPair,function
	.thumb_func
ItemPc_RemoveScrollIndicatorArrowPair:
	push	{r4, lr}
	ldr	r4, .L163
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0xff
	beq	.L162	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r1, [r4]
	mov	r0, #0xff
	strb	r0, [r1, #0x8]
.L162:
	pop	{r4}
	pop	{r0}
	bx	r0
.L164:
	.align	2, 0
.L163:
	.word	sStateDataPtr
.Lfe19:
	.size	 ItemPc_RemoveScrollIndicatorArrowPair,.Lfe19-ItemPc_RemoveScrollIndicatorArrowPair
	.align	2, 0
	.type	 ItemPc_SetCursorPosition,function
	.thumb_func
ItemPc_SetCursorPosition:
	push	{r4, r5, lr}
	ldr	r0, .L170
	ldrh	r1, [r0, #0x4]
	add	r4, r0, #0
	ldr	r5, .L170+0x4
	cmp	r1, #0
	beq	.L166	@cond_branch
	ldrh	r0, [r4, #0x4]
	ldr	r1, [r5]
	ldrb	r3, [r1, #0x6]
	add	r0, r0, r3
	ldrb	r2, [r1, #0x7]
	add	r1, r2, #0x1
	cmp	r0, r1
	ble	.L166	@cond_branch
	sub	r0, r3, #0x1
	sub	r0, r2, r0
	strh	r0, [r4, #0x4]
.L166:
	add	r3, r4, #0
	ldrh	r0, [r3, #0x4]
	ldrh	r1, [r3, #0x6]
	add	r0, r0, r1
	ldr	r1, [r5]
	ldrb	r1, [r1, #0x7]
	add	r2, r1, #0x1
	cmp	r0, r2
	blt	.L167	@cond_branch
	cmp	r2, #0x1
	bgt	.L168	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x6]
	b	.L167
.L171:
	.align	2, 0
.L170:
	.word	sListMenuState
	.word	sStateDataPtr
.L168:
	strh	r1, [r4, #0x6]
.L167:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 ItemPc_SetCursorPosition,.Lfe20-ItemPc_SetCursorPosition
	.align	2, 0
	.type	 ItemPc_FreeResources,function
	.thumb_func
ItemPc_FreeResources:
	push	{lr}
	ldr	r0, .L177
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L173	@cond_branch
	bl	Free
.L173:
	ldr	r0, .L177+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L174	@cond_branch
	bl	Free
.L174:
	ldr	r0, .L177+0x8
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L175	@cond_branch
	bl	Free
.L175:
	ldr	r0, .L177+0xc
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L176	@cond_branch
	bl	Free
.L176:
	bl	FreeAllWindowBuffers
	pop	{r0}
	bx	r0
.L178:
	.align	2, 0
.L177:
	.word	sStateDataPtr
	.word	sBg1TilemapBuffer
	.word	sListMenuItems
	.word	sUnusedStringAllocation
.Lfe21:
	.size	 ItemPc_FreeResources,.Lfe21-ItemPc_FreeResources
	.align	2, 0
	.type	 Task_ItemPcTurnOff1,function
	.thumb_func
Task_ItemPcTurnOff1:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L182
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x1
	bne	.L180	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L181
.L183:
	.align	2, 0
.L182:
	.word	sListMenuState
.L180:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BeginPCScreenEffect_TurnOff
	mov	r0, #0x3
	bl	PlaySE
.L181:
	ldr	r0, .L184
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L184+0x4
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	gTasks
	.word	Task_ItemPcTurnOff2
.Lfe22:
	.size	 Task_ItemPcTurnOff1,.Lfe22-Task_ItemPcTurnOff1
	.align	2, 0
	.type	 Task_ItemPcTurnOff2,function
	.thumb_func
Task_ItemPcTurnOff2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L190
	add	r4, r0, r1
	ldr	r0, .L190+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L187	@cond_branch
	bl	IsPCScreenEffectRunning_TurnOff
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	ldrb	r0, [r4]
	ldr	r4, .L190+0x8
	add	r2, r4, #0x2
	add	r1, r4, #0
	bl	DestroyListMenuTask
	ldr	r0, .L190+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L188	@cond_branch
	bl	SetMainCallback2
	b	.L189
.L191:
	.align	2, 0
.L190:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	sListMenuState+0x4
	.word	sStateDataPtr
.L188:
	sub	r0, r4, #0x4
	ldr	r0, [r0]
	bl	SetMainCallback2
.L189:
	bl	ItemPc_RemoveScrollIndicatorArrowPair
	bl	ItemPc_FreeResources
	add	r0, r5, #0
	bl	DestroyTask
.L187:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 Task_ItemPcTurnOff2,.Lfe23-Task_ItemPcTurnOff2
	.align	2, 0
	.type	 ItemPc_GetCursorPosition,function
	.thumb_func
ItemPc_GetCursorPosition:
	ldr	r1, .L193
	ldrb	r0, [r1, #0x6]
	ldrb	r1, [r1, #0x4]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.L194:
	.align	2, 0
.L193:
	.word	sListMenuState
.Lfe24:
	.size	 ItemPc_GetCursorPosition,.Lfe24-ItemPc_GetCursorPosition
	.align	2, 0
	.type	 ItemPc_GetItemIdBySlotId,function
	.thumb_func
ItemPc_GetItemIdBySlotId:
	lsl	r0, r0, #0x10
	ldr	r1, .L196
	ldr	r1, [r1]
	lsr	r0, r0, #0xe
	add	r1, r1, r0
	mov	r0, #0xa6
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	bx	lr
.L197:
	.align	2, 0
.L196:
	.word	gSaveBlock1Ptr
.Lfe25:
	.size	 ItemPc_GetItemIdBySlotId,.Lfe25-ItemPc_GetItemIdBySlotId
	.align	2, 0
	.type	 ItemPc_GetItemQuantityBySlotId,function
	.thumb_func
ItemPc_GetItemQuantityBySlotId:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r1, .L199
	lsr	r0, r0, #0xe
	ldr	r1, [r1]
	add	r0, r0, r1
	ldr	r1, .L199+0x4
	add	r0, r0, r1
	bl	GetPcItemQuantity
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L200:
	.align	2, 0
.L199:
	.word	gSaveBlock1Ptr
	.word	0x29a
.Lfe26:
	.size	 ItemPc_GetItemQuantityBySlotId,.Lfe26-ItemPc_GetItemQuantityBySlotId
	.align	2, 0
	.type	 ItemPc_CountPcItems,function
	.thumb_func
ItemPc_CountPcItems:
	push	{r4, r5, lr}
	bl	ItemPcCompaction
	ldr	r4, .L209
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x7]
	mov	r2, #0x0
	ldr	r3, .L209+0x4
	ldr	r0, [r3]
	mov	r1, #0xa6
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L203	@cond_branch
	add	r5, r4, #0
	add	r4, r3, #0
	add	r3, r1, #0
.L204:
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x7]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x7]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x1d
	bhi	.L203	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L204	@cond_branch
.L203:
	ldr	r0, .L209
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x7]
	add	r0, r0, #0x1
	cmp	r0, #0x6
	ble	.L208	@cond_branch
	mov	r0, #0x6
.L208:
	strb	r0, [r1, #0x6]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	sStateDataPtr
	.word	gSaveBlock1Ptr
.Lfe27:
	.size	 ItemPc_CountPcItems,.Lfe27-ItemPc_CountPcItems
	.align	2, 0
	.type	 ItemPc_SetScrollPosition,function
	.thumb_func
ItemPc_SetScrollPosition:
	push	{r4, r5, r6, lr}
	ldr	r0, .L219
	ldrh	r1, [r0, #0x6]
	add	r6, r0, #0
	cmp	r1, #0x3
	bls	.L212	@cond_branch
	mov	r4, #0x0
	ldrh	r0, [r6, #0x6]
	sub	r0, r0, #0x3
	cmp	r4, r0
	bgt	.L212	@cond_branch
	ldrh	r1, [r6, #0x4]
	ldr	r5, .L219+0x4
	ldr	r2, [r5]
	ldrb	r0, [r2, #0x6]
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	add	r0, r0, #0x1
	cmp	r1, r0
	beq	.L212	@cond_branch
	add	r3, r6, #0
.L215:
	ldrh	r0, [r3, #0x6]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x6]
	ldrh	r0, [r3, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x4]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrh	r0, [r3, #0x6]
	sub	r0, r0, #0x3
	cmp	r4, r0
	bgt	.L212	@cond_branch
	ldrh	r1, [r6, #0x4]
	ldr	r2, [r5]
	ldrb	r0, [r2, #0x6]
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	add	r0, r0, #0x1
	cmp	r1, r0
	bne	.L215	@cond_branch
.L212:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	sListMenuState
	.word	sStateDataPtr
.Lfe28:
	.size	 ItemPc_SetScrollPosition,.Lfe28-ItemPc_SetScrollPosition
	.align	2, 0
	.type	 ItemPc_SetMessageWindowPalette,function
	.thumb_func
ItemPc_SetMessageWindowPalette:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r1, #0x6
	str	r1, [sp]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0xe
	mov	r3, #0x1e
	bl	SetBgTilemapPalette
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 ItemPc_SetMessageWindowPalette,.Lfe29-ItemPc_SetMessageWindowPalette
	.align	2, 0
	.globl	ItemPc_SetInitializedFlag
	.type	 ItemPc_SetInitializedFlag,function
	.thumb_func
ItemPc_SetInitializedFlag:
	ldr	r1, .L223
	strb	r0, [r1, #0x8]
	bx	lr
.L224:
	.align	2, 0
.L223:
	.word	sListMenuState
.Lfe30:
	.size	 ItemPc_SetInitializedFlag,.Lfe30-ItemPc_SetInitializedFlag
	.align	2, 0
	.type	 Task_ItemPcMain,function
	.thumb_func
Task_ItemPcMain:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L234
	add	r6, r0, r1
	ldr	r0, .L234+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L225	@cond_branch
	bl	IsPCScreenEffectRunning_TurnOn
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L225	@cond_branch
	ldr	r0, .L234+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L227	@cond_branch
	ldrb	r0, [r6]
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r1, sp
	add	r2, r4, #0
	bl	ListMenuGetScrollAndRow
	mov	r0, sp
	ldrh	r1, [r0]
	ldrh	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L234+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	cmp	r1, r0
	beq	.L227	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, sp
	ldrh	r1, [r4]
	ldrh	r0, [r0]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r5, #0
	bl	ItemPc_MoveItemModeInit
	b	.L225
.L235:
	.align	2, 0
.L234:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	gMain
	.word	sStateDataPtr
.L227:
	ldrb	r0, [r6]
	bl	ListMenu_ProcessInput
	add	r4, r0, #0
	ldrb	r0, [r6]
	ldr	r1, .L236
	add	r2, r1, #0x2
	bl	ListMenuGetScrollAndRow
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L231	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L232	@cond_branch
	b	.L225
.L237:
	.align	2, 0
.L236:
	.word	sListMenuState+0x4
.L231:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	ItemPc_SetInitializedFlag
	ldr	r0, .L238
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L238+0x4
	str	r0, [r1]
	b	.L225
.L239:
	.align	2, 0
.L238:
	.word	gTasks
	.word	Task_ItemPcTurnOff1
.L232:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	ItemPc_SetMessageWindowPalette
	bl	ItemPc_RemoveScrollIndicatorArrowPair
	strh	r4, [r6, #0x2]
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	bl	ItemPc_GetItemQuantityBySlotId
	strh	r0, [r6, #0x4]
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	ItemPc_PrintOrRemoveCursor
	ldr	r1, .L240
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L240+0x4
	str	r1, [r0]
.L225:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	gTasks
	.word	Task_ItemPcSubmenuInit
.Lfe31:
	.size	 Task_ItemPcMain,.Lfe31-Task_ItemPcMain
	.align	2, 0
	.type	 ItemPc_ReturnFromSubmenu,function
	.thumb_func
ItemPc_ReturnFromSubmenu:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	ItemPc_SetMessageWindowPalette
	bl	ItemPc_PlaceTopMenuScrollIndicatorArrows
	ldr	r1, .L243
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L243+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L244:
	.align	2, 0
.L243:
	.word	gTasks
	.word	Task_ItemPcMain
.Lfe32:
	.size	 ItemPc_ReturnFromSubmenu,.Lfe32-ItemPc_ReturnFromSubmenu
	.align	2, 0
	.type	 ItemPc_MoveItemModeInit,function
	.thumb_func
ItemPc_MoveItemModeInit:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x14
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r0, #0x2
	add	r5, r5, r0
	lsl	r5, r5, #0x3
	ldr	r0, .L246
	mov	r8, r0
	add	r6, r5, r0
	ldrb	r0, [r6]
	mov	r1, #0x10
	mov	r2, #0x1
	bl	ListMenuSetTemplateField
	strh	r4, [r6, #0x2]
	ldr	r0, .L246+0x4
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r9, r1
	strb	r4, [r0, #0x4]
	ldr	r4, .L246+0x8
	ldrh	r0, [r6, #0x2]
	bl	ItemPc_GetItemIdBySlotId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetName
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r4, .L246+0xc
	ldr	r1, .L246+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r1, #0x3
	str	r1, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x0
	bl	ItemPc_AddTextPrinterParameterized
	mov	r4, #0x20
	neg	r4, r4
	ldrb	r0, [r6]
	bl	ListMenuGetYCoordForPrintingArrowCursor
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	UpdateSwapLinePos
	mov	r0, #0x0
	bl	SetSwapLineInvisibility
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	ItemPc_PrintOrRemoveCursor
	mov	r1, #0x8
	neg	r1, r1
	add	r8, r8, r1
	add	r5, r5, r8
	ldr	r0, .L246+0x14
	str	r0, [r5]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L247:
	.align	2, 0
.L246:
	.word	gTasks+0x8
	.word	sStateDataPtr
	.word	gStringVar1
	.word	gStringVar4
	.word	gOtherText_WhereShouldTheStrVar1BePlaced
	.word	Task_ItemPcMoveItemModeRun
.Lfe33:
	.size	 ItemPc_MoveItemModeInit,.Lfe33-ItemPc_MoveItemModeInit
	.align	2, 0
	.type	 Task_ItemPcMoveItemModeRun,function
	.thumb_func
Task_ItemPcMoveItemModeRun:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r8, r6
	lsl	r4, r6, #0x2
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	ldr	r0, .L252
	add	r4, r4, r0
	ldrb	r0, [r4]
	bl	ListMenu_ProcessInput
	ldrb	r0, [r4]
	ldr	r7, .L252+0x4
	add	r2, r7, #0x2
	add	r1, r7, #0
	bl	ListMenuGetScrollAndRow
	mov	r5, #0x20
	neg	r5, r5
	ldrb	r0, [r4]
	bl	ListMenuGetYCoordForPrintingArrowCursor
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	UpdateSwapLinePos
	ldr	r0, .L252+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L249	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L252+0xc
	ldr	r1, [r0]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	sub	r0, r7, #0x4
	ldrh	r1, [r0, #0x4]
	ldrh	r0, [r0, #0x6]
	add	r1, r1, r0
	add	r0, r6, #0
	bl	ItemPc_InsertItemIntoNewSlot
	b	.L250
.L253:
	.align	2, 0
.L252:
	.word	gTasks+0x8
	.word	sListMenuState+0x4
	.word	gMain
	.word	sStateDataPtr
.L249:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L250	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L254
	ldr	r1, [r0]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	sub	r0, r7, #0x4
	ldrh	r1, [r0, #0x4]
	ldrh	r0, [r0, #0x6]
	add	r1, r1, r0
	mov	r0, r8
	bl	ItemPc_MoveItemModeCancel
.L250:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L255:
	.align	2, 0
.L254:
	.word	sStateDataPtr
.Lfe34:
	.size	 Task_ItemPcMoveItemModeRun,.Lfe34-Task_ItemPcMoveItemModeRun
	.align	2, 0
	.type	 ItemPc_InsertItemIntoNewSlot,function
	.thumb_func
ItemPc_InsertItemIntoNewSlot:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r7, r0, #0x3
	ldr	r0, .L261
	mov	r8, r0
	add	r6, r7, r0
	mov	r0, #0x2
	ldrsh	r1, [r6, r0]
	cmp	r1, r4
	beq	.L258	@cond_branch
	sub	r0, r4, #0x1
	cmp	r1, r0
	bne	.L257	@cond_branch
.L258:
	add	r0, r2, #0
	add	r1, r4, #0
	bl	ItemPc_MoveItemModeCancel
	b	.L259
.L262:
	.align	2, 0
.L261:
	.word	gTasks+0x8
.L257:
	ldr	r0, .L263
	ldr	r0, [r0]
	mov	r2, #0xa6
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	add	r2, r4, #0
	bl	MoveItemSlotInList
	ldrb	r0, [r6]
	ldr	r5, .L263+0x4
	add	r2, r5, #0x2
	add	r1, r5, #0
	bl	DestroyListMenuTask
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	cmp	r0, r4
	bcs	.L260	@cond_branch
	sub	r1, r5, #0x4
	ldrh	r0, [r1, #0x6]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x6]
.L260:
	bl	ItemPc_BuildListMenuTemplate
	ldr	r0, .L263+0x8
	sub	r2, r5, #0x4
	ldrh	r1, [r2, #0x4]
	ldrh	r2, [r2, #0x6]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6]
	mov	r0, #0x1
	bl	SetSwapLineInvisibility
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L263+0xc
	str	r1, [r0]
.L259:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L264:
	.align	2, 0
.L263:
	.word	gSaveBlock1Ptr
	.word	sListMenuState+0x4
	.word	gMultiuseListMenuTemplate
	.word	Task_ItemPcMain
.Lfe35:
	.size	 ItemPc_InsertItemIntoNewSlot,.Lfe35-ItemPc_InsertItemIntoNewSlot
	.align	2, 0
	.type	 ItemPc_MoveItemModeCancel,function
	.thumb_func
ItemPc_MoveItemModeCancel:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r7, r1, #0x3
	ldr	r0, .L267
	mov	r8, r0
	add	r6, r7, r0
	ldrb	r0, [r6]
	ldr	r5, .L267+0x4
	add	r2, r5, #0x2
	add	r1, r5, #0
	bl	DestroyListMenuTask
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	cmp	r0, r4
	bcs	.L266	@cond_branch
	sub	r1, r5, #0x4
	ldrh	r0, [r1, #0x6]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x6]
.L266:
	bl	ItemPc_BuildListMenuTemplate
	ldr	r0, .L267+0x8
	sub	r2, r5, #0x4
	ldrh	r1, [r2, #0x4]
	ldrh	r2, [r2, #0x6]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6]
	mov	r0, #0x1
	bl	SetSwapLineInvisibility
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L267+0xc
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L268:
	.align	2, 0
.L267:
	.word	gTasks+0x8
	.word	sListMenuState+0x4
	.word	gMultiuseListMenuTemplate
	.word	Task_ItemPcMain
.Lfe36:
	.size	 ItemPc_MoveItemModeCancel,.Lfe36-ItemPc_MoveItemModeCancel
	.align	2, 0
	.type	 Task_ItemPcSubmenuInit,function
	.thumb_func
Task_ItemPcSubmenuInit:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L270
	mov	r9, r0
	add	r6, r4, r0
	mov	r0, #0x4
	bl	ItemPc_SetBorderStyleOnWindow
	mov	r0, #0x0
	bl	ItemPc_GetOrCreateSubwindow
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r5, #0x3
	str	r5, [sp, #0x4]
	ldr	r0, .L270+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x4
	mov	r1, #0x2
	mov	r2, #0x8
	mov	r3, #0x2
	bl	PrintTextArray
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r5, [sp, #0x4]
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	mov	r0, #0x4
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	Menu_InitCursor
	ldrh	r0, [r6, #0x2]
	bl	ItemPc_GetItemIdBySlotId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L270+0x8
	bl	CopyItemName
	ldr	r6, .L270+0xc
	ldr	r1, .L270+0x10
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, r8
	mov	r1, #0x2
	add	r2, r6, #0
	mov	r3, #0x0
	bl	ItemPc_AddTextPrinterParameterized
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x8
	neg	r0, r0
	add	r9, r9, r0
	add	r4, r4, r9
	ldr	r0, .L270+0x14
	str	r0, [r4]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gTasks+0x8
	.word	sItemPcSubmenuOptions
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1IsSelected
	.word	Task_ItemPcSubmenuRun
.Lfe37:
	.size	 Task_ItemPcSubmenuInit,.Lfe37-Task_ItemPcSubmenuInit
	.align	2, 0
	.type	 Task_ItemPcSubmenuRun,function
	.thumb_func
Task_ItemPcSubmenuRun:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	bl	Menu_ProcessInputNoWrapAround
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L273	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L276	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	Task_ItemPcCancel
	b	.L273
.L276:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L278
	lsl	r1, r4, #0x3
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r6, #0
	bl	_call_via_r1
.L273:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	sItemPcSubmenuOptions
.Lfe38:
	.size	 Task_ItemPcSubmenuRun,.Lfe38-Task_ItemPcSubmenuRun
	.align	2, 0
	.type	 Task_ItemPcWithdraw,function
	.thumb_func
Task_ItemPcWithdraw:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	ldr	r7, .L283
	add	r4, r6, r7
	mov	r0, #0x4
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x0
	bl	ItemPc_DestroySubwindow
	mov	r0, #0x4
	bl	ClearWindowTilemap
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0x2]
	bl	ItemPc_GetItemQuantityBySlotId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L281	@cond_branch
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r5, #0
	bl	ItemPc_DoWithdraw
	b	.L282
.L284:
	.align	2, 0
.L283:
	.word	gTasks+0x8
.L281:
	mov	r0, #0x0
	bl	PutWindowTilemap
	ldrh	r0, [r4, #0x2]
	bl	ItemPc_WithdrawMultipleInitWindow
	bl	ItemPc_PlaceWithdrawQuantityScrollIndicatorArrows
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L285
	str	r1, [r0]
.L282:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	Task_ItemPcHandleWithdrawMultiple
.Lfe39:
	.size	 Task_ItemPcWithdraw,.Lfe39-Task_ItemPcWithdraw
	.align	2, 0
	.type	 ItemPc_DoWithdraw,function
	.thumb_func
ItemPc_DoWithdraw:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r6, r1, #0x3
	ldr	r7, .L291
	add	r5, r6, r7
	ldrh	r0, [r5, #0x2]
	bl	ItemPc_GetItemIdBySlotId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldrh	r1, [r5, #0x10]
	add	r0, r4, #0
	bl	AddBagItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L288	@cond_branch
	ldr	r3, .L291+0x4
	mov	r0, #0x1d
	mov	r1, #0x0
	add	r2, r4, #0
	bl	ItemUse_SetQuestLogEvent
	ldr	r1, .L291+0x8
	add	r0, r4, #0
	bl	CopyItemName
	ldr	r0, .L291+0xc
	mov	r2, #0x10
	ldrsh	r1, [r5, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L291+0x10
	ldr	r1, .L291+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x2
	bl	ItemPc_GetOrCreateSubwindow
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r0, r1, #0
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L291+0x18
	b	.L290
.L292:
	.align	2, 0
.L291:
	.word	gTasks+0x8
	.word	0xffff
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_WithdrewQuantItem
	.word	Task_ItemPcWaitButtonAndFinishWithdrawMultiple
.L288:
	mov	r0, #0x2
	bl	ItemPc_GetOrCreateSubwindow
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r2, .L293
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r0, r1, #0
	mov	r1, #0x2
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L293+0x4
.L290:
	str	r1, [r0]
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gText_NoMoreRoomInBag
	.word	Task_ItemPcWaitButtonWithdrawMultipleFailed
.Lfe40:
	.size	 ItemPc_DoWithdraw,.Lfe40-ItemPc_DoWithdraw
	.align	2, 0
	.type	 Task_ItemPcWaitButtonAndFinishWithdrawMultiple,function
	.thumb_func
Task_ItemPcWaitButtonAndFinishWithdrawMultiple:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L298
	add	r5, r0, r1
	ldr	r0, .L298+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L297	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L296	@cond_branch
.L297:
	mov	r0, #0x5
	bl	PlaySE
	ldrh	r0, [r5, #0x2]
	bl	ItemPc_GetItemIdBySlotId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r5, #0x10]
	bl	RemovePCItem
	bl	ItemPcCompaction
	add	r0, r4, #0
	bl	Task_ItemPcCleanUpWithdraw
.L296:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L299:
	.align	2, 0
.L298:
	.word	gTasks+0x8
	.word	gMain
.Lfe41:
	.size	 Task_ItemPcWaitButtonAndFinishWithdrawMultiple,.Lfe41-Task_ItemPcWaitButtonAndFinishWithdrawMultiple
	.align	2, 0
	.type	 Task_ItemPcWaitButtonWithdrawMultipleFailed,function
	.thumb_func
Task_ItemPcWaitButtonWithdrawMultipleFailed:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L303
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L302	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L301	@cond_branch
.L302:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	Task_ItemPcCleanUpWithdraw
.L301:
	pop	{r4}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	gMain
.Lfe42:
	.size	 Task_ItemPcWaitButtonWithdrawMultipleFailed,.Lfe42-Task_ItemPcWaitButtonWithdrawMultipleFailed
	.align	2, 0
	.type	 Task_ItemPcCleanUpWithdraw,function
	.thumb_func
Task_ItemPcCleanUpWithdraw:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r6, #0x2
	add	r5, r5, r6
	lsl	r5, r5, #0x3
	ldr	r0, .L306
	add	r5, r5, r0
	mov	r0, #0x2
	bl	ItemPc_DestroySubwindow
	mov	r0, #0x1
	bl	PutWindowTilemap
	ldrb	r0, [r5]
	ldr	r4, .L306+0x4
	add	r2, r4, #0x2
	add	r1, r4, #0
	bl	DestroyListMenuTask
	bl	ItemPc_CountPcItems
	bl	ItemPc_SetCursorPosition
	bl	ItemPc_BuildListMenuTemplate
	ldr	r0, .L306+0x8
	sub	r4, r4, #0x4
	ldrh	r1, [r4, #0x4]
	ldrh	r2, [r4, #0x6]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r6, #0
	bl	ItemPc_ReturnFromSubmenu
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L307:
	.align	2, 0
.L306:
	.word	gTasks+0x8
	.word	sListMenuState+0x4
	.word	gMultiuseListMenuTemplate
.Lfe43:
	.size	 Task_ItemPcCleanUpWithdraw,.Lfe43-Task_ItemPcCleanUpWithdraw
	.align	2, 0
	.type	 ItemPc_WithdrawMultipleInitWindow,function
	.thumb_func
ItemPc_WithdrawMultipleInitWindow:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemPc_GetItemIdBySlotId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r6, .L309
	add	r1, r6, #0
	bl	CopyItemName
	ldr	r5, .L309+0x4
	ldr	r1, .L309+0x8
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	bl	ItemPc_GetOrCreateSubwindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	str	r1, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	add	r0, r6, #0
	mov	r1, #0x1
	mov	r2, #0x2
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L309+0xc
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x3
	bl	ItemPc_SetBorderStyleOnWindow
	mov	r0, #0xa
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	str	r4, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x3
	mov	r1, #0x0
	add	r2, r5, #0
	mov	r3, #0x8
	bl	ItemPc_AddTextPrinterParameterized
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_WithdrawHowMany
	.word	gText_TimesStrVar1
.Lfe44:
	.size	 ItemPc_WithdrawMultipleInitWindow,.Lfe44-ItemPc_WithdrawMultipleInitWindow
	.align	2, 0
	.type	 UpdateWithdrawQuantityDisplay,function
	.thumb_func
UpdateWithdrawQuantityDisplay:
	push	{r4, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x1c
	str	r0, [sp]
	mov	r0, #0xc
	str	r0, [sp, #0x4]
	mov	r0, #0x3
	mov	r1, #0x11
	mov	r2, #0xa
	mov	r3, #0xa
	bl	FillWindowPixelRect
	ldr	r0, .L312
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r1, r4, #0
	mov	r2, #0x2
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L312+0x4
	ldr	r1, .L312+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0xa
	str	r0, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	mov	r0, #0x3
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0x8
	bl	ItemPc_AddTextPrinterParameterized
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.L313:
	.align	2, 0
.L312:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TimesStrVar1
.Lfe45:
	.size	 UpdateWithdrawQuantityDisplay,.Lfe45-UpdateWithdrawQuantityDisplay
	.align	2, 0
	.type	 Task_ItemPcHandleWithdrawMultiple,function
	.thumb_func
Task_ItemPcHandleWithdrawMultiple:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L320
	add	r4, r0, r1
	add	r0, r4, #0
	add	r0, r0, #0x10
	ldrh	r1, [r4, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L315	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	bl	UpdateWithdrawQuantityDisplay
	b	.L316
.L321:
	.align	2, 0
.L320:
	.word	gTasks+0x8
.L315:
	ldr	r0, .L322
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L317	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	ItemPc_DestroySubwindow
	mov	r0, #0x3
	bl	ClearWindowTilemap
	mov	r0, #0x0
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	ItemPc_PrintOrRemoveCursor
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	ItemPc_RemoveScrollIndicatorArrowPair
	add	r0, r5, #0
	bl	ItemPc_DoWithdraw
	b	.L316
.L323:
	.align	2, 0
.L322:
	.word	gMain
.L317:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L316	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x3
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x1
	bl	ItemPc_DestroySubwindow
	mov	r0, #0x3
	bl	ClearWindowTilemap
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	ItemPc_PrintOrRemoveCursor
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	ItemPc_RemoveScrollIndicatorArrowPair
	add	r0, r6, #0
	bl	ItemPc_ReturnFromSubmenu
.L316:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 Task_ItemPcHandleWithdrawMultiple,.Lfe46-Task_ItemPcHandleWithdrawMultiple
	.align	2, 0
	.type	 Task_ItemPcGive,function
	.thumb_func
Task_ItemPcGive:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L325	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x0
	bl	ItemPc_DestroySubwindow
	mov	r0, #0x4
	bl	ClearWindowTilemap
	mov	r0, #0x0
	bl	PutWindowTilemap
	ldr	r1, .L327
	ldr	r2, .L327+0x4
	add	r0, r4, #0
	bl	ItemPc_PrintOnWindow5WithContinueTask
	b	.L326
.L328:
	.align	2, 0
.L327:
	.word	gText_ThereIsNoPokemon
	.word	gTask_ItemPcWaitButtonAndExitSubmenu
.L325:
	ldr	r0, .L329
	ldr	r1, [r0]
	ldr	r0, .L329+0x4
	str	r0, [r1]
	add	r0, r4, #0
	bl	Task_ItemPcTurnOff1
.L326:
	pop	{r4}
	pop	{r0}
	bx	r0
.L330:
	.align	2, 0
.L329:
	.word	sStateDataPtr
	.word	ItemPc_CB2_SwitchToPartyMenu
.Lfe47:
	.size	 Task_ItemPcGive,.Lfe47-Task_ItemPcGive
	.align	2, 0
	.type	 ItemPc_CB2_SwitchToPartyMenu,function
	.thumb_func
ItemPc_CB2_SwitchToPartyMenu:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x6
	str	r0, [sp]
	ldr	r0, .L332
	str	r0, [sp, #0x4]
	ldr	r0, .L332+0x4
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x6
	mov	r3, #0x0
	bl	InitPartyMenu
	bl	ItemPc_GetCursorPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ItemPc_GetItemIdBySlotId
	ldr	r1, .L332+0x8
	strh	r0, [r1, #0xc]
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L333:
	.align	2, 0
.L332:
	.word	Task_HandleChooseMonInput
	.word	ItemPc_CB2_ReturnFromPartyMenu
	.word	gPartyMenu
.Lfe48:
	.size	 ItemPc_CB2_SwitchToPartyMenu,.Lfe48-ItemPc_CB2_SwitchToPartyMenu
	.align	2, 0
	.type	 ItemPc_CB2_ReturnFromPartyMenu,function
	.thumb_func
ItemPc_CB2_ReturnFromPartyMenu:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	ItemPc_Init
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 ItemPc_CB2_ReturnFromPartyMenu,.Lfe49-ItemPc_CB2_ReturnFromPartyMenu
	.align	2, 0
	.type	 gTask_ItemPcWaitButtonAndExitSubmenu,function
	.thumb_func
gTask_ItemPcWaitButtonAndExitSubmenu:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L337
	add	r5, r0, r1
	ldr	r0, .L337+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L336	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x5
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrameToTransparent
	mov	r0, #0x5
	bl	ClearWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	ItemPc_PrintOrRemoveCursor
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r4, #0
	bl	ItemPc_ReturnFromSubmenu
.L336:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L338:
	.align	2, 0
.L337:
	.word	gTasks+0x8
	.word	gMain
.Lfe50:
	.size	 gTask_ItemPcWaitButtonAndExitSubmenu,.Lfe50-gTask_ItemPcWaitButtonAndExitSubmenu
	.align	2, 0
	.type	 Task_ItemPcCancel,function
	.thumb_func
Task_ItemPcCancel:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L340
	add	r4, r4, r0
	mov	r0, #0x4
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x0
	bl	ItemPc_DestroySubwindow
	mov	r0, #0x4
	bl	ClearWindowTilemap
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	ItemPc_PrintOrRemoveCursor
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r5, #0
	bl	ItemPc_ReturnFromSubmenu
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L341:
	.align	2, 0
.L340:
	.word	gTasks+0x8
.Lfe51:
	.size	 Task_ItemPcCancel,.Lfe51-Task_ItemPcCancel
	.align	2, 0
	.type	 ItemPc_InitWindows,function
	.thumb_func
ItemPc_InitWindows:
	push	{r4, lr}
	ldr	r0, .L353
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r1, #0xf0
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xe0
	bl	LoadUserWindowGfx
	ldr	r1, .L353+0x4
	mov	r0, #0x0
	mov	r2, #0xc0
	bl	LoadStdWindowGfx
	mov	r1, #0xeb
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xb0
	bl	LoadMenuMessageWindowGfx
	mov	r0, #0x2
	bl	GetTextWindowPalette
	mov	r1, #0xd0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L353+0x8
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r4, #0x0
.L346:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L346	@cond_branch
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r4, #0x0
	ldr	r3, .L353+0xc
	mov	r2, #0xff
.L351:
	add	r0, r4, r3
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L351	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L354:
	.align	2, 0
.L353:
	.word	sWindowTemplates
	.word	0x3a3
	.word	gStandardMenuPalette
	.word	sSubmenuWindowIds
.Lfe52:
	.size	 ItemPc_InitWindows,.Lfe52-ItemPc_InitWindows
	.align	2, 0
	.type	 unused_ItemPc_AddTextPrinterParameterized,function
	.thumb_func
unused_ItemPc_AddTextPrinterParameterized:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	ldr	r6, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	mov	r8, r4
	ldr	r4, [sp, #0x30]
	mov	r9, r4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r4, r8
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	mov	r4, r9
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r9, r4
	str	r1, [sp]
	mov	r1, sp
	strb	r0, [r1, #0x4]
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
	mov	r0, sp
	strb	r2, [r0, #0x6]
	strb	r3, [r0, #0x7]
	strb	r2, [r0, #0x8]
	strb	r3, [r0, #0x9]
	mov	r2, sp
	ldrb	r1, [r2, #0xc]
	mov	r5, #0xf
	add	r0, r5, #0
	and	r0, r0, r1
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
	ldrb	r1, [r2, #0xd]
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r1
	strb	r0, [r2, #0xd]
	mov	r1, sp
	mov	r0, #0x30
	strb	r0, [r1, #0xd]
	mov	r0, #0x3
	mov	r1, #0x4
	bl	GetFontAttribute
	mov	r1, sp
	and	r5, r5, r0
	ldrb	r0, [r1, #0xc]
	and	r4, r4, r0
	orr	r4, r4, r5
	strb	r4, [r1, #0xc]
	mov	r0, #0x3
	mov	r1, #0x2
	bl	GetFontAttribute
	mov	r1, sp
	add	r6, r6, r0
	strb	r6, [r1, #0xa]
	mov	r0, #0x3
	mov	r1, #0x3
	bl	GetFontAttribute
	mov	r1, sp
	add	r8, r8, r0
	mov	r0, r8
	strb	r0, [r1, #0xb]
	mov	r0, sp
	mov	r1, r9
	mov	r2, #0x0
	bl	AddTextPrinter
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 unused_ItemPc_AddTextPrinterParameterized,.Lfe53-unused_ItemPc_AddTextPrinterParameterized
	.align	2, 0
	.type	 ItemPc_AddTextPrinterParameterized,function
	.thumb_func
ItemPc_AddTextPrinterParameterized:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r9, r3
	ldr	r3, [sp, #0x30]
	ldr	r4, [sp, #0x34]
	ldr	r6, [sp, #0x38]
	ldr	r5, [sp, #0x3c]
	mov	r8, r5
	ldr	r5, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r7, r9
	lsl	r7, r7, #0x18
	lsr	r7, r7, #0x18
	mov	r9, r7
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r6, [sp, #0x4]
	lsl	r4, r5, #0x1
	add	r4, r4, r5
	ldr	r5, .L357
	add	r4, r4, r5
	str	r4, [sp, #0x8]
	mov	r4, r8
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp, #0xc]
	str	r2, [sp, #0x10]
	mov	r2, r9
	bl	AddTextPrinterParameterized4
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L358:
	.align	2, 0
.L357:
	.word	sTextColors
.Lfe54:
	.size	 ItemPc_AddTextPrinterParameterized,.Lfe54-ItemPc_AddTextPrinterParameterized
	.align	2, 0
	.type	 ItemPc_SetBorderStyleOnWindow,function
	.thumb_func
ItemPc_SetBorderStyleOnWindow:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0xf0
	lsl	r2, r2, #0x2
	mov	r1, #0x0
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 ItemPc_SetBorderStyleOnWindow,.Lfe55-ItemPc_SetBorderStyleOnWindow
	.align	2, 0
	.type	 ItemPc_GetOrCreateSubwindow,function
	.thumb_func
ItemPc_GetOrCreateSubwindow:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L362
	add	r4, r1, r0
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L361	@cond_branch
	lsl	r0, r1, #0x3
	ldr	r1, .L362+0x4
	add	r0, r0, r1
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	ldr	r2, .L362+0x8
	mov	r1, #0x1
	mov	r3, #0xc
	bl	DrawStdFrameWithCustomTileAndPalette
.L361:
	ldrb	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L363:
	.align	2, 0
.L362:
	.word	sSubmenuWindowIds
	.word	sSubwindowTemplates
	.word	0x3a3
.Lfe56:
	.size	 ItemPc_GetOrCreateSubwindow,.Lfe56-ItemPc_GetOrCreateSubwindow
	.align	2, 0
	.type	 ItemPc_DestroySubwindow,function
	.thumb_func
ItemPc_DestroySubwindow:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L365
	add	r4, r4, r0
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0xff
	strb	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L366:
	.align	2, 0
.L365:
	.word	sSubmenuWindowIds
.Lfe57:
	.size	 ItemPc_DestroySubwindow,.Lfe57-ItemPc_DestroySubwindow
	.align	2, 0
	.type	 ItemPc_GetSubwindow,function
	.thumb_func
ItemPc_GetSubwindow:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L368
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L369:
	.align	2, 0
.L368:
	.word	sSubmenuWindowIds
.Lfe58:
	.size	 ItemPc_GetSubwindow,.Lfe58-ItemPc_GetSubwindow
	.align	2, 0
	.type	 ItemPc_PrintOnWindow5WithContinueTask,function
	.thumb_func
ItemPc_PrintOnWindow5WithContinueTask:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	GetTextSpeedSetting
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0xeb
	lsl	r2, r2, #0x2
	mov	r1, #0x2
	str	r1, [sp]
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r6, [sp, #0xc]
	add	r0, r4, #0
	mov	r1, #0x5
	mov	r3, #0xb
	bl	DisplayMessageAndContinueTask
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 ItemPc_PrintOnWindow5WithContinueTask,.Lfe59-ItemPc_PrintOnWindow5WithContinueTask
.text
	.align	2, 0 @ Don't pad with nop

