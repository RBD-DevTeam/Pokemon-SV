@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sGame,object
	.size	 sGame,4
sGame:
	.word	0x0
	.section .rodata
	.type	 sBitTable,object
sBitTable:
	.byte	0x1
	.byte	0x2
	.byte	0x4
	.byte	0x8
	.byte	0x10
	.byte	0x20
	.byte	0x40
	.byte	0x80
	.size	 sBitTable,8
	.type	 sSyncPressBonus,object
	.size	 sSyncPressBonus,5
sSyncPressBonus:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x5
	.align	2, 0
	.type	 sIntroOutroVibrationData,object
sIntroOutroVibrationData:
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	-0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x3
	.byte	0x1
	.byte	-0x1
	.byte	-0x3
	.byte	-0x1
	.byte	0x0
	.byte	0x6
	.byte	0x4
	.byte	0x1
	.byte	-0x2
	.byte	-0x4
	.byte	-0x2
	.byte	0x0
	.size	 sIntroOutroVibrationData,35
	.globl	sVibrationData
	.align	2, 0
	.type	 sVibrationData,object
	.size	 sVibrationData,20
sVibrationData:
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x3
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x5
	.byte	0x3
	.byte	0x0
	.align	2, 0
	.type	 sMessages,object
sMessages:
	.word	gText_BerryCrush_AreYouReady
	.word	gText_BerryCrush_WaitForOthersToChooseBerry
	.word	gText_BerryCrush_GainedXUnitsOfPowder
	.word	gText_BerryCrush_RecordingGameResults
	.word	gText_BerryCrush_WantToPlayAgain
	.word	gText_BerryCrush_NoBerries
	.word	gText_BerryCrush_MemberDroppedOut
	.word	gText_BerryCrush_TimeUp
	.word	gText_BerryCrush_CommunicationStandby
	.size	 sMessages,36
	.align	2, 0
	.type	 sBerryCrushCommands,object
sBerryCrushCommands:
	.word	0x0
	.word	Cmd_BeginNormalPaletteFade
	.word	Cmd_WaitPaletteFade
	.word	Cmd_PrintMessage
	.word	Cmd_ShowGameDisplay
	.word	Cmd_HideGameDisplay
	.word	Cmd_SignalReadyToBegin
	.word	Cmd_AskPickBerry
	.word	Cmd_GoToBerryPouch
	.word	Cmd_WaitForOthersToPickBerries
	.word	Cmd_DropBerriesIntoCrusher
	.word	Cmd_DropLid
	.word	Cmd_Countdown
	.word	Cmd_PlayGame_Leader
	.word	Cmd_PlayGame_Member
	.word	Cmd_FinishGame
	.word	Cmd_HandleTimeUp
	.word	Cmd_TabulateResults
	.word	Cmd_ShowResults
	.word	Cmd_SaveGame
	.word	Cmd_AskPlayAgain
	.word	Cmd_CommunicatePlayAgainResponses
	.word	Cmd_PlayAgain
	.word	Cmd_StopGame
	.word	Cmd_CloseLink
	.word	Cmd_Quit
	.size	 sBerryCrushCommands,104
	.type	 sSparkleThresholds,object
	.size	 sSparkleThresholds,16
sSparkleThresholds:
	.byte	0x2
	.byte	0x4
	.byte	0x6
	.byte	0x7
	.byte	0x3
	.byte	0x5
	.byte	0x8
	.byte	0xb
	.byte	0x3
	.byte	0x7
	.byte	0xb
	.byte	0xf
	.byte	0x4
	.byte	0x8
	.byte	0xc
	.byte	0x11
	.type	 sBigSparkleThresholds,object
	.size	 sBigSparkleThresholds,4
sBigSparkleThresholds:
	.byte	0x5
	.byte	0x7
	.byte	0x9
	.byte	0xc
	.type	 sReceivedPlayerBitmasks,object
	.size	 sReceivedPlayerBitmasks,4
sReceivedPlayerBitmasks:
	.byte	0x3
	.byte	0x7
	.byte	0xf
	.byte	0x1f
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,16
sBgTemplates:
	.byte	0xf8
	.byte	0x0
	.byte	0x0
	.space	1
	.byte	0xd1
	.byte	0x14
	.byte	0x0
	.space	1
	.byte	0xc2
	.byte	0x20
	.byte	0x0
	.space	1
	.byte	0xb3
	.byte	0x30
	.byte	0x0
	.space	1
	.type	 sBerryCrushTextColorTable,object
sBerryCrushTextColorTable:
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x9
	.byte	0x1
	.byte	0x6
	.byte	0x7
	.byte	0x1
	.byte	0x4
	.byte	0x5
	.size	 sBerryCrushTextColorTable,18
	.align	2, 0
	.type	 sWindowTemplate_BerryCrushRankings,object
	.size	 sWindowTemplate_BerryCrushRankings,8
sWindowTemplate_BerryCrushRankings:
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x18
	.byte	0xd
	.byte	0xf
	.short	0x1
	.align	2, 0
	.type	 sWindowTemplates_PlayerNames,object
sWindowTemplates_PlayerNames:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3ed
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3db
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3c9
	.byte	0x0
	.byte	0x15
	.byte	0x3
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3b7
	.byte	0x0
	.byte	0x15
	.byte	0x6
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.short	0x3a5
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates_PlayerNames,48
	.align	2, 0
	.type	 sWindowTemplates_Results,object
sWindowTemplates_Results:
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x16
	.byte	0x10
	.byte	0xf
	.short	0x1
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x16
	.byte	0x10
	.byte	0xf
	.short	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x18
	.byte	0x10
	.byte	0xf
	.short	0x1
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sWindowTemplates_Results,32
	.type	 sResultsWindowHeights,object
sResultsWindowHeights:
	.byte	0x6
	.byte	0x8
	.byte	0x9
	.byte	0xb
	.byte	0xc
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.size	 sResultsWindowHeights,8
	.align	2, 0
	.type	 sPressingSpeedConversionTable,object
sPressingSpeedConversionTable:
	.word	0x2faf080
	.word	0x17d7840
	.word	0xbebc20
	.word	0x5f5e10
	.word	0x2faf08
	.word	0x17d784
	.word	0xbebc2
	.word	0x5f5e1
	.size	 sPressingSpeedConversionTable,32
	.align	1, 0
	.type	 sBerryCrushCorePal,object
sBerryCrushCorePal:
	.short	0x5eff
	.short	0x2a12
	.short	0x3a96
	.short	0x4af9
	.short	0x573a
	.short	0x5f7c
	.short	0x67be
	.short	0x77ff
	.short	0x39ac
	.short	0x41ee
	.short	0x0
	.short	0x960
	.short	0x1f
	.short	0x6546
	.short	0x4295
	.short	0x2d28
	.size	 sBerryCrushCorePal,32
	.align	1, 0
	.type	 sBerryCrushImpactAndSparklesPal,object
sBerryCrushImpactAndSparklesPal:
	.short	0x5eff
	.short	0x57bf
	.short	0x3ff
	.short	0x279f
	.short	0x23f
	.short	0x7ff8
	.short	0x7f51
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x67f8
	.short	0x435f
	.short	0x4fff
	.short	0x7fff
	.size	 sBerryCrushImpactAndSparklesPal,32
	.align	1, 0
	.type	 sBerryCrushTimerPal,object
sBerryCrushTimerPal:
	.short	0x0
	.short	0x5372
	.short	0x5794
	.short	0x5fb6
	.short	0x67d8
	.short	0x6ffa
	.short	0x77fd
	.short	0x7db9
	.short	0x6d55
	.short	0x4a52
	.short	0x3def
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x5ef6
	.short	0x7fff
	.size	 sBerryCrushTimerPal,32
	.align	2, 0
	.type	 sBerryCrushCoreTiles,object
sBerryCrushCoreTiles:
	.word	0x80010
	.word	-0xfffffd0
	.word	-0xfe6fff
	.word	0x2343441
	.word	0x3344215f
	.word	0x700115f
	.word	0x33410415
	.word	0x11555f
	.word	0x211503
	.word	0x114555f0
	.word	0x245555f0
	.word	0x11111300
	.word	0x11233322
	.word	0x33330011
	.word	0x23331122
	.word	0xc62223
	.word	0x230f0007
	.word	0x7003122
	.word	-0x64dde600
	.word	0x21110110
	.word	0xd000b10
	.word	-0x2feeafee
	.word	0x1800f001
	.word	0x28000120
	.word	0x111101d0
	.word	0x11101131
	.word	0x65003332
	.word	0x32322233
	.word	0x505d10d0
	.word	0x1c101307
	.word	-0xebbcbd
	.word	0x12443300
	.word	0x114343f5
	.word	0x143300f5
	.word	0x1133f551
	.word	0x1200f555
	.word	0x11f55551
	.word	0xf0f5554
	.word	0xf555542
	.word	0x1f0d1f0
	.word	-0x7ffe10
	.word	0x45455200
	.word	0x4455325f
	.word	0x22405f
	.word	0x44522507
	.word	-0x6bddaaa1
	.word	0x32250300
	.word	0x22ff00
	.word	-0x7febcb01
	.word	0x2444d200
	.word	0x44441111
	.word	0x44110023
	.word	0x44333434
	.word	0x335d3344
	.word	0x420710
	.word	-0x7f54dff9
	.word	-0x19ffcc01
	.word	-0x4fccccc4
	.word	-0x2f003fff
	.word	0x1155011e
	.word	0x11110241
	.word	0x32114442
	.word	0x68435900
	.word	0x505d1043
	.word	0x3d102407
	.word	0x255454
	.word	0x235544ff
	.word	0x225454f5
	.word	0x2544f500
	.word	0x2244f552
	.word	0x23f50255
	.word	0x22f55552
	.word	-0xabc0100
	.word	0x1f0fff0
	.word	-0x1ffe10
	.word	0x6fff006f
	.word	0x6f01ff00
	.word	0x6f445226
	.word	0x3002266
	.word	-0xfcdda00
	.word	-0xfdda99a
	.word	0x35661066
	.word	0x44e40024
	.word	-0x51ddddcc
	.word	-0x1fdd6b00
	.word	-0x3cbfcd01
	.word	-0x1aeff900
	.word	0x11236f33
	.word	0x3301f011
	.word	0x1201810
	.word	0x20b13040
	.word	0x22224207
	.word	0x65004443
	.word	0x3700fff0
	.word	-0x900bf60
	.word	0x44f6ff00
	.word	0xf66225
	.word	-0x999ddbc
	.word	-0x9999ddd
	.word	0x66652201
	.word	0x6666530f
	.word	-0xf1f0010
	.word	-0x6ffe0fff
	.word	0x565662ff
	.word	0x6608326f
	.word	0x226f55
	.word	0x55622607
	.word	0xff00c1
	.word	0x2f322603
	.word	-0xff999a
	.word	0x25365618
	.word	0xa02d200
	.word	-0x75aaaade
	.word	0x45457901
	.word	0x44070044
	.word	-0x4badf8f0
	.word	0x11220700
	.word	0x34ff80b3
	.word	0x4444e600
	.word	-0x3ffe4f2f
	.word	0x1fe043ff
	.word	0x1522222
	.word	0x7502cde5
	.word	0x54545900
	.word	0x7505d10
	.word	0x730225
	.word	0x26656522
	.word	0x236655ff
	.word	0x6565f600
	.word	0x2655f622
	.word	0x55f62162
	.word	0x6666ff50
	.word	0x30163f2
	.word	-0xf2e0f08
	.word	0x7001f001
	.word	0x55e30101
	.word	0x560a6f00
	.word	0x2f0056
	.word	0x700f007
	.word	0x556f3300
	.word	0x3001500
	.word	0x1f10ff00
	.word	0x4416ff00
	.word	-0xefcaab
	.word	0x10ffa054
	.word	0xcf5f07
	.word	0x22c31007
	.word	-0xffcffbe
	.word	0x20180ff
	.word	-0xf1ebb
	.word	-0xdffed0
	.word	0x45225553
	.word	0x1090ffe0
	.word	0x155f507
	.word	-0x99a9a1d
	.word	0x66550000
	.word	0x656500f2
	.word	0x550f000f
	.word	0x120000f6
	.word	-0xf63df0b
	.word	-0xffe0fff
	.word	0x1f001f0
	.word	0x1f7101f0
	.word	0x44441f
	.word	0x44ffff02
	.word	0x98f000
	.word	-0x66a3608e
	.word	0x109f1100
	.word	0x501f5016
	.word	0x41ffc6
	.word	-0x77bbbc
	.word	-0x7770001
	.word	-0x700000ea
	.word	0xf00300
	.word	-0x5afff5
	.word	0x14e870ab
	.word	0xff1100
	.word	0x3108f22
	.word	-0xdfdf00
	.word	0x4421100f
	.word	0x440ff144
	.word	-0xf7ff80
	.word	-0x66fff077
	.word	0x3f00f9
	.word	-0xe24ff07
	.word	-0xffe0f2c
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f10
	.word	-0x6ffe0fff
	.word	0x1
	.size	 sBerryCrushCoreTiles,812
	.align	2, 0
	.type	 sBerryCrushImpactTiles,object
sBerryCrushImpactTiles:
	.word	0xe0010
	.word	-0xfffffc1
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x5fe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0xf00120
	.word	-0x2f5000fe
	.word	0x3800f14
	.word	-0xfe21f01
	.word	-0x1ffe0fff
	.word	0x4510ff01
	.word	0x7206b00
	.word	0x1cb05610
	.word	0x18101100
	.word	-0xf00dbb0
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f18
	.word	0x1001c001
	.word	0x110340
	.word	0x11110511
	.word	0x111000
	.word	0xd10010d
	.word	0x300e00f9
	.word	0x100d0020
	.word	0x1e200e
	.word	-0xf2ffef
	.word	0x11401f10
	.word	0x1f04ef0
	.word	0x18001f0
	.word	-0x7edfbef0
	.word	0x205710ff
	.word	0x40582074
	.word	0x400a4015
	.word	0x107b0073
	.word	0x1140ff1e
	.word	0x1f00320
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf02fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x201e001
	.word	0x227d0340
	.word	0x1f01af0
	.word	0x1f001f0
	.word	0x10200130
	.word	-0xfdf9db1
	.word	0x20030013
	.word	0x1002222
	.word	0x2009700
	.word	0x79002200
	.word	-0x7ffcefe0
	.word	0x7f130084
	.word	0x101c0020
	.word	0x402f101d
	.word	0x601e2021
	.word	-0xfe0fd9
	.word	0x2e4001f0
	.word	0x10a04310
	.word	0x44001420
	.word	0x70200320
	.word	0x209620fb
	.word	0x40038009
	.word	0x22283066
	.word	-0x5cafd3f0
	.word	-0xf7f0f01
	.word	0x4001f001
	.word	-0xf13bf02
	.word	-0xff38eff
	.word	0x1f0ffe1
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf1dfe10
	.word	-0xffe0fff
	.word	0x30000001
	.word	0x330340
	.word	0x33333330
	.word	0x3333300
	.word	0x330001e
	.word	0x3101100
	.word	0xd002470
	.word	0x1900af00
	.word	0x3230000
	.word	0x1f402300
	.word	0x1f01510
	.word	-0xffe0f01
	.word	0x7db001
	.word	0x10761047
	.word	0x1005005b
	.word	-0x689f0896
	.word	0x72106750
	.word	0x20337a20
	.word	-0xffe0f75
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x209401f0
	.word	0x44001
	.word	0x4004404
	.word	0xcc4444
	.word	0x3000c
	.word	0x40038040
	.word	-0xbbbbed
	.word	0x2b100130
	.word	0xd100170
	.word	0x41403d20
	.word	0x1f04b30
	.word	0x300160ff
	.word	0x402e2040
	.word	0x60675003
	.word	0x4089204e
	.word	0x180af0c
	.word	-0xafcffb0
	.word	0x76070600
	.word	0x3b50a320
	.word	0x50120af
	.word	0x175f0300
	.word	0x80093
	.word	-0x236df5c
	.word	-0x2f2fb8b0
	.word	-0x57efa5d0
	.word	0x29000310
	.word	0x7f302040
	.word	0x10060044
	.word	0x176a102a
	.word	0x206b00da
	.word	-0x679f8d
	.word	0x6310e350
	.word	0x73106b10
	.word	0x2b714591
	.word	0x59613ca1
	.word	0x60fa10ff
	.word	0x7001f062
	.word	0x10270048
	.word	0x3096108b
	.word	-0x52bf00f5
	.word	0x1b102070
	.word	0x59101810
	.word	0x2ed1c740
	.word	-0xe00fe10
	.word	0x109c60f6
	.word	0x20ad4068
	.word	0x10bea046
	.word	0x5f08110a
	.word	0x55f01050
	.word	-0x689f040f
	.word	0x6bc001f0
	.word	0xf56721
	.word	0x40aaf009
	.word	0x555d3001
	.word	0x506800
	.word	0x5f50010a
	.word	-0xaafffb
	.word	0x30055
	.word	-0xaaaafa1
	.word	-0xaa01
	.word	0x600ff5d
	.word	0x108c20ff
	.word	0x5503001e
	.word	-0xaad77ff
	.word	0x20ff2600
	.word	0x55503
	.word	-0x4e00aadf
	.word	-0xf9f0fd4
	.word	0x4207319c
	.word	0x240006
	.word	-0x3097ff9d
	.word	0x7f100330
	.word	0x6b205555
	.word	0x6400ff59
	.word	0x40ff0200
	.word	0x833073
	.word	-0x3d48bf8b
	.word	0x424da115
	.word	-0xfe0ff8
	.word	0x739201f0
	.word	0x13a33712
	.word	-0x659d93f0
	.word	0xf637352
	.word	0x121b12ff
	.word	-0x2fd0afc1
	.word	0x603e3003
	.word	0x304941b0
	.word	0x22d1c710
	.word	0x5555f221
	.word	0x10df1005
	.word	-0x40227fe8
	.word	0x30508571
	.word	0x109450fd
	.word	0x7003f023
	.word	-0x20987ffd
	.word	0x56505250
	.word	-0xeb4fffb
	.word	-0xffe0fc0
	.word	-0x4c3fff
	.word	-0x37dfeb10
	.word	-0x51ff33e0
	.word	0x4461f740
	.word	0x380de22
	.word	0x503ef0ff
	.word	-0x2bbf0d50
	.word	0x2f02a3
	.word	-0x6f7b7fd3
	.word	0x3e40fffb
	.word	0x3012ff80
	.word	0x30703610
	.word	0x5bf06f21
	.word	0x30fe6580
	.word	-0x7f540f38
	.word	0x604e005c
	.word	0x502920e5
	.word	0x507d
	.size	 sBerryCrushImpactTiles,892
	.align	2, 0
	.type	 sBerryCrushPowderSparklesTiles,object
sBerryCrushPowderSparklesTiles:
	.word	0x70010
	.word	-0x3fffffe0
	.word	0xef001
	.word	0xd6be000
	.word	0x1f016e0
	.word	-0x21fcff11
	.word	0x1f016f0
	.word	-0xfa50f3a
	.word	-0x3fffffff
	.word	0x6002010
	.word	0xcf7fff
	.word	0x10240007
	.word	-0xffe0ff1
	.word	-0xffe0f81
	.word	0x7ff0e701
	.word	-0x7caffe10
	.word	0x7000cfc
	.word	0x1f024f0
	.word	-0xf800f01
	.word	-0xf800fff
	.word	-0xfdb0f81
	.word	0x19024
	.word	0xf002b9f
	.word	0xffa700
	.word	0x1ef0df08
	.word	-0xf05d010
	.word	-0xffe0fa6
	.word	-0x4ffe0f81
	.word	-0x58fe3fad
	.word	-0xe238900
	.word	0x512cf041
	.word	-0x250eff26
	.word	0x7ff001f0
	.word	-0xefe0f01
	.word	-0xffe0f81
	.word	-0xf250e7d
	.word	-0xf800fff
	.word	0x7ff0ff01
	.word	0x1f001f0
	.word	-0x5f0fa510
	.word	0x2800ff72
	.word	-0xf60db0f
	.word	-0xf11ff81
	.word	-0x4ffe0fea
	.word	-0xffcff81
	.word	-0x5fbe3085
	.word	-0x3dfff
	.word	0x28115702
	.word	-0x7c0ff0f0
	.word	-0xf800f08
	.word	-0xffe0fff
	.word	0xc4dd27f
	.word	-0x3803310
	.word	0x350fb20
	.word	0x17100f10
	.word	0x7ff02df0
	.word	-0xf00800e
	.word	-0xe809dec
	.word	-0xf000fa6
	.word	-0xffe0f01
	.word	0x6f01107f
	.word	0x605af0fc
	.word	0x5af0005a
	.word	-0x5bcdd310
	.word	-0xf01db0f
	.word	0x117f6001
	.word	0x50525023
	.word	0x410f1003
	.word	0x7f0c3b
	.word	-0x4dfb5ff
	.word	0xf100350
	.word	-0x5b0da50f
	.word	0x44cf01f0
	.word	-0x3f04fc85
	.word	0x14a811ff
	.word	-0x4f000ffd
	.word	0xf7fd2
	.word	-0xf08cf74
	.word	-0xffe0f01
	.word	-0xbfe0f81
	.word	0x1f0f07f
	.word	0x5af187f0
	.word	0x110
	.size	 sBerryCrushPowderSparklesTiles,332
	.align	2, 0
	.type	 sBerryCrushTimerTiles,object
sBerryCrushTimerTiles:
	.word	0x2c010
	.word	0x40000020
	.word	0xeeee01
	.word	-0xfe0020
	.word	-0x1f2
	.word	0x1f0feef
	.word	0x1b0f8
	.word	0x102b1023
	.word	0x3f6033
	.word	0x830eee
	.word	-0x1fff1c0
	.word	0x1b100eff
	.word	-0x1181fce0
	.word	0x13100f00
	.word	0x34003f0
	.word	0x7e603300
	.word	0x3a00c0ee
	.word	-0x111180d0
	.word	0xeffe
	.word	0x300f1
	.word	0x10470007
	.word	-0x1001f191
	.word	0x20ff1f00
	.word	0x301d0015
	.word	-0x7ff6ffed
	.word	0x30bff080
	.word	-0x70ffb9
	.word	0xb100310
	.word	0x3ea0bff0
	.word	0x6b005f50
	.word	0x3606f10
	.word	-0x907f41
	.word	-0x400f9bf0
	.word	0x2760bf30
	.word	0x4b107940
	.word	0x20d3e0ff
	.word	-0x6f2cbf79
	.word	0x40bff0be
	.word	-0xf6c0e3f
	.word	0x7fc0cfbf
	.word	-0x1f94e0
	.word	-0x4dffcf0
	.word	0x3f0d840
	.word	-0x1f800f01
	.word	-0xf34ae95
	.word	-0xf003e81
	.word	0x302b903f
	.word	0x3ff0f8f7
	.word	-0x771ec07e
	.word	0x17f09fe0
	.word	0x0
	.size	 sBerryCrushTimerTiles,204
	.align	2, 0
	.type	 sCrusherTop_Tilemap,object
sCrusherTop_Tilemap:
	.word	0x28010
	.word	-0xfffffc2
	.word	-0xffe0fff
	.word	0x7001f001
	.word	0x101
	.word	0x30002
	.word	0x50004
	.word	0x7200620
	.word	0x9100810
	.word	0xa100e
	.word	-0xfd90ff5
	.word	0x10012001
	.word	0x110000
	.word	0x130012
	.word	0x15000014
	.word	0x17201620
	.word	0x11800
	.word	0x101a1019
	.word	0x29f0101b
	.word	0x1f0a0
	.word	0xc6700
	.word	0xe000d
	.word	0x20000f00
	.word	0x22202120
	.word	0x20232000
	.word	0x10251024
	.word	0x27103826
	.word	0x1f03ff0
	.word	0x1c0120
	.word	0x1e00001d
	.word	0x30001f00
	.word	0x20003120
	.word	0x20332032
	.word	0xe350034
	.word	0x37103610
	.word	0x1f03ff0
	.word	0x280120
	.word	0x2a002900
	.word	0x2c002b00
	.word	0x202d0000
	.word	0x142c242d
	.word	0x2a14032b
	.word	0x2e042914
	.word	0x1f03ff0
	.word	0x38012080
	.word	0x3a003900
	.word	0x3b00
	.word	0x3d003c
	.word	0x3c043d
	.word	0x3a143b14
	.word	0x38043914
	.word	0x29f00470
	.word	0x11001f0
	.word	0x410040
	.word	0x43004200
	.word	0x45004400
	.word	0x4450000
	.word	0x14431444
	.word	0x411c1442
	.word	0x3ff04004
	.word	0x12001f0
	.word	0x51000050
	.word	0x53005200
	.word	0x5400
	.word	0x4550055
	.word	0x4530454
	.word	0x51045207
	.word	0x3ff05004
	.word	0x16001f0
	.word	0x47004600
	.word	0x49004800
	.word	0x4490000
	.word	0x4470448
	.word	0x2e00446
	.word	0x203ff00c
	.word	0x1
	.size	 sCrusherTop_Tilemap,304
	.align	2, 0
	.type	 sContainerCap_Tilemap,object
sContainerCap_Tilemap:
	.word	0x50010
	.word	-0xfffffc1
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf1ffe10
	.word	-0x4ffe0fff
	.word	0x61506001
	.word	0x50006250
	.word	0x50645063
	.word	0x5065
	.word	0x65540050
	.word	0x63546454
	.word	0x54625401
	.word	0x54605461
	.word	-0xf7fd210
	.word	0x71507001
	.word	0x73507250
	.word	0x50745008
	.word	0x753f2075
	.word	0x54007454
	.word	0x54725473
	.word	-0x3f8fab8f
	.word	0x1f03ff0
	.word	0x67506600
	.word	0x50006850
	.word	0x506a5069
	.word	0x6c506b
	.word	0x6b546c50
	.word	0x69546a54
	.word	0x54685403
	.word	-0xf99ab99
	.word	0x1f03f
	.word	0x77507600
	.word	0x79507850
	.word	0x507a5000
	.word	0x507c507b
	.word	0x7b54007c
	.word	0x79547a54
	.word	0x540c7854
	.word	-0xf89ab89
	.word	0x1f03f
	.word	-0x7eafff80
	.word	-0x7caf7db0
	.word	0x50008450
	.word	0x50865085
	.word	0x855486
	.word	-0x7cab7bac
	.word	-0x7eab7dac
	.word	-0xf7fabd0
	.word	0x1f03f
	.word	0x915090
	.word	-0x6caf6db0
	.word	-0x6aaf6bb0
	.word	0x50965000
	.word	0x54955496
	.word	-0x6cabff6c
	.word	-0x6eab6dac
	.word	-0xf3f6fac
	.word	0x1f03f
	.word	0x50895088
	.word	-0x74afff76
	.word	-0x72af73b0
	.word	0x50008e50
	.word	0x548d548e
	.word	0x38b548c
	.word	-0x76ab75ac
	.word	0x3ff08854
	.word	0x1f0
	.word	0x50995098
	.word	0x9b509a
	.word	-0x62af63b0
	.word	-0x61af61b0
	.word	0x549d5400
	.word	0x549b549c
	.word	-0x66abf266
	.word	0x3ff09854
	.word	0x10001f0
	.word	0x10080b3
	.word	0x50575056
	.word	0xbb5058
	.word	0x5850bc50
	.word	0x56545754
	.word	0x3000543d
	.word	-0xfd20fff
	.word	0x542b5001
	.word	-0x5f03b6d0
	.word	-0xfd20fff
	.word	-0xffe0fff
	.word	0x18001
	.size	 sContainerCap_Tilemap,408
	.align	2, 0
	.type	 sBg_Tilemap,object
sBg_Tilemap:
	.word	0x80010
	.word	-0xfbf51ca
	.word	-0x50fecfff
	.word	0x3c003f0
	.word	0x600
	.word	-0xfbf4200
	.word	-0x40fecfff
	.word	-0x3ffc0f1b
	.word	-0x31c0effd
	.word	-0x30fe2fc0
	.word	-0xf18fc10
	.word	0x10032003
	.word	-0xfbf21c1
	.word	-0xffe0fff
	.word	0x110cf01
	.word	0x40ef3f10
	.word	0x1f001f0
	.word	0x11001f0
	.word	-0xc0ef69
	.word	-0x1fe0fc0
	.word	0x3f003f0
	.word	0x10900300
	.word	-0xfcf5dc1
	.word	-0x5ccf5dff
	.word	0x30a40030
	.word	0x30a630a5
	.word	-0x5afecb5a
	.word	-0x5ccb5bcc
	.word	0x1f0a234
	.word	-0xffeff20
	.word	-0x57feef81
	.word	-0x55cf56d0
	.word	0x30ab3000
	.word	0x30ad30ac
	.word	-0x53cbff53
	.word	-0x55cb54cc
	.word	0x3418a934
	.word	0x29f034a8
	.word	0x40ff3ff0
	.word	-0x4ecfff50
	.word	-0x4ccf4dd0
	.word	0x3000b430
	.word	0x30b630b5
	.word	0xb534b6
	.word	-0x4ccb4bcc
	.word	-0x4ecb4dcc
	.word	-0x1f4fcbd0
	.word	-0x2fc00fbf
	.word	0x70d170
	.word	0x30c230c1
	.word	0x30c430c3
	.word	-0x39cf3b00
	.word	-0x3acb39d0
	.word	0x34c40034
	.word	0x34c234c3
	.word	-0x2ef3cb3f
	.word	-0xf8b2f8c
	.word	-0x1fee4fc1
	.word	0x70e12070
	.word	0x30b70710
	.word	0xb930b8
	.word	-0x45cf45d0
	.word	-0x47cb46cc
	.word	0x34b73400
	.word	0x44ff44ff
	.word	-0x1f8bce1f
	.word	0x3fc03ff0
	.word	0x20f170f0
	.word	0x40ff003f
	.word	0x30c930c8
	.word	-0x35fbcf36
	.word	-0x37cb36cc
	.word	0x44ff3d20
	.word	-0xf8b0ee8
	.word	0x3fc03ff0
	.word	-0xe2c8f2e
	.word	0x1603f40
	.word	0x1103b20
	.word	-0xf2d8b2d
	.word	0x3fc08c3f
	.word	-0xf1c8f1e
	.word	-0x1cfebfc1
	.word	-0xf1d9c8c
	.word	-0xdc03fc1
	.word	0x3ff0f370
	.word	-0xce7fec0
	.word	0x3ff0f274
	.word	0x70d43fc0
	.word	-0xb8fff2b
	.word	-0x98f0a90
	.word	0x7020f770
	.word	0x740130f8
	.word	0x74f674f7
	.word	-0xb8b0aff
	.word	-0x2b8b2a8c
	.word	-0x3f73c010
	.word	-0x1a8f1bc1
	.word	0x3f403ff0
	.word	-0x1b9f8b1b
	.word	0x3ff03ff0
	.word	-0x58f0690
	.word	0x70fb0470
	.word	0x20fd70fc
	.word	0x174fd3f
	.word	0x74fb74fc
	.word	-0xf068b06
	.word	0x3ff0c03f
	.word	0x70d63f20
	.word	0x70d870d7
	.word	0x3f60e640
	.word	0x74d874e6
	.word	-0x29808b29
	.word	0x3ff03ff0
	.word	0x3ff03ff0
	.word	0x3ff03ff0
	.word	-0xf00c010
	.word	-0xfc00fc1
	.word	-0x1fc00fc1
	.word	-0xffe0fc1
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0x8feafff
	.word	-0xf800889
	.word	-0xf8088fd
	.word	-0x3fc00fc9
	.word	0x3f7003f0
	.size	 sBg_Tilemap,552
	.type	 sPlayerIdToPosId,object
	.size	 sPlayerIdToPosId,20
sPlayerIdToPosId:
	.byte	0x1
	.byte	0x3
	.space	3
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.space	2
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x4
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x4
	.align	2, 0
	.type	 sPlayerCoords,object
sPlayerCoords:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.short	0x0
	.short	-0x10
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.space	1
	.short	-0x1c
	.short	-0x4
	.short	-0x18
	.short	0x10
	.byte	0x2
	.byte	0x0
	.byte	0x6
	.space	1
	.short	-0x10
	.short	0x14
	.short	-0x8
	.short	0x10
	.byte	0x3
	.byte	0x14
	.byte	0x3
	.space	1
	.short	0x1c
	.short	-0x4
	.short	0x20
	.short	-0x8
	.byte	0x4
	.byte	0x14
	.byte	0x6
	.space	1
	.short	0x10
	.short	0x14
	.short	0x10
	.short	-0x8
	.size	 sPlayerCoords,60
	.type	 sImpactCoords,object
sImpactCoords:
	.byte	0x0
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.size	 sImpactCoords,6
	.type	 sSparkleCoords,object
sSparkleCoords:
	.byte	0x0
	.byte	0x0
	.byte	-0x10
	.byte	-0x4
	.byte	0x10
	.byte	-0x4
	.byte	-0x8
	.byte	-0x2
	.byte	0x8
	.byte	-0x2
	.byte	-0x18
	.byte	-0x8
	.byte	0x18
	.byte	-0x8
	.byte	-0x20
	.byte	-0xc
	.byte	0x20
	.byte	-0xc
	.byte	-0x28
	.byte	-0x10
	.byte	0x28
	.byte	-0x10
	.size	 sSparkleCoords,22
	.align	1, 0
	.type	 sPlayerBerrySpriteTags,object
sPlayerBerrySpriteTags:
	.short	0x5
	.short	0x6
	.short	0x7
	.short	0x8
	.short	0x9
	.size	 sPlayerBerrySpriteTags,10
	.align	2, 0
	.type	 sSpriteSheets,object
sSpriteSheets:
	.word	sBerryCrushCoreTiles
	.short	0x800
	.short	0x1
	.word	sBerryCrushImpactTiles
	.short	0xe00
	.short	0x2
	.word	sBerryCrushPowderSparklesTiles
	.short	0x700
	.short	0x3
	.word	sBerryCrushTimerTiles
	.short	0x2c0
	.short	0x4
	.space	8
	.size	 sSpriteSheets,40
	.align	2, 0
	.type	 sSpritePals,object
sSpritePals:
	.word	sBerryCrushCorePal
	.short	0x1
	.space	2
	.word	sBerryCrushImpactAndSparklesPal
	.short	0x2
	.space	2
	.word	sBerryCrushTimerPal
	.short	0x4
	.space	2
	.space	8
	.size	 sSpritePals,32
	.align	2, 0
	.type	 sAnim_CrusherBase,object
sAnim_CrusherBase:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CrusherBase,8
	.align	2, 0
	.type	 sAnim_Impact_Small,object
sAnim_Impact_Small:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Impact_Small,16
	.align	2, 0
	.type	 sAnim_Impact_Big,object
sAnim_Impact_Big:
	.short	0x30
	.byte	0x2
	.space	1
	.short	0x40
	.byte	0x2
	.space	1
	.short	0x50
	.byte	0x2
	.space	1
	.short	0x60
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Impact_Big,20
	.align	2, 0
	.type	 sAnim_Sparkle_Small,object
sAnim_Sparkle_Small:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x4
	.byte	0x2
	.space	1
	.short	0x8
	.byte	0x2
	.space	1
	.short	0xc
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x14
	.byte	0x2
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_Sparkle_Small,28
	.align	2, 0
	.type	 sAnim_Sparkle_Big,object
sAnim_Sparkle_Big:
	.short	0x18
	.byte	0x4
	.space	1
	.short	0x1c
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x24
	.byte	0x4
	.space	1
	.short	0x28
	.byte	0x4
	.space	1
	.short	0x2c
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x34
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_Sparkle_Big,36
	.align	2, 0
	.type	 sAnim_Timer,object
sAnim_Timer:
	.short	0x14
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Timer,8
	.align	2, 0
	.type	 sAnim_PlayerBerry,object
sAnim_PlayerBerry:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_PlayerBerry,8
	.align	2, 0
	.type	 sAffineAnim_PlayerBerry_0,object
sAffineAnim_PlayerBerry_0:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_PlayerBerry_0,24
	.align	2, 0
	.type	 sAffineAnim_PlayerBerry_1,object
sAffineAnim_PlayerBerry_1:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfe
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_PlayerBerry_1,24
	.align	2, 0
	.type	 sAnimTable_BerryCrushCore,object
sAnimTable_BerryCrushCore:
	.word	sAnim_CrusherBase
	.size	 sAnimTable_BerryCrushCore,4
	.align	2, 0
	.type	 sAnimTable_BerryCrushImpact,object
sAnimTable_BerryCrushImpact:
	.word	sAnim_Impact_Small
	.word	sAnim_Impact_Big
	.size	 sAnimTable_BerryCrushImpact,8
	.align	2, 0
	.type	 sAnimTable_BerryCrushPowderSparkles,object
sAnimTable_BerryCrushPowderSparkles:
	.word	sAnim_Sparkle_Small
	.word	sAnim_Sparkle_Big
	.size	 sAnimTable_BerryCrushPowderSparkles,8
	.align	2, 0
	.type	 sAnimTable_BerryCrushTimer,object
sAnimTable_BerryCrushTimer:
	.word	sAnim_Timer
	.size	 sAnimTable_BerryCrushTimer,4
	.align	2, 0
	.type	 sAnimTable_PlayerBerry,object
sAnimTable_PlayerBerry:
	.word	sAnim_PlayerBerry
	.size	 sAnimTable_PlayerBerry,4
	.align	2, 0
	.type	 sAffineAnimTable_PlayerBerry,object
sAffineAnimTable_PlayerBerry:
	.word	sAffineAnim_PlayerBerry_0
	.word	sAffineAnim_PlayerBerry_1
	.size	 sAffineAnimTable_PlayerBerry,8
	.align	2, 0
	.type	 sSpriteTemplate_BerryCrushCore,object
	.size	 sSpriteTemplate_BerryCrushCore,24
sSpriteTemplate_BerryCrushCore:
	.short	0x1
	.short	0x1
	.word	gOamData_AffineOff_ObjNormal_64x64
	.word	sAnimTable_BerryCrushCore
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_BerryCrushImpact,object
	.size	 sSpriteTemplate_BerryCrushImpact,24
sSpriteTemplate_BerryCrushImpact:
	.short	0x2
	.short	0x2
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnimTable_BerryCrushImpact
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_Impact
	.align	2, 0
	.type	 sSpriteTemplate_BerryCrushPowderSparkles,object
	.size	 sSpriteTemplate_BerryCrushPowderSparkles,24
sSpriteTemplate_BerryCrushPowderSparkles:
	.short	0x3
	.short	0x2
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sAnimTable_BerryCrushPowderSparkles
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_BerryCrushTimer,object
	.size	 sSpriteTemplate_BerryCrushTimer,24
sSpriteTemplate_BerryCrushTimer:
	.short	0x4
	.short	0x4
	.word	gOamData_AffineOff_ObjNormal_8x16
	.word	sAnimTable_BerryCrushTimer
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteTemplate_PlayerBerry,object
	.size	 sSpriteTemplate_PlayerBerry,24
sSpriteTemplate_PlayerBerry:
	.short	0x5
	.short	0x5
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	sAnimTable_PlayerBerry
	.space	4
	.word	sAffineAnimTable_PlayerBerry
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sDigitObjTemplates,object
	.size	 sDigitObjTemplates,48
sDigitObjTemplates:
	.byte	0x9
	.byte	0x2
	.byte	0x8
	.space	1
	.short	0x9c
	.short	0x0
	.word	sSpriteSheets+0x18
	.word	sSpritePals+0x10
	.byte	0x8
	.byte	0x2
	.byte	0x8
	.space	1
	.short	0xb4
	.short	0x0
	.word	sSpriteSheets+0x18
	.word	sSpritePals+0x10
	.byte	0x8
	.byte	0x2
	.byte	0x8
	.space	1
	.short	0xcc
	.short	0x0
	.word	sSpriteSheets+0x18
	.word	sSpritePals+0x10
	.align	2, 0
	.type	 sBCRankingHeaders,object
sBCRankingHeaders:
	.word	gText_SpaceTimes2
	.word	gText_XDotY
	.word	gText_StrVar1Berry
	.word	gText_NeatnessRankings
	.word	gText_CooperativeRankings
	.word	gText_PressingPowerRankings
	.size	 sBCRankingHeaders,24
.text
	.align	2, 0
	.type	 GetBerryCrushGame,function
	.thumb_func
GetBerryCrushGame:
	ldr	r0, .L3
	ldr	r0, [r0]
	bx	lr
.L4:
	.align	2, 0
.L3:
	.word	sGame
.Lfe1:
	.size	 GetBerryCrushGame,.Lfe1-GetBerryCrushGame
	.align	2, 0
	.type	 QuitBerryCrush,function
	.thumb_func
QuitBerryCrush:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L10
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L6	@cond_branch
	mov	r0, #0x2
	b	.L9
.L11:
	.align	2, 0
.L10:
	.word	sGame
.L6:
	cmp	r4, #0
	bne	.L7	@cond_branch
	ldr	r4, [r0]
.L7:
	ldrb	r0, [r0, #0xa]
	bl	DestroyTask
	ldr	r0, [r5]
	bl	Free
	mov	r0, #0x0
	str	r0, [r5]
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L12
	cmp	r4, r0
	bne	.L8	@cond_branch
	ldr	r0, .L12+0x4
	bl	PlayNewMapMusic
	ldr	r0, .L12+0x8
	bl	SetMainCallback1
.L8:
	mov	r0, #0x0
.L9:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L13:
	.align	2, 0
.L12:
	.word	CB2_ReturnToField
	.word	0x12f
	.word	CB1_Overworld
.Lfe2:
	.size	 QuitBerryCrush,.Lfe2-QuitBerryCrush
	.align	2, 0
	.globl	StartBerryCrush
	.type	 StartBerryCrush,function
	.thumb_func
StartBerryCrush:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L21
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L16	@cond_branch
	ldr	r0, .L21+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L15	@cond_branch
.L16:
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L21+0x8
	mov	r1, r8
	strh	r1, [r0, #0x10]
	strh	r1, [r0, #0x12]
	b	.L20
.L22:
	.align	2, 0
.L21:
	.word	gReceivedRemoteLinkPlayers
	.word	gWirelessCommType
	.word	Rfu
.L15:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, r8
	cmp	r0, #0x1
	bls	.L18	@cond_branch
	cmp	r7, r8
	bcc	.L17	@cond_branch
.L18:
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L23
	mov	r1, #0x0
	strh	r1, [r0, #0x10]
	strh	r1, [r0, #0x12]
	b	.L20
.L24:
	.align	2, 0
.L23:
	.word	Rfu
.L17:
	ldr	r6, .L25
	ldr	r0, .L25+0x4
	bl	AllocZeroed
	add	r5, r0, #0
	str	r5, [r6]
	cmp	r5, #0
	bne	.L19	@cond_branch
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L25+0x8
	strh	r5, [r0, #0x10]
	strh	r5, [r0, #0x12]
.L20:
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L14
.L26:
	.align	2, 0
.L25:
	.word	sGame
	.word	0x41c0
	.word	Rfu
.L19:
	str	r4, [r5]
	mov	r4, #0x0
	strb	r7, [r5, #0x8]
	ldr	r0, [r6]
	mov	r1, r8
	strb	r1, [r0, #0x9]
	ldr	r0, [r6]
	bl	SetNamesAndTextSpeed
	ldr	r1, [r6]
	mov	r2, #0x1
	mov	r0, #0x1
	strh	r0, [r1, #0x12]
	strb	r2, [r1, #0xe]
	ldr	r1, [r6]
	mov	r0, #0x6
	strb	r0, [r1, #0xf]
	ldr	r0, [r6]
	add	r0, r0, #0x36
	mov	r2, #0x1
	neg	r2, r2
	mov	r1, #0x10
	str	r1, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	SetPaletteFadeArgs
	ldr	r2, [r6]
	add	r2, r2, #0x36
	mov	r0, #0x4
	mov	r1, #0x1
	bl	RunOrScheduleCommand
	ldr	r0, .L27
	bl	SetMainCallback2
	ldr	r0, .L27+0x4
	mov	r1, #0x8
	bl	CreateTask
	ldr	r1, [r6]
	strb	r0, [r1, #0xa]
.L14:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	MainCB
	.word	MainTask
.Lfe3:
	.size	 StartBerryCrush,.Lfe3-StartBerryCrush
	.align	2, 0
	.type	 GetBerryFromBag,function
	.thumb_func
GetBerryFromBag:
	push	{r4, lr}
	add	sp, sp, #-0xc
	ldr	r1, .L32
	ldrh	r0, [r1]
	sub	r0, r0, #0x85
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2b
	bls	.L30	@cond_branch
	mov	r0, #0x85
	strh	r0, [r1]
	b	.L31
.L33:
	.align	2, 0
.L32:
	.word	gSpecialVar_ItemId
.L30:
	ldrh	r0, [r1]
	mov	r1, #0x1
	bl	RemoveBagItem
.L31:
	ldr	r4, .L34
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r2, r0
	ldr	r1, .L34+0x4
	ldrh	r1, [r1]
	sub	r1, r1, #0x85
	add	r0, r0, #0xa4
	mov	r3, #0x0
	strh	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r2, #0xe]
	ldr	r1, [r4]
	mov	r0, #0x9
	strb	r0, [r1, #0xf]
	ldr	r0, [r4]
	add	r0, r0, #0x36
	mov	r2, #0x1
	neg	r2, r2
	mov	r1, #0x10
	str	r1, [sp]
	str	r3, [sp, #0x4]
	str	r3, [sp, #0x8]
	mov	r1, #0x0
	bl	SetPaletteFadeArgs
	ldr	r2, [r4]
	add	r2, r2, #0x36
	mov	r0, #0x4
	mov	r1, #0x1
	bl	RunOrScheduleCommand
	ldr	r0, .L34+0x8
	mov	r1, #0x8
	bl	CreateTask
	ldr	r1, [r4]
	strb	r0, [r1, #0xa]
	ldr	r0, .L34+0xc
	bl	SetMainCallback2
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	sGame
	.word	gSpecialVar_ItemId
	.word	MainTask
	.word	MainCB
.Lfe4:
	.size	 GetBerryFromBag,.Lfe4-GetBerryFromBag
	.align	2, 0
	.type	 ChooseBerry,function
	.thumb_func
ChooseBerry:
	push	{lr}
	ldr	r0, .L37
	ldr	r0, [r0]
	ldrb	r0, [r0, #0xa]
	bl	DestroyTask
	ldr	r1, .L37+0x4
	mov	r0, #0x5
	mov	r2, #0x0
	bl	InitBerryPouch
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	sGame
	.word	GetBerryFromBag
.Lfe5:
	.size	 ChooseBerry,.Lfe5-ChooseBerry
	.align	2, 0
	.type	 BerryCrush_SetVBlankCallback,function
	.thumb_func
BerryCrush_SetVBlankCallback:
	push	{lr}
	ldr	r0, .L40
	bl	SetVBlankCallback
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	VBlankCB
.Lfe6:
	.size	 BerryCrush_SetVBlankCallback,.Lfe6-BerryCrush_SetVBlankCallback
	.align	2, 0
	.type	 BerryCrush_InitVBlankCB,function
	.thumb_func
BerryCrush_InitVBlankCB:
	push	{lr}
	mov	r0, #0x0
	bl	SetVBlankCallback
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 BerryCrush_InitVBlankCB,.Lfe7-BerryCrush_InitVBlankCB
	.align	2, 0
	.type	 SaveResults,function
	.thumb_func
SaveResults:
	push	{r4, r5, lr}
	ldr	r4, .L58
	ldr	r0, [r4]
	add	r0, r0, #0x6c
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	mov	r1, #0xf0
	lsl	r1, r1, #0x6
	add	r0, r2, #0
	bl	Q_24_8_div
	add	r2, r0, #0
	ldr	r0, [r4]
	add	r0, r0, #0x72
	ldrh	r3, [r0]
	lsl	r3, r3, #0x8
	add	r0, r3, #0
	add	r1, r2, #0
	bl	Q_24_8_div
	add	r3, r0, #0
	ldr	r0, .L58+0x4
	and	r3, r3, r0
	ldr	r2, [r4]
	strh	r3, [r2, #0x16]
	ldrb	r0, [r2, #0x9]
	cmp	r0, #0x3
	beq	.L47	@cond_branch
	cmp	r0, #0x3
	bgt	.L55	@cond_branch
	cmp	r0, #0x2
	beq	.L45	@cond_branch
	b	.L44
.L59:
	.align	2, 0
.L58:
	.word	sGame
	.word	0xffff
.L55:
	cmp	r0, #0x4
	beq	.L49	@cond_branch
	cmp	r0, #0x5
	beq	.L51	@cond_branch
	b	.L44
.L45:
	ldr	r5, .L60
	ldr	r1, [r5]
	mov	r0, #0xaf
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bls	.L44	@cond_branch
	add	r2, r2, #0x25
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r1, [r4]
	ldrh	r1, [r1, #0x16]
	mov	r2, #0xaf
	lsl	r2, r2, #0x4
	b	.L57
.L61:
	.align	2, 0
.L60:
	.word	gSaveBlock2Ptr
.L47:
	ldr	r5, .L62
	ldr	r1, [r5]
	ldr	r0, .L62+0x4
	add	r1, r1, r0
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bls	.L44	@cond_branch
	add	r2, r2, #0x25
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r1, [r4]
	ldrh	r1, [r1, #0x16]
	ldr	r2, .L62+0x4
	b	.L57
.L63:
	.align	2, 0
.L62:
	.word	gSaveBlock2Ptr
	.word	0xaf2
.L49:
	ldr	r5, .L64
	ldr	r1, [r5]
	ldr	r0, .L64+0x4
	add	r1, r1, r0
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bls	.L44	@cond_branch
	add	r2, r2, #0x25
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r1, [r4]
	ldrh	r1, [r1, #0x16]
	ldr	r2, .L64+0x4
	b	.L57
.L65:
	.align	2, 0
.L64:
	.word	gSaveBlock2Ptr
	.word	0xaf4
.L51:
	ldr	r5, .L66
	ldr	r1, [r5]
	ldr	r0, .L66+0x4
	add	r1, r1, r0
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bls	.L44	@cond_branch
	add	r2, r2, #0x25
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r1, [r4]
	ldrh	r1, [r1, #0x16]
	ldr	r2, .L66+0x4
.L57:
	add	r0, r0, r2
	strh	r1, [r0]
.L44:
	ldr	r4, .L66+0x8
	ldr	r1, [r4]
	ldr	r0, [r1, #0x68]
	str	r0, [r1, #0x1c]
	bl	GiveBerryPowder
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L43	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L43:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	gSaveBlock2Ptr
	.word	0xaf6
	.word	sGame
.Lfe8:
	.size	 SaveResults,.Lfe8-SaveResults
	.align	2, 0
	.type	 VBlankCB,function
	.thumb_func
VBlankCB:
	push	{lr}
	bl	TransferPlttBuffer
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 VBlankCB,.Lfe9-VBlankCB
	.align	2, 0
	.type	 MainCB,function
	.thumb_func
MainCB:
	push	{lr}
	bl	RunTasks
	bl	RunTextPrinters
	bl	AnimateSprites
	bl	BuildOamBuffer
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 MainCB,.Lfe10-MainCB
	.align	2, 0
	.type	 MainTask,function
	.thumb_func
MainTask:
	push	{r4, lr}
	ldr	r4, .L72
	ldr	r0, [r4]
	ldr	r2, [r0, #0x4]
	cmp	r2, #0
	beq	.L71	@cond_branch
	add	r1, r0, #0
	add	r1, r1, #0x36
	bl	_call_via_r2
.L71:
	ldr	r0, [r4]
	bl	UpdateGame
	pop	{r4}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	sGame
.Lfe11:
	.size	 MainTask,.Lfe11-MainTask
	.align	2, 0
	.type	 SetNamesAndTextSpeed,function
	.thumb_func
SetNamesAndTextSpeed:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r5, #0x0
	b	.L93
.L78:
	lsl	r4, r5, #0x5
	add	r0, r4, #0
	add	r0, r0, #0x98
	add	r0, r6, r0
	lsl	r1, r5, #0x3
	sub	r1, r1, r5
	lsl	r1, r1, #0x2
	ldr	r2, .L95
	add	r1, r1, r2
	bl	StringCopy
	add	r4, r6, r4
	add	r4, r4, #0x9f
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L93:
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcc	.L78	@cond_branch
	cmp	r5, #0x4
	bhi	.L92	@cond_branch
.L83:
	lsl	r4, r5, #0x5
	add	r0, r4, #0
	add	r0, r0, #0x98
	add	r0, r6, r0
	mov	r1, #0x1
	mov	r2, #0x7
	bl	memset
	add	r4, r6, r4
	add	r4, r4, #0x9f
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L83	@cond_branch
.L92:
	ldr	r0, .L95+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	cmp	r0, #0x1
	beq	.L87	@cond_branch
	cmp	r0, #0x1
	bgt	.L91	@cond_branch
	cmp	r0, #0
	beq	.L86	@cond_branch
	b	.L85
.L96:
	.align	2, 0
.L95:
	.word	gLinkPlayers+0x8
	.word	gSaveBlock2Ptr
.L91:
	cmp	r0, #0x2
	beq	.L88	@cond_branch
	b	.L85
.L86:
	mov	r0, #0x8
	b	.L94
.L87:
	mov	r0, #0x4
	b	.L94
.L88:
	mov	r0, #0x1
.L94:
	strb	r0, [r6, #0xb]
.L85:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 SetNamesAndTextSpeed,.Lfe12-SetNamesAndTextSpeed
	.align	2, 0
	.type	 RunOrScheduleCommand,function
	.thumb_func
RunOrScheduleCommand:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r2, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r8, r4
	bl	GetBerryCrushGame
	add	r6, r0, #0
	cmp	r5, #0x19
	bls	.L98	@cond_branch
	mov	r5, #0x0
.L98:
	cmp	r4, #0
	beq	.L100	@cond_branch
	cmp	r4, #0x1
	beq	.L103	@cond_branch
	b	.L99
.L100:
	cmp	r5, #0
	beq	.L101	@cond_branch
	ldr	r0, .L107
	lsl	r1, r5, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	add	r0, r6, #0
	add	r1, r7, #0
	bl	_call_via_r2
.L101:
	ldrb	r0, [r6, #0xe]
	cmp	r0, #0x19
	bls	.L102	@cond_branch
	mov	r0, r8
	strb	r0, [r6, #0xe]
.L102:
	ldr	r0, .L107
	ldrb	r1, [r6, #0xe]
	lsl	r1, r1, #0x2
	b	.L106
.L108:
	.align	2, 0
.L107:
	.word	sBerryCrushCommands
.L103:
	ldr	r0, .L109
	lsl	r1, r5, #0x2
.L106:
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r6, #0x4]
.L99:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L110:
	.align	2, 0
.L109:
	.word	sBerryCrushCommands
.Lfe13:
	.size	 RunOrScheduleCommand,.Lfe13-RunOrScheduleCommand
	.align	2, 0
	.type	 Cmd_BeginNormalPaletteFade,function
	.thumb_func
Cmd_BeginNormalPaletteFade:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldrb	r2, [r1]
	ldrb	r3, [r1, #0x1]
	lsl	r3, r3, #0x8
	orr	r2, r2, r3
	ldrb	r3, [r1, #0x2]
	lsl	r3, r3, #0x10
	orr	r2, r2, r3
	ldrb	r3, [r1, #0x3]
	lsl	r3, r3, #0x18
	add	r0, r2, #0
	orr	r0, r0, r3
	ldrb	r2, [r1, #0x9]
	strb	r2, [r1]
	ldrb	r4, [r1, #0x8]
	lsl	r4, r4, #0x8
	ldrb	r2, [r1, #0x7]
	orr	r4, r4, r2
	ldr	r5, .L112
	ldrb	r3, [r5, #0x8]
	mov	r2, #0x7f
	and	r2, r2, r3
	strb	r2, [r5, #0x8]
	mov	r5, #0x4
	ldrsb	r5, [r1, r5]
	ldrb	r2, [r1, #0x5]
	ldrb	r3, [r1, #0x6]
	str	r4, [sp]
	add	r1, r5, #0
	bl	BeginNormalPaletteFade
	bl	UpdatePaletteFade
	mov	r0, #0x2
	strb	r0, [r6, #0xe]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L113:
	.align	2, 0
.L112:
	.word	gPaletteFade
.Lfe14:
	.size	 Cmd_BeginNormalPaletteFade,.Lfe14-Cmd_BeginNormalPaletteFade
	.align	2, 0
	.type	 Cmd_WaitPaletteFade,function
	.thumb_func
Cmd_WaitPaletteFade:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	beq	.L120	@cond_branch
	cmp	r0, #0x1
	bgt	.L126	@cond_branch
	cmp	r0, #0
	beq	.L116	@cond_branch
	b	.L124
.L126:
	cmp	r0, #0x2
	beq	.L121	@cond_branch
	cmp	r0, #0x3
	beq	.L123	@cond_branch
	b	.L124
.L116:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L128	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L124	@cond_branch
	mov	r0, #0x3
	b	.L130
.L120:
	bl	Rfu_SetLinkStandbyCallback
	b	.L124
.L121:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L124	@cond_branch
	b	.L128
.L123:
	ldrb	r0, [r4, #0xf]
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r0, #0x0
	strb	r0, [r4, #0xc]
	b	.L127
.L124:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
.L130:
	strb	r0, [r4, #0xc]
.L128:
	mov	r0, #0x0
.L127:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 Cmd_WaitPaletteFade,.Lfe15-Cmd_WaitPaletteFade
	.align	2, 0
	.type	 Cmd_PrintMessage,function
	.thumb_func
Cmd_PrintMessage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	add	r5, r1, #0
	ldrb	r4, [r5, #0x3]
	lsl	r4, r4, #0x8
	ldrb	r0, [r5, #0x2]
	orr	r4, r4, r0
	ldrb	r6, [r7, #0xc]
	cmp	r6, #0x1
	beq	.L136	@cond_branch
	cmp	r6, #0x1
	bgt	.L145	@cond_branch
	cmp	r6, #0
	beq	.L133	@cond_branch
	b	.L132
.L145:
	cmp	r6, #0x2
	beq	.L139	@cond_branch
	cmp	r6, #0x3
	beq	.L141	@cond_branch
	b	.L132
.L133:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldrb	r1, [r5, #0x1]
	mov	r0, #0x2
	mov	r8, r0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L134	@cond_branch
	ldr	r4, .L149
	ldr	r1, .L149+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldrb	r3, [r7, #0xb]
	str	r6, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	AddTextPrinterParameterized2
	b	.L135
.L150:
	.align	2, 0
.L149:
	.word	gStringVar4
	.word	sMessages
.L134:
	ldr	r1, .L151
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrb	r3, [r7, #0xb]
	str	r4, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	AddTextPrinterParameterized2
.L135:
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L132
.L152:
	.align	2, 0
.L151:
	.word	sMessages
.L136:
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L147	@cond_branch
	cmp	r4, #0
	bne	.L132	@cond_branch
	ldrb	r0, [r7, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r7, #0xc]
	b	.L132
.L139:
	ldr	r0, .L153
	ldrh	r0, [r0, #0x2e]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L132	@cond_branch
	b	.L147
.L154:
	.align	2, 0
.L153:
	.word	gMain
.L141:
	ldrb	r1, [r5, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L142	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
.L142:
	ldrb	r0, [r7, #0xe]
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	ldrb	r0, [r5, #0x4]
	b	.L148
.L132:
	ldrb	r0, [r7, #0xc]
	add	r0, r0, #0x1
.L148:
	strb	r0, [r7, #0xc]
.L147:
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 Cmd_PrintMessage,.Lfe16-Cmd_PrintMessage
	.align	2, 0
	.type	 Cmd_ShowGameDisplay,function
	.thumb_func
Cmd_ShowGameDisplay:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ShowGameDisplay
	cmp	r0, #0
	beq	.L156	@cond_branch
	ldrb	r0, [r4, #0xe]
	add	r2, r4, #0
	add	r2, r2, #0x36
	mov	r1, #0x0
	bl	RunOrScheduleCommand
.L156:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 Cmd_ShowGameDisplay,.Lfe17-Cmd_ShowGameDisplay
	.align	2, 0
	.type	 Cmd_HideGameDisplay,function
	.thumb_func
Cmd_HideGameDisplay:
	push	{r4, lr}
	add	r4, r0, #0
	bl	HideGameDisplay
	cmp	r0, #0
	beq	.L158	@cond_branch
	ldrb	r0, [r4, #0xe]
	add	r2, r4, #0
	add	r2, r2, #0x36
	mov	r1, #0x0
	bl	RunOrScheduleCommand
.L158:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 Cmd_HideGameDisplay,.Lfe18-Cmd_HideGameDisplay
	.align	2, 0
	.type	 Cmd_SignalReadyToBegin,function
	.thumb_func
Cmd_SignalReadyToBegin:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	beq	.L161	@cond_branch
	cmp	r0, #0x1
	beq	.L162	@cond_branch
	b	.L160
.L161:
	bl	Rfu_SetLinkStandbyCallback
	b	.L160
.L162:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L167	@cond_branch
	ldr	r0, .L168
	bl	PlayNewMapMusic
	mov	r0, #0x7
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r1, #0x0
	mov	r0, #0x3
	strh	r0, [r4, #0x12]
	strb	r1, [r4, #0xc]
	b	.L167
.L169:
	.align	2, 0
.L168:
	.word	0x111
.L160:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L167:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 Cmd_SignalReadyToBegin,.Lfe19-Cmd_SignalReadyToBegin
	.align	2, 0
	.type	 Cmd_AskPickBerry,function
	.thumb_func
Cmd_AskPickBerry:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	beq	.L173	@cond_branch
	cmp	r0, #0x1
	beq	.L174	@cond_branch
	add	r0, r0, #0x1
	b	.L176
.L173:
	add	r0, r4, #0
	bl	ResetGame
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	SetPrintMessageArgs
	mov	r0, #0x7
	strb	r0, [r4, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	b	.L171
.L174:
	mov	r0, #0x8
	strb	r0, [r4, #0xe]
	mov	r0, #0x5
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r0, #0x2
.L176:
	strb	r0, [r4, #0xc]
.L171:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 Cmd_AskPickBerry,.Lfe20-Cmd_AskPickBerry
	.align	2, 0
	.type	 Cmd_GoToBerryPouch,function
	.thumb_func
Cmd_GoToBerryPouch:
	push	{lr}
	mov	r1, #0x0
	str	r1, [r0, #0x4]
	ldr	r0, .L178
	bl	SetMainCallback2
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L179:
	.align	2, 0
.L178:
	.word	ChooseBerry
.Lfe21:
	.size	 Cmd_GoToBerryPouch,.Lfe21-Cmd_GoToBerryPouch
	.align	2, 0
	.type	 Cmd_WaitForOthersToPickBerries,function
	.thumb_func
Cmd_WaitForOthersToPickBerries:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r2, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x5
	bls	.LCB1401
	b	.L181	@long jump
.LCB1401:
	lsl	r0, r0, #0x2
	ldr	r1, .L201
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L202:
	.align	2, 0
.L201:
	.word	.L197
	.align	2, 0
	.align	2, 0
.L197:
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L186
	.word	.L188
	.word	.L196
.L182:
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r2, #0
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	SetPrintMessageArgs
	mov	r0, #0x9
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	b	.L200
.L183:
	bl	Rfu_SetLinkStandbyCallback
	b	.L181
.L184:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L200	@cond_branch
	add	r4, r5, #0
	add	r4, r4, #0x42
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xc
	bl	memset
	ldrb	r0, [r5, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r5, r0
	add	r0, r0, #0xa4
	ldrh	r0, [r0]
	strh	r0, [r4]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x2
	bl	SendBlock
	b	.L181
.L186:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L200	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x10]
	b	.L181
.L188:
	bl	GetBlockReceivedStatus
	ldr	r2, .L203
	ldrb	r4, [r5, #0x9]
	sub	r1, r4, #0x2
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L200	@cond_branch
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L191	@cond_branch
	ldr	r7, .L203+0x4
	mov	r6, #0x0
	ldr	r4, .L203+0x8
.L193:
	lsl	r0, r3, #0x5
	add	r0, r5, r0
	lsl	r1, r3, #0x8
	add	r1, r1, r7
	ldrh	r1, [r1]
	add	r2, r0, #0
	add	r2, r2, #0xa4
	strh	r1, [r2]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xb0
	bls	.L194	@cond_branch
	strh	r6, [r2]
.L194:
	ldrh	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r5, #0x18]
	ldrb	r1, [r1]
	add	r0, r0, r1
	strh	r0, [r5, #0x18]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x2]
	ldr	r0, [r5, #0x1c]
	add	r0, r0, r1
	str	r0, [r5, #0x1c]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r5, #0x9]
	cmp	r3, r0
	bcc	.L193	@cond_branch
.L191:
	mov	r0, #0x0
	strh	r0, [r5, #0x10]
	bl	ResetBlockReceivedFlags
	mov	r1, #0x18
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	bl	Q_24_8_div
	str	r0, [r5, #0x20]
	b	.L181
.L204:
	.align	2, 0
.L203:
	.word	sReceivedPlayerBitmasks
	.word	gBlockRecvBuffer
	.word	gBerryCrush_BerryData
.L196:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	mov	r0, #0xa
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r1, #0x0
	mov	r0, #0x4
	strh	r0, [r5, #0x12]
	strb	r1, [r5, #0xc]
	b	.L200
.L181:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L200:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 Cmd_WaitForOthersToPickBerries,.Lfe22-Cmd_WaitForOthersToPickBerries
	.align	2, 0
	.type	 Cmd_DropBerriesIntoCrusher,function
	.thumb_func
Cmd_DropBerriesIntoCrusher:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x6
	bls	.LCB1603
	b	.L206	@long jump
.LCB1603:
	lsl	r0, r0, #0x2
	ldr	r1, .L224
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L225:
	.align	2, 0
.L224:
	.word	.L219
	.align	2, 0
	.align	2, 0
.L219:
	.word	.L207
	.word	.L208
	.word	.L210
	.word	.L211
	.word	.L213
	.word	.L216
	.word	.L217
.L207:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r4, r0
	add	r0, r4, #0
	bl	CreateBerrySprites
	bl	Rfu_SetLinkStandbyCallback
	b	.L206
.L208:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L222	@cond_branch
	mov	r2, #0x9c
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r3, .L226
	add	r1, r4, r3
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r4, r2
	strb	r0, [r1]
	add	r3, r3, #0x2
	add	r1, r4, r3
	strb	r0, [r1]
	b	.L206
.L227:
	.align	2, 0
.L226:
	.word	0x139
.L210:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r3, r4, r0
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	mov	r2, #0xb8
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	add	r0, r1, r0
	ldr	r2, [r0]
	ldr	r0, .L228
	str	r0, [r2, #0x1c]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r1, r1, #0x2c
	ldrb	r2, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x36
	bl	PlaySE
	b	.L206
.L229:
	.align	2, 0
.L228:
	.word	SpriteCB_DropBerryIntoCrusher
.L211:
	mov	r3, #0x9c
	lsl	r3, r3, #0x1
	add	r2, r4, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r3, r3, #0x38
	add	r1, r4, r3
	add	r3, r1, r0
	ldr	r0, [r3]
	ldr	r1, [r0, #0x1c]
	ldr	r0, .L230
	cmp	r1, r0
	beq	.L222	@cond_branch
	mov	r0, #0x0
	str	r0, [r3]
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	bl	Rfu_SetLinkStandbyCallback
	b	.L206
.L231:
	.align	2, 0
.L230:
	.word	SpriteCB_DropBerryIntoCrusher
.L213:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L222	@cond_branch
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r4, r0
	ldrb	r0, [r1]
	ldrb	r2, [r4, #0x9]
	cmp	r0, r2
	bcs	.L215	@cond_branch
	mov	r0, #0x2
	b	.L223
.L215:
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L206
.L216:
	mov	r3, #0x9c
	lsl	r3, r3, #0x1
	add	r1, r4, r3
	add	r0, r4, #0
	bl	BerryCrushFreeBerrySpriteGfx
	bl	Rfu_SetLinkStandbyCallback
	b	.L206
.L217:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L222	@cond_branch
	mov	r0, #0x25
	bl	PlaySE
	mov	r0, #0xb
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r1, #0x0
	mov	r0, #0x5
	strh	r0, [r4, #0x12]
	strb	r1, [r4, #0xc]
	b	.L222
.L206:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
.L223:
	strb	r0, [r4, #0xc]
.L222:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 Cmd_DropBerriesIntoCrusher,.Lfe23-Cmd_DropBerriesIntoCrusher
	.align	2, 0
	.type	 Cmd_DropLid,function
	.thumb_func
Cmd_DropLid:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldrb	r1, [r4, #0xc]
	cmp	r1, #0x1
	beq	.L236	@cond_branch
	cmp	r1, #0x1
	bgt	.L244	@cond_branch
	cmp	r1, #0
	beq	.L234	@cond_branch
	b	.L233
.L244:
	cmp	r1, #0x2
	beq	.L239	@cond_branch
	cmp	r1, #0x3
	beq	.L240	@cond_branch
	b	.L233
.L234:
	ldrh	r0, [r4, #0x2a]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x2a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.LCB1834
	b	.L246	@long jump
.LCB1834:
	strh	r1, [r4, #0x2a]
	ldr	r0, .L247
	add	r3, r4, r0
	mov	r0, #0x4
	strb	r0, [r3]
	mov	r2, #0x9c
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r2, .L247+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r2, #0x9d
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	strb	r0, [r1]
	mov	r0, #0xcf
	bl	PlaySE
	b	.L233
.L248:
	.align	2, 0
.L247:
	.word	0x139
	.word	sIntroOutroVibrationData
.L236:
	ldr	r7, .L249
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r6, r4, r0
	ldr	r1, .L249+0x4
	add	r5, r4, r1
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	ldrb	r2, [r6]
	add	r0, r0, r2
	add	r0, r0, r7
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	strh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	mov	r1, #0x9d
	lsl	r1, r1, #0x1
	add	r2, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2]
	cmp	r0, r1
	bcc	.L246	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L233	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r5]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, r7
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x0
	strb	r0, [r6]
	b	.L246
.L250:
	.align	2, 0
.L249:
	.word	sIntroOutroVibrationData
	.word	0x139
.L239:
	mov	r0, #0x0
	strh	r0, [r4, #0x2c]
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	SetGpuReg
	bl	Rfu_SetLinkStandbyCallback
	b	.L233
.L240:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L246	@cond_branch
	mov	r0, #0xc
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r4, #0x12]
	strb	r1, [r4, #0xc]
	b	.L246
.L233:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L246:
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 Cmd_DropLid,.Lfe24-Cmd_DropLid
	.align	2, 0
	.type	 Cmd_Countdown,function
	.thumb_func
Cmd_Countdown:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	beq	.L254	@cond_branch
	cmp	r0, #0x1
	bgt	.L264	@cond_branch
	cmp	r0, #0
	beq	.L257	@cond_branch
	b	.L252
.L264:
	cmp	r0, #0x2
	beq	.L256	@cond_branch
	cmp	r0, #0x3
	beq	.L258	@cond_branch
	b	.L252
.L254:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L266	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x78
	mov	r3, #0x50
	bl	StartMinigameCountdown
	b	.L252
.L256:
	bl	IsMinigameCountdownRunning
	cmp	r0, #0
	bne	.L266	@cond_branch
.L257:
	bl	Rfu_SetLinkStandbyCallback
	b	.L252
.L258:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L266	@cond_branch
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r4, r0
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r2, .L267
	add	r1, r4, r2
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r4, r2
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r4, r2
	strb	r0, [r1]
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	cmp	r0, #0
	bne	.L260	@cond_branch
	mov	r0, #0xd
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	b	.L261
.L268:
	.align	2, 0
.L267:
	.word	0x139
.L260:
	mov	r0, #0xe
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
.L261:
	mov	r1, #0x0
	mov	r0, #0x7
	strh	r0, [r4, #0x12]
	strb	r1, [r4, #0xc]
	b	.L266
.L252:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L266:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 Cmd_Countdown,.Lfe25-Cmd_Countdown
	.align	2, 0
	.type	 HandlePartnerInput,function
	.thumb_func
HandlePartnerInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r0, #0
	mov	r0, #0x0
	mov	r8, r0
	mov	r2, #0x0
	add	r7, r2, #0
	ldrb	r1, [r4, #0x9]
	cmp	r7, r1
	bcs	.L271	@cond_branch
	mov	r2, #0x5e
	add	r2, r2, r4
	mov	r9, r2
	ldr	r3, .L292
	mov	sl, r3
.L273:
	lsl	r0, r7, #0x4
	ldr	r1, .L292+0x4
	add	r2, r0, r1
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	mov	r3, #0xbc
	lsl	r3, r3, #0x6
	cmp	r0, r3
	bne	.L272	@cond_branch
	ldrh	r0, [r2, #0x2]
	cmp	r0, #0x2
	bne	.L272	@cond_branch
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L276	@cond_branch
	mov	r0, r9
	ldrb	r2, [r0]
	lsr	r1, r2, #0x3
	mov	r3, sl
	add	r0, r7, r3
	ldrb	r0, [r0]
	orr	r1, r1, r0
	lsl	r1, r1, #0x3
	mov	r0, #0x7
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, r9
	strb	r0, [r1]
	lsl	r2, r7, #0x5
	add	r3, r4, r2
	mov	ip, r3
	mov	r1, ip
	add	r1, r1, #0xb5
	mov	r0, #0x1
	strb	r0, [r1]
	sub	r1, r1, #0x7
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	sub	r1, r1, #0x8
	ldrh	r0, [r4, #0x28]
	ldrh	r1, [r1]
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r5, ip
	add	r5, r5, #0xaa
	ldrh	r1, [r5]
	sub	r0, r1, #0x1
	add	r6, r2, #0
	cmp	r3, r0
	blt	.L277	@cond_branch
	add	r0, r1, #0x1
	cmp	r3, r0
	bgt	.L277	@cond_branch
	mov	r1, ip
	add	r1, r1, #0xa8
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	strh	r3, [r5]
	mov	r0, ip
	add	r0, r0, #0xac
	ldrh	r1, [r1]
	ldrh	r2, [r0]
	cmp	r1, r2
	bls	.L279	@cond_branch
	strh	r1, [r0]
	b	.L279
.L293:
	.align	2, 0
.L292:
	.word	sBitTable
	.word	gRecvCmds
.L277:
	add	r0, r4, r6
	add	r2, r0, #0
	add	r2, r2, #0xa8
	mov	r1, #0x0
	strh	r1, [r2]
	add	r0, r0, #0xaa
	strh	r3, [r0]
.L279:
	add	r1, r4, r6
	ldrh	r0, [r4, #0x28]
	add	r3, r1, #0
	add	r3, r3, #0xa6
	mov	r2, #0x0
	strh	r0, [r3]
	add	r1, r1, #0xb4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L272	@cond_branch
	strb	r2, [r1]
	b	.L272
.L276:
	lsl	r0, r7, #0x5
	add	r0, r4, r0
	add	r0, r0, #0xb5
	strb	r1, [r0]
.L272:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r3, [r4, #0x9]
	cmp	r7, r3
	bcc	.L273	@cond_branch
.L271:
	mov	r0, r8
	cmp	r0, #0x1
	bls	.L283	@cond_branch
	mov	r7, #0x0
	ldrb	r1, [r4, #0x9]
	cmp	r7, r1
	bcs	.L283	@cond_branch
	mov	r3, #0x2
.L287:
	lsl	r0, r7, #0x5
	add	r1, r4, r0
	add	r2, r1, #0
	add	r2, r2, #0xb5
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L286	@cond_branch
	orr	r0, r0, r3
	strb	r0, [r2]
	add	r1, r1, #0xb0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L286:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r2, [r4, #0x9]
	cmp	r7, r2
	bcc	.L287	@cond_branch
.L283:
	mov	r3, r8
	cmp	r3, #0
	beq	.L269	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, r8
	strh	r0, [r4, #0x2e]
	ldr	r1, .L294
	mov	r0, r8
	sub	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrh	r0, [r4, #0x34]
	add	r0, r0, r8
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, r8
	strh	r0, [r4, #0x1a]
	mov	r1, #0x18
	ldrsh	r0, [r4, r1]
	mov	r3, #0x1a
	ldrsh	r2, [r4, r3]
	sub	r0, r0, r2
	cmp	r0, #0
	ble	.L291	@cond_branch
	lsl	r2, r2, #0x8
	ldr	r1, [r4, #0x20]
	add	r0, r2, #0
	bl	Q_24_8_div
	add	r2, r0, #0
	asr	r2, r2, #0x8
	add	r0, r4, #0
	add	r0, r0, #0x24
	strb	r2, [r0]
	b	.L269
.L295:
	.align	2, 0
.L294:
	.word	sSyncPressBonus
.L291:
	add	r1, r4, #0
	add	r1, r1, #0x24
	mov	r0, #0x20
	strb	r0, [r1]
	add	r2, r4, #0
	add	r2, r2, #0x5e
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L269:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 HandlePartnerInput,.Lfe26-HandlePartnerInput
	.align	2, 0
	.type	 BerryCrush_BuildLocalState,function
	.thumb_func
BerryCrush_BuildLocalState:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r6, #0x0
	mov	r1, #0x0
	add	r4, r1, #0
	ldrb	r0, [r3, #0x9]
	cmp	r4, r0
	bcs	.L298	@cond_branch
	add	r5, r3, #0
	add	r5, r5, #0x64
.L300:
	lsl	r0, r4, #0x5
	add	r1, r3, r0
	add	r0, r1, #0
	add	r0, r0, #0xb5
	ldrb	r2, [r0]
	cmp	r2, #0
	beq	.L299	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r1, #0
	add	r0, r0, #0xb4
	ldrb	r0, [r0]
	add	r1, r0, #0x1
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L302	@cond_branch
	mov	r0, #0x4
	orr	r1, r1, r0
.L302:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r1, r1, r0
	lsl	r0, r1, #0x10
	lsr	r1, r0, #0x10
	ldrh	r0, [r5]
	orr	r1, r1, r0
	strh	r1, [r5]
.L299:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r1, [r3, #0x9]
	cmp	r4, r1
	bcc	.L300	@cond_branch
.L298:
	add	r0, r3, #0
	add	r0, r0, #0x24
	ldrb	r1, [r0]
	add	r0, r0, #0x3c
	strh	r1, [r0]
	cmp	r6, #0
	bne	.L304	@cond_branch
	ldr	r2, .L316
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L311	@cond_branch
	mov	r4, #0x9c
	lsl	r4, r4, #0x1
	add	r1, r3, r4
	b	.L315
.L317:
	.align	2, 0
.L316:
	.word	0x13b
.L304:
	ldr	r5, .L318
	add	r2, r3, r5
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L307	@cond_branch
	ldr	r0, .L318+0x4
	add	r1, r3, r0
	ldrb	r2, [r1]
	cmp	r6, r2
	beq	.L308	@cond_branch
	sub	r0, r6, #0x1
	strb	r0, [r1]
	ldr	r1, .L318+0x8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x9d
	lsl	r4, r4, #0x1
	add	r1, r3, r4
	strb	r0, [r1]
	b	.L306
.L319:
	.align	2, 0
.L318:
	.word	0x13b
	.word	0x139
	.word	sVibrationData
.L308:
	mov	r5, #0x9c
	lsl	r5, r5, #0x1
	add	r1, r3, r5
.L315:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L306
.L307:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r3, r0
	mov	r0, #0x0
	strb	r0, [r1]
	sub	r0, r6, #0x1
	ldr	r4, .L320
	add	r1, r3, r4
	strb	r0, [r1]
	ldr	r1, .L320+0x4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r5, #0x9d
	lsl	r5, r5, #0x1
	add	r1, r3, r5
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r2]
.L306:
	ldr	r0, .L320+0x8
	add	r4, r3, r0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L311	@cond_branch
	mov	r2, #0x9c
	lsl	r2, r2, #0x1
	add	r1, r3, r2
	mov	r5, #0x9d
	lsl	r5, r5, #0x1
	add	r2, r3, r5
	ldrb	r0, [r1]
	ldrb	r5, [r2]
	cmp	r0, r5
	bcc	.L312	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r5, .L320
	add	r1, r3, r5
	strb	r0, [r1]
	strb	r0, [r2]
	strb	r0, [r4]
	mov	r1, #0x0
	b	.L313
.L321:
	.align	2, 0
.L320:
	.word	0x139
	.word	sVibrationData
	.word	0x13b
.L312:
	ldr	r2, .L322
	ldrb	r1, [r1]
	ldr	r4, .L322+0x4
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r1, [r1]
.L313:
	add	r0, r3, #0
	add	r0, r0, #0x5f
	strb	r1, [r0]
	b	.L314
.L323:
	.align	2, 0
.L322:
	.word	sVibrationData
	.word	0x139
.L311:
	add	r1, r3, #0
	add	r1, r1, #0x5f
	mov	r0, #0x0
	strb	r0, [r1]
.L314:
	ldrh	r1, [r3, #0x26]
	add	r0, r3, #0
	add	r0, r0, #0x62
	strh	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 BerryCrush_BuildLocalState,.Lfe27-BerryCrush_BuildLocalState
	.align	2, 0
	.type	 HandlePlayerInput,function
	.thumb_func
HandlePlayerInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	ldr	r3, .L349
	ldrh	r1, [r3, #0x2e]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L325	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x5e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L325:
	ldrh	r1, [r3, #0x2c]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L326	@cond_branch
	ldrb	r0, [r5, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r5, r0
	add	r1, r0, #0
	add	r1, r1, #0xb2
	ldrh	r0, [r1]
	ldrh	r2, [r5, #0x28]
	cmp	r0, r2
	bcs	.L326	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1]
.L326:
	ldrb	r0, [r5, #0x8]
	add	r7, r5, #0
	add	r7, r7, #0x5e
	cmp	r0, #0
	beq	.L328	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2742
	b	.L324	@long jump
.LCB2742:
.L328:
	add	r4, r5, #0
	add	r4, r4, #0x5c
	mov	r0, #0x2
	strh	r0, [r4]
	ldrh	r0, [r5, #0x28]
	mov	r1, #0x1e
	bl	__umodsi3
	lsl	r0, r0, #0x10
	mov	r8, r4
	add	r6, r5, #0
	add	r6, r6, #0x25
	cmp	r0, #0
	bne	.L329	@cond_branch
	mov	r0, #0x2e
	ldrsh	r2, [r5, r0]
	ldr	r1, .L349+0x4
	ldrb	r0, [r5, #0x9]
	sub	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r2, r0
	ble	.L330	@cond_branch
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	ldrb	r0, [r6]
	mov	r1, #0x10
	orr	r0, r0, r1
	b	.L347
.L350:
	.align	2, 0
.L349:
	.word	gMain
	.word	sBigSparkleThresholds
.L330:
	ldrb	r1, [r6]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
.L347:
	strb	r0, [r6]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
.L329:
	ldrh	r0, [r5, #0x28]
	mov	r1, #0xf
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L332	@cond_branch
	mov	r0, #0x34
	ldrsh	r2, [r5, r0]
	ldr	r3, .L351
	ldrb	r0, [r5, #0x9]
	sub	r0, r0, #0x2
	lsl	r1, r0, #0x2
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L333	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x1f
	and	r0, r0, r1
	strb	r0, [r6]
	b	.L334
.L352:
	.align	2, 0
.L351:
	.word	sSparkleThresholds
.L333:
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L335	@cond_branch
	ldrb	r0, [r6]
	mov	r1, #0x1f
	and	r1, r1, r0
	mov	r0, #0x20
	b	.L348
.L335:
	add	r0, r3, #0x2
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L337	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5, #0x34]
	b	.L334
.L337:
	add	r0, r3, #0x3
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L339	@cond_branch
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	b	.L334
.L339:
	ldrb	r0, [r6]
	mov	r1, #0x1f
	and	r1, r1, r0
	mov	r0, #0x80
.L348:
	orr	r1, r1, r0
	strb	r1, [r6]
.L334:
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
	b	.L341
.L332:
	ldrh	r0, [r5, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3c
	bls	.L341	@cond_branch
	cmp	r0, #0x46
	bls	.L343	@cond_branch
	bl	ClearRecvCommands
	mov	r0, #0x0
	strh	r0, [r5, #0x10]
	b	.L341
.L343:
	ldrb	r0, [r7]
	mov	r4, #0xf8
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L341	@cond_branch
	bl	ClearRecvCommands
	strh	r4, [r5, #0x10]
.L341:
	ldrh	r1, [r5, #0x28]
	ldr	r0, .L353
	cmp	r1, r0
	bls	.L346	@cond_branch
	ldrb	r0, [r7]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r7]
.L346:
	ldrb	r1, [r6]
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x1
	ldrb	r2, [r7]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7]
	ldrb	r0, [r6]
	lsr	r0, r0, #0x5
	add	r2, r5, #0
	add	r2, r2, #0x66
	strh	r0, [r2]
	add	r4, r5, #0
	add	r4, r4, #0x42
	add	r0, r4, #0
	mov	r1, r8
	mov	r2, #0xc
	bl	memcpy
	add	r0, r4, #0
	bl	Rfu_SendPacket
.L324:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L354:
	.align	2, 0
.L353:
	.word	0x8c9f
.Lfe28:
	.size	 HandlePlayerInput,.Lfe28-HandlePlayerInput
	.align	2, 0
	.type	 RecvLinkData,function
	.thumb_func
RecvLinkData:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	ldr	r3, .L365
	ldrb	r0, [r5, #0x9]
	cmp	r4, r0
	bcs	.L357	@cond_branch
	mov	r1, #0x0
.L359:
	lsl	r0, r4, #0x5
	add	r0, r5, r0
	add	r0, r0, #0xb5
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5, #0x9]
	cmp	r4, r0
	bcc	.L359	@cond_branch
.L357:
	add	r2, r3, #0
	ldrh	r0, [r2]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r1, r1, r0
	mov	r0, #0xbc
	lsl	r0, r0, #0x6
	cmp	r1, r0
	bne	.L364	@cond_branch
	ldrh	r0, [r2, #0x2]
	cmp	r0, #0x2
	beq	.L362	@cond_branch
.L364:
	add	r2, r5, #0
	add	r2, r2, #0x25
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L355
.L366:
	.align	2, 0
.L365:
	.word	gRecvCmds
.L362:
	add	r4, r5, #0
	add	r4, r4, #0x4e
	add	r0, r4, #0
	add	r1, r3, #0
	mov	r2, #0xe
	bl	memcpy
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x2a]
	mov	r0, #0x5
	ldrsb	r0, [r4, r0]
	strh	r0, [r5, #0x2c]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x28]
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	add	r0, r5, #0
	bl	UpdateInputEffects
	ldrb	r1, [r4, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L355	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L355:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 RecvLinkData,.Lfe29-RecvLinkData
	.align	2, 0
	.type	 Cmd_PlayGame_Leader,function
	.thumb_func
Cmd_PlayGame_Leader:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x5c
	mov	r1, #0x0
	mov	r2, #0xc
	bl	memset
	add	r0, r4, #0
	add	r0, r0, #0x4e
	mov	r1, #0x0
	mov	r2, #0xe
	bl	memset
	add	r0, r4, #0
	bl	RecvLinkData
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	add	r0, r4, #0
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L368	@cond_branch
	ldrh	r1, [r4, #0x28]
	ldr	r0, .L373
	cmp	r1, r0
	bls	.L369	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r4, #0x28]
	mov	r0, #0x10
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	b	.L370
.L374:
	.align	2, 0
.L373:
	.word	0x8c9f
.L369:
	mov	r0, #0xf
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
.L370:
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	strb	r1, [r4, #0xc]
	b	.L372
.L368:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	HandlePartnerInput
	add	r0, r4, #0
	bl	BerryCrush_BuildLocalState
	add	r0, r4, #0
	bl	HandlePlayerInput
	mov	r0, #0x0
.L372:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 Cmd_PlayGame_Leader,.Lfe30-Cmd_PlayGame_Leader
	.align	2, 0
	.type	 Cmd_PlayGame_Member,function
	.thumb_func
Cmd_PlayGame_Member:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x5c
	mov	r1, #0x0
	mov	r2, #0xc
	bl	memset
	add	r0, r4, #0
	add	r0, r0, #0x4e
	mov	r1, #0x0
	mov	r2, #0xe
	bl	memset
	add	r0, r4, #0
	bl	RecvLinkData
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	add	r0, r4, #0
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L376	@cond_branch
	ldrh	r1, [r4, #0x28]
	ldr	r0, .L381
	cmp	r1, r0
	bls	.L377	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r4, #0x28]
	mov	r0, #0x10
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	b	.L378
.L382:
	.align	2, 0
.L381:
	.word	0x8c9f
.L377:
	mov	r0, #0xf
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
.L378:
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	strb	r1, [r4, #0xc]
	b	.L380
.L376:
	add	r0, r4, #0
	bl	HandlePlayerInput
	mov	r0, #0x0
.L380:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 Cmd_PlayGame_Member,.Lfe31-Cmd_PlayGame_Member
	.align	2, 0
	.type	 Cmd_FinishGame,function
	.thumb_func
Cmd_FinishGame:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x5
	bls	.LCB3314
	b	.L384	@long jump
.LCB3314:
	lsl	r0, r0, #0x2
	ldr	r1, .L400
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L401:
	.align	2, 0
.L400:
	.word	.L396
	.align	2, 0
	.align	2, 0
.L396:
	.word	.L385
	.word	.L386
	.word	.L388
	.word	.L391
	.word	.L392
	.word	.L394
.L385:
	mov	r0, #0x8
	strh	r0, [r4, #0x12]
	mov	r0, #0xcf
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	ldr	r2, .L402
	mov	r1, #0x8
	bl	BlendPalettes
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r4, r0
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L384
.L403:
	.align	2, 0
.L402:
	.word	0x3ff
.L386:
	mov	r1, #0x9c
	lsl	r1, r1, #0x1
	add	r5, r4, r1
	ldrb	r0, [r5]
	sub	r0, r0, #0x1
	strb	r0, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.LCB3372
	b	.L399	@long jump
.LCB3372:
	mov	r0, #0x1
	neg	r0, r0
	ldr	r2, .L404
	mov	r1, #0x0
	bl	BlendPalettes
	ldr	r2, .L404+0x4
	add	r1, r4, r2
	mov	r0, #0x4
	strb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r5]
	ldr	r2, .L404+0x8
	ldrb	r1, [r1]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r2, #0x9d
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	strb	r0, [r1]
	b	.L384
.L405:
	.align	2, 0
.L404:
	.word	0x3ff
	.word	0x139
	.word	sIntroOutroVibrationData
.L388:
	ldr	r7, .L406
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r6, r4, r0
	ldr	r1, .L406+0x4
	add	r5, r4, r1
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	ldrb	r2, [r6]
	add	r0, r0, r2
	add	r0, r0, r7
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	strh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x12
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1a
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2c]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1e
	bl	SetGpuReg
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	mov	r1, #0x9d
	lsl	r1, r1, #0x1
	add	r2, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2]
	cmp	r0, r1
	bcc	.L399	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L384	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r5]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, r7
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x0
	strb	r0, [r6]
	b	.L399
.L407:
	.align	2, 0
.L406:
	.word	sIntroOutroVibrationData
	.word	0x139
.L391:
	mov	r0, #0x0
	strh	r0, [r4, #0x2c]
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L384
.L392:
	mov	r2, #0x9c
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	add	r0, r4, #0
	bl	AreEffectsFinished
	cmp	r0, #0
	beq	.L399	@cond_branch
	bl	Rfu_SetLinkStandbyCallback
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	b	.L384
.L394:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L399	@cond_branch
	mov	r0, #0x11
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	strb	r1, [r4, #0xc]
	b	.L398
.L384:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L399:
	mov	r0, #0x0
.L398:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 Cmd_FinishGame,.Lfe32-Cmd_FinishGame
	.align	2, 0
	.type	 Cmd_HandleTimeUp,function
	.thumb_func
Cmd_HandleTimeUp:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r6, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	beq	.L411	@cond_branch
	cmp	r0, #0x1
	bgt	.L419	@cond_branch
	cmp	r0, #0
	beq	.L410	@cond_branch
	b	.L409
.L419:
	cmp	r0, #0x2
	beq	.L413	@cond_branch
	cmp	r0, #0x3
	beq	.L415	@cond_branch
	b	.L409
.L410:
	mov	r0, #0x9
	strh	r0, [r5, #0x12]
	mov	r0, #0x1a
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x8
	mov	r2, #0x1f
	bl	BlendPalettes
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L409
.L411:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r4, r5, r0
	ldrb	r0, [r4]
	sub	r0, r0, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L421	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	mov	r2, #0x1f
	bl	BlendPalettes
	mov	r0, #0x0
	strb	r0, [r4]
	b	.L409
.L413:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	add	r0, r5, #0
	bl	AreEffectsFinished
	cmp	r0, #0
	beq	.L421	@cond_branch
	bl	Rfu_SetLinkStandbyCallback
	mov	r0, #0x0
	strh	r0, [r5, #0x10]
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L409
.L415:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L421	@cond_branch
	ldr	r0, .L423
	ldr	r1, [r5, #0x1c]
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	mov	r4, #0x0
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x7
	mov	r2, #0x1
	mov	r3, #0x0
	bl	SetPrintMessageArgs
	mov	r0, #0x13
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r0, #0x0
	strh	r4, [r5, #0x10]
	b	.L422
.L424:
	.align	2, 0
.L423:
	.word	gStringVar1
.L409:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
.L422:
	strb	r0, [r5, #0xc]
.L421:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 Cmd_HandleTimeUp,.Lfe33-Cmd_HandleTimeUp
	.align	2, 0
	.type	 Cmd_TabulateResults,function
	.thumb_func
Cmd_TabulateResults:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r7, r0, #0
	ldrb	r0, [r7, #0xc]
	cmp	r0, #0x7
	bls	.LCB3706
	b	.L426	@long jump
.LCB3706:
	lsl	r0, r0, #0x2
	ldr	r1, .L488
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L489:
	.align	2, 0
.L488:
	.word	.L479
	.align	2, 0
	.align	2, 0
.L479:
	.word	.L427
	.word	.L429
	.word	.L431
	.word	.L440
	.word	.L461
	.word	.L474
	.word	.L476
	.word	.L478
.L427:
	add	r4, r7, #0
	add	r4, r4, #0x42
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x4
	bl	memset
	ldrb	r0, [r7, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r7, r0
	add	r2, r0, #0
	add	r2, r2, #0xb2
	ldrh	r1, [r7, #0x28]
	ldrh	r0, [r2]
	cmp	r0, r1
	bls	.L428	@cond_branch
	strh	r1, [r2]
.L428:
	ldrb	r0, [r7, #0x8]
	lsl	r0, r0, #0x5
	add	r0, r7, r0
	add	r0, r0, #0xb2
	ldrh	r0, [r0]
	strh	r0, [r4]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x2
	bl	SendBlock
	b	.L426
.L429:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB3764
	b	.L482	@long jump
.LCB3764:
	b	.L483
.L431:
	bl	GetBlockReceivedStatus
	ldr	r2, .L490
	ldrb	r3, [r7, #0x9]
	sub	r1, r3, #0x2
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.LCB3781
	b	.L482	@long jump
.LCB3781:
	mov	r0, #0x0
	mov	r8, r0
	add	r4, r7, #0
	add	r4, r4, #0x42
	cmp	r8, r3
	bcs	.L434	@cond_branch
	ldr	r2, .L490+0x4
.L436:
	mov	r3, r8
	lsl	r1, r3, #0x5
	add	r1, r7, r1
	lsl	r0, r3, #0x8
	add	r0, r0, r2
	ldrh	r0, [r0]
	add	r1, r1, #0xb2
	strh	r0, [r1]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r6, [r7, #0x9]
	cmp	r8, r6
	bcc	.L436	@cond_branch
.L434:
	mov	r0, #0x0
	strh	r0, [r7, #0x10]
	strh	r0, [r4]
	bl	ResetBlockReceivedFlags
	ldrb	r0, [r7, #0x8]
	cmp	r0, #0
	bne	.L438	@cond_branch
	mov	r0, #0x3
	b	.L485
.L491:
	.align	2, 0
.L490:
	.word	sReceivedPlayerBitmasks
	.word	gBlockRecvBuffer
.L438:
	mov	r0, #0x6
	b	.L485
.L440:
	add	r0, r7, #0
	add	r0, r0, #0x68
	mov	r1, #0x0
	mov	r2, #0x30
	bl	memset
	ldrh	r1, [r7, #0x28]
	add	r0, r7, #0
	add	r0, r0, #0x6c
	strh	r1, [r0]
	mov	r0, #0x18
	ldrsh	r4, [r7, r0]
	ldrh	r0, [r7, #0x28]
	mov	r1, #0x3c
	bl	__udivsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	__divsi3
	add	r1, r7, #0
	add	r1, r1, #0x6e
	strh	r0, [r1]
	mov	r1, #0x30
	ldrsh	r0, [r7, r1]
	lsl	r0, r0, #0x8
	mov	r4, #0xc8
	lsl	r4, r4, #0x6
	add	r1, r4, #0
	bl	Q_24_8_mul
	add	r2, r0, #0
	mov	r3, #0x32
	ldrsh	r1, [r7, r3]
	lsl	r1, r1, #0x8
	bl	Q_24_8_div
	add	r2, r0, r4
	asr	r2, r2, #0x8
	mov	r1, #0x7f
	add	r0, r2, #0
	and	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #0x70
	strh	r0, [r1]
	lsl	r2, r2, #0x8
	mov	r1, #0xc8
	lsl	r1, r1, #0x7
	add	r0, r2, #0
	bl	Q_24_8_div
	add	r2, r0, #0
	ldrb	r1, [r7, #0x9]
	ldr	r0, [r7, #0x1c]
	mul	r0, r0, r1
	lsl	r4, r0, #0x8
	add	r0, r4, #0
	add	r1, r2, #0
	bl	Q_24_8_mul
	add	r4, r0, #0
	asr	r0, r4, #0x8
	str	r0, [r7, #0x68]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	add	r1, r7, #0
	add	r1, r1, #0x8f
	strb	r0, [r1]
	mov	r6, #0x0
	mov	r8, r6
	mov	r9, r1
	ldrb	r0, [r7, #0x9]
	cmp	r8, r0
	bcc	.LCB3925
	b	.L426	@long jump
.LCB3925:
.L444:
	add	r0, r7, #0
	add	r0, r0, #0x88
	add	r0, r0, r8
	mov	r1, r8
	strb	r1, [r0]
	add	r0, r7, #0
	add	r0, r0, #0x90
	add	r0, r0, r8
	strb	r1, [r0]
	mov	r3, r8
	lsl	r2, r3, #0x1
	add	r1, r7, #0
	add	r1, r1, #0x74
	add	r1, r1, r2
	lsl	r0, r3, #0x5
	add	r3, r7, r0
	add	r5, r3, #0
	add	r5, r5, #0xae
	ldrh	r0, [r5]
	strh	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #0x72
	ldrh	r6, [r1]
	add	r0, r0, r6
	strh	r0, [r1]
	mov	r1, r9
	ldrb	r0, [r1]
	add	r6, r2, #0
	cmp	r0, #0x1
	beq	.L449	@cond_branch
	cmp	r0, #0x1
	bgt	.L459	@cond_branch
	cmp	r0, #0
	beq	.L446	@cond_branch
	b	.L445
.L459:
	cmp	r0, #0x2
	beq	.L452	@cond_branch
	b	.L445
.L446:
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L487	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xac
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	mov	r1, #0xc8
	lsl	r1, r1, #0x7
	bl	Q_24_8_mul
	add	r2, r0, #0
	ldrh	r4, [r5]
	b	.L486
.L449:
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L487	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xb0
	ldrh	r2, [r0]
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	mov	r1, #0xc8
	lsl	r1, r1, #0x7
	bl	Q_24_8_mul
	add	r2, r0, #0
	ldrh	r4, [r5]
	b	.L486
.L452:
	ldrh	r0, [r5]
	cmp	r0, #0
	bne	.L453	@cond_branch
.L487:
	mov	r4, #0x0
	b	.L445
.L453:
	add	r1, r3, #0
	add	r1, r1, #0xb2
	ldrh	r0, [r1]
	ldrh	r2, [r7, #0x28]
	cmp	r0, r2
	bcc	.L455	@cond_branch
	mov	r4, #0xc8
	lsl	r4, r4, #0x7
	b	.L445
.L455:
	ldrh	r2, [r1]
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	mov	r1, #0xc8
	lsl	r1, r1, #0x7
	bl	Q_24_8_mul
	add	r2, r0, #0
	ldrh	r4, [r7, #0x28]
.L486:
	lsl	r4, r4, #0x8
	add	r1, r4, #0
	bl	Q_24_8_div
	add	r4, r0, #0
.L445:
	asr	r4, r4, #0x4
	add	r0, r7, #0
	add	r0, r0, #0x7e
	add	r0, r0, r6
	strh	r4, [r0]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r7, #0x9]
	cmp	r8, r3
	bcc	.L444	@cond_branch
	b	.L426
.L461:
	mov	r6, #0x0
	mov	r8, r6
	ldrb	r0, [r7, #0x9]
	sub	r0, r0, #0x1
	add	r1, r7, #0
	add	r1, r1, #0x68
	str	r1, [sp, #0xc]
	cmp	r8, r0
	bge	.L463	@cond_branch
.L465:
	ldrb	r0, [r7, #0x9]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r2, r8
	add	r2, r2, #0x1
	str	r2, [sp, #0x8]
	cmp	r4, r8
	bls	.L464	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0x74
	str	r3, [sp]
	add	r6, r7, #0
	add	r6, r6, #0x88
	str	r6, [sp, #0x4]
	mov	r0, #0x90
	add	r0, r0, r7
	mov	sl, r0
	mov	r1, #0x7e
	add	r1, r1, r7
	mov	r9, r1
.L469:
	sub	r2, r4, #0x1
	mov	ip, r2
	lsl	r6, r2, #0x1
	ldr	r0, [sp]
	add	r3, r0, r6
	lsl	r5, r4, #0x1
	add	r1, r0, r5
	ldrh	r2, [r3]
	ldrh	r0, [r1]
	cmp	r2, r0
	bcs	.L470	@cond_branch
	ldrh	r0, [r1]
	strh	r2, [r1]
	strh	r0, [r3]
	ldr	r1, [sp, #0x4]
	add	r2, r1, r4
	ldrb	r3, [r2]
	add	r1, r1, ip
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
.L470:
	mov	r2, r9
	add	r3, r2, r6
	add	r1, r2, r5
	ldrh	r2, [r3]
	ldrh	r6, [r1]
	cmp	r2, r6
	bcs	.L468	@cond_branch
	ldrh	r0, [r1]
	strh	r2, [r1]
	strh	r0, [r3]
	mov	r0, sl
	add	r2, r0, r4
	ldrb	r3, [r2]
	mov	r1, sl
	add	r1, r1, ip
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
.L468:
	mov	r1, ip
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r8
	bhi	.L469	@cond_branch
.L464:
	ldr	r2, [sp, #0x8]
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r0, [r7, #0x9]
	sub	r0, r0, #0x1
	cmp	r8, r0
	blt	.L465	@cond_branch
.L463:
	mov	r0, #0x0
	ldr	r1, [sp, #0xc]
	mov	r2, #0x30
	bl	SendBlock
	b	.L426
.L474:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L482	@cond_branch
	b	.L483
.L476:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L482	@cond_branch
	add	r4, r7, #0
	add	r4, r4, #0x68
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x30
	bl	memset
	ldr	r1, .L492
	add	r0, r4, #0
	mov	r2, #0x30
	bl	memcpy
	bl	ResetBlockReceivedFlags
.L483:
	mov	r0, #0x0
	strh	r0, [r7, #0x10]
	b	.L426
.L493:
	.align	2, 0
.L492:
	.word	gBlockRecvBuffer
.L478:
	bl	SaveResults
	mov	r0, #0x12
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r0, #0x0
	mov	r1, #0xb
	strh	r1, [r7, #0x12]
	strb	r0, [r7, #0xc]
	add	r1, r7, #0
	add	r1, r1, #0x24
	strb	r0, [r1]
	b	.L482
.L426:
	ldrb	r0, [r7, #0xc]
	add	r0, r0, #0x1
.L485:
	strb	r0, [r7, #0xc]
.L482:
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 Cmd_TabulateResults,.Lfe34-Cmd_TabulateResults
	.align	2, 0
	.type	 Cmd_ShowResults,function
	.thumb_func
Cmd_ShowResults:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r6, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x4
	bhi	.L495	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L509
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L510:
	.align	2, 0
.L509:
	.word	.L505
	.align	2, 0
	.align	2, 0
.L505:
	.word	.L496
	.word	.L498
	.word	.L499
	.word	.L502
	.word	.L504
.L496:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	add	r0, r5, #0
	bl	OpenResultsWindow
	cmp	r0, #0
	bne	.L495	@cond_branch
	b	.L508
.L498:
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, #0x1e
	strb	r0, [r1]
	b	.L495
.L499:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L500	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	b	.L508
.L500:
	ldr	r0, .L511
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L508	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	CloseResultsWindow
	b	.L495
.L512:
	.align	2, 0
.L511:
	.word	gMain
.L502:
	ldrh	r0, [r5, #0x12]
	cmp	r0, #0xc
	bhi	.L495	@cond_branch
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r5, #0x12]
	strb	r1, [r5, #0xc]
	b	.L508
.L504:
	ldr	r0, .L513
	ldr	r1, [r5, #0x1c]
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L513+0x4
	bl	GetBerryPowder
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	mov	r4, #0x0
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x2
	mov	r2, #0x3
	mov	r3, #0x0
	bl	SetPrintMessageArgs
	mov	r0, #0x13
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	strb	r4, [r5, #0xc]
	b	.L508
.L514:
	.align	2, 0
.L513:
	.word	gStringVar1
	.word	gStringVar2
.L495:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L508:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 Cmd_ShowResults,.Lfe35-Cmd_ShowResults
	.align	2, 0
	.type	 Cmd_SaveGame,function
	.thumb_func
Cmd_SaveGame:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r4, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x4
	bhi	.L516	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L529
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L530:
	.align	2, 0
.L529:
	.word	.L525
	.align	2, 0
	.align	2, 0
.L525:
	.word	.L517
	.word	.L519
	.word	.L520
	.word	.L522
	.word	.L524
.L517:
	ldrh	r1, [r5, #0x28]
	ldr	r0, .L531
	cmp	r1, r0
	bls	.L518	@cond_branch
	mov	r1, #0x9c
	lsl	r1, r1, #0x1
	add	r0, r5, r1
	bl	HideTimer
.L518:
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	SetPrintMessageArgs
	mov	r4, #0x0
	mov	r0, #0x13
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	strb	r4, [r5, #0xc]
	b	.L528
.L532:
	.align	2, 0
.L531:
	.word	0x8c9f
.L519:
	bl	Rfu_SetLinkStandbyCallback
	b	.L516
.L520:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L528	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldr	r2, .L533
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L533+0x4
	mov	r1, #0x0
	bl	CreateTask
	b	.L516
.L534:
	.align	2, 0
.L533:
	.word	gText_SavingDontTurnOffThePower2
	.word	Task_LinkFullSave
.L522:
	ldr	r0, .L535
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L516	@cond_branch
	b	.L528
.L536:
	.align	2, 0
.L535:
	.word	Task_LinkFullSave
.L524:
	mov	r0, #0x14
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r1, #0x0
	mov	r0, #0xf
	strh	r0, [r5, #0x12]
	strb	r1, [r5, #0xc]
	b	.L528
.L516:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L528:
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 Cmd_SaveGame,.Lfe36-Cmd_SaveGame
	.align	2, 0
	.type	 Cmd_AskPlayAgain,function
	.thumb_func
Cmd_AskPlayAgain:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r6, r1, #0
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	beq	.L540	@cond_branch
	cmp	r0, #0x1
	bgt	.L549	@cond_branch
	cmp	r0, #0
	beq	.L539	@cond_branch
	b	.L538
.L549:
	cmp	r0, #0x2
	beq	.L541	@cond_branch
	b	.L538
.L539:
	mov	r0, #0x1
	str	r0, [sp]
	add	r0, r6, #0
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x0
	bl	SetPrintMessageArgs
	mov	r0, #0x14
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r0, #0x0
	strb	r0, [r5, #0xc]
	b	.L550
.L540:
	bl	DisplayYesNoMenuDefaultYes
	b	.L538
.L541:
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L552	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x42
	mov	r1, #0x0
	mov	r2, #0xc
	bl	memset
	cmp	r4, #0
	bne	.L543	@cond_branch
	bl	HasAtLeastOneBerry
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L544	@cond_branch
	strh	r4, [r5, #0x14]
	b	.L546
.L544:
	mov	r0, #0x3
	b	.L551
.L543:
	mov	r0, #0x1
.L551:
	strh	r0, [r5, #0x14]
.L546:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	mov	r4, #0x0
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	SetPrintMessageArgs
	mov	r0, #0x15
	strb	r0, [r5, #0xe]
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	strb	r4, [r5, #0xc]
	b	.L552
.L538:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L552:
	mov	r0, #0x0
.L550:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 Cmd_AskPlayAgain,.Lfe37-Cmd_AskPlayAgain
	.align	2, 0
	.type	 Cmd_CommunicatePlayAgainResponses,function
	.thumb_func
Cmd_CommunicatePlayAgainResponses:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	beq	.L556	@cond_branch
	cmp	r0, #0x1
	bgt	.L571	@cond_branch
	cmp	r0, #0
	beq	.L555	@cond_branch
	b	.L554
.L571:
	cmp	r0, #0x2
	beq	.L558	@cond_branch
	cmp	r0, #0x3
	beq	.L560	@cond_branch
	b	.L554
.L555:
	bl	Rfu_SetLinkStandbyCallback
	b	.L554
.L556:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L573	@cond_branch
	ldrh	r0, [r4, #0x14]
	add	r1, r4, #0
	add	r1, r1, #0x42
	strh	r0, [r1]
	add	r0, r4, #0
	add	r0, r0, #0x4e
	strh	r5, [r0]
	mov	r0, #0x0
	mov	r2, #0x2
	bl	SendBlock
	b	.L554
.L558:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L573	@cond_branch
	strh	r5, [r4, #0x10]
	b	.L554
.L560:
	bl	GetBlockReceivedStatus
	ldr	r2, .L574
	ldrb	r3, [r4, #0x9]
	sub	r1, r3, #0x2
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L573	@cond_branch
	add	r7, r4, #0
	add	r7, r7, #0x42
	add	r6, r4, #0
	add	r6, r6, #0x4e
	cmp	r5, r3
	bcs	.L563	@cond_branch
	add	r1, r6, #0
	ldr	r2, .L574+0x4
.L565:
	lsl	r0, r5, #0x8
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldrh	r3, [r1]
	add	r0, r0, r3
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r4, #0x9]
	cmp	r5, r0
	bcc	.L565	@cond_branch
.L563:
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L567	@cond_branch
	mov	r0, #0x17
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	b	.L568
.L575:
	.align	2, 0
.L574:
	.word	sReceivedPlayerBitmasks
	.word	gBlockRecvBuffer
.L567:
	mov	r0, #0x16
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
.L568:
	bl	ResetBlockReceivedFlags
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r7]
	strh	r0, [r6]
	strh	r0, [r4, #0x10]
	strb	r1, [r4, #0xc]
	b	.L572
.L554:
	ldrb	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xc]
.L573:
	mov	r0, #0x0
.L572:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 Cmd_CommunicatePlayAgainResponses,.Lfe38-Cmd_CommunicatePlayAgainResponses
	.align	2, 0
	.type	 Cmd_PlayAgain,function
	.thumb_func
Cmd_PlayAgain:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	ldrb	r4, [r5, #0xc]
	cmp	r4, #0x1
	beq	.L579	@cond_branch
	cmp	r4, #0x1
	bgt	.L586	@cond_branch
	cmp	r4, #0
	beq	.L578	@cond_branch
	b	.L577
.L586:
	cmp	r4, #0x2
	beq	.L581	@cond_branch
	cmp	r4, #0x3
	beq	.L582	@cond_branch
	b	.L577
.L578:
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x10
	b	.L588
.L579:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L577	@cond_branch
	b	.L589
.L581:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	add	r0, r5, #0
	bl	ResetCrusherPos
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
.L588:
	bl	BeginNormalPaletteFade
	bl	UpdatePaletteFade
	b	.L577
.L582:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L589	@cond_branch
	mov	r0, #0x7
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	mov	r0, #0x0
	strh	r4, [r5, #0x12]
	b	.L590
.L577:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
.L590:
	strb	r0, [r5, #0xc]
.L589:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 Cmd_PlayAgain,.Lfe39-Cmd_PlayAgain
	.align	2, 0
	.type	 Cmd_StopGame,function
	.thumb_func
Cmd_StopGame:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	ldrb	r4, [r5, #0xc]
	cmp	r4, #0x1
	beq	.L596	@cond_branch
	cmp	r4, #0x1
	bgt	.L603	@cond_branch
	cmp	r4, #0
	beq	.L593	@cond_branch
	b	.L592
.L603:
	cmp	r4, #0x2
	beq	.L598	@cond_branch
	b	.L592
.L593:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	DrawDialogueFrame
	ldrh	r1, [r5, #0x14]
	cmp	r1, #0x3
	bne	.L594	@cond_branch
	ldr	r0, .L606
	ldr	r2, [r0, #0x14]
	ldrb	r3, [r5, #0xb]
	str	r4, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	str	r1, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	AddTextPrinterParameterized2
	b	.L595
.L607:
	.align	2, 0
.L606:
	.word	sMessages
.L594:
	ldr	r0, .L608
	ldr	r2, [r0, #0x18]
	ldrb	r3, [r5, #0xb]
	str	r4, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	AddTextPrinterParameterized2
.L595:
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L592
.L609:
	.align	2, 0
.L608:
	.word	sMessages
.L596:
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L605	@cond_branch
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, #0x78
	strb	r0, [r1]
	b	.L592
.L598:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	ldrb	r0, [r1]
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L599	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	b	.L605
.L599:
	mov	r0, #0x18
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	strb	r4, [r5, #0xc]
	b	.L605
.L592:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L605:
	mov	r0, #0x0
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 Cmd_StopGame,.Lfe40-Cmd_StopGame
	.align	2, 0
	.type	 Cmd_CloseLink,function
	.thumb_func
Cmd_CloseLink:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrb	r4, [r5, #0xc]
	cmp	r4, #0x1
	beq	.L613	@cond_branch
	cmp	r4, #0x1
	bgt	.L619	@cond_branch
	cmp	r4, #0
	beq	.L612	@cond_branch
	b	.L611
.L619:
	cmp	r4, #0x2
	beq	.L615	@cond_branch
	b	.L611
.L612:
	bl	Rfu_SetLinkStandbyCallback
	b	.L611
.L613:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L621	@cond_branch
	bl	SetCloseLinkCallback
	b	.L611
.L615:
	ldr	r0, .L622
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L621	@cond_branch
	mov	r0, #0x19
	strb	r0, [r5, #0xe]
	mov	r0, #0x5
	mov	r1, #0x1
	mov	r2, #0x0
	bl	RunOrScheduleCommand
	strb	r4, [r5, #0xc]
	b	.L621
.L623:
	.align	2, 0
.L622:
	.word	gReceivedRemoteLinkPlayers
.L611:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L621:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 Cmd_CloseLink,.Lfe41-Cmd_CloseLink
	.align	2, 0
	.type	 Cmd_Quit,function
	.thumb_func
Cmd_Quit:
	push	{lr}
	mov	r0, #0x0
	bl	QuitBerryCrush
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 Cmd_Quit,.Lfe42-Cmd_Quit
	.align	2, 0
	.type	 ResetGame,function
	.thumb_func
ResetGame:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	mov	r0, #0x33
	bl	IncrementGameStat
	strb	r5, [r4, #0xd]
	mov	r1, #0x0
	strh	r5, [r4, #0x10]
	mov	r0, #0x2
	strh	r0, [r4, #0x12]
	strh	r5, [r4, #0x14]
	str	r5, [r4, #0x1c]
	strh	r5, [r4, #0x18]
	strh	r5, [r4, #0x1a]
	str	r5, [r4, #0x20]
	add	r0, r4, #0
	add	r0, r0, #0x24
	strb	r1, [r0]
	add	r1, r4, #0
	add	r1, r1, #0x25
	mov	r0, #0x0
	strb	r0, [r1]
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x28]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L631
	strh	r0, [r4, #0x32]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x34]
	mov	r6, #0x0
	mov	r3, #0x0
.L629:
	lsl	r0, r5, #0x5
	add	r2, r4, r0
	add	r1, r2, #0
	add	r1, r1, #0xa4
	ldr	r0, .L631
	strh	r0, [r1]
	add	r0, r2, #0
	add	r0, r0, #0xa6
	strh	r3, [r0]
	add	r0, r0, #0x2
	strh	r3, [r0]
	add	r1, r1, #0x6
	mov	r0, #0x1
	strh	r0, [r1]
	add	r0, r2, #0
	add	r0, r0, #0xac
	strh	r3, [r0]
	add	r0, r0, #0x2
	strh	r3, [r0]
	add	r0, r0, #0x2
	strh	r3, [r0]
	add	r0, r0, #0x2
	strh	r3, [r0]
	add	r0, r0, #0x2
	strb	r6, [r0]
	add	r0, r0, #0x1
	strb	r6, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L629	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L632:
	.align	2, 0
.L631:
	.word	0xffff
.Lfe43:
	.size	 ResetGame,.Lfe43-ResetGame
	.align	2, 0
	.type	 SetPaletteFadeArgs,function
	.thumb_func
SetPaletteFadeArgs:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	str	r2, [sp, #0x4]
	ldr	r5, [sp, #0x18]
	ldr	r6, [sp, #0x1c]
	ldr	r4, [sp, #0x20]
	mov	r2, sp
	strh	r4, [r2]
	add	r4, sp, #0x4
	ldrb	r2, [r4]
	strb	r2, [r0]
	ldrb	r2, [r4, #0x1]
	strb	r2, [r0, #0x1]
	ldrb	r2, [r4, #0x2]
	strb	r2, [r0, #0x2]
	ldrb	r2, [r4, #0x3]
	strb	r2, [r0, #0x3]
	strb	r3, [r0, #0x4]
	strb	r5, [r0, #0x5]
	strb	r6, [r0, #0x6]
	mov	r2, sp
	ldrb	r2, [r2]
	strb	r2, [r0, #0x7]
	mov	r2, sp
	ldrb	r2, [r2, #0x1]
	strb	r2, [r0, #0x8]
	strb	r1, [r0, #0x9]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 SetPaletteFadeArgs,.Lfe44-SetPaletteFadeArgs
	.align	2, 0
	.type	 SetPrintMessageArgs,function
	.thumb_func
SetPrintMessageArgs:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, [sp, #0x10]
	mov	r4, sp
	strh	r3, [r4]
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	mov	r1, sp
	ldrb	r1, [r1]
	strb	r1, [r0, #0x2]
	mov	r1, sp
	ldrb	r1, [r1, #0x1]
	strb	r1, [r0, #0x3]
	strb	r5, [r0, #0x4]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 SetPrintMessageArgs,.Lfe45-SetPrintMessageArgs
	.align	2, 0
	.type	 ShowGameDisplay,function
	.thumb_func
ShowGameDisplay:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	bl	GetBerryCrushGame
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L636	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L651
.L636:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x9
	bls	.LCB5414
	b	.L637	@long jump
.LCB5414:
	lsl	r0, r0, #0x2
	ldr	r1, .L653
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L654:
	.align	2, 0
.L653:
	.word	.L649
	.align	2, 0
	.align	2, 0
.L649:
	.word	.L638
	.word	.L639
	.word	.L640
	.word	.L641
	.word	.L642
	.word	.L643
	.word	.L644
	.word	.L646
	.word	.L647
	.word	.L648
.L638:
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	bl	ScanlineEffect_Stop
	bl	ResetTempTileDataBuffers
	b	.L637
.L639:
	add	r0, sp, #0x8
	mov	r4, #0x0
	strh	r4, [r0]
	mov	r1, #0xe0
	lsl	r1, r1, #0x13
	ldr	r2, .L655
	bl	CpuSet
	ldr	r0, .L655+0x4
	strb	r4, [r0]
	mov	r0, #0x3
	bl	DigitObjUtil_Init
	b	.L637
.L656:
	.align	2, 0
.L655:
	.word	0x1000200
	.word	gReservedSpritePaletteCount
.L640:
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	b	.L637
.L641:
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L657
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	mov	r0, #0xe0
	lsl	r0, r0, #0x1
	add	r1, r5, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r0, #0x87
	lsl	r0, r0, #0x6
	add	r1, r5, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	mov	r0, #0xc7
	lsl	r0, r0, #0x6
	add	r1, r5, r0
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L637
.L658:
	.align	2, 0
.L657:
	.word	sBgTemplates
.L642:
	mov	r4, #0x20
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	mov	r0, #0x40
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	b	.L637
.L643:
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	ldr	r1, .L659
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	b	.L637
.L660:
	.align	2, 0
.L659:
	.word	gBerryCrush_Crusher_Gfx
.L644:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5607
	b	.L652	@long jump
.LCB5607:
	bl	InitStandardTextBoxWindows
	bl	InitTextBoxGfxAndPrinters
	add	r0, r5, #0
	bl	CreatePlayerNameWindows
	add	r0, r5, #0
	bl	DrawPlayerNameWindows
	ldr	r0, .L661
	ldrb	r1, [r0, #0x8]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0, #0x8]
	b	.L637
.L662:
	.align	2, 0
.L661:
	.word	gPaletteFade
.L646:
	ldr	r0, .L663
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	mov	r1, #0x0
	bl	LoadPalette
	ldr	r1, .L663+0x4
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r1, .L663+0x8
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r1, .L663+0xc
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	add	r0, r5, #0
	bl	CopyPlayerNameWindowGfxToBg
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	b	.L637
.L664:
	.align	2, 0
.L663:
	.word	gBerryCrush_Crusher_Pal
	.word	sCrusherTop_Tilemap
	.word	sContainerCap_Tilemap
	.word	sBg_Tilemap
.L647:
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x0
	mov	r1, #0x0
	bl	CreateWirelessStatusIndicatorSprite
	add	r0, r5, #0
	bl	CreateGameSprites
	ldr	r0, .L665
	ldrh	r1, [r0]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	b	.L637
.L666:
	.align	2, 0
.L665:
	.word	gSpriteCoordOffsetY
.L648:
	ldr	r2, .L667
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuRegBits
	bl	BerryCrush_SetVBlankCallback
	mov	r0, #0x0
	strb	r0, [r5, #0xc]
	mov	r0, #0x1
	b	.L651
.L668:
	.align	2, 0
.L667:
	.word	gPaletteFade
.L637:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L652:
	mov	r0, #0x0
.L651:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 ShowGameDisplay,.Lfe46-ShowGameDisplay
	.align	2, 0
	.type	 HideGameDisplay,function
	.thumb_func
HideGameDisplay:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	bl	GetBerryCrushGame
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L670	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L684
.L670:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x7
	bls	.LCB5774
	b	.L671	@long jump
.LCB5774:
	lsl	r0, r0, #0x2
	ldr	r1, .L686
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L687:
	.align	2, 0
.L686:
	.word	.L682
	.align	2, 0
	.align	2, 0
.L682:
	.word	.L672
	.word	.L673
	.word	.L675
	.word	.L676
	.word	.L678
	.word	.L679
	.word	.L680
	.word	.L681
.L672:
	bl	Rfu_SetLinkStandbyCallback
	b	.L671
.L673:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L685	@cond_branch
.L675:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	bl	UpdatePaletteFade
	b	.L671
.L676:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L671	@cond_branch
	b	.L685
.L678:
	mov	r4, #0x20
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	b	.L671
.L679:
	bl	FreeAllWindowBuffers
	mov	r0, #0x0
	bl	HideBg
	mov	r0, #0x0
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x1
	bl	HideBg
	mov	r0, #0x1
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x2
	bl	HideBg
	mov	r0, #0x2
	bl	UnsetBgTilemapBuffer
	mov	r0, #0x3
	bl	HideBg
	mov	r0, #0x3
	bl	UnsetBgTilemapBuffer
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L671
.L680:
	bl	DestroyWirelessStatusIndicatorSprite
	add	r0, r5, #0
	bl	DestroyGameSprites
	bl	DigitObjUtil_Free
	b	.L671
.L681:
	mov	r0, #0x0
	strb	r0, [r5, #0xc]
	mov	r0, #0x1
	b	.L684
.L671:
	ldrb	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strb	r0, [r5, #0xc]
.L685:
	mov	r0, #0x0
.L684:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 HideGameDisplay,.Lfe47-HideGameDisplay
	.align	2, 0
	.type	 UpdateGame,function
	.thumb_func
UpdateGame:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L690
	ldrh	r1, [r4, #0x2c]
	ldrh	r2, [r4, #0x2a]
	add	r1, r1, r2
	strh	r1, [r0]
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x16
	bl	SetGpuReg
	ldrh	r0, [r4, #0x12]
	cmp	r0, #0x7
	bne	.L689	@cond_branch
	mov	r1, #0x9c
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldrh	r1, [r4, #0x28]
	bl	PrintTimer
.L689:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L691:
	.align	2, 0
.L690:
	.word	gSpriteCoordOffsetY
.Lfe48:
	.size	 UpdateGame,.Lfe48-UpdateGame
	.align	2, 0
	.type	 ResetCrusherPos,function
	.thumb_func
ResetCrusherPos:
	mov	r1, #0x0
	ldr	r2, .L693
	strh	r2, [r0, #0x2a]
	strh	r1, [r0, #0x2c]
	ldr	r0, .L693+0x4
	strh	r1, [r0]
	ldr	r0, .L693+0x8
	strh	r2, [r0]
	bx	lr
.L694:
	.align	2, 0
.L693:
	.word	0xff98
	.word	gSpriteCoordOffsetX
	.word	gSpriteCoordOffsetY
.Lfe49:
	.size	 ResetCrusherPos,.Lfe49-ResetCrusherPos
	.align	2, 0
	.type	 CreateBerrySprites,function
	.thumb_func
CreateBerrySprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	sl, r0
	str	r1, [sp]
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, sl
	ldrb	r1, [r1, #0x9]
	cmp	r9, r1
	bcc	.LCB6010
	b	.L697	@long jump
.LCB6010:
.L699:
	ldr	r1, .L703
	mov	r2, r9
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r2, [r0]
	mov	r1, r9
	lsl	r0, r1, #0x5
	add	r0, r0, sl
	add	r0, r0, #0xa4
	ldrh	r3, [r0]
	add	r3, r3, #0x85
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r0, .L703+0x4
	add	r1, r2, #0
	bl	AddItemIconObjectWithCustomObjectTemplate
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, r9
	lsl	r3, r2, #0x2
	ldr	r1, [sp]
	add	r1, r1, #0x38
	add	r6, r1, r3
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L703+0x8
	add	r1, r1, r0
	str	r1, [r6]
	ldrb	r0, [r1, #0x5]
	mov	r2, #0xc
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r2, [r6]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r6]
	ldr	r0, [sp]
	add	r0, r0, #0xc
	add	r0, r0, r3
	mov	r8, r0
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x8]
	add	r0, r0, #0x78
	strh	r0, [r1, #0x20]
	ldr	r1, [r6]
	ldr	r0, .L703+0xc
	strh	r0, [r1, #0x22]
	ldr	r3, [r6]
	add	r5, r3, #0
	add	r5, r5, #0x2e
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	strh	r0, [r5, #0x2]
	mov	r0, #0x20
	strh	r0, [r5, #0x4]
	mov	r0, #0x70
	strh	r0, [r5, #0xe]
	mov	r2, r8
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	ldrh	r1, [r1, #0x8]
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L700	@cond_branch
	add	r0, r1, #0x3
.L700:
	asr	r0, r0, #0x2
	strh	r0, [r5, #0xc]
	lsl	r0, r1, #0x17
	lsr	r7, r0, #0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r2, r2, #0x20
	lsr	r2, r2, #0x1
	mov	r0, #0x7
	mov	r1, #0xfe
	lsl	r1, r1, #0x6
	str	r3, [sp, #0x4]
	bl	Q_N_S_div
	add	r4, r0, #0
	ldr	r0, [r6]
	ldrh	r0, [r0, #0x20]
	lsl	r0, r0, #0x7
	ldr	r3, [sp, #0x4]
	strh	r0, [r3, #0x2e]
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x7
	add	r2, r4, #0
	bl	Q_N_S_div
	strh	r0, [r5, #0x6]
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x55
	bl	Q_N_S_mul
	add	r2, r0, #0
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r0, #0x7
	mov	r1, #0xfe
	lsl	r1, r1, #0x6
	bl	Q_N_S_div
	strh	r0, [r5, #0xa]
	ldrh	r0, [r5, #0xe]
	ldr	r2, .L703+0x10
	add	r1, r2, #0
	orr	r0, r0, r1
	strh	r0, [r5, #0xe]
	mov	r1, r8
	ldr	r0, [r1]
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bge	.L698	@cond_branch
	ldr	r0, [r6]
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L698:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r0, sl
	ldrb	r0, [r0, #0x9]
	cmp	r9, r0
	bcs	.LCB6181
	b	.L699	@long jump
.LCB6181:
.L697:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L704:
	.align	2, 0
.L703:
	.word	sPlayerBerrySpriteTags
	.word	sSpriteTemplate_PlayerBerry
	.word	gSprites
	.word	0xfff0
	.word	-0x8000
.Lfe50:
	.size	 CreateBerrySprites,.Lfe50-CreateBerrySprites
	.align	2, 0
	.type	 SpriteCB_DropBerryIntoCrusher,function
	.thumb_func
SpriteCB_DropBerryIntoCrusher:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r5, #0
	add	r4, r4, #0x2e
	ldrh	r0, [r4, #0x4]
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	strh	r0, [r5, #0x26]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	mov	r6, #0x80
	lsl	r6, r6, #0x8
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L706	@cond_branch
	ldrh	r0, [r4, #0x6]
	ldrh	r2, [r5, #0x2e]
	add	r0, r0, r2
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L706	@cond_branch
	ldrh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	cmp	r0, #0x7e
	ble	.L706	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x24]
	ldrh	r1, [r4, #0xe]
	ldr	r0, .L709
	and	r0, r0, r1
	strh	r0, [r4, #0xe]
.L706:
	ldrh	r0, [r4]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	strh	r0, [r5, #0x20]
	mov	r2, #0x22
	ldrsh	r1, [r5, r2]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	add	r1, r1, r0
	ldrh	r2, [r4, #0xe]
	ldr	r0, .L709
	and	r0, r0, r2
	cmp	r1, r0
	blt	.L708	@cond_branch
	ldr	r0, .L709+0x4
	str	r0, [r5, #0x1c]
	add	r0, r5, #0
	bl	FreeSpriteOamMatrix
	add	r0, r5, #0
	bl	DestroySprite
.L708:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L710:
	.align	2, 0
.L709:
	.word	0x7fff
	.word	SpriteCallbackDummy
.Lfe51:
	.size	 SpriteCB_DropBerryIntoCrusher,.Lfe51-SpriteCB_DropBerryIntoCrusher
	.align	2, 0
	.type	 BerryCrushFreeBerrySpriteGfx,function
	.thumb_func
BerryCrushFreeBerrySpriteGfx:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	mov	r5, #0x0
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcs	.L713	@cond_branch
	ldr	r7, .L717
.L715:
	lsl	r0, r5, #0x1
	add	r0, r0, r7
	ldrh	r4, [r0]
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcc	.L715	@cond_branch
.L713:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L718:
	.align	2, 0
.L717:
	.word	sPlayerBerrySpriteTags
.Lfe52:
	.size	 BerryCrushFreeBerrySpriteGfx,.Lfe52-BerryCrushFreeBerrySpriteGfx
	.align	2, 0
	.type	 UpdateInputEffects,function
	.thumb_func
UpdateInputEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	add	r6, r0, #0
	str	r1, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r1, #0x4e
	add	r1, r1, r6
	mov	sl, r1
	mov	r9, r0
	ldrb	r2, [r6, #0x9]
	cmp	r0, r2
	bcs	.L721	@cond_branch
	ldr	r7, .L744
.L723:
	mov	r3, sl
	ldrh	r0, [r3, #0xa]
	mov	r4, r9
	lsl	r1, r4, #0x1
	add	r1, r1, r9
	asr	r0, r0, r1
	lsl	r0, r0, #0x10
	mov	r1, #0xe0
	lsl	r1, r1, #0xb
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	mov	r8, r1
	cmp	r1, #0
	beq	.L722	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L725	@cond_branch
	lsl	r4, r4, #0x2
	ldr	r5, [sp]
	add	r5, r5, #0x24
	add	r0, r5, r4
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L726
.L745:
	.align	2, 0
.L744:
	.word	sImpactCoords
.L725:
	mov	r0, r9
	lsl	r4, r0, #0x2
	ldr	r5, [sp]
	add	r5, r5, #0x24
	add	r0, r5, r4
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	StartSpriteAnim
.L726:
	add	r3, r5, r4
	ldr	r2, [r3]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r4, #0x5
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	sub	r4, r4, #0x3c
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	mov	r0, #0x3
	mov	r1, r8
	and	r1, r1, r0
	mov	r8, r1
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x1
	add	r0, r1, r7
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r2, #0x24]
	ldr	r2, [r3]
	ldr	r3, .L746
	add	r1, r1, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	strh	r0, [r2, #0x26]
.L722:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldrb	r4, [r6, #0x9]
	cmp	r9, r4
	bcc	.L723	@cond_branch
.L721:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	bne	.L728	@cond_branch
	add	r2, r6, #0
	add	r2, r2, #0x25
	ldrb	r1, [r2]
	b	.L743
.L747:
	.align	2, 0
.L746:
	.word	sImpactCoords+0x1
.L728:
	ldrh	r0, [r6, #0x28]
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r2, #0x0
	mov	r9, r2
	mov	r3, sl
	ldrh	r1, [r3, #0xc]
	lsl	r0, r1, #0x1
	add	r0, r0, #0x3
	add	r6, r6, #0x25
	str	r6, [sp, #0xc]
	add	r3, r1, #0
	cmp	r9, r0
	bge	.L731	@cond_branch
.L733:
	mov	r4, r9
	lsl	r1, r4, #0x2
	ldr	r0, [sp]
	add	r0, r0, #0x4c
	add	r7, r0, r1
	ldr	r2, [r7]
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L732	@cond_branch
	ldr	r0, .L748
	str	r0, [r2, #0x1c]
	lsl	r1, r4, #0x1
	ldr	r3, .L748+0x4
	add	r0, r1, r3
	mov	r4, #0x0
	ldrsb	r4, [r0, r4]
	add	r0, r4, #0
	add	r0, r0, #0x78
	strh	r0, [r2, #0x20]
	ldr	r2, [r7]
	ldr	r0, .L748+0x8
	add	r1, r1, r0
	mov	r6, #0x0
	ldrsb	r6, [r1, r6]
	mov	r1, r8
	lsl	r0, r1, #0x2
	sub	r0, r0, #0x88
	sub	r0, r6, r0
	strh	r0, [r2, #0x22]
	ldr	r5, [r7]
	ldr	r2, [sp, #0x8]
	lsl	r1, r2, #0x2
	add	r0, r4, #0
	bl	__divsi3
	add	r4, r4, r0
	strh	r4, [r5, #0x24]
	ldr	r0, [r7]
	strh	r6, [r0, #0x26]
	mov	r3, sl
	ldrb	r1, [r3, #0x4]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L735	@cond_branch
	ldr	r0, [r7]
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L736
.L749:
	.align	2, 0
.L748:
	.word	SpriteCB_Sparkle_Init
	.word	sSparkleCoords
	.word	sSparkleCoords+0x1
.L735:
	ldr	r0, [r7]
	mov	r1, #0x0
	bl	StartSpriteAnim
.L736:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r4, sl
	ldrh	r3, [r4, #0xc]
	cmp	r0, #0x3
	bls	.L732	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
.L732:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r0, r3, #0x1
	add	r0, r0, #0x3
	cmp	r9, r0
	blt	.L733	@cond_branch
.L731:
	ldr	r2, [sp, #0xc]
	ldrb	r1, [r2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L739	@cond_branch
.L743:
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L729
.L739:
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x1
	bne	.L741	@cond_branch
	mov	r0, #0x47
	bl	PlaySE
	b	.L742
.L741:
	mov	r0, #0x46
	bl	PlaySE
.L742:
	ldr	r4, [sp, #0xc]
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
.L729:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 UpdateInputEffects,.Lfe53-UpdateInputEffects
	.align	2, 0
	.type	 AreEffectsFinished,function
	.thumb_func
AreEffectsFinished:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r2, #0x0
	ldrb	r0, [r5, #0x9]
	cmp	r2, r0
	bcs	.L752	@cond_branch
	add	r4, r6, #0
	add	r4, r4, #0x24
	mov	r7, #0x4
	add	r3, r0, #0
.L754:
	lsl	r0, r2, #0x2
	add	r0, r4, r0
	ldr	r0, [r0]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L765	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r3
	bcc	.L754	@cond_branch
.L752:
	mov	r2, #0x0
	add	r3, r6, #0
	add	r3, r3, #0x4c
	mov	r4, #0x4
.L760:
	lsl	r0, r2, #0x2
	add	r0, r3, r0
	ldr	r0, [r0]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L759	@cond_branch
.L765:
	mov	r0, #0x0
	b	.L764
.L759:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xa
	bls	.L760	@cond_branch
	mov	r1, #0x2c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L763	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2c]
.L763:
	mov	r0, #0x1
.L764:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe54:
	.size	 AreEffectsFinished,.Lfe54-AreEffectsFinished
	.align	2, 0
	.type	 FramesToMinSec,function
	.thumb_func
FramesToMinSec:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r4, r1, #0x10
	lsr	r4, r4, #0x10
	mov	r7, #0x0
	mov	r5, #0xe1
	lsl	r5, r5, #0x4
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__udivsi3
	strh	r0, [r6, #0x4]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3c
	bl	__udivsi3
	strh	r0, [r6, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	__umodsi3
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x10
	mov	r1, #0x4
	bl	Q_8_8_mul
	add	r2, r7, #0
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	mov	r0, #0x7
	mov	ip, r0
	ldr	r5, .L773
	mov	r4, #0x1
.L770:
	mov	r0, ip
	sub	r1, r0, r2
	add	r0, r3, #0
	asr	r0, r0, r1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L769	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	add	r7, r7, r0
.L769:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L770	@cond_branch
	ldr	r1, .L773+0x4
	add	r0, r7, #0
	bl	__udivsi3
	strh	r0, [r6, #0x8]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L774:
	.align	2, 0
.L773:
	.word	sPressingSpeedConversionTable
	.word	0xf4240
.Lfe55:
	.size	 FramesToMinSec,.Lfe55-FramesToMinSec
	.align	2, 0
	.type	 PrintTextCentered,function
	.thumb_func
PrintTextCentered:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	mov	r8, r3
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x2
	mov	r1, r8
	bl	GetStringWidth
	lsl	r4, r4, #0x2
	lsr	r0, r0, #0x1
	sub	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	ldr	r1, .L776
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	add	r0, r6, #0
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L777:
	.align	2, 0
.L776:
	.word	sBerryCrushTextColorTable
.Lfe56:
	.size	 PrintTextCentered,.Lfe56-PrintTextCentered
	.align	2, 0
	.type	 PrintResultsText,function
	.thumb_func
PrintResultsText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	str	r0, [sp, #0xc]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x10]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x14]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x18]
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, #0x0
	str	r1, [sp, #0x1c]
	mov	r2, #0x0
	str	r2, [sp, #0x20]
	ldr	r4, [sp, #0xc]
	add	r4, r4, #0x68
	str	r4, [sp, #0x24]
	ldr	r0, [sp, #0xc]
	ldrb	r0, [r0, #0x9]
	cmp	r8, r0
	bcc	.LCB6959
	b	.L780	@long jump
.LCB6959:
	ldr	r1, [sp, #0x10]
	lsl	r1, r1, #0x2
	str	r1, [sp, #0x28]
	mov	r4, #0xdd
	lsl	r4, r4, #0x1
	ldr	r2, [sp, #0xc]
	add	r4, r2, r4
	str	r4, [sp, #0x2c]
.L782:
	bl	DynamicPlaceholderTextUtil_Reset
	ldr	r0, [sp, #0x10]
	cmp	r0, #0x1
	beq	.L786	@cond_branch
	cmp	r0, #0x1
	bgt	.L798	@cond_branch
	cmp	r0, #0
	beq	.L784	@cond_branch
	mov	r1, r8
	lsl	r1, r1, #0x3
	mov	r9, r1
	b	.L802
.L798:
	ldr	r0, [sp, #0x10]
	cmp	r0, #0x2
	bne	.LCB6992
	b	.L794	@long jump
.LCB6992:
	mov	r1, r8
	lsl	r1, r1, #0x3
	mov	r9, r1
	b	.L802
.L784:
	ldr	r0, [sp, #0x24]
	add	r0, r0, #0x20
	add	r0, r0, r8
	ldrb	r0, [r0]
	str	r0, [sp, #0x1c]
	mov	r0, r8
	lsl	r3, r0, #0x1
	ldr	r2, [sp, #0x24]
	add	r2, r2, #0xc
	cmp	r0, #0
	beq	.L785	@cond_branch
	add	r0, r2, r3
	mov	r1, r8
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x1
	add	r1, r2, r1
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L785	@cond_branch
	mov	r4, r8
	add	r1, r4, #0
	str	r1, [sp, #0x20]
.L785:
	ldr	r1, [sp, #0x28]
	ldr	r4, [sp, #0x10]
	add	r0, r1, r4
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	add	r0, r2, r0
	ldrh	r1, [r0]
	ldr	r0, .L803
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L803+0x4
	ldr	r1, [sp, #0x28]
	add	r0, r1, r0
	ldr	r5, [r0]
	mov	r0, #0x2
	add	r1, r5, #0
	mov	r2, #0x1
	neg	r2, r2
	bl	GetStringWidth
	ldr	r2, [sp, #0x14]
	sub	r0, r2, r0
	sub	r0, r0, #0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, [sp, #0x2c]
	ldrb	r0, [r4]
	mov	r1, r8
	lsl	r6, r1, #0x3
	sub	r4, r6, r1
	lsl	r4, r4, #0x1
	ldr	r2, [sp, #0x18]
	add	r4, r2, r4
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L803+0x8
	str	r1, [sp]
	mov	r2, #0x0
	str	r2, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r7, #0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	ldr	r1, [sp, #0x2c]
	ldrb	r0, [r1]
	add	r2, r7, #0
	sub	r2, r2, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, .L803+0x8
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r1, .L803
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	mov	r9, r6
.L802:
	ldr	r6, [sp, #0x20]
	add	r6, r6, #0xa2
	ldr	r2, [sp, #0x1c]
	lsl	r5, r2, #0x5
	mov	r4, #0x1
	add	r4, r4, r8
	mov	sl, r4
	b	.L783
.L804:
	.align	2, 0
.L803:
	.word	gStringVar1
	.word	sBCRankingHeaders
	.word	sBerryCrushTextColorTable
.L786:
	ldr	r0, [sp, #0x24]
	add	r0, r0, r8
	add	r0, r0, #0x28
	ldrb	r0, [r0]
	str	r0, [sp, #0x1c]
	mov	r0, r8
	lsl	r3, r0, #0x1
	ldr	r2, [sp, #0x24]
	add	r2, r2, #0xc
	cmp	r0, #0
	beq	.L787	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xa
	add	r0, r2, r0
	mov	r4, r8
	lsl	r1, r4, #0x1
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L787	@cond_branch
	mov	r1, r8
	add	r0, r1, #0
	str	r0, [sp, #0x20]
.L787:
	ldr	r0, [sp, #0x28]
	ldr	r1, [sp, #0x10]
	add	r4, r0, r1
	lsl	r4, r4, #0x1
	add	r4, r3, r4
	add	r4, r2, r4
	ldrh	r1, [r4]
	lsr	r1, r1, #0x4
	ldr	r0, .L805
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r3, #0x0
	ldrb	r0, [r4]
	mov	r7, #0xf
	and	r7, r7, r0
	mov	r2, #0x0
	ldr	r4, [sp, #0x10]
	lsl	r4, r4, #0x2
	str	r4, [sp, #0x34]
	mov	r0, r8
	lsl	r0, r0, #0x3
	mov	r9, r0
	ldr	r1, [sp, #0x14]
	sub	r1, r1, #0x4
	str	r1, [sp, #0x30]
	ldr	r6, [sp, #0x20]
	add	r6, r6, #0xa2
	ldr	r4, [sp, #0x1c]
	lsl	r5, r4, #0x5
	mov	r0, #0x1
	add	r0, r0, r8
	mov	sl, r0
	mov	r1, #0x1
	mov	ip, r1
	ldr	r4, .L805+0x4
.L791:
	mov	r0, #0x3
	sub	r1, r0, r2
	add	r0, r7, #0
	asr	r0, r0, r1
	mov	r1, ip
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L790	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	add	r3, r3, r0
.L790:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L791	@cond_branch
	add	r0, r3, #0
	ldr	r1, .L805+0x8
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L805+0xc
	add	r1, r7, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L805+0x10
	ldr	r2, [sp, #0x34]
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L805+0x14
	bl	StringExpandPlaceholders
	mov	r0, #0x2
	ldr	r1, .L805+0x14
	mov	r2, #0x0
	bl	GetStringWidth
	add	r2, r0, #0
	ldr	r4, [sp, #0x30]
	sub	r2, r4, r2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, [sp, #0x2c]
	ldrb	r0, [r1]
	mov	r4, r9
	mov	r1, r8
	sub	r3, r4, r1
	lsl	r3, r3, #0x1
	ldr	r4, [sp, #0x18]
	add	r3, r4, r3
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, .L805+0x18
	str	r1, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r1, .L805+0x14
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	bl	AddTextPrinterParameterized3
	b	.L783
.L806:
	.align	2, 0
.L805:
	.word	gStringVar1
	.word	sPressingSpeedConversionTable
	.word	0xf4240
	.word	gStringVar2
	.word	sBCRankingHeaders
	.word	gStringVar4
	.word	sBerryCrushTextColorTable
.L794:
	mov	r2, r8
	str	r2, [sp, #0x1c]
	mov	r0, r8
	add	r4, r0, #0
	str	r4, [sp, #0x20]
	lsl	r5, r0, #0x5
	ldr	r1, [sp, #0xc]
	add	r0, r1, r5
	add	r0, r0, #0xa4
	ldrb	r2, [r0]
	cmp	r2, #0x2b
	bls	.L795	@cond_branch
	mov	r2, #0x0
.L795:
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r0, .L807
	add	r1, r1, r0
	ldr	r0, .L807+0x4
	bl	StringCopy
	ldr	r0, .L807+0x8
	ldr	r1, [r0, #0x8]
	ldr	r0, .L807+0xc
	bl	StringExpandPlaceholders
	mov	r0, #0x2
	ldr	r1, .L807+0xc
	mov	r2, #0x1
	neg	r2, r2
	bl	GetStringWidth
	add	r2, r0, #0
	ldr	r4, [sp, #0x14]
	sub	r2, r4, r2
	sub	r2, r2, #0x4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, [sp, #0x2c]
	ldrb	r0, [r1]
	mov	r1, r8
	lsl	r4, r1, #0x3
	sub	r3, r4, r1
	lsl	r3, r3, #0x1
	ldr	r1, [sp, #0x18]
	add	r3, r1, r3
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, .L807+0x10
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r1, .L807+0xc
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	bl	AddTextPrinterParameterized3
	mov	r9, r4
	mov	r6, r8
	add	r6, r6, #0xa2
	mov	r2, #0x1
	add	r2, r2, r8
	mov	sl, r2
.L783:
	ldr	r0, [sp, #0x1c]
	ldr	r4, [sp, #0xc]
	ldrb	r4, [r4, #0x8]
	cmp	r0, r4
	bne	.L799	@cond_branch
	ldr	r0, .L807+0x14
	ldr	r1, .L807+0x18
	bl	StringCopy
	b	.L800
.L808:
	.align	2, 0
.L807:
	.word	gBerries
	.word	gStringVar1
	.word	sBCRankingHeaders
	.word	gStringVar4
	.word	sBerryCrushTextColorTable
	.word	gStringVar3
	.word	gText_1_ClrBluShdwLtBlu_Dynamic0
.L799:
	ldr	r0, .L809
	ldr	r1, .L809+0x4
	bl	StringCopy
.L800:
	ldr	r4, .L809
	strb	r6, [r4]
	add	r1, r5, #0
	add	r1, r1, #0x98
	ldr	r0, [sp, #0xc]
	add	r1, r0, r1
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	ldr	r0, .L809+0x8
	add	r1, r4, #0
	bl	DynamicPlaceholderTextUtil_ExpandPlaceholders
	ldr	r1, [sp, #0x2c]
	ldrb	r0, [r1]
	mov	r2, r9
	mov	r4, r8
	sub	r3, r2, r4
	lsl	r3, r3, #0x1
	ldr	r1, [sp, #0x18]
	add	r3, r1, r3
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r2, .L809+0xc
	str	r2, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r1, .L809+0x8
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x4
	bl	AddTextPrinterParameterized3
	mov	r2, sl
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r4, [sp, #0xc]
	ldrb	r4, [r4, #0x9]
	cmp	r8, r4
	bcs	.LCB7460
	b	.L782	@long jump
.LCB7460:
.L780:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L810:
	.align	2, 0
.L809:
	.word	gStringVar3
	.word	gText_1_Dynamic0
	.word	gStringVar4
	.word	sBerryCrushTextColorTable
.Lfe57:
	.size	 PrintResultsText,.Lfe57-PrintResultsText
	.align	2, 0
	.type	 printCrushingResults,function
	.thumb_func
printCrushingResults:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	mov	r8, r0
	mov	r0, #0x0
	mov	sl, r0
	mov	r6, #0x0
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	mov	r2, r8
	add	r2, r2, #0x68
	str	r2, [sp, #0x10]
	mov	r4, #0xdd
	lsl	r4, r4, #0x1
	add	r4, r4, r8
	mov	r9, r4
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetWindowAttribute
	lsl	r0, r0, #0x1b
	mov	r1, #0xd6
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r7, r0, #0x18
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldr	r2, [sp, #0x10]
	ldrh	r1, [r2, #0x4]
	bl	FramesToMinSec
	ldrb	r0, [r4]
	ldr	r4, .L820
	str	r4, [sp]
	str	r6, [sp, #0x4]
	ldr	r1, .L820+0x4
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x2
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	ldr	r4, .L820+0x8
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r1, #0xbe
	sub	r0, r1, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r2, r9
	ldrb	r0, [r2]
	ldr	r1, .L820
	str	r1, [sp]
	mov	r2, sl
	str	r2, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	add	r0, r6, #0
	sub	r0, r0, #0x20
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x9f
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r4, #0x0
	ldrsh	r1, [r0, r4]
	ldr	r0, .L820+0xc
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L820+0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	mov	r2, #0x0
	ldrsh	r1, [r1, r2]
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r5, .L820+0x14
	ldr	r1, .L820+0x18
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r4, r9
	ldrb	r0, [r4]
	ldr	r1, .L820
	str	r1, [sp]
	mov	r2, sl
	str	r2, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	ldr	r4, .L820+0x1c
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	sub	r1, r6, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r2, .L820
	str	r2, [sp]
	mov	r1, sl
	str	r1, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	add	r0, r6, #0
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x9e
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldr	r0, .L820+0xc
	mov	r2, #0x2
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L820+0x20
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	mov	r4, r9
	ldrb	r0, [r4]
	ldr	r1, .L820
	str	r1, [sp]
	mov	r2, sl
	str	r2, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	add	r0, r7, #0
	add	r0, r0, #0xe
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r4]
	ldr	r4, .L820
	str	r4, [sp]
	mov	r1, sl
	str	r1, [sp, #0x4]
	ldr	r1, .L820+0x24
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x2
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	ldr	r4, .L820+0x28
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r2, #0xbe
	sub	r0, r2, r0
	lsl	r0, r0, #0x18
	str	r0, [sp, #0x18]
	lsr	r6, r0, #0x18
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r2, .L820
	str	r2, [sp]
	mov	r1, sl
	str	r1, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x3
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	mov	r4, r8
	ldrb	r2, [r4, #0x16]
	ldrh	r0, [r4, #0x16]
	mov	ip, r0
	mov	r1, #0x7
	mov	r9, r1
	mov	r5, #0x1
	ldr	r3, .L820+0x2c
.L815:
	mov	r4, r9
	mov	r0, sl
	sub	r1, r4, r0
	add	r0, r2, #0
	asr	r0, r0, r1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L814	@cond_branch
	mov	r1, sl
	lsl	r0, r1, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldr	r4, [sp, #0xc]
	add	r4, r4, r0
	str	r4, [sp, #0xc]
.L814:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0x7
	bls	.L815	@cond_branch
	ldr	r0, .L820+0xc
	mov	r2, ip
	lsr	r1, r2, #0x8
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L820+0x10
	ldr	r1, .L820+0x30
	ldr	r0, [sp, #0xc]
	bl	__udivsi3
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L820+0x14
	ldr	r1, .L820+0x34
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r6, #0
	sub	r0, r0, #0x26
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, r8
	add	r0, r0, #0x25
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L818	@cond_branch
	mov	r0, #0xdd
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrb	r0, [r0]
	ldr	r1, .L820+0x38
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	b	.L819
.L821:
	.align	2, 0
.L820:
	.word	sBerryCrushTextColorTable
	.word	gText_TimeColon
	.word	gText_SpaceSec
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_XDotY2
	.word	gText_SpaceMin
	.word	gText_StrVar1
	.word	gText_PressingSpeed
	.word	gText_TimesPerSec
	.word	sPressingSpeedConversionTable
	.word	0xf4240
	.word	gText_XDotY3
	.word	sBerryCrushTextColorTable+0xf
.L818:
	mov	r0, #0xdd
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrb	r0, [r0]
	ldr	r1, .L822
	str	r1, [sp]
	str	r2, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
.L819:
	add	r0, r7, #0
	add	r0, r0, #0xe
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0xdd
	lsl	r4, r4, #0x1
	add	r8, r8, r4
	mov	r1, r8
	ldrb	r0, [r1]
	ldr	r2, .L822
	mov	r9, r2
	str	r2, [sp]
	mov	r5, #0x0
	str	r5, [sp, #0x4]
	ldr	r1, .L822+0x4
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x2
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	ldr	r0, .L822+0x8
	ldr	r4, [sp, #0x10]
	ldrh	r1, [r4, #0x8]
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L822+0xc
	ldr	r1, .L822+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r1, #0xbe
	sub	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r2, r9
	str	r2, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x2
	add	r2, r6, #0
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L823:
	.align	2, 0
.L822:
	.word	sBerryCrushTextColorTable
	.word	gText_Silkiness
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1Percent
.Lfe58:
	.size	 printCrushingResults,.Lfe58-printCrushingResults
	.align	2, 0
	.type	 OpenResultsWindow,function
	.thumb_func
OpenResultsWindow:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r6, r1, #0
	add	r0, r6, #0
	add	r0, r0, #0x80
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bls	.LCB7910
	b	.L825	@long jump
.LCB7910:
	lsl	r0, r0, #0x2
	ldr	r1, .L846
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L847:
	.align	2, 0
.L846:
	.word	.L841
	.align	2, 0
	.align	2, 0
.L841:
	.word	.L826
	.word	.L829
	.word	.L830
	.word	.L831
	.word	.L839
	.word	.L840
.L826:
	ldrb	r0, [r4, #0x9]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r6, #0
	bl	HideTimer
	ldrh	r0, [r4, #0x12]
	lsl	r0, r0, #0x3
	ldr	r2, .L848
	mov	r1, sp
	add	r0, r0, r2
	ldmia	r0!, {r2, r3}
	stmia	r1!, {r2, r3}
	ldrh	r0, [r4, #0x12]
	cmp	r0, #0xd
	bne	.L827	@cond_branch
	ldr	r0, .L848+0x4
	add	r0, r0, #0x4
	b	.L844
.L849:
	.align	2, 0
.L848:
	.word	sWindowTemplates_Results+-0x58
	.word	sResultsWindowHeights
.L827:
	ldr	r0, .L850
.L844:
	add	r0, r5, r0
	ldrb	r1, [r0]
	mov	r0, sp
	strb	r1, [r0, #0x4]
	mov	r0, sp
	bl	AddWindow
	add	r1, r6, #0
	add	r1, r1, #0x82
	strb	r0, [r1]
	b	.L825
.L851:
	.align	2, 0
.L850:
	.word	sResultsWindowHeights
.L829:
	add	r4, r6, #0
	add	r4, r4, #0x82
	ldrb	r0, [r4]
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	b	.L825
.L830:
	add	r5, r6, #0
	add	r5, r5, #0x82
	ldrb	r0, [r5]
	ldr	r4, .L852
	add	r1, r4, #0
	mov	r2, #0xd0
	bl	LoadStdWindowGfx
	ldrb	r0, [r5]
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	b	.L825
.L853:
	.align	2, 0
.L852:
	.word	0x21d
.L831:
	ldrb	r0, [r4, #0x9]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r0, [r4, #0x12]
	cmp	r0, #0xc
	beq	.L834	@cond_branch
	cmp	r0, #0xc
	bgt	.L838	@cond_branch
	cmp	r0, #0xb
	beq	.L833	@cond_branch
	b	.L825
.L838:
	cmp	r0, #0xd
	beq	.L835	@cond_branch
	b	.L825
.L833:
	add	r0, r6, #0
	add	r0, r0, #0x82
	ldrb	r0, [r0]
	ldr	r3, .L854
	mov	r1, #0x16
	mov	r2, #0x3
	bl	PrintTextCentered
	ldr	r0, .L854+0x4
	add	r0, r5, r0
	ldrb	r3, [r0]
	lsl	r3, r3, #0x3
	ldrb	r1, [r4, #0x9]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	sub	r3, r3, r0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xb0
	bl	PrintResultsText
	add	r1, r6, #0
	add	r1, r1, #0x80
	mov	r0, #0x5
	b	.L845
.L855:
	.align	2, 0
.L854:
	.word	gText_PressesRankings
	.word	sResultsWindowHeights
.L834:
	add	r0, r6, #0
	add	r0, r0, #0x82
	ldrb	r0, [r0]
	ldr	r2, .L856
	add	r1, r4, #0
	add	r1, r1, #0x8f
	ldrb	r1, [r1]
	add	r1, r1, #0x3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r3, [r1]
	mov	r1, #0x16
	mov	r2, #0x4
	bl	PrintTextCentered
	ldr	r0, .L856+0x4
	add	r0, r5, r0
	ldrb	r3, [r0]
	lsl	r3, r3, #0x3
	ldrb	r1, [r4, #0x9]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	sub	r3, r3, r0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0xb0
	bl	PrintResultsText
	add	r1, r6, #0
	add	r1, r1, #0x80
	mov	r0, #0x5
	b	.L845
.L857:
	.align	2, 0
.L856:
	.word	sBCRankingHeaders
	.word	sResultsWindowHeights
.L835:
	add	r0, r6, #0
	add	r0, r0, #0x82
	ldrb	r0, [r0]
	ldr	r3, .L858
	mov	r1, #0x18
	mov	r2, #0x3
	bl	PrintTextCentered
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, #0xc0
	mov	r3, #0x10
	bl	PrintResultsText
	b	.L825
.L859:
	.align	2, 0
.L858:
	.word	gText_CrushingResults
.L839:
	add	r0, r4, #0
	bl	printCrushingResults
	b	.L825
.L840:
	add	r0, r6, #0
	add	r0, r0, #0x82
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r1, r6, #0
	add	r1, r1, #0x80
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L843
.L825:
	add	r1, r6, #0
	add	r1, r1, #0x80
	ldrb	r0, [r1]
	add	r0, r0, #0x1
.L845:
	strb	r0, [r1]
	mov	r0, #0x0
.L843:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 OpenResultsWindow,.Lfe59-OpenResultsWindow
	.align	2, 0
	.type	 CloseResultsWindow,function
	.thumb_func
CloseResultsWindow:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0xdd
	lsl	r0, r0, #0x1
	add	r5, r4, r0
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r5]
	bl	RemoveWindow
	add	r0, r4, #0
	bl	DrawPlayerNameWindows
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 CloseResultsWindow,.Lfe60-CloseResultsWindow
	.align	2, 0
	.type	 Task_ShowBerryCrushRankings,function
	.thumb_func
Task_ShowBerryCrushRankings:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	mov	r9, r0
	mov	sl, r0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L884
	add	r7, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x1
	beq	.L864	@cond_branch
	cmp	r0, #0x1
	bgt	.L882	@cond_branch
	cmp	r0, #0
	beq	.L863	@cond_branch
	b	.L862
.L885:
	.align	2, 0
.L884:
	.word	gTasks+0x8
.L882:
	cmp	r0, #0x2
	bne	.LCB8238
	b	.L876	@long jump
.LCB8238:
	cmp	r0, #0x3
	bne	.LCB8240
	b	.L879	@long jump
.LCB8240:
	b	.L862
.L863:
	ldr	r0, .L886
	bl	AddWindow
	strh	r0, [r7, #0x2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	PutWindowTilemap
	ldrb	r0, [r7, #0x2]
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldrb	r0, [r7, #0x2]
	ldr	r4, .L886+0x4
	add	r1, r4, #0
	mov	r2, #0xd0
	bl	LoadStdWindowGfx
	ldrb	r0, [r7, #0x2]
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0xd
	bl	DrawStdFrameWithCustomTileAndPalette
	b	.L862
.L887:
	.align	2, 0
.L886:
	.word	sWindowTemplate_BerryCrushRankings
	.word	0x21d
.L864:
	ldr	r5, .L888
	mov	r0, #0x1
	neg	r0, r0
	mov	r8, r0
	mov	r0, #0x2
	add	r1, r5, #0
	mov	r2, r8
	bl	GetStringWidth
	lsr	r0, r0, #0x1
	mov	r4, #0x60
	sub	r0, r4, r0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r7, #0x2]
	ldr	r6, .L888+0x4
	str	r6, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x2
	mov	r3, #0x2
	bl	AddTextPrinterParameterized3
	ldr	r5, .L888+0x8
	mov	r0, #0x2
	add	r1, r5, #0
	mov	r2, r8
	bl	GetStringWidth
	lsr	r0, r0, #0x1
	sub	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r2, r4, #0x18
	ldrb	r0, [r7, #0x2]
	str	r6, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r1, #0x2
	mov	r3, #0x12
	bl	AddTextPrinterParameterized3
	mov	r0, #0x2a
	str	r0, [sp, #0xc]
	ldr	r1, .L888+0xc
	mov	r8, r1
.L868:
	mov	r1, r9
	add	r1, r1, #0x2
	ldr	r0, .L888+0x10
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	mov	r0, r8
	ldr	r1, .L888+0x14
	bl	StringExpandPlaceholders
	ldrb	r0, [r7, #0x2]
	ldr	r1, .L888+0x18
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x4
	ldr	r3, [sp, #0xc]
	bl	AddTextPrinterParameterized3
	mov	r3, #0x0
	mov	r0, r9
	lsl	r4, r0, #0x1
	ldr	r1, [sp, #0xc]
	add	r1, r1, #0xe
	str	r1, [sp, #0x10]
	mov	r0, #0x1
	add	r9, r9, r0
	add	r0, r4, r7
	ldrh	r0, [r0, #0x4]
	mov	r2, #0xff
	and	r2, r2, r0
	mov	r6, #0x1
	ldr	r5, .L888+0x1c
.L872:
	mov	r0, #0x7
	sub	r1, r0, r3
	add	r0, r2, #0
	asr	r0, r0, r1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L871	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	add	sl, sl, r0
.L871:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x7
	bls	.L872	@cond_branch
	add	r0, r4, r7
	ldrh	r1, [r0, #0x4]
	lsr	r1, r1, #0x8
	ldr	r0, .L888+0x10
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r0, sl
	ldr	r1, .L888+0x20
	bl	__udivsi3
	add	r1, r0, #0
	ldr	r0, .L888+0x24
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r0, r8
	ldr	r1, .L888+0x28
	bl	StringExpandPlaceholders
	mov	r1, #0x0
	strb	r1, [r0]
	add	r0, r0, #0x1
	ldr	r1, .L888+0x2c
	bl	StringCopy
	mov	r0, #0x3
	mov	r1, r8
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r1, #0xc0
	sub	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	ldrb	r0, [r7, #0x2]
	ldr	r1, .L888+0x18
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x3
	ldr	r3, [sp, #0xc]
	bl	AddTextPrinterParameterized3
	ldr	r1, [sp, #0x10]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r0, #0x3
	bls	.L868	@cond_branch
	ldrb	r0, [r7, #0x2]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L862
.L889:
	.align	2, 0
.L888:
	.word	gText_BerryCrush2
	.word	sBerryCrushTextColorTable+0x9
	.word	gText_PressingSpeedRankings
	.word	gStringVar4
	.word	gStringVar1
	.word	gText_Var1Players
	.word	sBerryCrushTextColorTable
	.word	sPressingSpeedConversionTable
	.word	0xf4240
	.word	gStringVar2
	.word	gText_XDotY3
	.word	gText_TimesPerSec
.L876:
	ldr	r0, .L890
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L862	@cond_branch
	b	.L861
.L891:
	.align	2, 0
.L890:
	.word	gMain
.L879:
	ldrb	r0, [r7, #0x2]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r7, #0x2]
	bl	ClearWindowTilemap
	ldrb	r0, [r7, #0x2]
	bl	RemoveWindow
	add	r0, r4, #0
	bl	DestroyTask
	bl	ScriptContext_Enable
	bl	UnlockPlayerFieldControls
	mov	r0, r9
	b	.L883
.L862:
	ldrh	r0, [r7]
	add	r0, r0, #0x1
.L883:
	strh	r0, [r7]
.L861:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 Task_ShowBerryCrushRankings,.Lfe61-Task_ShowBerryCrushRankings
	.align	2, 0
	.globl	ShowBerryCrushRankings
	.type	 ShowBerryCrushRankings,function
	.thumb_func
ShowBerryCrushRankings:
	push	{lr}
	bl	LockPlayerFieldControls
	ldr	r0, .L893
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L893+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L893+0x8
	ldr	r2, [r0]
	mov	r3, #0xaf
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0xc]
	add	r3, r3, #0x2
	add	r0, r2, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0xe]
	add	r3, r3, #0x2
	add	r0, r2, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0x10]
	ldr	r0, .L893+0xc
	add	r2, r2, r0
	ldrh	r0, [r2]
	strh	r0, [r1, #0x12]
	pop	{r0}
	bx	r0
.L894:
	.align	2, 0
.L893:
	.word	Task_ShowBerryCrushRankings
	.word	gTasks
	.word	gSaveBlock2Ptr
	.word	0xaf6
.Lfe62:
	.size	 ShowBerryCrushRankings,.Lfe62-ShowBerryCrushRankings
	.align	2, 0
	.type	 PrintTimer,function
	.thumb_func
PrintTimer:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	FramesToMinSec
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	mov	r0, #0x0
	bl	DigitObjUtil_PrintNumOn
	mov	r0, #0x6
	ldrsh	r1, [r4, r0]
	mov	r0, #0x1
	bl	DigitObjUtil_PrintNumOn
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	mov	r0, #0x2
	bl	DigitObjUtil_PrintNumOn
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 PrintTimer,.Lfe63-PrintTimer
	.align	2, 0
	.type	 HideTimer,function
	.thumb_func
HideTimer:
	push	{lr}
	ldr	r2, [r0, #0x78]
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r3, #0x4
	orr	r1, r1, r3
	strb	r1, [r2]
	ldr	r1, [r0, #0x7c]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r3
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x1
	bl	DigitObjUtil_HideOrShow
	mov	r0, #0x1
	mov	r1, #0x1
	bl	DigitObjUtil_HideOrShow
	mov	r0, #0x0
	mov	r1, #0x1
	bl	DigitObjUtil_HideOrShow
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 HideTimer,.Lfe64-HideTimer
	.align	2, 0
	.type	 CreatePlayerNameWindows,function
	.thumb_func
CreatePlayerNameWindows:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r6, #0x0
	ldrb	r0, [r5, #0x9]
	cmp	r6, r0
	bcs	.L899	@cond_branch
	ldr	r7, .L903
.L901:
	lsl	r0, r6, #0x2
	mov	r1, #0xa2
	lsl	r1, r1, #0x1
	add	r2, r5, r1
	add	r2, r2, r0
	ldrb	r1, [r5, #0x9]
	sub	r1, r1, #0x2
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r6, r0
	add	r0, r0, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L903+0x4
	add	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	ldr	r1, .L903+0x8
	add	r0, r0, r1
	bl	AddWindow
	ldr	r1, .L903+0xc
	add	r4, r5, r1
	add	r4, r4, r6
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	PutWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r5, #0x9]
	cmp	r6, r0
	bcc	.L901	@cond_branch
.L899:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L904:
	.align	2, 0
.L903:
	.word	sPlayerIdToPosId
	.word	sPlayerCoords
	.word	sWindowTemplates_PlayerNames
	.word	0x1bb
.Lfe65:
	.size	 CreatePlayerNameWindows,.Lfe65-CreatePlayerNameWindows
	.align	2, 0
	.type	 DrawPlayerNameWindows,function
	.thumb_func
DrawPlayerNameWindows:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	add	r6, r0, #0
	mov	r7, #0x0
	ldrb	r0, [r6, #0x9]
	cmp	r7, r0
	bcs	.L907	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
.L909:
	ldr	r1, .L913
	add	r0, r6, r1
	add	r5, r0, r7
	ldrb	r0, [r5]
	bl	PutWindowTilemap
	ldrb	r0, [r6, #0x8]
	cmp	r7, r0
	bne	.L910	@cond_branch
	lsl	r4, r7, #0x5
	add	r4, r4, #0x98
	add	r4, r6, r4
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	lsr	r0, r0, #0x1
	mov	r2, #0x24
	sub	r2, r2, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r0, [r5]
	mov	r1, r8
	str	r1, [sp]
	str	r1, [sp, #0x4]
	ldr	r1, .L913+0x4
	str	r1, [sp, #0x8]
	mov	r1, r8
	str	r1, [sp, #0xc]
	str	r4, [sp, #0x10]
	mov	r1, #0x2
	mov	r3, #0x1
	bl	AddTextPrinterParameterized4
	b	.L911
.L914:
	.align	2, 0
.L913:
	.word	0x1bb
	.word	sBerryCrushTextColorTable+0x3
.L910:
	lsl	r4, r7, #0x5
	add	r4, r4, #0x98
	add	r4, r6, r4
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetStringWidth
	lsr	r0, r0, #0x1
	mov	r2, #0x24
	sub	r2, r2, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r0, [r5]
	mov	r1, r8
	str	r1, [sp]
	str	r1, [sp, #0x4]
	ldr	r1, .L915
	str	r1, [sp, #0x8]
	mov	r1, r8
	str	r1, [sp, #0xc]
	str	r4, [sp, #0x10]
	mov	r1, #0x2
	mov	r3, #0x1
	bl	AddTextPrinterParameterized4
.L911:
	ldr	r1, .L915+0x4
	add	r0, r6, r1
	add	r0, r0, r7
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r6, #0x9]
	cmp	r7, r0
	bcc	.L909	@cond_branch
.L907:
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L916:
	.align	2, 0
.L915:
	.word	sBerryCrushTextColorTable+0x6
	.word	0x1bb
.Lfe66:
	.size	 DrawPlayerNameWindows,.Lfe66-DrawPlayerNameWindows
	.align	2, 0
	.type	 CopyPlayerNameWindowGfxToBg,function
	.thumb_func
CopyPlayerNameWindowGfxToBg:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	mov	r5, #0x0
	ldr	r0, .L924
	ldr	r4, .L924+0x4
	add	r1, r4, #0
	bl	LZ77UnCompWram
	b	.L923
.L925:
	.align	2, 0
.L924:
	.word	gBerryCrush_Crusher_Tilemap
	.word	gDecompressionBuffer
.L921:
	lsl	r1, r5, #0x2
	mov	r2, #0xa2
	lsl	r2, r2, #0x1
	add	r0, r6, r2
	add	r0, r0, r1
	ldr	r3, [r0]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r4, r1
	ldrb	r2, [r3, #0x1]
	ldrb	r3, [r3, #0x2]
	mov	r0, #0xa
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x3
	bl	CopyToBgTilemapBufferRect
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L923:
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcc	.L921	@cond_branch
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 CopyPlayerNameWindowGfxToBg,.Lfe67-CopyPlayerNameWindowGfxToBg
	.align	2, 0
	.type	 CreateGameSprites,function
	.thumb_func
CreateGameSprites:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	mov	r5, #0x0
	ldr	r0, .L948
	strh	r0, [r6, #0x2a]
	strh	r5, [r6, #0x2c]
	ldr	r1, .L948+0x4
	strh	r5, [r1]
	ldr	r1, .L948+0x8
	strh	r0, [r1]
	ldr	r4, .L948+0xc
.L930:
	lsl	r0, r5, #0x3
	add	r0, r0, r4
	bl	LoadCompressedSpriteSheet
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L930	@cond_branch
	ldr	r0, .L948+0x10
	bl	LoadSpritePalettes
	ldr	r0, .L948+0x14
	mov	r1, #0x78
	mov	r2, #0x58
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, #0xac
	lsl	r0, r0, #0x1
	add	r3, r6, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L948+0x18
	add	r0, r0, r1
	str	r0, [r3]
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r1, [r3]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, #0x2c
	ldrb	r0, [r1]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1]
	mov	r5, #0x0
	ldrb	r1, [r6, #0x9]
	cmp	r5, r1
	bcs	.L933	@cond_branch
	mov	r7, #0x4
.L935:
	lsl	r4, r5, #0x2
	mov	r3, #0xa2
	lsl	r3, r3, #0x1
	add	r0, r6, r3
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	add	r1, r1, #0x78
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r0, #0x6]
	add	r2, r2, #0x20
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r0, .L948+0x1c
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, #0xae
	lsl	r0, r0, #0x1
	add	r3, r6, r0
	add	r3, r3, r4
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r0, .L948+0x18
	add	r1, r1, r0
	str	r1, [r3]
	ldrb	r0, [r1, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r2, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r7
	strb	r0, [r1, #0x5]
	ldr	r1, [r3]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r7
	strb	r0, [r1]
	ldr	r2, [r3]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r6, #0x9]
	cmp	r5, r0
	bcc	.L935	@cond_branch
.L933:
	mov	r5, #0x0
	ldr	r4, .L948+0x20
	add	r7, r4, #0x1
.L940:
	lsl	r2, r5, #0x1
	add	r0, r2, r4
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	add	r1, r1, #0x78
	add	r2, r2, r7
	ldrb	r2, [r2, #0]
	lsl	r2, r2, #24
	asr	r2, r2, #24
	add	r2, r2, #0x88
	ldr	r0, .L948+0x24
	mov	r3, #0x6
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r5, #0x2
	mov	r1, #0xc2
	lsl	r1, r1, #0x1
	add	r3, r6, r1
	add	r3, r3, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L948+0x18
	add	r0, r0, r1
	str	r0, [r3]
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r2, [r3]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	strh	r5, [r0, #0x2e]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xa
	bls	.L940	@cond_branch
	mov	r5, #0x0
.L945:
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x13
	mov	r3, #0xb0
	lsl	r3, r3, #0x10
	add	r1, r1, r3
	asr	r1, r1, #0x10
	ldr	r0, .L948+0x28
	mov	r2, #0x8
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r5, #0x2
	mov	r4, #0xd8
	lsl	r4, r4, #0x1
	add	r3, r6, r4
	add	r3, r3, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L948+0x18
	add	r0, r0, r1
	str	r0, [r3]
	ldrb	r1, [r0, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r2, r4, #0
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldr	r2, [r3]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	add	r4, r4, #0x8
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r3]
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r3, #0x41
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1
	bls	.L945	@cond_branch
	ldr	r4, .L948+0x2c
	mov	r0, #0x0
	mov	r1, #0x0
	add	r2, r4, #0
	bl	DigitObjUtil_CreatePrinter
	add	r2, r4, #0
	add	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0x0
	bl	DigitObjUtil_CreatePrinter
	add	r4, r4, #0x20
	mov	r0, #0x2
	mov	r1, #0x0
	add	r2, r4, #0
	bl	DigitObjUtil_CreatePrinter
	ldrh	r0, [r6, #0x12]
	cmp	r0, #0x1
	bne	.L947	@cond_branch
	mov	r4, #0x9c
	lsl	r4, r4, #0x1
	add	r0, r6, r4
	bl	HideTimer
.L947:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L949:
	.align	2, 0
.L948:
	.word	0xff98
	.word	gSpriteCoordOffsetX
	.word	gSpriteCoordOffsetY
	.word	sSpriteSheets
	.word	sSpritePals
	.word	sSpriteTemplate_BerryCrushCore
	.word	gSprites
	.word	sSpriteTemplate_BerryCrushImpact
	.word	sSparkleCoords
	.word	sSpriteTemplate_BerryCrushPowderSparkles
	.word	sSpriteTemplate_BerryCrushTimer
	.word	sDigitObjTemplates
.Lfe68:
	.size	 CreateGameSprites,.Lfe68-CreateGameSprites
	.align	2, 0
	.type	 DestroyGameSprites,function
	.thumb_func
DestroyGameSprites:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	mov	r0, #0x4
	bl	FreeSpriteTilesByTag
	mov	r0, #0x3
	bl	FreeSpriteTilesByTag
	mov	r0, #0x2
	bl	FreeSpriteTilesByTag
	mov	r0, #0x1
	bl	FreeSpriteTilesByTag
	mov	r0, #0x4
	bl	FreeSpritePaletteByTag
	mov	r0, #0x2
	bl	FreeSpritePaletteByTag
	mov	r0, #0x1
	bl	FreeSpritePaletteByTag
	mov	r0, #0xd8
	lsl	r0, r0, #0x1
	add	r6, r5, r0
.L954:
	lsl	r0, r4, #0x2
	add	r0, r6, r0
	ldr	r0, [r0]
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bls	.L954	@cond_branch
	mov	r0, #0x2
	bl	DigitObjUtil_DeletePrinter
	mov	r0, #0x1
	bl	DigitObjUtil_DeletePrinter
	mov	r0, #0x0
	bl	DigitObjUtil_DeletePrinter
	mov	r4, #0x0
	mov	r1, #0xc2
	lsl	r1, r1, #0x1
	add	r6, r5, r1
.L959:
	lsl	r0, r4, #0x2
	add	r0, r6, r0
	ldr	r0, [r0]
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xa
	bls	.L959	@cond_branch
	mov	r4, #0x0
	ldrb	r2, [r5, #0x9]
	cmp	r4, r2
	bcs	.L962	@cond_branch
.L964:
	lsl	r1, r4, #0x2
	mov	r2, #0xae
	lsl	r2, r2, #0x1
	add	r0, r5, r2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	DestroySprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5, #0x9]
	cmp	r4, r0
	bcc	.L964	@cond_branch
.L962:
	mov	r1, #0xac
	lsl	r1, r1, #0x1
	add	r0, r5, r1
	ldr	r2, [r0]
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L966	@cond_branch
	add	r0, r2, #0
	bl	DestroySprite
.L966:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 DestroyGameSprites,.Lfe69-DestroyGameSprites
	.align	2, 0
	.type	 SpriteCB_Impact,function
	.thumb_func
SpriteCB_Impact:
	push	{lr}
	add	r3, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L968	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	sub	r2, r2, #0x12
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
.L968:
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 SpriteCB_Impact,.Lfe70-SpriteCB_Impact
	.align	2, 0
	.type	 SpriteCB_Sparkle_End,function
	.thumb_func
SpriteCB_Sparkle_End:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	ldr	r5, .L975
	add	r2, r3, #0
	add	r2, r2, #0x2e
	mov	r4, #0x0
.L973:
	lsl	r0, r1, #0x1
	add	r0, r2, r0
	strh	r4, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x7
	bls	.L973	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x24]
	strh	r0, [r3, #0x26]
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	sub	r2, r2, #0x12
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	str	r5, [r3, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L976:
	.align	2, 0
.L975:
	.word	SpriteCallbackDummy
.Lfe71:
	.size	 SpriteCB_Sparkle_End,.Lfe71-SpriteCB_Sparkle_End
	.align	2, 0
	.type	 SpriteCB_Sparkle,function
	.thumb_func
SpriteCB_Sparkle:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r5, #0
	add	r4, r4, #0x2e
	ldrh	r0, [r4, #0x4]
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	strh	r0, [r5, #0x26]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	mov	r6, #0x80
	lsl	r6, r6, #0x8
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L978	@cond_branch
	ldrh	r0, [r4, #0x6]
	ldrh	r2, [r5, #0x2e]
	add	r0, r0, r2
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L978	@cond_branch
	ldrh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	cmp	r0, #0x7e
	ble	.L978	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x24]
	ldrh	r1, [r4, #0xe]
	ldr	r0, .L981
	and	r0, r0, r1
	strh	r0, [r4, #0xe]
.L978:
	ldrh	r0, [r4]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	strh	r0, [r5, #0x20]
	mov	r2, #0x22
	ldrsh	r1, [r5, r2]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	add	r1, r1, r0
	ldrh	r2, [r4, #0xe]
	ldr	r0, .L981
	and	r0, r0, r2
	cmp	r1, r0
	ble	.L980	@cond_branch
	ldr	r0, .L981+0x4
	str	r0, [r5, #0x1c]
.L980:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L982:
	.align	2, 0
.L981:
	.word	0x7fff
	.word	SpriteCB_Sparkle_End
.Lfe72:
	.size	 SpriteCB_Sparkle,.Lfe72-SpriteCB_Sparkle
	.align	2, 0
	.type	 SpriteCB_Sparkle_Init,function
	.thumb_func
SpriteCB_Sparkle_Init:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	add	r7, r6, #0
	add	r7, r7, #0x2e
	mov	r0, #0x0
	mov	r8, r0
	mov	r2, #0xa0
	lsl	r2, r2, #0x2
	strh	r2, [r7, #0x2]
	mov	r0, #0x20
	strh	r0, [r7, #0x4]
	mov	r1, #0xa8
	strh	r1, [r7, #0xe]
	mov	r0, #0x24
	ldrsh	r4, [r6, r0]
	lsl	r4, r4, #0x17
	lsr	r4, r4, #0x10
	ldrh	r0, [r6, #0x22]
	sub	r1, r1, r0
	lsl	r1, r1, #0x17
	asr	r1, r1, #0x10
	add	r2, r2, #0x20
	asr	r2, r2, #0x1
	mov	r0, #0x7
	bl	Q_N_S_div
	add	r5, r0, #0
	ldrh	r0, [r6, #0x20]
	lsl	r0, r0, #0x7
	strh	r0, [r6, #0x2e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	mov	r0, #0x7
	add	r1, r4, #0
	add	r2, r5, #0
	bl	Q_N_S_div
	strh	r0, [r7, #0x6]
	mov	r0, #0x7
	add	r1, r5, #0
	mov	r2, #0x55
	bl	Q_N_S_mul
	add	r2, r0, #0
	mov	r1, r8
	strh	r1, [r7, #0x8]
	mov	r1, #0xfe
	lsl	r1, r1, #0x6
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r0, #0x7
	bl	Q_N_S_div
	strh	r0, [r7, #0xa]
	mov	r2, #0x24
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	bge	.L984	@cond_branch
	add	r0, r0, #0x3
.L984:
	asr	r0, r0, #0x2
	strh	r0, [r7, #0xc]
	ldrh	r0, [r7, #0xe]
	ldr	r2, .L985
	add	r1, r2, #0
	orr	r0, r0, r1
	strh	r0, [r7, #0xe]
	mov	r0, r8
	strh	r0, [r6, #0x26]
	strh	r0, [r6, #0x24]
	ldr	r0, .L985+0x4
	str	r0, [r6, #0x1c]
	add	r2, r6, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r2, r2, #0x12
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L986:
	.align	2, 0
.L985:
	.word	-0x8000
	.word	SpriteCB_Sparkle
.Lfe73:
	.size	 SpriteCB_Sparkle_Init,.Lfe73-SpriteCB_Sparkle_Init
.text
	.align	2, 0 @ Don't pad with nop

