@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	1, 0
	.type	 sSaveType,object
	.size	 sSaveType,2
sSaveType:
	.short	0x0
	.align	1, 0
	.type	 sUnused,object
	.size	 sUnused,2
sUnused:
	.short	0x0
	.type	 sSaveFailedScreenState,object
	.size	 sSaveFailedScreenState,1
sSaveFailedScreenState:
	.byte	0x0
	.section .rodata
	.align	1, 0
	.type	 sSaveFailedScreenPals,object
sSaveFailedScreenPals:
	.short	0x71c2
	.short	0x7fff
	.short	0x318c
	.short	0x675a
	.short	0x43c
	.short	0x3aff
	.short	0x664
	.short	0x4bd2
	.short	0x6546
	.short	0x7b14
	.short	0x0
	.short	0x7729
	.short	0x7686
	.short	0x4160
	.short	0x6183
	.short	0x71c2
	.size	 sSaveFailedScreenPals,32
.text
	.align	2, 0
	.globl	SetNotInSaveFailedScreen
	.type	 SetNotInSaveFailedScreen,function
	.thumb_func
SetNotInSaveFailedScreen:
	ldr	r1, .L3
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L4:
	.align	2, 0
.L3:
	.word	sIsInSaveFailedScreen
.Lfe1:
	.size	 SetNotInSaveFailedScreen,.Lfe1-SetNotInSaveFailedScreen
	.align	2, 0
	.globl	DoSaveFailedScreen
	.type	 DoSaveFailedScreen,function
	.thumb_func
DoSaveFailedScreen:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L6
	strh	r0, [r1]
	ldr	r1, .L6+0x4
	mov	r0, #0x1
	str	r0, [r1]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	sSaveType
	.word	sIsInSaveFailedScreen
.Lfe2:
	.size	 DoSaveFailedScreen,.Lfe2-DoSaveFailedScreen
	.align	2, 0
	.globl	RunSaveFailedScreen
	.type	 RunSaveFailedScreen,function
	.thumb_func
RunSaveFailedScreen:
	push	{lr}
	ldr	r0, .L26
	ldrb	r1, [r0]
	add	r2, r0, #0
	cmp	r1, #0x8
	bls	.LCB52
	b	.L9	@long jump
.LCB52:
	lsl	r0, r1, #0x2
	ldr	r1, .L26+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L27:
	.align	2, 0
.L26:
	.word	sSaveFailedScreenState
	.word	.L23
	.align	2, 0
	.align	2, 0
.L23:
	.word	.L10
	.word	.L12
	.word	.L13
	.word	.L14
	.word	.L15
	.word	.L16
	.word	.L19
	.word	.L21
	.word	.L22
.L10:
	ldr	r0, .L28
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L11	@cond_branch
	mov	r0, #0x0
	b	.L25
.L29:
	.align	2, 0
.L28:
	.word	sIsInSaveFailedScreen
.L11:
	ldr	r0, .L30
	ldr	r1, .L30+0x4
	mov	r2, #0x80
	bl	m4aMPlayVolumeControl
	bl	SaveCallbacks
	ldr	r1, .L30+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L9
.L31:
	.align	2, 0
.L30:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	sSaveFailedScreenState
.L12:
	bl	SaveMapTiles
	bl	SaveMapGPURegs
	bl	SaveMapTextColors
	bl	BlankPalettes
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L32
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L9
.L33:
	.align	2, 0
.L32:
	.word	sSaveFailedScreenState
.L13:
	ldr	r1, .L34
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	mov	r0, #0x0
	mov	r3, #0x0
	bl	RequestDma3Fill
	ldr	r0, .L34+0x4
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	mov	r2, #0x20
	mov	r3, #0x0
	bl	RequestDma3Copy
	ldr	r1, .L34+0x8
	mov	r0, #0x3
	strb	r0, [r1]
	b	.L9
.L35:
	.align	2, 0
.L34:
	.word	0x600c000
	.word	sSaveFailedScreenPals
	.word	sSaveFailedScreenState
.L14:
	bl	ClearMapBuffer
	ldr	r0, .L36
	bl	PrintTextOnSaveFailedScreen
	bl	UpdateMapBufferWithText
	ldr	r1, .L36+0x4
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L9
.L37:
	.align	2, 0
.L36:
	.word	gText_SaveFailedCheckingBackup
	.word	sSaveFailedScreenState
.L15:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L38
	mov	r0, #0x8
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	mov	r0, #0x0
	bl	SetGpuReg
	ldr	r1, .L38+0x4
	mov	r0, #0x5
	strb	r0, [r1]
	b	.L9
.L39:
	.align	2, 0
.L38:
	.word	0x1f0c
	.word	sSaveFailedScreenState
.L16:
	bl	TryWipeDamagedSectors
	add	r1, r0, #0
	cmp	r1, #0x1
	bne	.L17	@cond_branch
	ldr	r0, .L40
	strh	r1, [r0]
	ldr	r0, .L40+0x4
	bl	PrintTextOnSaveFailedScreen
	b	.L18
.L41:
	.align	2, 0
.L40:
	.word	gSaveAttemptStatus
	.word	gText_SaveCompletePressA
.L17:
	ldr	r0, .L42
	mov	r1, #0xff
	strh	r1, [r0]
	ldr	r0, .L42+0x4
	bl	PrintTextOnSaveFailedScreen
.L18:
	ldr	r1, .L42+0x8
	mov	r0, #0x6
	strb	r0, [r1]
	b	.L9
.L43:
	.align	2, 0
.L42:
	.word	gSaveAttemptStatus
	.word	gText_BackupMemoryDamaged
	.word	sSaveFailedScreenState
.L19:
	ldr	r0, .L44
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L9	@cond_branch
	mov	r0, #0x7
	strb	r0, [r2]
	b	.L9
.L45:
	.align	2, 0
.L44:
	.word	gMain
.L21:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	bl	RestoreMapTiles
	bl	BlankPalettes
	ldr	r1, .L46
	mov	r0, #0x8
	strb	r0, [r1]
	b	.L9
.L47:
	.align	2, 0
.L46:
	.word	sSaveFailedScreenState
.L22:
	ldr	r0, .L48
	ldr	r1, .L48+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	bl	RestoreMapTextColors
	bl	RestoreGPURegs
	bl	RestoreCallbacks
	ldr	r0, .L48+0x8
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L48+0xc
	strb	r1, [r0]
.L9:
	mov	r0, #0x1
.L25:
	pop	{r1}
	bx	r1
.L49:
	.align	2, 0
.L48:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	sIsInSaveFailedScreen
	.word	sSaveFailedScreenState
.Lfe3:
	.size	 RunSaveFailedScreen,.Lfe3-RunSaveFailedScreen
	.align	2, 0
	.type	 BlankPalettes,function
	.thumb_func
BlankPalettes:
	push	{r4, r5, lr}
	mov	r1, #0x0
	ldr	r5, .L56
	mov	r4, #0xa0
	lsl	r4, r4, #0x13
	mov	r2, #0x0
	ldr	r3, .L56+0x4
.L54:
	add	r0, r1, r4
	strh	r2, [r0]
	add	r0, r1, r3
	strh	r2, [r0]
	add	r1, r1, #0x2
	cmp	r1, r5
	ble	.L54	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	0x1ff
	.word	0x5000200
.Lfe4:
	.size	 BlankPalettes,.Lfe4-BlankPalettes
	.align	2, 0
	.type	 RequestDmaCopyFromScreenBuffer,function
	.thumb_func
RequestDmaCopyFromScreenBuffer:
	push	{lr}
	ldr	r0, .L59
	ldr	r1, .L59+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	mov	r3, #0x0
	bl	RequestDma3Copy
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	gDecompressionBuffer+0x3800
	.word	0x600f800
.Lfe5:
	.size	 RequestDmaCopyFromScreenBuffer,.Lfe5-RequestDmaCopyFromScreenBuffer
	.align	2, 0
	.type	 RequestDmaCopyFromCharBuffer,function
	.thumb_func
RequestDmaCopyFromCharBuffer:
	push	{lr}
	ldr	r0, .L62
	ldr	r1, .L62+0x4
	mov	r2, #0x8c
	lsl	r2, r2, #0x6
	mov	r3, #0x0
	bl	RequestDma3Copy
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	gDecompressionBuffer+0x20
	.word	0x600c020
.Lfe6:
	.size	 RequestDmaCopyFromCharBuffer,.Lfe6-RequestDmaCopyFromCharBuffer
	.align	2, 0
	.type	 FillBgMapBufferRect,function
	.thumb_func
FillBgMapBufferRect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x10
	lsr	r7, r5, #0x10
	lsr	r0, r2, #0x18
	add	r2, r0, r4
	cmp	r0, r2
	bge	.L66	@cond_branch
	mov	ip, r2
	ldr	r1, .L75
	mov	sl, r1
.L68:
	mov	r4, r9
	mov	r2, r8
	add	r1, r4, r2
	add	r3, r0, #0x1
	cmp	r4, r1
	bge	.L67	@cond_branch
	lsl	r2, r0, #0x6
	mov	r5, sl
.L72:
	lsl	r0, r4, #0x1
	add	r0, r2, r0
	add	r0, r0, r5
	strh	r6, [r0]
	add	r0, r6, r7
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r1
	blt	.L72	@cond_branch
.L67:
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, ip
	blt	.L68	@cond_branch
.L66:
	bl	RequestDmaCopyFromScreenBuffer
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gDecompressionBuffer+0x3800
.Lfe7:
	.size	 FillBgMapBufferRect,.Lfe7-FillBgMapBufferRect
	.align	2, 0
	.type	 UpdateMapBufferWithText,function
	.thumb_func
UpdateMapBufferWithText:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r0, #0xa
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x5
	mov	r3, #0x1c
	bl	FillBgMapBufferRect
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 UpdateMapBufferWithText,.Lfe8-UpdateMapBufferWithText
	.align	2, 0
	.type	 ClearMapBuffer,function
	.thumb_func
ClearMapBuffer:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r0, #0x14
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x1e
	bl	FillBgMapBufferRect
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 ClearMapBuffer,.Lfe9-ClearMapBuffer
	.align	2, 0
	.type	 PrintTextOnSaveFailedScreen,function
	.thumb_func
PrintTextOnSaveFailedScreen:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x3
	bl	GenerateFontHalfRowLookupTable
	add	r1, sp, #0xc
	ldr	r2, .L80
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r4, .L80+0x4
	ldr	r2, .L80+0x8
	add	r0, r1, #0
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x1c
	str	r0, [sp, #0x4]
	mov	r0, #0xa
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x2
	bl	HelpSystemRenderText
	bl	RequestDmaCopyFromCharBuffer
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	0x1111
	.word	gDecompressionBuffer+0x20
	.word	0x1001180
.Lfe10:
	.size	 PrintTextOnSaveFailedScreen,.Lfe10-PrintTextOnSaveFailedScreen
	.align	2, 0
	.type	 TryWipeDamagedSectors,function
	.thumb_func
TryWipeDamagedSectors:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r0, .L94
	ldr	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0
	beq	.L92	@cond_branch
.L86:
	ldr	r0, [r4]
	bl	WipeDamagedSectors
	cmp	r0, #0
	bne	.L93	@cond_branch
	ldr	r0, .L94+0x4
	ldrb	r0, [r0]
	bl	HandleSavingData
	add	r5, r5, #0x1
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L92	@cond_branch
	ldr	r4, .L94
	cmp	r5, #0x2
	ble	.L86	@cond_branch
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L90	@cond_branch
.L92:
	mov	r0, #0x1
	b	.L91
.L95:
	.align	2, 0
.L94:
	.word	gDamagedSaveSectors
	.word	sSaveType
.L93:
.L90:
	mov	r0, #0x0
.L91:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 TryWipeDamagedSectors,.Lfe11-TryWipeDamagedSectors
	.align	2, 0
	.type	 VerifySectorWipe,function
	.thumb_func
VerifySectorWipe:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L104
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	mov	r1, #0x0
	add	r2, r4, #0
	bl	ReadFlash
	mov	r1, #0x0
	ldr	r2, .L104+0x4
.L100:
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L99	@cond_branch
	mov	r0, #0x1
	b	.L103
.L105:
	.align	2, 0
.L104:
	.word	gSaveDataBuffer
	.word	0x3ff
.L99:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r4, r4, #0x4
	cmp	r1, r2
	bls	.L100	@cond_branch
	mov	r0, #0x0
.L103:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 VerifySectorWipe,.Lfe12-VerifySectorWipe
	.align	2, 0
	.type	 WipeSector,function
	.thumb_func
WipeSector:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r0, #0x0
	lsl	r6, r7, #0x10
	ldr	r1, .L117
	mov	r9, r1
	ldr	r1, .L117+0x4
	mov	r8, r1
.L109:
	mov	r4, #0x0
	add	r5, r0, #0x1
.L113:
	mov	r0, r9
	ldr	r3, [r0]
	lsr	r0, r6, #0x10
	add	r1, r4, #0
	mov	r2, #0x0
	bl	_call_via_r3
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r8
	bls	.L113	@cond_branch
	add	r0, r7, #0
	bl	VerifySectorWipe
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	lsl	r0, r5, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, #0
	beq	.L108	@cond_branch
	cmp	r0, #0x81
	bls	.L109	@cond_branch
.L108:
	add	r0, r1, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L118:
	.align	2, 0
.L117:
	.word	ProgramFlashByte
	.word	0xfff
.Lfe13:
	.size	 WipeSector,.Lfe13-WipeSector
	.align	2, 0
	.type	 WipeDamagedSectors,function
	.thumb_func
WipeDamagedSectors:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r6, #0x0
.L123:
	mov	r4, #0x1
	lsl	r4, r4, r6
	add	r0, r5, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L122	@cond_branch
	add	r0, r6, #0
	bl	WipeSector
	cmp	r0, #0
	bne	.L122	@cond_branch
	bic	r5, r5, r4
.L122:
	add	r6, r6, #0x1
	cmp	r6, #0x1f
	ble	.L123	@cond_branch
	cmp	r5, #0
	beq	.L127	@cond_branch
	mov	r0, #0x1
	b	.L129
.L127:
	mov	r0, #0x0
.L129:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 WipeDamagedSectors,.Lfe14-WipeDamagedSectors
	.comm	sIsInSaveFailedScreen, 4	@ 4
.text
	.align	2, 0 @ Don't pad with nop

