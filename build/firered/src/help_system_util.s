@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sMapTilesBackup,object
	.size	 sMapTilesBackup,16384
sMapTilesBackup:
	.byte	0x0
	.space	16383
	.globl	gDisableHelpSystemVolumeReduce
	.type	 gDisableHelpSystemVolumeReduce,object
	.size	 gDisableHelpSystemVolumeReduce,1
gDisableHelpSystemVolumeReduce:
	.byte	0x0
	.globl	gHelpSystemToggleWithRButtonDisabled
	.type	 gHelpSystemToggleWithRButtonDisabled,object
	.size	 gHelpSystemToggleWithRButtonDisabled,1
gHelpSystemToggleWithRButtonDisabled:
	.byte	0x0
	.type	 sDelayTimer,object
	.size	 sDelayTimer,1
sDelayTimer:
	.byte	0x0
	.type	 sInHelpSystem,object
	.size	 sInHelpSystem,1
sInHelpSystem:
	.byte	0x0
	.align	2, 0
	.type	 sVideoState,object
	.size	 sVideoState,24
sVideoState:
	.word	0x0
	.space	20
	.globl	gHelpSystemListMenu
	.align	2, 0
	.type	 gHelpSystemListMenu,object
	.size	 gHelpSystemListMenu,28
gHelpSystemListMenu:
	.word	0x0
	.space	8
	.space	16
	.globl	gHelpSystemListMenuItems
	.align	2, 0
	.type	 gHelpSystemListMenuItems,object
	.size	 gHelpSystemListMenuItems,416
gHelpSystemListMenuItems:
	.word	0x0
	.space	4
	.space	408
	.section .rodata
	.align	1, 0
	.type	 sTiles,object
sTiles:
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xcccc
	.short	0xcccc
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xeeee
	.short	0xeeee
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xcccc
	.short	0xcccc
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xeeee
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0x4444
	.short	0x4444
	.short	0x4444
	.short	0x4444
	.short	0x4440
	.short	0x444
	.short	0x4440
	.short	0x444
	.short	0x4400
	.short	0x44
	.short	0x4400
	.short	0x44
	.short	0x4000
	.short	0x4
	.short	0x4000
	.short	0x4
	.short	0x4000
	.short	0x4
	.short	0x4000
	.short	0x4
	.short	0x4400
	.short	0x44
	.short	0x4400
	.short	0x44
	.short	0x4440
	.short	0x444
	.short	0x4440
	.short	0x444
	.short	0x4444
	.short	0x4444
	.short	0x4444
	.short	0x4444
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sTiles,288
	.align	1, 0
	.type	 sPals,object
sPals:
	.short	0x61e0
	.short	0x7fff
	.short	0x318c
	.short	0x675a
	.short	0x43c
	.short	0x2bfe
	.short	0x664
	.short	0x4bd2
	.short	0x6546
	.short	0x7b14
	.short	0x0
	.short	0x7729
	.short	0x6ea2
	.short	0x3d20
	.short	0x59a0
	.short	0x61e0
	.size	 sPals,32
.text
	.align	2, 0
	.globl	RunHelpSystemCallback
	.type	 RunHelpSystemCallback,function
	.thumb_func
RunHelpSystemCallback:
	push	{r4, r5, lr}
	ldr	r0, .L34
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0x8
	bls	.LCB9
	b	.L3	@long jump
.LCB9:
	lsl	r0, r0, #0x2
	ldr	r1, .L34+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L35:
	.align	2, 0
.L34:
	.word	sVideoState
	.word	.L28
	.align	2, 0
	.align	2, 0
.L28:
	.word	.L4
	.word	.L11
	.word	.L12
	.word	.L13
	.word	.L16
	.word	.L17
	.word	.L19
	.word	.L25
	.word	.L27
.L4:
	ldr	r1, .L36
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L36+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	bne	.L32	@cond_branch
	ldr	r2, .L36+0x8
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L6	@cond_branch
	ldr	r0, .L36+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L32	@cond_branch
.L6:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB72
	b	.L3	@long jump
.LCB72:
	bl	HelpSystem_IsSinglePlayer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L9	@cond_branch
	ldr	r0, .L36+0x10
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L8	@cond_branch
.L9:
	mov	r0, #0xfc
	bl	PlaySE
.L32:
	mov	r0, #0x0
	b	.L30
.L37:
	.align	2, 0
.L36:
	.word	sInHelpSystem
	.word	gSaveBlock2Ptr
	.word	gMain
	.word	gHelpSystemToggleWithRButtonDisabled
	.word	gHelpSystemEnabled
.L8:
	ldr	r0, .L38
	bl	m4aMPlayStop
	ldr	r0, .L38+0x4
	bl	m4aMPlayStop
	mov	r0, #0xfa
	bl	PlaySE
	ldr	r0, .L38+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L10	@cond_branch
	ldr	r0, .L38+0xc
	ldr	r1, .L38+0x10
	mov	r2, #0x80
	bl	m4aMPlayVolumeControl
.L10:
	bl	SaveCallbacks
	ldr	r1, .L38+0x14
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L38+0x18
	mov	r0, #0x1
	b	.L33
.L39:
	.align	2, 0
.L38:
	.word	gMPlayInfo_SE1
	.word	gMPlayInfo_SE2
	.word	gDisableHelpSystemVolumeReduce
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	sInHelpSystem
	.word	sVideoState
.L11:
	bl	SaveMapTiles
	bl	SaveMapGPURegs
	bl	SaveMapTextColors
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r0, .L40
	ldrh	r0, [r0, #0x1e]
	strh	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L40+0x4
	mov	r0, #0x2
	b	.L33
.L41:
	.align	2, 0
.L40:
	.word	sPals
	.word	sVideoState
.L12:
	ldr	r1, .L42
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	mov	r0, #0x0
	mov	r3, #0x0
	bl	RequestDma3Fill
	ldr	r0, .L42+0x4
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	mov	r2, #0x20
	mov	r3, #0x0
	bl	RequestDma3Copy
	ldr	r0, .L42+0x8
	ldr	r1, .L42+0xc
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	mov	r3, #0x0
	bl	RequestDma3Copy
	ldr	r1, .L42+0x10
	mov	r0, #0x3
	b	.L33
.L43:
	.align	2, 0
.L42:
	.word	0x600c000
	.word	sPals
	.word	sTiles
	.word	gDecompressionBuffer+0x3ee0
	.word	sVideoState
.L13:
	bl	HS_BufferFillMapWithTile1FF
	bl	HelpSystem_FillPanel3
	bl	HelpSystem_FillPanel2
	ldr	r0, .L44
	bl	HelpSystem_PrintTextInTopLeftCorner
	mov	r0, #0x1
	bl	HS_ShowOrHideWordHELPinTopLeft
	bl	HelpSystem_UpdateHasntSeenIntro
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L14	@cond_branch
	ldr	r0, .L44+0x4
	ldr	r1, .L44+0x8
	bl	HelpSystemSubroutine_PrintWelcomeMessage
	b	.L15
.L45:
	.align	2, 0
.L44:
	.word	gString_Help
	.word	gHelpSystemListMenu
	.word	gHelpSystemListMenuItems
.L14:
	ldr	r0, .L46
	ldr	r1, .L46+0x4
	bl	HelpSystemSubroutine_WelcomeEndGotoMenu
.L15:
	mov	r0, #0x1
	bl	HS_ShowOrHideHeaderAndFooterLines_Lighter
	mov	r0, #0x1
	bl	HS_ShowOrHideVerticalBlackBarsAlongSides
	bl	CommitTilemap
	ldr	r1, .L46+0x8
	mov	r0, #0x4
	b	.L33
.L47:
	.align	2, 0
.L46:
	.word	gHelpSystemListMenu
	.word	gHelpSystemListMenuItems
	.word	sVideoState
.L16:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L48
	mov	r0, #0x8
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	mov	r0, #0x0
	bl	SetGpuReg
	ldr	r1, .L48+0x4
	mov	r0, #0x5
	b	.L33
.L49:
	.align	2, 0
.L48:
	.word	0x1f0c
	.word	sVideoState
.L17:
	ldr	r0, .L50
	ldr	r1, .L50+0x4
	bl	RunHelpMenuSubroutine
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3	@cond_branch
	mov	r0, #0xfb
	bl	PlaySE
	ldr	r1, .L50+0x8
	mov	r0, #0x6
	b	.L33
.L51:
	.align	2, 0
.L50:
	.word	gHelpSystemListMenu
	.word	gHelpSystemListMenuItems
	.word	sVideoState
.L19:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	bl	RestoreMapTiles
	mov	r1, #0x0
	ldr	r5, .L52
	mov	r4, #0xa0
	lsl	r4, r4, #0x13
	ldr	r0, .L52+0x4
	ldrh	r2, [r0, #0x1e]
	ldr	r3, .L52+0x8
.L23:
	add	r0, r1, r4
	strh	r2, [r0]
	add	r0, r1, r3
	strh	r2, [r0]
	add	r1, r1, #0x2
	cmp	r1, r5
	ble	.L23	@cond_branch
	ldr	r1, .L52+0xc
	mov	r0, #0x7
	b	.L33
.L53:
	.align	2, 0
.L52:
	.word	0x1ff
	.word	sPals
	.word	0x5000200
	.word	sVideoState
.L25:
	ldr	r0, .L54
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L26	@cond_branch
	ldr	r0, .L54+0x4
	ldr	r1, .L54+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L26:
	bl	RestoreMapTextColors
	bl	RestoreGPURegs
	ldr	r1, .L54+0xc
	mov	r0, #0x8
	b	.L33
.L55:
	.align	2, 0
.L54:
	.word	gDisableHelpSystemVolumeReduce
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	sVideoState
.L27:
	bl	RestoreCallbacks
	ldr	r1, .L56
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L56+0x4
	mov	r0, #0x0
.L33:
	strb	r0, [r1, #0x15]
.L3:
	ldr	r0, .L56+0x4
	ldrb	r0, [r0, #0x15]
.L30:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L57:
	.align	2, 0
.L56:
	.word	sInHelpSystem
	.word	sVideoState
.Lfe1:
	.size	 RunHelpSystemCallback,.Lfe1-RunHelpSystemCallback
	.align	2, 0
	.globl	SaveCallbacks
	.type	 SaveCallbacks,function
	.thumb_func
SaveCallbacks:
	ldr	r2, .L59
	ldr	r1, .L59+0x4
	ldr	r0, [r1, #0xc]
	str	r0, [r2]
	ldr	r0, [r1, #0x10]
	str	r0, [r2, #0x4]
	mov	r0, #0x0
	str	r0, [r1, #0xc]
	str	r0, [r1, #0x10]
	ldr	r1, .L59+0x8
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L59+0xc
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L59+0x10
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	bx	lr
.L60:
	.align	2, 0
.L59:
	.word	sVideoState
	.word	gMain
	.word	0x40000b0
	.word	0xc5ff
	.word	0x7fff
.Lfe2:
	.size	 SaveCallbacks,.Lfe2-SaveCallbacks
	.align	2, 0
	.globl	SaveMapGPURegs
	.type	 SaveMapGPURegs,function
	.thumb_func
SaveMapGPURegs:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetGpuReg
	ldr	r4, .L62
	strh	r0, [r4, #0x8]
	mov	r0, #0x8
	bl	GetGpuReg
	strh	r0, [r4, #0xa]
	mov	r0, #0x10
	bl	GetGpuReg
	strh	r0, [r4, #0xc]
	mov	r0, #0x12
	bl	GetGpuReg
	strh	r0, [r4, #0xe]
	mov	r0, #0x50
	bl	GetGpuReg
	strh	r0, [r4, #0x10]
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	sVideoState
.Lfe3:
	.size	 SaveMapGPURegs,.Lfe3-SaveMapGPURegs
	.align	2, 0
	.globl	SaveMapTiles
	.type	 SaveMapTiles,function
	.thumb_func
SaveMapTiles:
	push	{lr}
	ldr	r0, .L65
	ldr	r1, .L65+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	mov	r3, #0x0
	bl	RequestDma3Copy
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	0x600c000
	.word	sMapTilesBackup
.Lfe4:
	.size	 SaveMapTiles,.Lfe4-SaveMapTiles
	.align	2, 0
	.globl	SaveMapTextColors
	.type	 SaveMapTextColors,function
	.thumb_func
SaveMapTextColors:
	push	{lr}
	ldr	r0, .L68
	add	r1, r0, #0x1
	add	r2, r0, #0x2
	bl	SaveTextColors
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	sVideoState+0x12
.Lfe5:
	.size	 SaveMapTextColors,.Lfe5-SaveMapTextColors
	.align	2, 0
	.globl	RestoreCallbacks
	.type	 RestoreCallbacks,function
	.thumb_func
RestoreCallbacks:
	ldr	r2, .L71
	ldr	r1, .L71+0x4
	ldr	r0, [r1]
	str	r0, [r2, #0xc]
	ldr	r0, [r1, #0x4]
	str	r0, [r2, #0x10]
	bx	lr
.L72:
	.align	2, 0
.L71:
	.word	gMain
	.word	sVideoState
.Lfe6:
	.size	 RestoreCallbacks,.Lfe6-RestoreCallbacks
	.align	2, 0
	.globl	RestoreGPURegs
	.type	 RestoreGPURegs,function
	.thumb_func
RestoreGPURegs:
	push	{r4, lr}
	ldr	r4, .L74
	ldrh	r1, [r4, #0x10]
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0xc]
	mov	r0, #0x10
	bl	SetGpuReg
	ldrh	r1, [r4, #0xe]
	mov	r0, #0x12
	bl	SetGpuReg
	ldrh	r1, [r4, #0xa]
	mov	r0, #0x8
	bl	SetGpuReg
	ldrh	r1, [r4, #0x8]
	mov	r0, #0x0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	sVideoState
.Lfe7:
	.size	 RestoreGPURegs,.Lfe7-RestoreGPURegs
	.align	2, 0
	.globl	RestoreMapTiles
	.type	 RestoreMapTiles,function
	.thumb_func
RestoreMapTiles:
	push	{lr}
	ldr	r0, .L77
	ldr	r1, .L77+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	mov	r3, #0x0
	bl	RequestDma3Copy
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	sMapTilesBackup
	.word	0x600c000
.Lfe8:
	.size	 RestoreMapTiles,.Lfe8-RestoreMapTiles
	.align	2, 0
	.globl	RestoreMapTextColors
	.type	 RestoreMapTextColors,function
	.thumb_func
RestoreMapTextColors:
	push	{lr}
	ldr	r0, .L80
	add	r1, r0, #0x1
	add	r2, r0, #0x2
	bl	RestoreTextColors
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	sVideoState+0x12
.Lfe9:
	.size	 RestoreMapTextColors,.Lfe9-RestoreMapTextColors
	.align	2, 0
	.globl	CommitTilemap
	.type	 CommitTilemap,function
	.thumb_func
CommitTilemap:
	push	{lr}
	ldr	r0, .L83
	ldr	r1, .L83+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	mov	r3, #0x0
	bl	RequestDma3Copy
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	gDecompressionBuffer
	.word	0x600c000
.Lfe10:
	.size	 CommitTilemap,.Lfe10-CommitTilemap
	.align	2, 0
	.globl	HS_DrawBgTilemapRect
	.type	 HS_DrawBgTilemapRect,function
	.thumb_func
HS_DrawBgTilemapRect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x10
	lsr	r7, r5, #0x10
	lsr	r0, r2, #0x18
	add	r2, r0, r4
	cmp	r0, r2
	bge	.L87	@cond_branch
	mov	ip, r2
	ldr	r1, .L96
	mov	sl, r1
.L89:
	mov	r4, r9
	mov	r2, r8
	add	r1, r4, r2
	add	r3, r0, #0x1
	cmp	r4, r1
	bge	.L88	@cond_branch
	lsl	r2, r0, #0x6
	mov	r5, sl
.L93:
	lsl	r0, r4, #0x1
	add	r0, r2, r0
	add	r0, r0, r5
	strh	r6, [r0]
	add	r0, r6, r7
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r1
	blt	.L93	@cond_branch
.L88:
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, ip
	blt	.L89	@cond_branch
.L87:
	bl	CommitTilemap
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	gDecompressionBuffer+0x3800
.Lfe11:
	.size	 HS_DrawBgTilemapRect,.Lfe11-HS_DrawBgTilemapRect
	.align	2, 0
	.globl	HS_BufferFillMapWithTile1FF
	.type	 HS_BufferFillMapWithTile1FF,function
	.thumb_func
HS_BufferFillMapWithTile1FF:
	push	{lr}
	add	sp, sp, #-0x8
	ldr	r0, .L99
	mov	r1, #0x14
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x1e
	bl	HS_DrawBgTilemapRect
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	0x1ff
.Lfe12:
	.size	 HS_BufferFillMapWithTile1FF,.Lfe12-HS_BufferFillMapWithTile1FF
	.align	2, 0
	.globl	HS_ShowOrHideWordHELPinTopLeft
	.type	 HS_ShowOrHideWordHELPinTopLeft,function
	.thumb_func
HS_ShowOrHideWordHELPinTopLeft:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L103	@cond_branch
	cmp	r2, #0x1
	beq	.L104	@cond_branch
	b	.L102
.L103:
	ldr	r0, .L107
	mov	r1, #0x2
	str	r1, [sp]
	str	r2, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x7
	bl	HS_DrawBgTilemapRect
	b	.L102
.L108:
	.align	2, 0
.L107:
	.word	0x1ff
.L104:
	mov	r0, #0xf4
	lsl	r0, r0, #0x1
	mov	r1, #0x2
	str	r1, [sp]
	str	r2, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x7
	bl	HS_DrawBgTilemapRect
.L102:
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 HS_ShowOrHideWordHELPinTopLeft,.Lfe13-HS_ShowOrHideWordHELPinTopLeft
	.align	2, 0
	.globl	HS_ShowOrHideControlsGuideInTopRight
	.type	 HS_ShowOrHideControlsGuideInTopRight,function
	.thumb_func
HS_ShowOrHideControlsGuideInTopRight:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L111	@cond_branch
	cmp	r2, #0x1
	beq	.L112	@cond_branch
	b	.L110
.L111:
	ldr	r0, .L115
	mov	r1, #0x2
	str	r1, [sp]
	str	r2, [sp, #0x4]
	mov	r1, #0xd
	mov	r2, #0x0
	mov	r3, #0x10
	bl	HS_DrawBgTilemapRect
	b	.L110
.L116:
	.align	2, 0
.L115:
	.word	0x1ff
.L112:
	mov	r0, #0xd0
	lsl	r0, r0, #0x1
	mov	r1, #0x2
	str	r1, [sp]
	str	r2, [sp, #0x4]
	mov	r1, #0xd
	mov	r2, #0x0
	mov	r3, #0x10
	bl	HS_DrawBgTilemapRect
.L110:
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 HS_ShowOrHideControlsGuideInTopRight,.Lfe14-HS_ShowOrHideControlsGuideInTopRight
	.align	2, 0
	.globl	HS_ShowOrHideMainWindowText
	.type	 HS_ShowOrHideMainWindowText,function
	.thumb_func
HS_ShowOrHideMainWindowText:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L119	@cond_branch
	cmp	r2, #0x1
	beq	.L120	@cond_branch
	b	.L118
.L119:
	ldr	r0, .L123
	mov	r1, #0x10
	str	r1, [sp]
	str	r2, [sp, #0x4]
	mov	r1, #0x2
	mov	r2, #0x3
	mov	r3, #0x1a
	bl	HS_DrawBgTilemapRect
	b	.L118
.L124:
	.align	2, 0
.L123:
	.word	0x1ff
.L120:
	mov	r0, #0x10
	str	r0, [sp]
	str	r2, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x3
	mov	r3, #0x1a
	bl	HS_DrawBgTilemapRect
.L118:
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 HS_ShowOrHideMainWindowText,.Lfe15-HS_ShowOrHideMainWindowText
	.align	2, 0
	.globl	HS_SetMainWindowBgBrightness
	.type	 HS_SetMainWindowBgBrightness,function
	.thumb_func
HS_SetMainWindowBgBrightness:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L127	@cond_branch
	cmp	r2, #0x1
	beq	.L128	@cond_branch
	b	.L126
.L127:
	ldr	r0, .L131
	mov	r1, #0x10
	str	r1, [sp]
	str	r2, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x3
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
	b	.L126
.L132:
	.align	2, 0
.L131:
	.word	0x1ff
.L128:
	mov	r0, #0xfd
	lsl	r0, r0, #0x1
	mov	r1, #0x11
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x3
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
.L126:
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 HS_SetMainWindowBgBrightness,.Lfe16-HS_SetMainWindowBgBrightness
	.align	2, 0
	.globl	HS_ShowOrHideToplevelTooltipWindow
	.type	 HS_ShowOrHideToplevelTooltipWindow,function
	.thumb_func
HS_ShowOrHideToplevelTooltipWindow:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L135	@cond_branch
	cmp	r2, #0x1
	beq	.L136	@cond_branch
	b	.L134
.L135:
	ldr	r0, .L139
	mov	r1, #0x5
	str	r1, [sp]
	str	r2, [sp, #0x4]
	mov	r1, #0x2
	mov	r2, #0xe
	mov	r3, #0x1a
	bl	HS_DrawBgTilemapRect
	b	.L134
.L140:
	.align	2, 0
.L139:
	.word	0x1ff
.L136:
	mov	r0, #0x8f
	lsl	r0, r0, #0x1
	mov	r1, #0x5
	str	r1, [sp]
	str	r2, [sp, #0x4]
	mov	r1, #0x2
	mov	r2, #0xe
	mov	r3, #0x1a
	bl	HS_DrawBgTilemapRect
.L134:
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 HS_ShowOrHideToplevelTooltipWindow,.Lfe17-HS_ShowOrHideToplevelTooltipWindow
	.align	2, 0
	.globl	HS_ShowOrHideHeaderAndFooterLines_Lighter
	.type	 HS_ShowOrHideHeaderAndFooterLines_Lighter,function
	.thumb_func
HS_ShowOrHideHeaderAndFooterLines_Lighter:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.L143	@cond_branch
	cmp	r6, #0x1
	beq	.L144	@cond_branch
	b	.L142
.L143:
	ldr	r5, .L147
	mov	r4, #0x1
	str	r4, [sp]
	str	r6, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x2
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x13
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
	b	.L142
.L148:
	.align	2, 0
.L147:
	.word	0x1ff
.L144:
	ldr	r0, .L149
	str	r6, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x2
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
	mov	r0, #0xfc
	lsl	r0, r0, #0x1
	str	r6, [sp]
	str	r4, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x13
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
.L142:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	0x1f7
.Lfe18:
	.size	 HS_ShowOrHideHeaderAndFooterLines_Lighter,.Lfe18-HS_ShowOrHideHeaderAndFooterLines_Lighter
	.align	2, 0
	.globl	HS_ShowOrHideHeaderAndFooterLines_Darker
	.type	 HS_ShowOrHideHeaderAndFooterLines_Darker,function
	.thumb_func
HS_ShowOrHideHeaderAndFooterLines_Darker:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.L153	@cond_branch
	cmp	r6, #0x1
	beq	.L154	@cond_branch
	b	.L152
.L153:
	ldr	r5, .L157
	mov	r4, #0x1
	str	r4, [sp]
	str	r6, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x2
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x13
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
	b	.L152
.L158:
	.align	2, 0
.L157:
	.word	0x1ff
.L154:
	ldr	r0, .L159
	str	r6, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x2
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
	mov	r0, #0xfe
	lsl	r0, r0, #0x1
	str	r6, [sp]
	str	r4, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x13
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
.L152:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	0x1fb
.Lfe19:
	.size	 HS_ShowOrHideHeaderAndFooterLines_Darker,.Lfe19-HS_ShowOrHideHeaderAndFooterLines_Darker
	.align	2, 0
	.globl	HS_ShowOrHideVerticalBlackBarsAlongSides
	.type	 HS_ShowOrHideVerticalBlackBarsAlongSides,function
	.thumb_func
HS_ShowOrHideVerticalBlackBarsAlongSides:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.L163	@cond_branch
	cmp	r6, #0x1
	beq	.L164	@cond_branch
	b	.L162
.L163:
	ldr	r5, .L167
	mov	r4, #0x14
	str	r4, [sp]
	str	r6, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	HS_DrawBgTilemapRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0x1d
	mov	r2, #0x0
	mov	r3, #0x1
	bl	HS_DrawBgTilemapRect
	b	.L162
.L168:
	.align	2, 0
.L167:
	.word	0x1ff
.L164:
	ldr	r6, .L169
	mov	r5, #0x14
	str	r5, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	HS_DrawBgTilemapRect
	str	r5, [sp]
	str	r4, [sp, #0x4]
	add	r0, r6, #0
	mov	r1, #0x1d
	mov	r2, #0x0
	mov	r3, #0x1
	bl	HS_DrawBgTilemapRect
.L162:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	0x1f9
.Lfe20:
	.size	 HS_ShowOrHideVerticalBlackBarsAlongSides,.Lfe20-HS_ShowOrHideVerticalBlackBarsAlongSides
	.align	2, 0
	.globl	HS_ShowOrHideHeaderLine_Darker_FooterStyle
	.type	 HS_ShowOrHideHeaderLine_Darker_FooterStyle,function
	.thumb_func
HS_ShowOrHideHeaderLine_Darker_FooterStyle:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L173	@cond_branch
	cmp	r2, #0x1
	beq	.L174	@cond_branch
	b	.L172
.L173:
	ldr	r0, .L177
	mov	r1, #0x1
	str	r1, [sp]
	str	r2, [sp, #0x4]
	mov	r2, #0x5
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
	b	.L172
.L178:
	.align	2, 0
.L177:
	.word	0x1ff
.L174:
	mov	r0, #0xfe
	lsl	r0, r0, #0x1
	str	r2, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	mov	r2, #0x5
	mov	r3, #0x1c
	bl	HS_DrawBgTilemapRect
.L172:
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 HS_ShowOrHideHeaderLine_Darker_FooterStyle,.Lfe21-HS_ShowOrHideHeaderLine_Darker_FooterStyle
	.align	2, 0
	.globl	HS_ShowOrHideScrollArrows
	.type	 HS_ShowOrHideScrollArrows,function
	.thumb_func
HS_ShowOrHideScrollArrows:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	cmp	r6, #0
	beq	.L181	@cond_branch
	cmp	r6, #0x1
	beq	.L182	@cond_branch
	b	.L180
.L181:
	ldr	r5, .L188
	mov	r4, #0x1
	str	r4, [sp]
	str	r6, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0x1c
	mov	r2, #0x3
	mov	r3, #0x1
	bl	HS_DrawBgTilemapRect
	str	r4, [sp]
	str	r6, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0x1c
	mov	r2, #0x12
	b	.L187
.L189:
	.align	2, 0
.L188:
	.word	0x1ff
.L182:
	cmp	r2, #0
	bne	.L183	@cond_branch
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	str	r6, [sp]
	str	r2, [sp, #0x4]
	mov	r1, #0x1c
	mov	r2, #0x3
.L187:
	mov	r3, #0x1
	bl	HS_DrawBgTilemapRect
	b	.L180
.L183:
	ldr	r0, .L190
	str	r6, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	mov	r1, #0x1c
	mov	r2, #0x12
	mov	r3, #0x1
	bl	HS_DrawBgTilemapRect
.L180:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L191:
	.align	2, 0
.L190:
	.word	0x1fd
.Lfe22:
	.size	 HS_ShowOrHideScrollArrows,.Lfe22-HS_ShowOrHideScrollArrows
	.align	2, 0
	.globl	HelpSystemRenderText
	.type	 HelpSystemRenderText,function
	.thumb_func
HelpSystemRenderText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	str	r1, [sp, #0x28]
	mov	r9, r2
	ldr	r1, [sp, #0x58]
	ldr	r2, [sp, #0x5c]
	ldr	r4, [sp, #0x60]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x24]
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x2c]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x30]
	str	r7, [sp, #0x34]
.L195:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r2, #0x1
	add	r9, r9, r2
	add	r0, r1, #0
	sub	r0, r0, #0xf8
	cmp	r0, #0x7
	bls	.LCB1459
	b	.L252	@long jump
.LCB1459:
	lsl	r0, r0, #0x2
	ldr	r1, .L264
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L265:
	.align	2, 0
.L264:
	.word	.L259
	.align	2, 0
	.align	2, 0
.L259:
	.word	.L250
	.word	.L251
	.word	.L222
	.word	.L222
	.word	.L223
	.word	.L199
	.word	.L222
	.word	.L192
.L199:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r2, #0x1
	add	r9, r9, r2
	cmp	r1, #0x1
	bne	.L200	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L266
	ldr	r1, [r0]
	ldrb	r1, [r1]
	cmp	r1, #0xff
	beq	.L195	@cond_branch
	ldr	r5, .L266+0x4
.L205:
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrb	r1, [r0]
	ldr	r0, [sp, #0x28]
	str	r0, [sp]
	str	r7, [sp, #0x4]
	mov	r2, sl
	str	r2, [sp, #0x8]
	ldr	r0, [sp, #0x2c]
	str	r0, [sp, #0xc]
	ldr	r2, [sp, #0x30]
	str	r2, [sp, #0x10]
	ldr	r0, [sp, #0x24]
	add	r2, sp, #0x14
	add	r3, sp, #0x1c
	bl	DecompressAndRenderGlyph
	ldr	r0, [sp, #0x24]
	ldrb	r0, [r5]
	add	r0, r7, r0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x9
	bhi	.L195	@cond_branch
	ldr	r0, .L266
	ldr	r1, [r0]
	add	r1, r1, r4
	ldrb	r1, [r1]
	cmp	r1, #0xff
	bne	.L205	@cond_branch
	b	.L195
.L267:
	.align	2, 0
.L266:
	.word	gSaveBlock2Ptr
	.word	gGlyphInfo+0x80
.L200:
	cmp	r1, #0x2
	bne	.L195	@cond_branch
	mov	r4, #0x0
	ldr	r5, .L268
	b	.L211
.L269:
	.align	2, 0
.L268:
	.word	gGlyphInfo+0x80
.L215:
	ldrb	r1, [r1]
	ldr	r2, [sp, #0x28]
	str	r2, [sp]
	str	r7, [sp, #0x4]
	mov	r0, sl
	str	r0, [sp, #0x8]
	ldr	r2, [sp, #0x2c]
	str	r2, [sp, #0xc]
	ldr	r0, [sp, #0x30]
	str	r0, [sp, #0x10]
	ldr	r0, [sp, #0x24]
	add	r2, sp, #0x14
	add	r3, sp, #0x1c
	bl	DecompressAndRenderGlyph
	b	.L216
.L214:
	ldr	r0, .L270
	add	r1, r4, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L195	@cond_branch
	add	r1, r0, #0
	ldr	r2, [sp, #0x28]
	str	r2, [sp]
	str	r7, [sp, #0x4]
	mov	r0, sl
	str	r0, [sp, #0x8]
	ldr	r2, [sp, #0x2c]
	str	r2, [sp, #0xc]
	ldr	r0, [sp, #0x30]
	str	r0, [sp, #0x10]
	ldr	r0, [sp, #0x24]
	add	r2, sp, #0x14
	add	r3, sp, #0x1c
	bl	DecompressAndRenderGlyph
.L216:
	ldr	r1, [sp, #0x24]
	ldrb	r0, [r5]
	add	r0, r7, r0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L211:
	ldr	r0, .L270+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L214	@cond_branch
	ldr	r0, .L270+0x8
	add	r1, r4, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L215	@cond_branch
	b	.L195
.L271:
	.align	2, 0
.L270:
	.word	gString_Someone
	.word	0x834
	.word	gString_Bill
.L222:
	ldr	r7, [sp, #0x34]
	ldr	r1, .L272
	add	r1, r1, #0x81
	mov	r0, sl
	add	r0, r0, #0x1
	ldrb	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L195
.L273:
	.align	2, 0
.L272:
	.word	gGlyphInfo
.L223:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x1
	add	r9, r9, r0
	sub	r0, r1, #0x1
	cmp	r0, #0x15
	bls	.LCB1687
	b	.L195	@long jump
.LCB1687:
	lsl	r0, r0, #0x2
	ldr	r1, .L274
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L275:
	.align	2, 0
.L274:
	.word	.L248
	.align	2, 0
	.align	2, 0
.L248:
	.word	.L244
	.word	.L244
	.word	.L244
	.word	.L225
	.word	.L244
	.word	.L244
	.word	.L195
	.word	.L244
	.word	.L195
	.word	.L195
	.word	.L227
	.word	.L244
	.word	.L244
	.word	.L244
	.word	.L195
	.word	.L227
	.word	.L245
	.word	.L245
	.word	.L243
	.word	.L245
	.word	.L195
	.word	.L195
.L225:
	mov	r1, #0x1
	add	r9, r9, r1
.L227:
	mov	r2, #0x1
	add	r9, r9, r2
	b	.L244
.L243:
	mov	r2, r9
	ldrb	r0, [r2]
	ldr	r1, [sp, #0x34]
	add	r0, r0, r1
	sub	r6, r0, r7
	cmp	r6, #0
	ble	.L244	@cond_branch
	ldr	r2, [sp, #0x28]
	str	r2, [sp, #0x1c]
	ldr	r1, [sp, #0x2c]
	lsl	r0, r1, #0x3
	add	r4, sp, #0x1c
	mov	r5, #0x0
	strh	r0, [r4, #0x4]
	ldr	r2, [sp, #0x30]
	lsl	r0, r2, #0x3
	strh	r0, [r4, #0x6]
	ldr	r0, [sp, #0x24]
	mov	r1, #0x1
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r6, #0x10
	lsr	r3, r3, #0x10
	str	r0, [sp]
	str	r5, [sp, #0x4]
	add	r0, r4, #0
	add	r1, r7, #0
	mov	r2, sl
	bl	FillBitmapRect4Bit
	add	r0, r7, r6
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L244:
	mov	r0, #0x1
	add	r9, r9, r0
	b	.L195
.L245:
	mov	r1, #0x1
	add	r9, r9, r1
	b	.L195
.L250:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x1
	add	r9, r9, r0
	add	r6, r1, #0
	add	r0, r6, #0
	bl	GetKeypadIconTileOffset
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x13
	ldr	r1, .L276
	add	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r1, sp, #0x14
	mov	r2, #0x0
	mov	r8, r2
	mov	r0, #0x80
	strh	r0, [r1, #0x4]
	strh	r0, [r1, #0x6]
	ldr	r0, [sp, #0x28]
	str	r0, [sp, #0x1c]
	ldr	r1, [sp, #0x2c]
	lsl	r0, r1, #0x3
	add	r5, sp, #0x1c
	strh	r0, [r5, #0x4]
	ldr	r2, [sp, #0x30]
	lsl	r0, r2, #0x3
	strh	r0, [r5, #0x6]
	add	r0, r6, #0
	bl	GetKeypadIconWidth
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetKeypadIconHeight
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r7, [sp]
	mov	r1, sl
	str	r1, [sp, #0x4]
	str	r4, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r2, r8
	str	r2, [sp, #0x10]
	add	r0, sp, #0x14
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlitBitmapRect4Bit
	add	r0, r6, #0
	bl	GetKeypadIconWidth
	b	.L262
.L277:
	.align	2, 0
.L276:
	.word	gKeypadIconTiles
.L251:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	orr	r1, r1, r0
	mov	r0, #0x1
	add	r9, r9, r0
.L252:
	cmp	r1, #0
	bne	.L253	@cond_branch
	ldr	r1, [sp, #0x24]
	cmp	r1, #0
	bne	.L254	@cond_branch
	add	r0, r7, #0x5
	b	.L263
.L254:
	add	r0, r7, #0x4
	b	.L263
.L253:
	add	r3, sp, #0x1c
	ldr	r2, [sp, #0x28]
	str	r2, [sp]
	str	r7, [sp, #0x4]
	mov	r0, sl
	str	r0, [sp, #0x8]
	ldr	r2, [sp, #0x2c]
	str	r2, [sp, #0xc]
	ldr	r0, [sp, #0x30]
	str	r0, [sp, #0x10]
	ldr	r0, [sp, #0x24]
	add	r2, sp, #0x14
	bl	DecompressAndRenderGlyph
	ldr	r1, [sp, #0x24]
	ldr	r0, .L278
	add	r0, r0, #0x80
	ldrb	r0, [r0]
.L262:
	add	r0, r7, r0
.L263:
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L195
.L279:
	.align	2, 0
.L278:
	.word	gGlyphInfo
.L192:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 HelpSystemRenderText,.Lfe23-HelpSystemRenderText
	.align	2, 0
	.globl	DecompressAndRenderGlyph
	.type	 DecompressAndRenderGlyph,function
	.thumb_func
DecompressAndRenderGlyph:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	add	r7, r2, #0
	mov	r8, r3
	ldr	r2, [sp, #0x38]
	ldr	r3, [sp, #0x3c]
	ldr	r4, [sp, #0x40]
	ldr	r5, [sp, #0x44]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	add	r1, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	cmp	r6, #0
	bne	.L281	@cond_branch
	mov	r1, #0x0
	bl	DecompressGlyphFont0
	b	.L282
.L281:
	cmp	r6, #0x5
	bne	.L283	@cond_branch
	mov	r1, #0x0
	bl	DecompressGlyphFont5
	b	.L282
.L283:
	add	r0, r1, #0
	mov	r1, #0x0
	bl	DecompressGlyphFont2
.L282:
	ldr	r1, .L285
	str	r1, [r7]
	mov	r2, #0x0
	mov	r0, #0x10
	strh	r0, [r7, #0x4]
	strh	r0, [r7, #0x6]
	ldr	r0, [sp, #0x34]
	mov	r3, r8
	str	r0, [r3]
	lsl	r0, r4, #0x3
	strh	r0, [r3, #0x4]
	lsl	r0, r5, #0x3
	strh	r0, [r3, #0x6]
	mov	r0, sl
	str	r0, [sp]
	mov	r3, r9
	str	r3, [sp, #0x4]
	add	r0, r1, #0
	add	r0, r0, #0x80
	ldrb	r0, [r0]
	str	r0, [sp, #0x8]
	add	r1, r1, #0x81
	ldrb	r0, [r1]
	str	r0, [sp, #0xc]
	str	r2, [sp, #0x10]
	add	r0, r7, #0
	mov	r1, r8
	mov	r3, #0x0
	bl	BlitBitmapRect4Bit
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	gGlyphInfo
.Lfe24:
	.size	 DecompressAndRenderGlyph,.Lfe24-DecompressAndRenderGlyph
	.align	2, 0
	.globl	HelpSystem_PrintTextInTopLeftCorner
	.type	 HelpSystem_PrintTextInTopLeftCorner,function
	.thumb_func
HelpSystem_PrintTextInTopLeftCorner:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r0, #0x1
	mov	r1, #0xf
	mov	r2, #0x2
	bl	GenerateFontHalfRowLookupTable
	ldr	r1, .L288
	mov	r2, #0x2
	str	r2, [sp]
	mov	r0, #0x7
	str	r0, [sp, #0x4]
	str	r2, [sp, #0x8]
	mov	r0, #0x5
	add	r2, r4, #0
	mov	r3, #0x6
	bl	HelpSystemRenderText
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L289:
	.align	2, 0
.L288:
	.word	gDecompressionBuffer+0x3d00
.Lfe25:
	.size	 HelpSystem_PrintTextInTopLeftCorner,.Lfe25-HelpSystem_PrintTextInTopLeftCorner
	.align	2, 0
	.globl	HelpSystem_PrintTextRightAlign_Row52
	.type	 HelpSystem_PrintTextRightAlign_Row52,function
	.thumb_func
HelpSystem_PrintTextRightAlign_Row52:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r4, #0x7c
	sub	r4, r4, r0
	mov	r0, #0x1
	mov	r1, #0xf
	mov	r2, #0x2
	bl	GenerateFontHalfRowLookupTable
	ldr	r1, .L291
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, #0x2
	str	r2, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	str	r2, [sp, #0x8]
	mov	r0, #0x0
	add	r2, r5, #0
	add	r3, r4, #0
	bl	HelpSystemRenderText
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	gDecompressionBuffer+0x3400
.Lfe26:
	.size	 HelpSystem_PrintTextRightAlign_Row52,.Lfe26-HelpSystem_PrintTextRightAlign_Row52
	.align	2, 0
	.globl	HelpSystem_PrintTextAt
	.type	 HelpSystem_PrintTextAt,function
	.thumb_func
HelpSystem_PrintTextAt:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	add	r5, r1, #0
	add	r4, r2, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	mov	r1, #0xf
	mov	r2, #0x2
	bl	GenerateFontHalfRowLookupTable
	ldr	r1, .L294
	str	r4, [sp]
	mov	r0, #0x1a
	str	r0, [sp, #0x4]
	mov	r0, #0x10
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	add	r2, r6, #0
	add	r3, r5, #0
	bl	HelpSystemRenderText
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L295:
	.align	2, 0
.L294:
	.word	gDecompressionBuffer
.Lfe27:
	.size	 HelpSystem_PrintTextAt,.Lfe27-HelpSystem_PrintTextAt
	.align	2, 0
	.globl	HelpSystem_PrintQuestionAndAnswerPair
	.type	 HelpSystem_PrintQuestionAndAnswerPair,function
	.thumb_func
HelpSystem_PrintQuestionAndAnswerPair:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	mov	r8, r0
	mov	r9, r1
	add	r1, sp, #0xc
	ldr	r2, .L297
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r4, .L297+0x4
	ldr	r2, .L297+0x8
	add	r0, r1, #0
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0x1
	mov	r1, #0xe
	mov	r2, #0x2
	bl	GenerateFontHalfRowLookupTable
	mov	r6, #0x0
	str	r6, [sp]
	mov	r5, #0x1a
	str	r5, [sp, #0x4]
	mov	r0, #0x10
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, r8
	mov	r3, #0x0
	bl	HelpSystemRenderText
	mov	r0, #0x9c
	lsl	r0, r0, #0x4
	add	r4, r4, r0
	str	r6, [sp]
	str	r5, [sp, #0x4]
	mov	r0, #0xd
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, r9
	mov	r3, #0x0
	bl	HelpSystemRenderText
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	0xeeee
	.word	gDecompressionBuffer
	.word	0x1001a00
.Lfe28:
	.size	 HelpSystem_PrintQuestionAndAnswerPair,.Lfe28-HelpSystem_PrintQuestionAndAnswerPair
	.align	2, 0
	.globl	HelpSystem_PrintTopicMouseoverDescription
	.type	 HelpSystem_PrintTopicMouseoverDescription,function
	.thumb_func
HelpSystem_PrintTopicMouseoverDescription:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r1, sp, #0xc
	ldr	r2, .L300
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r4, .L300+0x4
	ldr	r2, .L300+0x8
	add	r0, r1, #0
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x3
	bl	GenerateFontHalfRowLookupTable
	mov	r0, #0x6
	str	r0, [sp]
	mov	r0, #0x1a
	str	r0, [sp, #0x4]
	mov	r0, #0x5
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x2
	bl	HelpSystemRenderText
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L301:
	.align	2, 0
.L300:
	.word	0x1111
	.word	gDecompressionBuffer+0x23c0
	.word	0x1000820
.Lfe29:
	.size	 HelpSystem_PrintTopicMouseoverDescription,.Lfe29-HelpSystem_PrintTopicMouseoverDescription
	.align	2, 0
	.globl	HelpSystem_FillPanel3
	.type	 HelpSystem_FillPanel3,function
	.thumb_func
HelpSystem_FillPanel3:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	ldr	r2, .L303
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L303+0x4
	ldr	r2, .L303+0x8
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	0xffff
	.word	gDecompressionBuffer+0x3d00
	.word	0x10000e0
.Lfe30:
	.size	 HelpSystem_FillPanel3,.Lfe30-HelpSystem_FillPanel3
	.align	2, 0
	.globl	HelpSystem_FillPanel2
	.type	 HelpSystem_FillPanel2,function
	.thumb_func
HelpSystem_FillPanel2:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	ldr	r2, .L306
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L306+0x4
	ldr	r2, .L306+0x8
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L307:
	.align	2, 0
.L306:
	.word	0xffff
	.word	gDecompressionBuffer+0x3400
	.word	0x1000200
.Lfe31:
	.size	 HelpSystem_FillPanel2,.Lfe31-HelpSystem_FillPanel2
	.align	2, 0
	.globl	HelpSystem_FillPanel1
	.type	 HelpSystem_FillPanel1,function
	.thumb_func
HelpSystem_FillPanel1:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	ldr	r2, .L309
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L309+0x4
	ldr	r2, .L309+0x8
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	0xffff
	.word	gDecompressionBuffer
	.word	0x1001a00
.Lfe32:
	.size	 HelpSystem_FillPanel1,.Lfe32-HelpSystem_FillPanel1
	.align	2, 0
	.globl	HelpSystem_InitListMenuController
	.type	 HelpSystem_InitListMenuController,function
	.thumb_func
HelpSystem_InitListMenuController:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L313
	add	r3, r4, #0
	ldmia	r0!, {r5, r6, r7}
	stmia	r3!, {r5, r6, r7}
	mov	r0, #0x0
	strb	r1, [r4, #0xc]
	strb	r2, [r4, #0xd]
	strb	r0, [r4, #0xe]
	ldrh	r0, [r4, #0x4]
	ldrh	r1, [r4, #0x6]
	cmp	r0, r1
	bcs	.L312	@cond_branch
	strh	r0, [r4, #0x6]
.L312:
	mov	r0, #0x0
	bl	HS_ShowOrHideMainWindowText
	bl	HelpSystem_FillPanel1
	bl	PrintListMenuItems
	bl	PlaceListMenuCursor
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gHelpSystemListMenu
.Lfe33:
	.size	 HelpSystem_InitListMenuController,.Lfe33-HelpSystem_InitListMenuController
	.align	2, 0
	.globl	HelpSystem_SetInputDelay
	.type	 HelpSystem_SetInputDelay,function
	.thumb_func
HelpSystem_SetInputDelay:
	ldr	r1, .L316
	strb	r0, [r1]
	bx	lr
.L317:
	.align	2, 0
.L316:
	.word	sDelayTimer
.Lfe34:
	.size	 HelpSystem_SetInputDelay,.Lfe34-HelpSystem_SetInputDelay
	.align	2, 0
	.globl	HelpSystem_GetMenuInput
	.type	 HelpSystem_GetMenuInput,function
	.thumb_func
HelpSystem_GetMenuInput:
	push	{lr}
	ldr	r1, .L344
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L319	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	b	.L336
.L345:
	.align	2, 0
.L344:
	.word	sDelayTimer
.L319:
	ldr	r2, .L346
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L321	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L346+0x4
	ldrb	r0, [r1, #0xc]
	ldrb	r2, [r1, #0xd]
	add	r0, r0, r2
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0, #0x4]
	b	.L339
.L347:
	.align	2, 0
.L346:
	.word	gMain
	.word	gHelpSystemListMenu
.L321:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L323	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x2
	neg	r0, r0
	b	.L339
.L323:
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L325	@cond_branch
	mov	r0, #0x6
	neg	r0, r0
	b	.L339
.L325:
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L327	@cond_branch
	mov	r0, #0x1
	b	.L341
.L327:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L330	@cond_branch
	mov	r0, #0x1
	b	.L343
.L330:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L333	@cond_branch
	mov	r0, #0x7
.L341:
	mov	r1, #0x0
	bl	MoveCursor
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L334	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L334:
	mov	r0, #0x4
	neg	r0, r0
	b	.L339
.L333:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L336	@cond_branch
	mov	r0, #0x7
.L343:
	mov	r1, #0x1
	bl	MoveCursor
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L337	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L337:
	mov	r0, #0x5
	neg	r0, r0
	b	.L339
.L336:
	mov	r0, #0x1
	neg	r0, r0
.L339:
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 HelpSystem_GetMenuInput,.Lfe35-HelpSystem_GetMenuInput
	.align	2, 0
	.globl	HS_UpdateMenuScrollArrows
	.type	 HS_UpdateMenuScrollArrows,function
	.thumb_func
HS_UpdateMenuScrollArrows:
	push	{r4, r5, r6, lr}
	ldr	r5, .L358
	ldrh	r1, [r5, #0x4]
	sub	r0, r1, #0x7
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r1, #0x7
	bls	.L349	@cond_branch
	ldrb	r4, [r5, #0xc]
	ldrb	r0, [r5, #0xd]
	add	r4, r4, r0
	mov	r0, #0x0
	mov	r1, #0x0
	bl	HS_ShowOrHideScrollArrows
	cmp	r4, #0
	bne	.L350	@cond_branch
	mov	r0, #0x1
	b	.L357
.L359:
	.align	2, 0
.L358:
	.word	gHelpSystemListMenu
.L350:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0
	bne	.L352	@cond_branch
	ldrb	r0, [r5, #0xd]
	cmp	r0, #0
	beq	.L352	@cond_branch
	mov	r0, #0x1
	b	.L357
.L352:
	ldr	r0, .L360
	ldrb	r0, [r0, #0xc]
	cmp	r0, r6
	bne	.L354	@cond_branch
	mov	r0, #0x0
.L357:
	mov	r1, #0x1
	bl	HS_ShowOrHideScrollArrows
	b	.L349
.L361:
	.align	2, 0
.L360:
	.word	gHelpSystemListMenu
.L354:
	cmp	r0, #0
	beq	.L349	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	bl	HS_ShowOrHideScrollArrows
	mov	r0, #0x1
	mov	r1, #0x1
	bl	HS_ShowOrHideScrollArrows
.L349:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 HS_UpdateMenuScrollArrows,.Lfe36-HS_UpdateMenuScrollArrows
	.align	2, 0
	.globl	PrintListMenuItems
	.type	 PrintListMenuItems,function
	.thumb_func
PrintListMenuItems:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r3, .L368
	ldrb	r5, [r3, #0xc]
	mov	r6, #0x0
	ldrh	r0, [r3, #0x6]
	cmp	r6, r0
	bge	.L364	@cond_branch
	add	r4, r3, #0
	mov	r7, #0x0
.L366:
	ldrb	r1, [r4, #0x8]
	add	r1, r1, #0x8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r4, #0x9]
	add	r2, r2, r7
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, [r4]
	lsl	r0, r5, #0x3
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	HelpSystem_PrintTextAt
	add	r5, r5, #0x1
	add	r7, r7, r8
	add	r6, r6, #0x1
	ldrh	r0, [r4, #0x6]
	cmp	r6, r0
	blt	.L366	@cond_branch
.L364:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gHelpSystemListMenu
.Lfe37:
	.size	 PrintListMenuItems,.Lfe37-PrintListMenuItems
	.align	2, 0
	.globl	PlaceListMenuCursor
	.type	 PlaceListMenuCursor,function
	.thumb_func
PlaceListMenuCursor:
	push	{r4, lr}
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L371
	ldrb	r1, [r3, #0x8]
	ldrb	r2, [r3, #0xd]
	mov	r4, r2
	mul	r4, r4, r0
	add	r2, r4, #0
	ldrb	r3, [r3, #0x9]
	add	r2, r2, r3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L371+0x4
	bl	HelpSystem_PrintTextAt
	pop	{r4}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	gHelpSystemListMenu
	.word	gText_SelectorArrow2
.Lfe38:
	.size	 PlaceListMenuCursor,.Lfe38-PlaceListMenuCursor
	.align	2, 0
	.globl	HS_RemoveSelectionCursorAt
	.type	 HS_RemoveSelectionCursorAt,function
	.thumb_func
HS_RemoveSelectionCursorAt:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L374
	ldrb	r1, [r3, #0x8]
	mov	r2, r4
	mul	r2, r2, r0
	ldrb	r3, [r3, #0x9]
	add	r2, r2, r3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L374+0x4
	bl	HelpSystem_PrintTextAt
	pop	{r4}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	gHelpSystemListMenu
	.word	gString_HelpSystem_ClearTo8
.Lfe39:
	.size	 HS_RemoveSelectionCursorAt,.Lfe39-HS_RemoveSelectionCursorAt
	.align	2, 0
	.globl	TryMoveCursor1
	.type	 TryMoveCursor1,function
	.thumb_func
TryMoveCursor1:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L377	@cond_branch
	ldr	r0, .L397
	ldrh	r1, [r0, #0x6]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L378	@cond_branch
	mov	r4, #0x0
	b	.L379
.L398:
	.align	2, 0
.L397:
	.word	gHelpSystemListMenu
.L378:
	ldrh	r0, [r5, #0x6]
	lsr	r2, r0, #0x1
	mov	r1, #0x1
	and	r1, r1, r0
	add	r2, r2, r1
	sub	r0, r0, r2
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L379:
	ldrb	r1, [r5, #0xc]
	cmp	r1, #0
	bne	.L380	@cond_branch
	ldrb	r0, [r5, #0xd]
	cmp	r0, #0
	beq	.L389	@cond_branch
	sub	r0, r0, #0x1
	b	.L395
.L380:
	ldrb	r0, [r5, #0xd]
	cmp	r0, r4
	bls	.L383	@cond_branch
	sub	r0, r0, #0x1
	b	.L395
.L383:
	sub	r0, r1, #0x1
	strb	r0, [r5, #0xc]
	mov	r0, #0x2
	b	.L394
.L377:
	ldr	r0, .L399
	ldrh	r1, [r0, #0x6]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L386	@cond_branch
	mov	r4, #0x0
	b	.L387
.L400:
	.align	2, 0
.L399:
	.word	gHelpSystemListMenu
.L386:
	ldrh	r0, [r5, #0x6]
	lsr	r2, r0, #0x1
	mov	r1, #0x1
	and	r0, r0, r1
	add	r4, r2, r0
.L387:
	add	r1, r5, #0
	ldrb	r2, [r1, #0xc]
	ldrh	r0, [r1, #0x4]
	ldrh	r3, [r1, #0x6]
	sub	r0, r0, r3
	cmp	r2, r0
	bne	.L388	@cond_branch
	ldrb	r2, [r1, #0xd]
	sub	r0, r3, #0x1
	cmp	r2, r0
	bge	.L389	@cond_branch
	add	r0, r2, #0x1
	strb	r0, [r1, #0xd]
	b	.L396
.L389:
	mov	r0, #0x0
	b	.L394
.L388:
	ldrb	r0, [r1, #0xd]
	cmp	r0, r4
	bcc	.L392	@cond_branch
	add	r0, r2, #0x1
	strb	r0, [r1, #0xc]
	mov	r0, #0x2
	b	.L394
.L392:
	add	r0, r0, #0x1
.L395:
	strb	r0, [r5, #0xd]
.L396:
	mov	r0, #0x1
.L394:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 TryMoveCursor1,.Lfe40-TryMoveCursor1
	.align	2, 0
	.globl	MoveCursor
	.type	 MoveCursor,function
	.thumb_func
MoveCursor:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r0, .L418
	ldrb	r7, [r0, #0xd]
	mov	r5, #0x0
	cmp	r5, r2
	bge	.L403	@cond_branch
	add	r4, r2, #0
.L405:
	add	r0, r6, #0
	bl	TryMoveCursor1
	orr	r5, r5, r0
	lsl	r0, r5, #0x18
	lsr	r5, r0, #0x18
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L405	@cond_branch
.L403:
	cmp	r5, #0x1
	beq	.L410	@cond_branch
	cmp	r5, #0x1
	ble	.L409	@cond_branch
	cmp	r5, #0x3
	ble	.L412	@cond_branch
.L409:
	mov	r0, #0x1
	b	.L417
.L419:
	.align	2, 0
.L418:
	.word	gHelpSystemListMenu
.L410:
	add	r0, r7, #0
	bl	HS_RemoveSelectionCursorAt
	bl	PlaceListMenuCursor
	bl	CommitTilemap
	b	.L407
.L412:
	bl	GetHelpSystemMenuLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L413	@cond_branch
	mov	r0, #0x2
	bl	HelpSystem_SetInputDelay
	bl	HelpSystem_FillPanel1
	bl	PrintListMenuItems
	bl	PlaceListMenuCursor
	bl	HelpSystem_PrintTopicLabel
	bl	HS_UpdateMenuScrollArrows
	b	.L414
.L413:
	mov	r0, #0x0
	bl	HS_ShowOrHideMainWindowText
	bl	HelpSystem_FillPanel1
	bl	PrintListMenuItems
	bl	PlaceListMenuCursor
	mov	r0, #0x1
	bl	HS_ShowOrHideMainWindowText
.L414:
	bl	CommitTilemap
.L407:
	mov	r0, #0x0
.L417:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 MoveCursor,.Lfe41-MoveCursor
	.comm	gHelpSystemEnabled, 4	@ 1
.text
	.align	2, 0 @ Don't pad with nop

