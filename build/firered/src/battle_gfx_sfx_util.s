@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sSpriteSheet_SinglesPlayerHealthbox,object
	.size	 sSpriteSheet_SinglesPlayerHealthbox,8
sSpriteSheet_SinglesPlayerHealthbox:
	.word	gHealthboxSinglesPlayerGfx
	.short	0x1000
	.short	0xd6ff
	.align	2, 0
	.type	 sSpriteSheet_SinglesOpponentHealthbox,object
	.size	 sSpriteSheet_SinglesOpponentHealthbox,8
sSpriteSheet_SinglesOpponentHealthbox:
	.word	gHealthboxSinglesOpponentGfx
	.short	0x1000
	.short	0xd701
	.align	2, 0
	.type	 sSpriteSheets_DoublesPlayerHealthbox,object
	.size	 sSpriteSheets_DoublesPlayerHealthbox,16
sSpriteSheets_DoublesPlayerHealthbox:
	.word	gHealthboxDoublesPlayerGfx
	.short	0x800
	.short	0xd6ff
	.word	gHealthboxDoublesPlayerGfx
	.short	0x800
	.short	0xd700
	.align	2, 0
	.type	 sSpriteSheets_DoublesOpponentHealthbox,object
	.size	 sSpriteSheets_DoublesOpponentHealthbox,16
sSpriteSheets_DoublesOpponentHealthbox:
	.word	gHealthboxDoublesOpponentGfx
	.short	0x800
	.short	0xd701
	.word	gHealthboxDoublesOpponentGfx
	.short	0x800
	.short	0xd702
	.align	2, 0
	.type	 sSpriteSheet_SafariHealthbox,object
	.size	 sSpriteSheet_SafariHealthbox,8
sSpriteSheet_SafariHealthbox:
	.word	gHealthboxSafariGfx
	.short	0x1000
	.short	0xd70b
	.align	2, 0
	.type	 sSpriteSheets_HealthBar,object
	.size	 sSpriteSheets_HealthBar,32
sSpriteSheets_HealthBar:
	.word	gBlankGfxCompressed
	.short	0x100
	.short	0xd704
	.word	gBlankGfxCompressed
	.short	0x120
	.short	0xd705
	.word	gBlankGfxCompressed
	.short	0x100
	.short	0xd706
	.word	gBlankGfxCompressed
	.short	0x120
	.short	0xd707
	.align	2, 0
	.type	 sSpritePalettes_HealthBoxHealthBar,object
	.size	 sSpritePalettes_HealthBoxHealthBar,16
sSpritePalettes_HealthBoxHealthBar:
	.word	gBattleInterface_BallStatusBarPal
	.short	0xd6ff
	.space	2
	.word	gBattleInterface_BallDisplayPal
	.short	0xd704
	.space	2
.text
	.align	2, 0
	.globl	AllocateBattleSpritesData
	.type	 AllocateBattleSpritesData,function
	.thumb_func
AllocateBattleSpritesData:
	push	{r4, lr}
	ldr	r4, .L3
	mov	r0, #0x10
	bl	AllocZeroed
	str	r0, [r4]
	mov	r0, #0x10
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
	mov	r0, #0x30
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x4]
	mov	r0, #0x10
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x8]
	mov	r0, #0x50
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleSpritesDataPtr
.Lfe1:
	.size	 AllocateBattleSpritesData,.Lfe1-AllocateBattleSpritesData
	.align	2, 0
	.globl	FreeBattleSpritesData
	.type	 FreeBattleSpritesData,function
	.thumb_func
FreeBattleSpritesData:
	push	{r4, r5, lr}
	ldr	r5, .L7
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L6	@cond_branch
	ldr	r0, [r0, #0xc]
	bl	Free
	ldr	r0, [r5]
	mov	r4, #0x0
	str	r4, [r0, #0xc]
	ldr	r0, [r0, #0x8]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x8]
	ldr	r0, [r0, #0x4]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x4]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0]
	bl	Free
	str	r4, [r5]
.L6:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gBattleSpritesDataPtr
.Lfe2:
	.size	 FreeBattleSpritesData,.Lfe2-FreeBattleSpritesData
	.align	2, 0
	.globl	SpriteCB_WaitForBattlerBallReleaseAnim
	.type	 SpriteCB_WaitForBattlerBallReleaseAnim,function
	.thumb_func
SpriteCB_WaitForBattlerBallReleaseAnim:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldrh	r0, [r6, #0x30]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r7, .L15
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r5, r1, #0x2
	add	r3, r5, r7
	add	r0, r3, #0
	add	r0, r0, #0x3f
	ldrb	r4, [r0]
	lsl	r0, r4, #0x1a
	cmp	r0, #0
	bge	.L9	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L9	@cond_branch
	add	r1, r3, #0
	add	r1, r1, #0x2c
	ldrb	r2, [r1]
	lsl	r0, r2, #0x19
	cmp	r0, #0
	bge	.L12	@cond_branch
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	b	.L9
.L16:
	.align	2, 0
.L15:
	.word	gSprites
.L12:
	lsl	r0, r4, #0x1b
	cmp	r0, #0
	bge	.L9	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #0x1c
	add	r0, r5, r0
	ldr	r1, .L17
	str	r1, [r0]
	add	r0, r3, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	ldr	r0, .L17+0x4
	str	r0, [r6, #0x1c]
.L9:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	SetIdleSpriteCallback
	.word	SpriteCallbackDummy
.Lfe3:
	.size	 SpriteCB_WaitForBattlerBallReleaseAnim,.Lfe3-SpriteCB_WaitForBattlerBallReleaseAnim
	.align	2, 0
	.type	 DoBattleSpriteAffineAnim,function
	.thumb_func
DoBattleSpriteAffineAnim:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	add	r3, r4, #0
	add	r3, r3, #0x2c
	ldrb	r0, [r3]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r0, .L22
	str	r0, [r4, #0x1c]
	cmp	r1, #0
	bne	.L20	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L21
.L23:
	.align	2, 0
.L22:
	.word	SpriteCallbackDummy
.L20:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L21:
	add	r0, r4, #0
	bl	AnimateSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 DoBattleSpriteAffineAnim,.Lfe4-DoBattleSpriteAffineAnim
	.align	2, 0
	.globl	SpriteCB_TrainerSlideIn
	.type	 SpriteCB_TrainerSlideIn,function
	.thumb_func
SpriteCB_TrainerSlideIn:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L27
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L25	@cond_branch
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L25	@cond_branch
	ldr	r0, .L27+0x4
	str	r0, [r2, #0x1c]
.L25:
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	gIntroSlideFlags
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 SpriteCB_TrainerSlideIn,.Lfe5-SpriteCB_TrainerSlideIn
	.align	2, 0
	.globl	InitAndLaunchChosenStatusAnimation
	.type	 InitAndLaunchChosenStatusAnimation,function
	.thumb_func
InitAndLaunchChosenStatusAnimation:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	ldr	r6, .L53
	ldr	r1, [r6]
	ldr	r5, .L53+0x4
	ldrb	r2, [r5]
	ldr	r3, [r1, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r3, #0x10
	orr	r2, r2, r3
	strb	r2, [r1]
	cmp	r0, #0
	bne	.L30	@cond_branch
	cmp	r4, #0x20
	bne	.L31	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x6
	bl	LaunchStatusAnimation
	b	.L42
.L54:
	.align	2, 0
.L53:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L31:
	cmp	r4, #0x8
	beq	.L34	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L33	@cond_branch
.L34:
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	LaunchStatusAnimation
	b	.L42
.L33:
	cmp	r4, #0x10
	bne	.L36	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	LaunchStatusAnimation
	b	.L42
.L36:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L38	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x4
	bl	LaunchStatusAnimation
	b	.L42
.L38:
	cmp	r4, #0x40
	bne	.L51	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x5
	bl	LaunchStatusAnimation
	b	.L42
.L30:
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	LaunchStatusAnimation
	b	.L42
.L43:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L45	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	LaunchStatusAnimation
	b	.L42
.L45:
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L47	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x7
	bl	LaunchStatusAnimation
	b	.L42
.L47:
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L49	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x8
	bl	LaunchStatusAnimation
	b	.L42
.L49:
	mov	r0, #0xe0
	lsl	r0, r0, #0x8
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L51	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x9
	bl	LaunchStatusAnimation
	b	.L42
.L51:
	ldr	r0, [r6]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L42:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 InitAndLaunchChosenStatusAnimation,.Lfe6-InitAndLaunchChosenStatusAnimation
	.align	2, 0
	.globl	TryHandleLaunchBattleTableAnimation
	.type	 TryHandleLaunchBattleTableAnimation,function
	.thumb_func
TryHandleLaunchBattleTableAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp]
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r7, r4, #0x10
	cmp	r5, #0
	bne	.L56	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L56	@cond_branch
	ldr	r0, .L62
	add	r0, r6, r0
	mov	r2, #0x7f
	add	r1, r7, #0
	and	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x1
	b	.L61
.L63:
	.align	2, 0
.L62:
	.word	gBattleMonForms
.L56:
	ldr	r0, .L64
	mov	r9, r0
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r4, r6, #0x2
	add	r0, r4, r0
	ldrb	r1, [r0]
	mov	r2, #0x4
	mov	r8, r2
	mov	r0, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L57	@cond_branch
	add	r0, r5, #0
	bl	ShouldAnimBeDoneRegardlessOfSubsitute
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L58	@cond_branch
	mov	r0, #0x1
	b	.L61
.L65:
	.align	2, 0
.L64:
	.word	gBattleSpritesDataPtr
.L58:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0]
	add	r0, r4, r0
	ldrb	r1, [r0]
	mov	r0, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L57	@cond_branch
	cmp	r5, #0x2
	bne	.L57	@cond_branch
	ldr	r1, .L66
	ldr	r0, .L66+0x4
	add	r0, r6, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L57	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x1
	bl	LoadBattleMonGfxAndAnimate
	add	r0, r6, #0
	bl	ClearBehindSubstituteBit
	mov	r0, #0x1
	b	.L61
.L67:
	.align	2, 0
.L66:
	.word	gSprites
	.word	gBattlerSpriteIds
.L57:
	ldr	r0, .L68
	mov	r2, sl
	strb	r2, [r0]
	ldr	r0, .L68+0x4
	mov	r1, sp
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldr	r4, .L68+0x8
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	strh	r7, [r0]
	ldr	r0, .L68+0xc
	add	r1, r5, #0
	mov	r2, #0x0
	bl	LaunchBattleAnimation
	ldr	r0, .L68+0x10
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L68+0x14
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r6, [r1, #0x8]
	ldr	r0, [r4]
	mov	r2, #0x8
	ldrsh	r1, [r1, r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x0
.L61:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L69:
	.align	2, 0
.L68:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleSpritesDataPtr
	.word	gBattleAnims_General
	.word	Task_ClearBitWhenBattleTableAnimDone
	.word	gTasks
.Lfe7:
	.size	 TryHandleLaunchBattleTableAnimation,.Lfe7-TryHandleLaunchBattleTableAnimation
	.align	2, 0
	.type	 Task_ClearBitWhenBattleTableAnimDone,function
	.thumb_func
Task_ClearBitWhenBattleTableAnimDone:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L72
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L72+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L71	@cond_branch
	ldr	r0, .L72+0x8
	ldr	r2, [r0]
	ldr	r1, .L72+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	ldr	r2, [r2, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L71:
	pop	{r4}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gTasks
.Lfe8:
	.size	 Task_ClearBitWhenBattleTableAnimDone,.Lfe8-Task_ClearBitWhenBattleTableAnimDone
	.align	2, 0
	.type	 ShouldAnimBeDoneRegardlessOfSubsitute,function
	.thumb_func
ShouldAnimBeDoneRegardlessOfSubsitute:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xd
	bgt	.L84	@cond_branch
	cmp	r0, #0xa
	bge	.L81	@cond_branch
	cmp	r0, #0x2
	beq	.L81	@cond_branch
	b	.L82
.L84:
	cmp	r0, #0x11
	bne	.L82	@cond_branch
.L81:
	mov	r0, #0x1
	b	.L85
.L82:
	mov	r0, #0x0
.L85:
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 ShouldAnimBeDoneRegardlessOfSubsitute,.Lfe9-ShouldAnimBeDoneRegardlessOfSubsitute
	.align	2, 0
	.globl	InitAndLaunchSpecialAnimation
	.type	 InitAndLaunchSpecialAnimation,function
	.thumb_func
InitAndLaunchSpecialAnimation:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L87
	strb	r1, [r0]
	ldr	r0, .L87+0x4
	strb	r2, [r0]
	ldr	r0, .L87+0x8
	add	r1, r3, #0
	mov	r2, #0x0
	bl	LaunchBattleAnimation
	ldr	r0, .L87+0xc
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L87+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	ldr	r0, .L87+0x14
	ldr	r0, [r0]
	mov	r2, #0x8
	ldrsh	r1, [r1, r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnims_Special
	.word	Task_ClearBitWhenSpecialAnimDone
	.word	gTasks
	.word	gBattleSpritesDataPtr
.Lfe10:
	.size	 InitAndLaunchSpecialAnimation,.Lfe10-InitAndLaunchSpecialAnimation
	.align	2, 0
	.type	 Task_ClearBitWhenSpecialAnimDone,function
	.thumb_func
Task_ClearBitWhenSpecialAnimDone:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L91
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L91+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L90	@cond_branch
	ldr	r0, .L91+0x8
	ldr	r2, [r0]
	ldr	r1, .L91+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	ldr	r2, [r2, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L90:
	pop	{r4}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gTasks
.Lfe11:
	.size	 Task_ClearBitWhenSpecialAnimDone,.Lfe11-Task_ClearBitWhenSpecialAnimDone
	.align	2, 0
	.globl	IsMoveWithoutAnimation
	.type	 IsMoveWithoutAnimation,function
	.thumb_func
IsMoveWithoutAnimation:
	mov	r0, #0x0
	bx	lr
.Lfe12:
	.size	 IsMoveWithoutAnimation,.Lfe12-IsMoveWithoutAnimation
	.align	2, 0
	.globl	IsBattleSEPlaying
	.type	 IsBattleSEPlaying,function
	.thumb_func
IsBattleSEPlaying:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r5, #0x0
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L95	@cond_branch
	ldr	r2, .L101
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x8]
	ldr	r2, [r2]
	ldr	r0, .L101+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x1d
	bls	.L100	@cond_branch
	ldr	r0, .L101+0x8
	bl	m4aMPlayStop
	ldr	r0, .L101+0xc
	bl	m4aMPlayStop
.L95:
	cmp	r5, #0
	beq	.L97	@cond_branch
.L100:
	mov	r0, #0x1
	b	.L99
.L102:
	.align	2, 0
.L101:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gMPlayInfo_SE1
	.word	gMPlayInfo_SE2
.L97:
	ldr	r0, .L103
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r5, [r0, #0x8]
	mov	r0, #0x0
.L99:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L104:
	.align	2, 0
.L103:
	.word	gBattleSpritesDataPtr
.Lfe13:
	.size	 IsBattleSEPlaying,.Lfe13-IsBattleSEPlaying
	.align	2, 0
	.globl	BattleLoadOpponentMonSpriteGfx
	.type	 BattleLoadOpponentMonSpriteGfx,function
	.thumb_func
BattleLoadOpponentMonSpriteGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp]
	ldr	r0, .L113
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r2, r1, r0
	ldrh	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L106	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r6, [sp]
	b	.L107
.L114:
	.align	2, 0
.L113:
	.word	gBattleSpritesDataPtr
.L106:
	ldrh	r5, [r2, #0x2]
	ldr	r0, .L115
	add	r0, r1, r0
	ldr	r6, [r0]
.L107:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	mov	sl, r0
	mov	r0, r8
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsl	r2, r5, #0x3
	ldr	r1, .L115+0x4
	add	r2, r2, r1
	ldr	r1, .L115+0x8
	ldr	r1, [r1]
	lsr	r0, r0, #0x16
	add	r1, r1, #0x4
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r2, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
	mov	r3, r8
	lsl	r2, r3, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r7, r2, r0
	ldr	r0, .L115+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r1, r3, #0x2
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	str	r1, [sp, #0x4]
	mov	r9, r2
	cmp	r0, #0
	bne	.L108	@cond_branch
	add	r0, r4, #0
	bl	GetMonFrontSpritePal
	b	.L112
.L116:
	.align	2, 0
.L115:
	.word	gTransformedPersonalities
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
	.word	gBattleSpritesDataPtr
.L108:
	add	r0, r5, #0
	mov	r1, sl
	ldr	r2, [sp]
	bl	GetMonSpritePalFromSpeciesAndPersonality
.L112:
	add	r6, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	AllocZeroed
	add	r4, r0, #0
	add	r0, r6, #0
	add	r1, r4, #0
	bl	LZDecompressWram
	add	r0, r4, #0
	add	r1, r7, #0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r1, r9
	add	r1, r1, #0x80
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	add	r0, r4, #0
	bl	Free
	ldr	r0, .L117
	cmp	r5, r0
	bne	.L110	@cond_branch
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	add	r7, r7, r9
	ldr	r5, .L117+0x4
	ldr	r1, [r5]
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r1, r1, r4
	add	r0, r6, #0
	bl	LZDecompressWram
	ldr	r0, .L117+0x8
	add	r0, r0, r8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x5
	add	r1, r1, r4
	ldr	r0, [r5]
	add	r0, r0, r1
	add	r1, r7, #0
	mov	r2, #0x20
	bl	LoadPalette
.L110:
	ldr	r0, .L117+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldr	r1, [sp, #0x4]
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L111	@cond_branch
	ldr	r3, .L117+0x10
	add	r0, r7, #0
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	lsl	r1, r7, #0x1
	ldr	r0, .L117+0x14
	add	r0, r1, r0
	ldr	r2, .L117+0x18
	add	r1, r1, r2
	ldr	r2, .L117+0x1c
	bl	CpuSet
.L111:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L118:
	.align	2, 0
.L117:
	.word	0x181
	.word	gBattleStruct
	.word	gBattleMonForms
	.word	gBattleSpritesDataPtr
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
.Lfe14:
	.size	 BattleLoadOpponentMonSpriteGfx,.Lfe14-BattleLoadOpponentMonSpriteGfx
	.align	2, 0
	.globl	BattleLoadPlayerMonSpriteGfx
	.type	 BattleLoadPlayerMonSpriteGfx,function
	.thumb_func
BattleLoadPlayerMonSpriteGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp]
	ldr	r0, .L130
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r2, r1, r0
	ldrh	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L120	@cond_branch
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r4, [sp]
	b	.L121
.L131:
	.align	2, 0
.L130:
	.word	gBattleSpritesDataPtr
.L120:
	ldrh	r5, [r2, #0x2]
	ldr	r0, .L132
	add	r0, r1, r0
	ldr	r4, [r0]
.L121:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x4]
	mov	r0, r8
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x1
	mov	r1, r8
	bl	ShouldIgnoreDeoxysForm
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x2
	mov	sl, r1
	cmp	r0, #0x1
	beq	.L123	@cond_branch
	ldr	r0, .L132+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, sl
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L122	@cond_branch
.L123:
	lsl	r0, r5, #0x3
	ldr	r1, .L132+0x8
	add	r0, r0, r1
	ldr	r1, .L132+0xc
	ldr	r1, [r1]
	lsl	r2, r7, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r2
	ldr	r1, [r1]
	add	r2, r5, #0
	add	r3, r4, #0
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
	b	.L124
.L133:
	.align	2, 0
.L132:
	.word	gTransformedPersonalities
	.word	gBattleSpritesDataPtr
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
.L122:
	lsl	r0, r5, #0x3
	ldr	r1, .L134
	add	r0, r0, r1
	ldr	r1, .L134+0x4
	ldr	r1, [r1]
	lsl	r2, r7, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r2
	ldr	r1, [r1]
	add	r2, r5, #0
	add	r3, r4, #0
	bl	HandleLoadSpecialPokePic
.L124:
	mov	r2, r8
	lsl	r1, r2, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r7, r1, r0
	ldr	r0, .L134+0x8
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, sl
	ldrh	r0, [r0, #0x2]
	mov	r9, r1
	cmp	r0, #0
	bne	.L125	@cond_branch
	add	r0, r6, #0
	bl	GetMonFrontSpritePal
	b	.L129
.L135:
	.align	2, 0
.L134:
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
	.word	gBattleSpritesDataPtr
.L125:
	add	r0, r5, #0
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp]
	bl	GetMonSpritePalFromSpeciesAndPersonality
.L129:
	add	r6, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	AllocZeroed
	add	r4, r0, #0
	add	r0, r6, #0
	add	r1, r4, #0
	bl	LZDecompressWram
	add	r0, r4, #0
	add	r1, r7, #0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r1, r9
	add	r1, r1, #0x80
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	add	r0, r4, #0
	bl	Free
	ldr	r0, .L136
	cmp	r5, r0
	bne	.L127	@cond_branch
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	add	r7, r7, r9
	ldr	r5, .L136+0x4
	ldr	r1, [r5]
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r1, r1, r4
	add	r0, r6, #0
	bl	LZDecompressWram
	ldr	r0, .L136+0x8
	add	r0, r0, r8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x5
	add	r1, r1, r4
	ldr	r0, [r5]
	add	r0, r0, r1
	add	r1, r7, #0
	mov	r2, #0x20
	bl	LoadPalette
.L127:
	ldr	r0, .L136+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, sl
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L128	@cond_branch
	ldr	r3, .L136+0x10
	add	r0, r7, #0
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	lsl	r1, r7, #0x1
	ldr	r0, .L136+0x14
	add	r0, r1, r0
	ldr	r2, .L136+0x18
	add	r1, r1, r2
	ldr	r2, .L136+0x1c
	bl	CpuSet
.L128:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L137:
	.align	2, 0
.L136:
	.word	0x181
	.word	gBattleStruct
	.word	gBattleMonForms
	.word	gBattleSpritesDataPtr
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
.Lfe15:
	.size	 BattleLoadPlayerMonSpriteGfx,.Lfe15-BattleLoadPlayerMonSpriteGfx
	.align	2, 0
	.globl	DecompressGhostFrontPic
	.type	 DecompressGhostFrontPic,function
	.thumb_func
DecompressGhostFrontPic:
	push	{r4, r5, r6, lr}
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	ldr	r2, .L139
	ldr	r1, .L139+0x4
	ldr	r1, [r1]
	lsr	r0, r0, #0x16
	add	r1, r1, #0x4
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r2, #0
	bl	LZ77UnCompWram
	lsl	r4, r4, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r6, r4, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	AllocZeroed
	add	r5, r0, #0
	ldr	r0, .L139+0x8
	add	r1, r5, #0
	bl	LZDecompressWram
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0x20
	bl	LoadPalette
	add	r4, r4, #0x80
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	add	r0, r5, #0
	bl	Free
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	gGhostFrontPic
	.word	gMonSpritesGfxPtr
	.word	gGhostPalette
.Lfe16:
	.size	 DecompressGhostFrontPic,.Lfe16-DecompressGhostFrontPic
	.align	2, 0
	.globl	DecompressTrainerFrontPic
	.type	 DecompressTrainerFrontPic,function
	.thumb_func
DecompressTrainerFrontPic:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	add	r0, r1, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x3
	ldr	r6, .L142
	add	r6, r5, r6
	ldr	r0, .L142+0x4
	mov	r8, r0
	ldr	r0, [r0]
	lsr	r4, r4, #0x16
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldr	r1, [r0]
	add	r0, r6, #0
	mov	r2, #0x0
	bl	DecompressPicFromTable
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x4
	add	r0, r0, r4
	ldr	r0, [r0]
	str	r0, [sp]
	ldrh	r2, [r6, #0x4]
	ldr	r0, .L142+0x8
	ldr	r1, [sp, #0x4]
	and	r1, r1, r0
	orr	r1, r1, r2
	str	r1, [sp, #0x4]
	ldrh	r2, [r6, #0x6]
	lsl	r2, r2, #0x10
	ldr	r0, .L142+0xc
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	ldr	r0, .L142+0x10
	add	r5, r5, r0
	add	r0, r5, #0
	bl	LoadCompressedSpritePaletteUsingHeap
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gTrainerFrontPicTable
	.word	gMonSpritesGfxPtr
	.word	-0x10000
	.word	0xffff
	.word	gTrainerFrontPicPaletteTable
.Lfe17:
	.size	 DecompressTrainerFrontPic,.Lfe17-DecompressTrainerFrontPic
	.align	2, 0
	.globl	DecompressTrainerBackPalette
	.type	 DecompressTrainerBackPalette,function
	.thumb_func
DecompressTrainerBackPalette:
	push	{lr}
	lsl	r0, r0, #0x10
	lsl	r1, r1, #0x18
	ldr	r2, .L145
	lsr	r0, r0, #0xd
	add	r0, r0, r2
	ldr	r0, [r0]
	lsr	r1, r1, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadCompressedPalette
	pop	{r0}
	bx	r0
.L146:
	.align	2, 0
.L145:
	.word	gTrainerBackPicPaletteTable
.Lfe18:
	.size	 DecompressTrainerBackPalette,.Lfe18-DecompressTrainerBackPalette
	.align	2, 0
	.globl	BattleGfxSfxDummy3
	.type	 BattleGfxSfxDummy3,function
	.thumb_func
BattleGfxSfxDummy3:
	bx	lr
.Lfe19:
	.size	 BattleGfxSfxDummy3,.Lfe19-BattleGfxSfxDummy3
	.align	2, 0
	.globl	FreeTrainerFrontPicPaletteAndTile
	.type	 FreeTrainerFrontPicPaletteAndTile,function
	.thumb_func
FreeTrainerFrontPicPaletteAndTile:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	ldr	r0, .L149
	lsr	r4, r4, #0xd
	add	r0, r4, r0
	ldrh	r0, [r0, #0x4]
	bl	FreeSpritePaletteByTag
	ldr	r0, .L149+0x4
	add	r4, r4, r0
	ldrh	r0, [r4, #0x6]
	bl	FreeSpriteTilesByTag
	pop	{r4}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	gTrainerFrontPicPaletteTable
	.word	gTrainerFrontPicTable
.Lfe20:
	.size	 FreeTrainerFrontPicPaletteAndTile,.Lfe20-FreeTrainerFrontPicPaletteAndTile
	.align	2, 0
	.type	 BattleLoadAllHealthBoxesGfxAtOnce,function
	.thumb_func
BattleLoadAllHealthBoxesGfxAtOnce:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L159
	add	r0, r4, #0
	bl	LoadSpritePalette
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadSpritePalette
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L152	@cond_branch
	ldr	r0, .L159+0x4
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L159+0x8
	bl	LoadCompressedSpriteSheetUsingHeap
	mov	r5, #0x2
	b	.L153
.L160:
	.align	2, 0
.L159:
	.word	sSpritePalettes_HealthBoxHealthBar
	.word	sSpriteSheet_SinglesPlayerHealthbox
	.word	sSpriteSheet_SinglesOpponentHealthbox
.L152:
	ldr	r4, .L161
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheetUsingHeap
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r4, .L161+0x4
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheetUsingHeap
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheetUsingHeap
	mov	r5, #0x4
.L153:
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L155	@cond_branch
	ldr	r7, .L161+0x8
	ldr	r6, .L161+0xc
.L157:
	add	r0, r4, r7
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	bl	LoadCompressedSpriteSheetUsingHeap
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L157	@cond_branch
.L155:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	sSpriteSheets_DoublesPlayerHealthbox
	.word	sSpriteSheets_DoublesOpponentHealthbox
	.word	gBattlerPositions
	.word	sSpriteSheets_HealthBar
.Lfe21:
	.size	 BattleLoadAllHealthBoxesGfxAtOnce,.Lfe21-BattleLoadAllHealthBoxesGfxAtOnce
	.align	2, 0
	.globl	BattleLoadAllHealthBoxesGfx
	.type	 BattleLoadAllHealthBoxesGfx,function
	.thumb_func
BattleLoadAllHealthBoxesGfx:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	mov	r6, #0x0
	cmp	r4, #0
	bne	.LCB1718
	b	.L164	@long jump
.LCB1718:
	cmp	r4, #0x1
	bne	.L165	@cond_branch
	ldr	r4, .L196
	add	r0, r4, #0
	bl	LoadSpritePalette
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadSpritePalette
	b	.L164
.L197:
	.align	2, 0
.L196:
	.word	sSpritePalettes_HealthBoxHealthBar
.L165:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L167	@cond_branch
	cmp	r4, #0x2
	bne	.L168	@cond_branch
	ldr	r0, .L198
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r0, .L198+0x4
	bl	LoadCompressedSpriteSheetUsingHeap
	b	.L164
.L199:
	.align	2, 0
.L198:
	.word	gBattleTypeFlags
	.word	sSpriteSheet_SafariHealthbox
.L169:
	ldr	r0, .L200
	bl	LoadCompressedSpriteSheetUsingHeap
	b	.L164
.L201:
	.align	2, 0
.L200:
	.word	sSpriteSheet_SinglesPlayerHealthbox
.L168:
	cmp	r4, #0x3
	bne	.L172	@cond_branch
	ldr	r0, .L202
	bl	LoadCompressedSpriteSheetUsingHeap
	b	.L164
.L203:
	.align	2, 0
.L202:
	.word	sSpriteSheet_SinglesOpponentHealthbox
.L172:
	cmp	r4, #0x4
	bne	.L174	@cond_branch
	ldr	r0, .L204
	ldrb	r0, [r0]
	b	.L195
.L205:
	.align	2, 0
.L204:
	.word	gBattlerPositions
.L174:
	cmp	r4, #0x5
	bne	.L193	@cond_branch
	ldr	r0, .L206
	ldrb	r0, [r0, #0x1]
	b	.L195
.L207:
	.align	2, 0
.L206:
	.word	gBattlerPositions
.L167:
	cmp	r4, #0x2
	bne	.L179	@cond_branch
	ldr	r0, .L208
	bl	LoadCompressedSpriteSheetUsingHeap
	b	.L164
.L209:
	.align	2, 0
.L208:
	.word	sSpriteSheets_DoublesPlayerHealthbox
.L179:
	cmp	r4, #0x3
	bne	.L181	@cond_branch
	ldr	r0, .L210
	bl	LoadCompressedSpriteSheetUsingHeap
	b	.L164
.L211:
	.align	2, 0
.L210:
	.word	sSpriteSheets_DoublesPlayerHealthbox+0x8
.L181:
	cmp	r4, #0x4
	bne	.L183	@cond_branch
	ldr	r0, .L212
	bl	LoadCompressedSpriteSheetUsingHeap
	b	.L164
.L213:
	.align	2, 0
.L212:
	.word	sSpriteSheets_DoublesOpponentHealthbox
.L183:
	cmp	r4, #0x5
	bne	.L185	@cond_branch
	ldr	r0, .L214
	bl	LoadCompressedSpriteSheetUsingHeap
	b	.L164
.L215:
	.align	2, 0
.L214:
	.word	sSpriteSheets_DoublesOpponentHealthbox+0x8
.L185:
	cmp	r4, #0x6
	bne	.L187	@cond_branch
	ldr	r0, .L216
	ldrb	r0, [r0]
	b	.L195
.L217:
	.align	2, 0
.L216:
	.word	gBattlerPositions
.L187:
	cmp	r4, #0x7
	bne	.L189	@cond_branch
	ldr	r0, .L218
	ldrb	r0, [r0, #0x1]
	b	.L195
.L219:
	.align	2, 0
.L218:
	.word	gBattlerPositions
.L189:
	cmp	r4, #0x8
	bne	.L191	@cond_branch
	ldr	r0, .L220
	ldrb	r0, [r0, #0x2]
	b	.L195
.L221:
	.align	2, 0
.L220:
	.word	gBattlerPositions
.L191:
	cmp	r5, #0x9
	bne	.L193	@cond_branch
	ldr	r0, .L222
	ldrb	r0, [r0, #0x3]
.L195:
	lsl	r0, r0, #0x3
	ldr	r1, .L222+0x4
	add	r0, r0, r1
	bl	LoadCompressedSpriteSheetUsingHeap
	b	.L164
.L223:
	.align	2, 0
.L222:
	.word	gBattlerPositions
	.word	sSpriteSheets_HealthBar
.L193:
	mov	r6, #0x1
.L164:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 BattleLoadAllHealthBoxesGfx,.Lfe22-BattleLoadAllHealthBoxesGfx
	.align	2, 0
	.globl	LoadBattleBarGfx
	.type	 LoadBattleBarGfx,function
	.thumb_func
LoadBattleBarGfx:
	push	{lr}
	ldr	r0, .L225
	ldr	r1, .L225+0x4
	ldr	r1, [r1]
	mov	r2, #0xba
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	LZDecompressWram
	pop	{r0}
	bx	r0
.L226:
	.align	2, 0
.L225:
	.word	gInterfaceGfx_HPNumbers
	.word	gMonSpritesGfxPtr
.Lfe23:
	.size	 LoadBattleBarGfx,.Lfe23-LoadBattleBarGfx
	.align	2, 0
	.globl	BattleInitAllSprites
	.type	 BattleInitAllSprites,function
	.thumb_func
BattleInitAllSprites:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r6, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0x6
	bls	.LCB1988
	b	.L228	@long jump
.LCB1988:
	lsl	r0, r0, #0x2
	ldr	r1, .L254
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L255:
	.align	2, 0
.L254:
	.word	.L248
	.align	2, 0
	.align	2, 0
.L248:
	.word	.L229
	.word	.L230
	.word	.L250
	.word	.L234
	.word	.L238
	.word	.L242
	.word	.L247
.L229:
	bl	ClearSpritesBattlerHealthboxAnimData
	b	.L250
.L230:
	ldrb	r0, [r4]
	bl	BattleLoadAllHealthBoxesGfx
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2018
	b	.L251	@long jump
.LCB2018:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L228
.L234:
	ldr	r0, .L256
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L235	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L235	@cond_branch
	bl	CreateSafariPlayerHealthboxSprites
	b	.L252
.L257:
	.align	2, 0
.L256:
	.word	gBattleTypeFlags
.L235:
	ldrb	r0, [r4]
	bl	CreateBattlerHealthboxSprites
.L252:
	ldr	r2, .L258
	ldrb	r1, [r4]
	add	r1, r1, r2
	strb	r0, [r1]
	b	.L253
.L259:
	.align	2, 0
.L258:
	.word	gHealthboxSpriteIds
.L238:
	ldrb	r0, [r4]
	bl	InitBattlerHealthboxCoords
	ldr	r0, .L260
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L239	@cond_branch
	ldr	r0, .L260+0x4
	add	r0, r1, r0
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	DummyBattleInterfaceFunc
	b	.L253
.L261:
	.align	2, 0
.L260:
	.word	gBattlerPositions
	.word	gHealthboxSpriteIds
.L239:
	ldr	r0, .L262
	add	r0, r1, r0
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	DummyBattleInterfaceFunc
	b	.L253
.L263:
	.align	2, 0
.L262:
	.word	gHealthboxSpriteIds
.L242:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L243	@cond_branch
	ldr	r0, .L264
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L245	@cond_branch
	ldr	r0, .L264+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L264+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L264+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	b	.L245
.L265:
	.align	2, 0
.L264:
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L243:
	ldr	r0, .L266
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L266+0x4
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L266+0x8
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
.L245:
	ldr	r1, .L266
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
.L253:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L266+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L228	@cond_branch
.L251:
	mov	r0, #0x0
	strb	r0, [r4]
.L250:
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L228
.L267:
	.align	2, 0
.L266:
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlersCount
.L247:
	bl	LoadAndCreateEnemyShadowSprites
	bl	BufferBattlePartyCurrentOrder
	mov	r6, #0x1
.L228:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 BattleInitAllSprites,.Lfe24-BattleInitAllSprites
	.align	2, 0
	.globl	ClearSpritesHealthboxAnimData
	.type	 ClearSpritesHealthboxAnimData,function
	.thumb_func
ClearSpritesHealthboxAnimData:
	push	{r4, lr}
	ldr	r4, .L269
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	mov	r1, #0x0
	mov	r2, #0x30
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	pop	{r4}
	pop	{r0}
	bx	r0
.L270:
	.align	2, 0
.L269:
	.word	gBattleSpritesDataPtr
.Lfe25:
	.size	 ClearSpritesHealthboxAnimData,.Lfe25-ClearSpritesHealthboxAnimData
	.align	2, 0
	.type	 ClearSpritesBattlerHealthboxAnimData,function
	.thumb_func
ClearSpritesBattlerHealthboxAnimData:
	push	{lr}
	bl	ClearSpritesHealthboxAnimData
	ldr	r0, .L272
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	pop	{r0}
	bx	r0
.L273:
	.align	2, 0
.L272:
	.word	gBattleSpritesDataPtr
.Lfe26:
	.size	 ClearSpritesBattlerHealthboxAnimData,.Lfe26-ClearSpritesBattlerHealthboxAnimData
	.align	2, 0
	.globl	CopyAllBattleSpritesInvisibilities
	.type	 CopyAllBattleSpritesInvisibilities,function
	.thumb_func
CopyAllBattleSpritesInvisibilities:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r4, #0x0
	ldr	r5, .L280
	ldrb	r0, [r5]
	cmp	r4, r0
	bge	.L276	@cond_branch
	ldr	r0, .L280+0x4
	mov	r9, r0
	mov	r0, #0x1
	mov	ip, r0
	mov	r0, #0x2
	neg	r0, r0
	mov	r8, r0
	ldr	r7, .L280+0x8
	ldr	r6, .L280+0xc
.L278:
	ldr	r0, [r7]
	ldr	r0, [r0]
	lsl	r3, r4, #0x2
	add	r3, r3, r0
	add	r0, r4, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	mov	r0, ip
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, r8
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	cmp	r4, r0
	blt	.L278	@cond_branch
.L276:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L281:
	.align	2, 0
.L280:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	gBattlerSpriteIds
.Lfe27:
	.size	 CopyAllBattleSpritesInvisibilities,.Lfe27-CopyAllBattleSpritesInvisibilities
	.align	2, 0
	.globl	CopyBattleSpriteInvisibility
	.type	 CopyBattleSpriteInvisibility,function
	.thumb_func
CopyBattleSpriteInvisibility:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L283
	ldr	r1, [r1]
	ldr	r1, [r1]
	lsl	r3, r0, #0x2
	add	r3, r3, r1
	ldr	r2, .L283+0x4
	ldr	r1, .L283+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	ldrb	r2, [r3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bx	lr
.L284:
	.align	2, 0
.L283:
	.word	gBattleSpritesDataPtr
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe28:
	.size	 CopyBattleSpriteInvisibility,.Lfe28-CopyBattleSpriteInvisibility
	.align	2, 0
	.globl	HandleSpeciesGfxDataChange
	.type	 HandleSpeciesGfxDataChange,function
	.thumb_func
HandleSpeciesGfxDataChange:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r2, #0xff
	beq	.LCB2423
	b	.L286	@long jump
.LCB2423:
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L298
	mov	r1, r9
	lsl	r1, r1, #0x1
	add	r0, r1, r0
	str	r0, [sp, #0xc]
	ldrh	r0, [r0]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r3, .L298+0x4
	add	r0, r0, r3
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r1, [sp, #0xc]
	ldrh	r0, [r1]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r3, .L298+0x4
	add	r0, r0, r3
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldr	r1, [sp, #0xc]
	ldrh	r0, [r1]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r3, .L298+0x4
	add	r0, r0, r3
	mov	r1, #0x1
	bl	GetMonData
	add	r7, r0, #0
	mov	r1, r8
	lsl	r0, r1, #0x3
	ldr	r1, .L298+0x8
	add	r0, r0, r1
	ldr	r4, .L298+0xc
	ldr	r1, [r4]
	mov	r2, sl
	lsl	r5, r2, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r5
	ldr	r1, [r1]
	mov	r2, r8
	ldr	r3, [sp, #0x4]
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
	ldr	r0, [r4]
	add	r0, r0, #0x4
	add	r0, r0, r5
	ldr	r2, [r0]
	ldr	r5, .L298+0x10
	ldr	r4, .L298+0x14
	add	r4, r4, r9
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	ldr	r1, .L298+0x18
	add	r0, r0, r1
	ldr	r1, .L298+0x1c
	str	r2, [r1]
	str	r0, [r1, #0x4]
	ldr	r0, .L298+0x20
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r3, r9
	lsl	r0, r3, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	sl, r0
	mov	r0, r8
	add	r1, r7, #0
	ldr	r2, [sp, #0x4]
	bl	GetMonSpritePalFromSpeciesAndPersonality
	add	r6, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	AllocZeroed
	add	r7, r0, #0
	add	r0, r6, #0
	add	r1, r7, #0
	bl	LZDecompressWram
	add	r0, r7, #0
	mov	r1, sl
	mov	r2, #0x20
	bl	LoadPalette
	add	r0, r7, #0
	bl	Free
	mov	r0, r9
	bl	GetBattlerSpriteDefault_Y
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x22]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L298+0x24
	add	r1, r1, r9
	ldrb	r1, [r1]
	bl	StartSpriteAnim
	ldr	r2, [sp, #0xc]
	ldrh	r0, [r2]
	mov	r3, #0x64
	mul	r0, r0, r3
	ldr	r1, .L298+0x4
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, r8
	mul	r2, r2, r1
	ldr	r1, .L298+0x28
	add	r2, r2, r1
	mov	r1, #0x2
	bl	SetMonData
	ldr	r4, .L298+0x2c
	add	r4, r4, r9
	ldrb	r0, [r4]
	ldr	r2, [sp, #0xc]
	ldrh	r1, [r2]
	mov	r3, #0x64
	mul	r1, r1, r3
	ldr	r2, .L298+0x4
	add	r1, r1, r2
	bl	UpdateNickInHealthbox
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	TryAddPokeballIconToHealthbox
	b	.L287
.L299:
	.align	2, 0
.L298:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	0x6010000
	.word	0x40000d4
	.word	-0x7bfffe00
	.word	gBattleMonForms
	.word	gSpeciesNames
	.word	gHealthboxSpriteIds
.L286:
	cmp	r2, #0
	beq	.L288	@cond_branch
	ldr	r0, .L300
	mov	r3, r9
	add	r5, r3, r0
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r6, .L300+0x4
	add	r0, r0, r6
	ldr	r4, .L300+0x8
	ldr	r1, [r4]
	ldr	r1, [r1, #0x8]
	ldrb	r1, [r1]
	bl	StartSpriteAnim
	mov	r1, r9
	lsl	r0, r1, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	mov	sl, r0
	ldr	r2, .L300+0xc
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrh	r1, [r0]
	lsl	r1, r1, #0x5
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r1, sl
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L300+0x10
	add	r1, r1, r9
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r0, [r4]
	ldr	r1, [r0]
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L289	@cond_branch
	ldr	r3, .L300+0x14
	mov	r0, sl
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	mov	r3, sl
	lsl	r1, r3, #0x1
	ldr	r0, .L300+0x18
	add	r0, r1, r0
	ldr	r2, .L300+0x1c
	add	r1, r1, r2
	ldr	r2, .L300+0x20
	bl	CpuSet
.L289:
	mov	r0, r9
	bl	GetBattlerSpriteDefault_Y
	ldrb	r2, [r5]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x22]
	b	.L287
.L301:
	.align	2, 0
.L300:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	gBattleStruct
	.word	gBattleMonForms
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
.L288:
	mov	r0, r9
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, [sp]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L291	@cond_branch
	ldr	r1, .L302
	ldr	r2, [sp]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L302+0x4
	b	.L296
.L303:
	.align	2, 0
.L302:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L291:
	ldr	r1, .L304
	ldr	r3, [sp]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L304+0x4
.L296:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r0, r9
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L293	@cond_branch
	ldr	r0, .L304
	mov	r1, r9
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r5, .L304+0x4
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldrh	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	add	r7, r0, #0
	mov	r2, r8
	lsl	r0, r2, #0x3
	ldr	r1, .L304+0x8
	add	r0, r0, r1
	ldr	r1, .L304+0xc
	ldr	r1, [r1]
	mov	r3, sl
	lsl	r5, r3, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r5
	ldr	r1, [r1]
	ldr	r2, .L304+0x10
	mov	r3, r9
	lsl	r4, r3, #0x2
	add	r2, r4, r2
	ldr	r3, [r2]
	mov	r2, r8
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
	b	.L297
.L305:
	.align	2, 0
.L304:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
	.word	gTransformedPersonalities
.L293:
	ldr	r0, .L306
	mov	r1, r9
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r5, .L306+0x4
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldrh	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	add	r7, r0, #0
	mov	r2, r8
	lsl	r0, r2, #0x3
	ldr	r1, .L306+0x8
	add	r0, r0, r1
	ldr	r1, .L306+0xc
	ldr	r1, [r1]
	mov	r3, sl
	lsl	r5, r3, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r5
	ldr	r1, [r1]
	ldr	r2, .L306+0x10
	mov	r3, r9
	lsl	r4, r3, #0x2
	add	r2, r4, r2
	ldr	r3, [r2]
	mov	r2, r8
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
.L297:
	str	r4, [sp, #0x14]
	ldr	r0, .L306+0xc
	ldr	r0, [r0]
	add	r0, r0, #0x4
	add	r0, r0, r5
	ldr	r2, [r0]
	ldr	r0, .L306+0x14
	add	r0, r0, r9
	str	r0, [sp, #0x10]
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L306+0x18
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	ldr	r1, .L306+0x1c
	add	r0, r0, r1
	ldr	r1, .L306+0x20
	str	r2, [r1]
	str	r0, [r1, #0x4]
	ldr	r0, .L306+0x24
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r2, r9
	lsl	r0, r2, #0x14
	mov	r3, #0x80
	lsl	r3, r3, #0x11
	add	r0, r0, r3
	lsr	r0, r0, #0x10
	mov	sl, r0
	mov	r0, r8
	add	r1, r7, #0
	ldr	r2, [sp, #0x4]
	bl	GetMonSpritePalFromSpeciesAndPersonality
	add	r6, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	AllocZeroed
	add	r7, r0, #0
	add	r0, r6, #0
	add	r1, r7, #0
	bl	LZDecompressWram
	add	r0, r7, #0
	mov	r1, sl
	mov	r2, #0x20
	bl	LoadPalette
	add	r0, r7, #0
	bl	Free
	ldr	r0, .L306+0x28
	cmp	r8, r0
	bne	.L295	@cond_branch
	ldr	r5, .L306+0x2c
	ldr	r1, [r5]
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r1, r1, r4
	add	r0, r6, #0
	bl	LZDecompressWram
	ldr	r0, .L306+0x30
	ldr	r1, [sp]
	add	r0, r1, r0
	ldrb	r1, [r0]
	lsl	r1, r1, #0x5
	add	r1, r1, r4
	ldr	r0, [r5]
	add	r0, r0, r1
	mov	r1, sl
	mov	r2, #0x20
	bl	LoadPalette
.L295:
	ldr	r3, .L306+0x34
	mov	r0, sl
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	mov	r2, sl
	lsl	r1, r2, #0x1
	ldr	r0, .L306+0x38
	add	r0, r1, r0
	ldr	r2, .L306+0x3c
	add	r1, r1, r2
	ldr	r2, .L306+0x40
	bl	CpuSet
	ldr	r0, .L306+0x44
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldr	r3, [sp, #0x14]
	add	r0, r3, r0
	mov	r1, r8
	strh	r1, [r0, #0x2]
	ldr	r0, .L306+0x30
	mov	r2, r9
	add	r4, r2, r0
	ldr	r3, [sp]
	add	r0, r3, r0
	ldrb	r0, [r0]
	strb	r0, [r4]
	mov	r0, r9
	bl	GetBattlerSpriteDefault_Y
	ldr	r1, [sp, #0x10]
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r2, .L306+0x18
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x22]
	ldr	r3, [sp, #0x10]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r4]
	bl	StartSpriteAnim
.L287:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L307:
	.align	2, 0
.L306:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
	.word	gTransformedPersonalities
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0x6010000
	.word	0x40000d4
	.word	-0x7bfffe00
	.word	0x181
	.word	gBattleStruct
	.word	gBattleMonForms
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
	.word	gBattleSpritesDataPtr
.Lfe29:
	.size	 HandleSpeciesGfxDataChange,.Lfe29-HandleSpeciesGfxDataChange
	.align	2, 0
	.globl	BattleLoadSubstituteOrMonSpriteGfx
	.type	 BattleLoadSubstituteOrMonSpriteGfx,function
	.thumb_func
BattleLoadSubstituteOrMonSpriteGfx:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L309	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L310	@cond_branch
	ldr	r0, .L320
	ldr	r1, .L320+0x4
	ldr	r1, [r1]
	lsl	r4, r5, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r4
	ldr	r1, [r1]
	bl	LZDecompressVram
	b	.L311
.L321:
	.align	2, 0
.L320:
	.word	gSubstituteDollGfx
	.word	gMonSpritesGfxPtr
.L310:
	ldr	r0, .L322
	ldr	r1, .L322+0x4
	ldr	r1, [r1]
	lsl	r4, r5, #0x2
	add	r1, r1, #0x4
	add	r1, r1, r4
	ldr	r1, [r1]
	bl	LZDecompressVram
.L311:
	mov	r3, #0x1
	lsl	r6, r6, #0x4
	ldr	r7, .L322+0x8
	ldr	r0, .L322+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4
	add	r4, r0, r4
	ldr	r2, .L322+0xc
	ldr	r5, .L322+0x10
.L315:
	ldr	r0, [r4]
	lsl	r1, r3, #0xb
	add	r1, r0, r1
	str	r0, [r2]
	str	r1, [r2, #0x4]
	str	r5, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L315	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r1, r6, r0
	add	r0, r7, #0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L317
.L323:
	.align	2, 0
.L322:
	.word	gSubstituteDollTilemap
	.word	gMonSpritesGfxPtr
	.word	gSubstituteDollPal
	.word	0x40000d4
	.word	-0x7bfffe00
.L309:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L318	@cond_branch
	ldr	r1, .L324
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L324+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	BattleLoadOpponentMonSpriteGfx
	b	.L317
.L325:
	.align	2, 0
.L324:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L318:
	ldr	r1, .L326
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L326+0x4
	add	r0, r0, r1
	add	r1, r6, #0
	bl	BattleLoadPlayerMonSpriteGfx
.L317:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L327:
	.align	2, 0
.L326:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe30:
	.size	 BattleLoadSubstituteOrMonSpriteGfx,.Lfe30-BattleLoadSubstituteOrMonSpriteGfx
	.align	2, 0
	.globl	LoadBattleMonGfxAndAnimate
	.type	 LoadBattleMonGfxAndAnimate,function
	.thumb_func
LoadBattleMonGfxAndAnimate:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	BattleLoadSubstituteOrMonSpriteGfx
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L332
	add	r4, r0, r1
	ldr	r0, .L332+0x4
	add	r0, r6, r0
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	StartSpriteAnim
	cmp	r5, #0
	bne	.L329	@cond_branch
	add	r0, r6, #0
	bl	GetSubstituteSpriteDefault_Y
	b	.L331
.L333:
	.align	2, 0
.L332:
	.word	gSprites
	.word	gBattleMonForms
.L329:
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
.L331:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 LoadBattleMonGfxAndAnimate,.Lfe31-LoadBattleMonGfxAndAnimate
	.align	2, 0
	.globl	TrySetBehindSubstituteSpriteBit
	.type	 TrySetBehindSubstituteSpriteBit,function
	.thumb_func
TrySetBehindSubstituteSpriteBit:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xa4
	bne	.L335	@cond_branch
	ldr	r0, .L336
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
.L335:
	pop	{r0}
	bx	r0
.L337:
	.align	2, 0
.L336:
	.word	gBattleSpritesDataPtr
.Lfe32:
	.size	 TrySetBehindSubstituteSpriteBit,.Lfe32-TrySetBehindSubstituteSpriteBit
	.align	2, 0
	.globl	ClearBehindSubstituteBit
	.type	 ClearBehindSubstituteBit,function
	.thumb_func
ClearBehindSubstituteBit:
	lsl	r0, r0, #0x18
	ldr	r1, .L339
	ldr	r1, [r1]
	ldr	r1, [r1]
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.L340:
	.align	2, 0
.L339:
	.word	gBattleSpritesDataPtr
.Lfe33:
	.size	 ClearBehindSubstituteBit,.Lfe33-ClearBehindSubstituteBit
	.align	2, 0
	.globl	HandleLowHpMusicChange
	.type	 HandleLowHpMusicChange,function
	.thumb_func
HandleLowHpMusicChange:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	add	r7, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L342	@cond_branch
	ldr	r7, .L349
	ldr	r0, [r7]
	ldr	r2, [r0]
	lsl	r4, r6, #0x2
	add	r0, r4, r2
	ldrb	r1, [r0]
	mov	r5, #0x2
	mov	r3, #0x2
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L345	@cond_branch
	add	r0, r6, #0
	eor	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L344	@cond_branch
	mov	r0, #0x53
	bl	PlaySE
.L344:
	ldr	r0, [r7]
	ldr	r1, [r0]
	add	r1, r4, r1
	ldrb	r0, [r1]
	orr	r0, r0, r5
	strb	r0, [r1]
	b	.L345
.L350:
	.align	2, 0
.L349:
	.word	gBattleSpritesDataPtr
.L342:
	ldr	r4, .L351
	ldr	r0, [r4]
	ldr	r0, [r0]
	lsl	r1, r6, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L346	@cond_branch
	mov	r0, #0x53
	bl	m4aSongNumStop
	b	.L345
.L352:
	.align	2, 0
.L351:
	.word	gBattleSpritesDataPtr
.L346:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L345	@cond_branch
	ldr	r1, [r4]
	mov	r0, #0x2
	eor	r7, r7, r0
	ldr	r1, [r1]
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L345	@cond_branch
	mov	r0, #0x53
	bl	m4aSongNumStop
.L345:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 HandleLowHpMusicChange,.Lfe34-HandleLowHpMusicChange
	.align	2, 0
	.globl	BattleStopLowHpSound
	.type	 BattleStopLowHpSound,function
	.thumb_func
BattleStopLowHpSound:
	push	{r4, r5, r6, lr}
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L355
	ldr	r0, [r5]
	ldr	r0, [r0]
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r6, #0x3
	neg	r6, r6
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L354	@cond_branch
	ldr	r2, [r5]
	mov	r0, #0x2
	add	r1, r4, #0
	eor	r1, r1, r0
	ldr	r0, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
.L354:
	mov	r0, #0x53
	bl	m4aSongNumStop
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L356:
	.align	2, 0
.L355:
	.word	gBattleSpritesDataPtr
.Lfe35:
	.size	 BattleStopLowHpSound,.Lfe35-BattleStopLowHpSound
	.align	2, 0
	.type	 GetMonHPBarLevel,function
	.thumb_func
GetMonHPBarLevel:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 GetMonHPBarLevel,.Lfe36-GetMonHPBarLevel
	.align	2, 0
	.globl	HandleBattleLowHpMusicChange
	.type	 HandleBattleLowHpMusicChange,function
	.thumb_func
HandleBattleLowHpMusicChange:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L362
	ldr	r1, .L362+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L359	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r5, .L362+0x8
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	GetPartyIdFromBattlePartyId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, r9
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	GetPartyIdFromBattlePartyId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r7, #0x64
	mov	r0, r4
	mul	r0, r0, r7
	ldr	r6, .L362+0xc
	add	r4, r0, r6
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L360	@cond_branch
	add	r0, r4, #0
	mov	r1, r8
	bl	HandleLowHpMusicChange
.L360:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L359	@cond_branch
	mov	r0, r5
	mul	r0, r0, r7
	add	r4, r0, r6
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L359	@cond_branch
	add	r0, r4, #0
	mov	r1, r9
	bl	HandleLowHpMusicChange
.L359:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	gMain
	.word	0x439
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe37:
	.size	 HandleBattleLowHpMusicChange,.Lfe37-HandleBattleLowHpMusicChange
	.align	2, 0
	.globl	SetBattlerSpriteAffineMode
	.type	 SetBattlerSpriteAffineMode,function
	.thumb_func
SetBattlerSpriteAffineMode:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r0, .L373
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L366	@cond_branch
	mov	r0, #0x3
	mov	sl, r8
	mov	r1, sl
	and	r1, r1, r0
	mov	sl, r1
	mov	r6, #0x0
	mov	r2, #0x3f
	neg	r2, r2
	mov	r9, r2
.L368:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L367	@cond_branch
	ldr	r4, .L373+0x4
	ldr	r0, .L373+0x8
	add	r3, r5, r0
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	mov	r7, #0x4
	neg	r7, r7
	add	r2, r7, #0
	and	r1, r1, r2
	mov	r2, sl
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r7, r8
	cmp	r7, #0
	bne	.L370	@cond_branch
	ldr	r0, .L373+0xc
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	add	r2, r6, r2
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r2, #0x6]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x3]
	mov	r2, r9
	and	r1, r1, r2
	strb	r1, [r0, #0x3]
	b	.L367
.L374:
	.align	2, 0
.L373:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleSpritesDataPtr
.L370:
	ldrb	r0, [r3]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r0, .L375
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	add	r0, r6, r0
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r0, [r2, #0x3]
	mov	r3, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x3]
.L367:
	add	r6, r6, #0xc
	add	r5, r5, #0x1
	ldr	r0, .L375+0x4
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L368	@cond_branch
.L366:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	gBattleSpritesDataPtr
	.word	gBattlersCount
.Lfe38:
	.size	 SetBattlerSpriteAffineMode,.Lfe38-SetBattlerSpriteAffineMode
	.align	2, 0
	.globl	LoadAndCreateEnemyShadowSprites
	.type	 LoadAndCreateEnemyShadowSprites,function
	.thumb_func
LoadAndCreateEnemyShadowSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L379
	bl	LoadCompressedSpriteSheetUsingHeap
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L379+0x4
	mov	r8, r0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x8
	mov	r0, #0xe8
	lsl	r0, r0, #0xd
	add	r2, r2, r0
	asr	r2, r2, #0x10
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, #0xc8
	bl	CreateSprite
	ldr	r6, .L379+0x8
	ldr	r1, [r6]
	ldr	r2, [r1, #0x4]
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	strb	r0, [r2, #0x7]
	ldr	r7, .L379+0xc
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r1, r1, r0
	ldrb	r1, [r1, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r5, [r0, #0x2e]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L378	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x8
	mov	r0, #0xe8
	lsl	r0, r0, #0xd
	add	r2, r2, r0
	asr	r2, r2, #0x10
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, #0xc8
	bl	CreateSprite
	ldr	r1, [r6]
	ldr	r2, [r1, #0x4]
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	strb	r0, [r2, #0x7]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r1, r1, r0
	ldrb	r1, [r1, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r5, [r0, #0x2e]
.L378:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L380:
	.align	2, 0
.L379:
	.word	gSpriteSheet_EnemyShadow
	.word	gSpriteTemplate_EnemyShadow
	.word	gBattleSpritesDataPtr
	.word	gSprites
.Lfe39:
	.size	 LoadAndCreateEnemyShadowSprites,.Lfe39-LoadAndCreateEnemyShadowSprites
	.align	2, 0
	.type	 SpriteCB_EnemyShadow,function
	.thumb_func
SpriteCB_EnemyShadow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	mov	r0, #0x0
	mov	r8, r0
	ldrh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L389
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L389+0x4
	add	r7, r0, r1
	add	r6, r7, #0
	add	r6, r6, #0x3e
	ldrb	r1, [r6]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L383	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L382	@cond_branch
.L383:
	ldr	r0, .L389+0x8
	str	r0, [r5, #0x1c]
	b	.L381
.L390:
	.align	2, 0
.L389:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	SpriteCB_SetInvisible
.L382:
	ldr	r0, .L391
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L385	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L384	@cond_branch
.L385:
	mov	r0, #0x1
	mov	r8, r0
	ldr	r2, .L391+0x4
	lsl	r4, r4, #0x2
	b	.L386
.L392:
	.align	2, 0
.L391:
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
.L384:
	ldr	r2, .L393
	ldr	r0, [r2]
	ldr	r0, [r0]
	lsl	r1, r4, #0x2
	add	r3, r1, r0
	ldrh	r0, [r3, #0x2]
	add	r4, r1, #0
	cmp	r0, #0
	beq	.L386	@cond_branch
	ldr	r0, .L393+0x4
	ldrh	r1, [r3, #0x2]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L386	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L386:
	ldr	r0, [r2]
	ldr	r0, [r0]
	add	r0, r4, r0
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L388	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L388:
	ldrh	r0, [r7, #0x20]
	strh	r0, [r5, #0x20]
	ldrh	r0, [r7, #0x24]
	strh	r0, [r5, #0x24]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	mov	r0, r8
	lsl	r3, r0, #0x2
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
.L381:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L394:
	.align	2, 0
.L393:
	.word	gBattleSpritesDataPtr
	.word	gEnemyMonElevation
.Lfe40:
	.size	 SpriteCB_EnemyShadow,.Lfe40-SpriteCB_EnemyShadow
	.align	2, 0
	.globl	SpriteCB_SetInvisible
	.type	 SpriteCB_SetInvisible,function
	.thumb_func
SpriteCB_SetInvisible:
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.Lfe41:
	.size	 SpriteCB_SetInvisible,.Lfe41-SpriteCB_SetInvisible
	.align	2, 0
	.globl	SetBattlerShadowSpriteCallback
	.type	 SetBattlerShadowSpriteCallback,function
	.thumb_func
SetBattlerShadowSpriteCallback:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L396	@cond_branch
	ldr	r0, .L402
	ldr	r3, [r0]
	ldr	r1, [r3]
	lsl	r0, r4, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L398	@cond_branch
	add	r5, r0, #0
.L398:
	ldr	r0, .L402+0x4
	add	r0, r5, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L399	@cond_branch
	ldr	r2, .L402+0x8
	ldr	r1, [r3, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L402+0xc
	b	.L401
.L403:
	.align	2, 0
.L402:
	.word	gBattleSpritesDataPtr
	.word	gEnemyMonElevation
	.word	gSprites
	.word	SpriteCB_EnemyShadow
.L399:
	ldr	r2, .L404
	ldr	r1, [r3, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L404+0x4
.L401:
	str	r1, [r0]
.L396:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L405:
	.align	2, 0
.L404:
	.word	gSprites
	.word	SpriteCB_SetInvisible
.Lfe42:
	.size	 SetBattlerShadowSpriteCallback,.Lfe42-SetBattlerShadowSpriteCallback
	.align	2, 0
	.globl	HideBattlerShadowSprite
	.type	 HideBattlerShadowSprite,function
	.thumb_func
HideBattlerShadowSprite:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L407
	ldr	r1, .L407+0x4
	ldr	r1, [r1]
	ldr	r3, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r1, [r1, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L407+0x8
	str	r1, [r0]
	bx	lr
.L408:
	.align	2, 0
.L407:
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_SetInvisible
.Lfe43:
	.size	 HideBattlerShadowSprite,.Lfe43-HideBattlerShadowSprite
	.align	2, 0
	.globl	BattleInterfaceSetWindowPals
	.type	 BattleInterfaceSetWindowPals,function
	.thumb_func
BattleInterfaceSetWindowPals:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L438
	mov	r7, #0xf0
	lsl	r7, r7, #0x8
	mov	r5, #0x8
.L413:
	mov	r4, #0xf
.L417:
	ldrh	r1, [r2]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L418	@cond_branch
	add	r0, r7, #0
	orr	r0, r0, r1
	strh	r0, [r2]
.L418:
	ldrh	r1, [r2]
	mov	r6, #0xf0
	lsl	r6, r6, #0x4
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L419	@cond_branch
	add	r0, r6, #0
	orr	r0, r0, r1
	strh	r0, [r2]
.L419:
	ldrh	r1, [r2]
	mov	r3, #0xf0
	mov	r0, #0xf0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L420	@cond_branch
	add	r0, r1, #0
	orr	r0, r0, r3
	strh	r0, [r2]
.L420:
	ldrh	r1, [r2]
	mov	r3, #0xf
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L416	@cond_branch
	add	r0, r1, #0
	orr	r0, r0, r3
	strh	r0, [r2]
.L416:
	add	r2, r2, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L417	@cond_branch
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L413	@cond_branch
	ldr	r2, .L438+0x4
	mov	r5, #0x0
	mov	r7, #0xf0
	lsl	r7, r7, #0x8
.L427:
	add	r3, r5, #0x1
	mov	r4, #0xf
.L431:
	ldrh	r1, [r2]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L432	@cond_branch
	mov	r5, #0xc0
	lsl	r5, r5, #0x7
	add	r0, r5, #0
	orr	r0, r0, r1
	strh	r0, [r2]
.L432:
	ldrh	r1, [r2]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L433	@cond_branch
	mov	r5, #0xc0
	lsl	r5, r5, #0x3
	add	r0, r5, #0
	orr	r0, r0, r1
	strh	r0, [r2]
.L433:
	ldrh	r1, [r2]
	mov	r0, #0xf0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L434	@cond_branch
	mov	r0, #0x60
	orr	r0, r0, r1
	strh	r0, [r2]
.L434:
	ldrh	r1, [r2]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L430	@cond_branch
	mov	r0, #0x6
	orr	r0, r0, r1
	strh	r0, [r2]
.L430:
	add	r2, r2, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L431	@cond_branch
	add	r5, r3, #0
	cmp	r5, #0x11
	ble	.L427	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L439:
	.align	2, 0
.L438:
	.word	0x6000240
	.word	0x6000600
.Lfe44:
	.size	 BattleInterfaceSetWindowPals,.Lfe44-BattleInterfaceSetWindowPals
	.align	2, 0
	.globl	ClearTemporarySpeciesSpriteData
	.type	 ClearTemporarySpeciesSpriteData,function
	.thumb_func
ClearTemporarySpeciesSpriteData:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r0, .L442
	ldr	r0, [r0]
	ldr	r2, [r0]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	mov	r3, #0x0
	mov	r2, #0x0
	strh	r2, [r0, #0x2]
	ldr	r0, .L442+0x4
	add	r0, r4, r0
	strb	r3, [r0]
	cmp	r1, #0
	bne	.L441	@cond_branch
	add	r0, r4, #0
	bl	ClearBehindSubstituteBit
.L441:
	pop	{r4}
	pop	{r0}
	bx	r0
.L443:
	.align	2, 0
.L442:
	.word	gBattleSpritesDataPtr
	.word	gBattleMonForms
.Lfe45:
	.size	 ClearTemporarySpeciesSpriteData,.Lfe45-ClearTemporarySpeciesSpriteData
	.align	2, 0
	.globl	AllocateMonSpritesGfx
	.type	 AllocateMonSpritesGfx,function
	.thumb_func
AllocateMonSpritesGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	ldr	r4, .L455
	str	r6, [r4]
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	bl	AllocZeroed
	str	r0, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
.L448:
	ldr	r0, .L455
	ldr	r1, [r0]
	lsl	r4, r6, #0x2
	add	r2, r1, #0x4
	add	r2, r2, r4
	lsl	r3, r6, #0xd
	ldr	r0, [r1]
	add	r0, r0, r3
	str	r0, [r2]
	lsl	r3, r6, #0x1
	add	r0, r3, r6
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldr	r2, .L455+0x4
	add	r1, r1, #0x14
	add	r0, r0, r2
	ldmia	r0!, {r2, r5, r7}
	stmia	r1!, {r2, r5, r7}
	ldmia	r0!, {r2, r5, r7}
	stmia	r1!, {r2, r5, r7}
	mov	r5, #0x0
	mov	r9, r3
	lsl	r0, r6, #0x5
	mov	r8, r0
	add	r1, r6, #0x1
	mov	sl, r1
	mov	ip, r8
	add	r7, r4, #0
.L452:
	ldr	r2, .L455
	ldr	r1, [r2]
	lsl	r4, r5, #0x3
	add	r4, r4, ip
	add	r3, r1, #0
	add	r3, r3, #0x74
	add	r3, r3, r4
	add	r0, r1, #0x4
	add	r0, r0, r7
	lsl	r2, r5, #0xb
	ldr	r0, [r0]
	add	r0, r0, r2
	str	r0, [r3]
	add	r1, r1, r4
	add	r1, r1, #0x78
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L452	@cond_branch
	ldr	r1, .L455
	ldr	r2, [r1]
	mov	r5, r9
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	add	r1, r2, #0
	add	r1, r1, #0x20
	add	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x74
	add	r2, r2, r0
	str	r2, [r1]
	mov	r7, sl
	lsl	r0, r7, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L448	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	ldr	r1, .L455
	ldr	r1, [r1]
	mov	r2, #0xba
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	str	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L456:
	.align	2, 0
.L455:
	.word	gMonSpritesGfxPtr
	.word	gSpriteTemplates_Battlers
.Lfe46:
	.size	 AllocateMonSpritesGfx,.Lfe46-AllocateMonSpritesGfx
	.align	2, 0
	.globl	FreeMonSpritesGfx
	.type	 FreeMonSpritesGfx,function
	.thumb_func
FreeMonSpritesGfx:
	push	{r4, r5, r6, lr}
	ldr	r6, .L461
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L457	@cond_branch
	mov	r1, #0xbe
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L459	@cond_branch
	bl	Free
	ldr	r0, [r6]
	mov	r1, #0xbe
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
.L459:
	ldr	r0, [r6]
	mov	r1, #0xbc
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L460	@cond_branch
	bl	Free
	ldr	r0, [r6]
	mov	r1, #0xbc
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
.L460:
	ldr	r0, [r6]
	mov	r5, #0xba
	lsl	r5, r5, #0x1
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r6]
	add	r5, r0, r5
	mov	r4, #0x0
	str	r4, [r5]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r6]
	str	r4, [r0]
	str	r4, [r0, #0x4]
	str	r4, [r0, #0x8]
	str	r4, [r0, #0xc]
	str	r4, [r0, #0x10]
	bl	Free
	str	r4, [r6]
.L457:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L462:
	.align	2, 0
.L461:
	.word	gMonSpritesGfxPtr
.Lfe47:
	.size	 FreeMonSpritesGfx,.Lfe47-FreeMonSpritesGfx
	.align	2, 0
	.globl	ShouldPlayNormalMonCry
	.type	 ShouldPlayNormalMonCry,function
	.thumb_func
ShouldPlayNormalMonCry:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x37
	bl	GetMonData
	ldr	r1, .L467
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L465	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	ble	.L465	@cond_branch
	mov	r0, #0x1
	b	.L466
.L468:
	.align	2, 0
.L467:
	.word	0xfff
.L465:
	mov	r0, #0x0
.L466:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 ShouldPlayNormalMonCry,.Lfe48-ShouldPlayNormalMonCry
.text
	.align	2, 0 @ Don't pad with nop

