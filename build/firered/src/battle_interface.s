@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 gOamData_8260270,object
	.size	 gOamData_8260270,8
gOamData_8260270:
	.space	1
	.byte	0x40
	.space	1
	.byte	0xc0
	.space	1
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sHealthboxPlayerSpriteTemplates,object
sHealthboxPlayerSpriteTemplates:
	.short	0xd6ff
	.short	0xd6ff
	.word	gOamData_8260270
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd700
	.short	0xd6ff
	.word	gOamData_8260270
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.size	 sHealthboxPlayerSpriteTemplates,48
	.align	2, 0
	.type	 sHealthboxOpponentSpriteTemplates,object
sHealthboxOpponentSpriteTemplates:
	.short	0xd701
	.short	0xd6ff
	.word	gOamData_8260270
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd702
	.short	0xd6ff
	.word	gOamData_8260270
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.size	 sHealthboxOpponentSpriteTemplates,48
	.align	2, 0
	.type	 sHealthboxSafariSpriteTemplate,object
	.size	 sHealthboxSafariSpriteTemplate,24
sHealthboxSafariSpriteTemplate:
	.short	0xd70b
	.short	0xd6ff
	.word	gOamData_8260270
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gUnknown_82602F0,object
	.size	 gUnknown_82602F0,8
gUnknown_82602F0:
	.space	1
	.byte	0x40
	.space	1
	.byte	0x40
	.space	1
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 gUnknown_82602F8,object
gUnknown_82602F8:
	.short	0xd704
	.short	0xd704
	.word	gUnknown_82602F0
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.short	0xd705
	.short	0xd704
	.word	gUnknown_82602F0
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.short	0xd706
	.short	0xd704
	.word	gUnknown_82602F0
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.short	0xd707
	.short	0xd704
	.word	gUnknown_82602F0
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.size	 gUnknown_82602F8,96
	.align	2, 0
	.type	 gUnknown_8260358,object
	.size	 gUnknown_8260358,20
gUnknown_8260358:
	.byte	-0x10
	.byte	0x0
	.byte	0xd
	.byte	0x40
	.byte	0x30
	.byte	0x0
	.byte	0x8
	.byte	0x42
	.byte	-0x10
	.byte	0x20
	.byte	0x5
	.byte	0x43
	.byte	0x10
	.byte	0x20
	.byte	0x45
	.byte	0x43
	.byte	0x30
	.byte	0x20
	.byte	0x85
	.byte	0x43
	.align	2, 0
	.type	 gUnknown_826036C,object
	.size	 gUnknown_826036C,20
gUnknown_826036C:
	.byte	-0x10
	.byte	0x0
	.byte	0xd
	.byte	0x44
	.byte	0x30
	.byte	0x0
	.byte	0x8
	.byte	0x46
	.byte	-0x10
	.byte	0x20
	.byte	0x5
	.byte	0x47
	.byte	0x10
	.byte	0x20
	.byte	0x45
	.byte	0x47
	.byte	0x30
	.byte	0x20
	.byte	0x85
	.byte	0x47
	.align	2, 0
	.type	 gUnknown_8260380,object
	.size	 gUnknown_8260380,8
gUnknown_8260380:
	.byte	-0x10
	.byte	0x0
	.byte	0xd
	.byte	0x40
	.byte	0x30
	.byte	0x0
	.byte	0x8
	.byte	0x42
	.align	2, 0
	.type	 gUnknown_8260388,object
	.size	 gUnknown_8260388,8
gUnknown_8260388:
	.byte	-0x10
	.byte	0x0
	.byte	0xd
	.byte	0x40
	.byte	0x30
	.byte	0x0
	.byte	0x8
	.byte	0x42
	.align	2, 0
	.type	 gUnknown_8260390,object
	.size	 gUnknown_8260390,8
gUnknown_8260390:
	.byte	-0x10
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	0x10
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.align	2, 0
	.type	 gUnknown_8260398,object
	.size	 gUnknown_8260398,12
gUnknown_8260398:
	.byte	-0x10
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	0x10
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x80
	.byte	0x40
	.align	2, 0
	.type	 gUnknown_82603A4,object
gUnknown_82603A4:
	.byte	0x5
	.space	3
	.word	gUnknown_8260358
	.byte	0x2
	.space	3
	.word	gUnknown_8260380
	.byte	0x5
	.space	3
	.word	gUnknown_826036C
	.byte	0x2
	.space	3
	.word	gUnknown_8260388
	.size	 gUnknown_82603A4,32
	.align	2, 0
	.type	 gUnknown_82603C4,object
gUnknown_82603C4:
	.byte	0x2
	.space	3
	.word	gUnknown_8260390
	.byte	0x3
	.space	3
	.word	gUnknown_8260398
	.size	 gUnknown_82603C4,16
	.align	2, 0
	.type	 gUnknown_82603D4,object
	.size	 gUnknown_82603D4,16
gUnknown_82603D4:
	.byte	-0x60
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	-0x40
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0xc5
	.byte	0x40
	.align	2, 0
	.type	 gUnknown_82603E4,object
	.size	 gUnknown_82603E4,24
gUnknown_82603E4:
	.byte	-0x60
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	-0x40
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x40
	.byte	0x0
	.byte	0xc5
	.byte	0x40
	.align	2, 0
	.type	 sStatusSummaryBar_SubspriteTable,object
sStatusSummaryBar_SubspriteTable:
	.byte	0x4
	.space	3
	.word	gUnknown_82603D4
	.size	 sStatusSummaryBar_SubspriteTable,8
	.align	2, 0
	.type	 gUnknown_8260404,object
gUnknown_8260404:
	.byte	0x6
	.space	3
	.word	gUnknown_82603E4
	.size	 gUnknown_8260404,8
	.align	1, 0
	.type	 sBattleInterface_Unused,object
sBattleInterface_Unused:
	.short	0x0
	.short	0x0
	.short	0x3333
	.short	0x3333
	.short	0x4444
	.short	0x4444
	.short	0x2222
	.short	0x2222
	.short	0x7777
	.short	0x7777
	.short	0x7777
	.short	0x7777
	.short	0x7777
	.short	0x7777
	.short	0x7777
	.short	0x7777
	.short	0x0
	.short	0x0
	.short	0x3333
	.short	0x3333
	.short	0x4444
	.short	0x4444
	.short	0x2222
	.short	0x2222
	.short	0x7777
	.short	0x7777
	.short	0x7777
	.short	0x7717
	.short	0x1777
	.short	0x7177
	.short	0x7777
	.short	0x7771
	.short	0x0
	.short	0x0
	.short	0x3333
	.short	0x3333
	.short	0x4444
	.short	0x4444
	.short	0x2222
	.short	0x2222
	.short	0x7777
	.short	0x7777
	.short	0x7777
	.short	0x7111
	.short	0x7777
	.short	0x7171
	.short	0x7777
	.short	0x7111
	.size	 sBattleInterface_Unused,96
	.align	2, 0
	.type	 sStatusSummaryBarSpriteSheets,object
sStatusSummaryBarSpriteSheets:
	.word	gFile_graphics_battle_interface_ball_status_bar_sheet
	.short	0x200
	.short	0xd70c
	.word	gFile_graphics_battle_interface_ball_status_bar_sheet
	.short	0x200
	.short	0xd70d
	.size	 sStatusSummaryBarSpriteSheets,16
	.align	2, 0
	.type	 sStatusSummaryBarSpritePals,object
sStatusSummaryBarSpritePals:
	.word	gBattleInterface_BallStatusBarPal
	.short	0xd710
	.space	2
	.word	gBattleInterface_BallStatusBarPal
	.short	0xd711
	.space	2
	.size	 sStatusSummaryBarSpritePals,16
	.align	2, 0
	.type	 sStatusSummaryBallsSpritePals,object
sStatusSummaryBallsSpritePals:
	.word	gBattleInterface_BallDisplayPal
	.short	0xd712
	.space	2
	.word	gBattleInterface_BallDisplayPal
	.short	0xd713
	.space	2
	.size	 sStatusSummaryBallsSpritePals,16
	.align	2, 0
	.type	 sStatusSummaryBallsSpriteSheets,object
sStatusSummaryBallsSpriteSheets:
	.word	gBattleInterface_SummaryBallDisplayGfx
	.short	0x80
	.short	0xd714
	.word	gBattleInterface_SummaryBallDisplayGfx
	.short	0x80
	.short	0xd715
	.size	 sStatusSummaryBallsSpriteSheets,16
	.align	2, 0
	.type	 gUnknown_82604AC,object
	.size	 gUnknown_82604AC,8
gUnknown_82604AC:
	.space	1
	.byte	0x40
	.space	1
	.byte	0xc0
	.space	1
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 gUnknown_82604B4,object
	.size	 gUnknown_82604B4,8
gUnknown_82604B4:
	.space	1
	.byte	0x0
	.space	1
	.byte	0x0
	.space	1
	.byte	0x4
	.space	2
	.align	2, 0
	.type	 sStatusSummaryBarSpriteTemplates,object
sStatusSummaryBarSpriteTemplates:
	.short	0xd70c
	.short	0xd710
	.word	gOamData_8260270
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBar
	.short	0xd70d
	.short	0xd711
	.word	gOamData_8260270
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBar
	.size	 sStatusSummaryBarSpriteTemplates,48
	.align	2, 0
	.type	 sStatusSummaryBallsSpriteTemplates,object
sStatusSummaryBallsSpriteTemplates:
	.short	0xd714
	.short	0xd712
	.word	gUnknown_82604B4
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBallsOnBattleStart
	.short	0xd715
	.short	0xd713
	.word	gUnknown_82604B4
	.word	gDummySpriteAnimTable
	.space	4
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBallsOnBattleStart
	.size	 sStatusSummaryBallsSpriteTemplates,48
.text
	.align	2, 0
	.type	 sub_8047B0C,function
	.thumb_func
sub_8047B0C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r7, r1, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	mov	r3, #0x0
	mov	r2, #0x0
.L6:
	lsl	r0, r3, #0x18
	asr	r0, r0, #0x18
	mov	r3, sp
	add	r1, r3, r0
	strb	r2, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L6	@cond_branch
	mov	r3, #0x3
	mov	r0, #0x1
	neg	r0, r0
	mov	r9, r0
	mov	r8, sp
.L8:
	lsl	r0, r5, #0x10
	asr	r6, r0, #0x10
	cmp	r6, #0
	ble	.L11	@cond_branch
	lsl	r4, r3, #0x18
	asr	r4, r4, #0x18
	mov	r1, sp
	add	r5, r1, r4
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__modsi3
	strb	r0, [r5]
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	sub	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r3, r4, #0x18
	b	.L8
.L11:
	lsl	r1, r3, #0x18
	asr	r0, r1, #0x18
	cmp	r0, r9
	ble	.L14	@cond_branch
	mov	r4, #0xff
	mov	r3, #0x1
	neg	r3, r3
.L16:
	asr	r2, r1, #0x18
	mov	r5, sp
	add	r1, r5, r2
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	sub	r2, r2, #0x1
	lsl	r1, r2, #0x18
	asr	r0, r1, #0x18
	cmp	r0, r3
	bgt	.L16	@cond_branch
.L14:
	mov	r1, r8
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0xff
	bne	.L9	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x3]
.L9:
	mov	r2, sl
	cmp	r2, #0
	bne	.L20	@cond_branch
	mov	r3, #0x0
	mov	r1, #0x0
	mov	r6, #0xfc
	lsl	r6, r6, #0x8
	mov	r5, #0x1e
	mov	ip, r5
.L24:
	lsl	r1, r1, #0x18
	asr	r2, r1, #0x18
	mov	r0, sp
	add	r5, r0, r2
	ldrb	r0, [r5]
	mov	r8, r1
	cmp	r0, #0xff
	bne	.L25	@cond_branch
	lsl	r1, r2, #0x1
	add	r1, r1, r7
	ldrh	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r2, ip
	orr	r0, r0, r2
	strh	r0, [r1]
	lsl	r3, r3, #0x18
	asr	r1, r3, #0x17
	add	r1, r1, r7
	add	r1, r1, #0x40
	ldrh	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r5, ip
	orr	r0, r0, r5
	strh	r0, [r1]
	b	.L26
.L25:
	lsl	r2, r2, #0x1
	add	r2, r2, r7
	ldrh	r0, [r2]
	add	r1, r6, #0
	and	r1, r1, r0
	ldrb	r0, [r5]
	add	r0, r0, #0x14
	orr	r1, r1, r0
	strh	r1, [r2]
	lsl	r4, r3, #0x18
	asr	r3, r4, #0x18
	lsl	r2, r3, #0x1
	add	r2, r2, r7
	add	r2, r2, #0x40
	ldrh	r0, [r2]
	add	r1, r6, #0
	and	r1, r1, r0
	mov	r5, sp
	add	r0, r5, r3
	ldrb	r0, [r0]
	add	r0, r0, #0x34
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r3, r4, #0
.L26:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r0, r0, r8
	lsr	r1, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r3, r2
	lsr	r3, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L24	@cond_branch
	b	.L28
.L20:
	mov	r3, #0x0
	mov	r4, #0xfc
	lsl	r4, r4, #0x8
	mov	r6, #0x1e
.L32:
	lsl	r1, r3, #0x18
	asr	r2, r1, #0x18
	mov	r3, sp
	add	r5, r3, r2
	ldrb	r0, [r5]
	add	r3, r1, #0
	cmp	r0, #0xff
	bne	.L33	@cond_branch
	lsl	r1, r2, #0x1
	add	r1, r1, r7
	ldrh	r2, [r1]
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r6
	strh	r0, [r1]
	add	r1, r1, #0x40
	ldrh	r2, [r1]
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r6
	strh	r0, [r1]
	b	.L31
.L33:
	lsl	r2, r2, #0x1
	add	r2, r2, r7
	ldrh	r0, [r2]
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r0, [r5]
	add	r0, r0, #0x14
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r2, r2, #0x40
	ldrh	r0, [r2]
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r0, [r5]
	add	r0, r0, #0x34
	orr	r1, r1, r0
	strh	r1, [r2]
.L31:
	mov	r5, #0x80
	lsl	r5, r5, #0x11
	add	r0, r3, r5
	lsr	r3, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L32	@cond_branch
.L28:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 sub_8047B0C,.Lfe1-sub_8047B0C
	.align	2, 0
	.type	 sub_8047CAC,function
	.thumb_func
sub_8047CAC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, #0x1e
	strh	r1, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r1, r5, #0
	mov	r2, #0x0
	bl	sub_8047B0C
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r5, r5, #0xa
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x1
	bl	sub_8047B0C
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 sub_8047CAC,.Lfe2-sub_8047CAC
	.align	2, 0
	.globl	CreateBattlerHealthboxSprites
	.type	 CreateBattlerHealthboxSprites,function
	.thumb_func
CreateBattlerHealthboxSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r0, #0x0
	str	r0, [sp]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L38	@cond_branch
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L39	@cond_branch
	ldr	r4, .L45
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L45+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r3, #0x3f
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r0, [r2, #0x1]
	and	r3, r3, r0
	strb	r3, [r2, #0x1]
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x40
	ldr	r4, .L45+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L45+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	b	.L40
.L46:
	.align	2, 0
.L45:
	.word	sHealthboxPlayerSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L39:
	ldr	r4, .L47
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L47+0x4
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L47+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L47+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	mov	r0, #0x2
	str	r0, [sp]
.L40:
	ldr	r2, .L47+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r7, [r0, #0x6]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	strh	r6, [r1, #0x38]
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L47+0x10
	str	r1, [r0]
	b	.L41
.L48:
	.align	2, 0
.L47:
	.word	sHealthboxOpponentSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
.L38:
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L42	@cond_branch
	mov	r0, sl
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, .L49
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, sl
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L49+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r7, [r0, #0x6]
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r3, r2, r4
	strh	r6, [r3, #0x38]
	ldrh	r1, [r3, #0x4]
	mov	r8, r1
	mov	r5, r8
	lsl	r1, r5, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L49+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L49+0xc
	mov	r5, r8
	and	r0, r0, r5
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L49+0x10
	str	r0, [r2]
	mov	r0, #0x1
	b	.L44
.L50:
	.align	2, 0
.L49:
	.word	sHealthboxPlayerSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
.L42:
	mov	r0, sl
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, .L51
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, sl
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L51+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r7, [r0, #0x6]
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r3, r2, r4
	strh	r6, [r3, #0x38]
	ldrh	r1, [r3, #0x4]
	mov	r8, r1
	mov	r5, r8
	lsl	r1, r5, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L51+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L51+0xc
	mov	r5, r8
	and	r0, r0, r5
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L51+0x10
	str	r0, [r2]
	mov	r0, #0x2
.L44:
	str	r0, [sp]
.L41:
	ldr	r0, .L51+0x14
	add	r0, r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L51+0x18
	add	r0, r0, r1
	mov	r1, #0x8c
	mov	r2, #0x3c
	mov	r3, #0x0
	bl	CreateSpriteAtEnd
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r1, .L51+0x4
	mov	r8, r1
	add	r4, r4, r8
	mov	r0, sl
	bl	GetBattlerSide
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x15
	ldr	r0, .L51+0x1c
	add	r1, r1, r0
	add	r0, r4, #0
	bl	SetSubspriteTables
	add	r2, r4, #0
	add	r2, r2, #0x42
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r2, #0x4
	mov	r9, r2
	mov	r1, r9
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x1
	bl	GetHealthboxElementGfxPtr
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L51+0x20
	add	r1, r1, r2
	ldr	r2, .L51+0x24
	bl	CpuSet
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	strh	r5, [r0, #0x38]
	mov	r2, sl
	strh	r2, [r0, #0x3a]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r5, r9
	orr	r1, r1, r5
	strb	r1, [r0]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r5
	strb	r1, [r0]
	strh	r6, [r4, #0x38]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x3a]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	orr	r0, r0, r5
	strb	r0, [r4]
	add	r0, r6, #0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L52:
	.align	2, 0
.L51:
	.word	sHealthboxOpponentSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
	.word	gBattlerPositions
	.word	gUnknown_82602F8
	.word	gUnknown_82603C4
	.word	0x6010000
	.word	0x4000010
.Lfe3:
	.size	 CreateBattlerHealthboxSprites,.Lfe3-CreateBattlerHealthboxSprites
	.align	2, 0
	.globl	CreateSafariPlayerHealthboxSprites
	.type	 CreateSafariPlayerHealthboxSprites,function
	.thumb_func
CreateSafariPlayerHealthboxSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L54
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L54+0x4
	mov	r9, r1
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	ldrb	r3, [r4, #0x1]
	mov	r2, #0x3f
	add	r1, r2, #0
	and	r1, r1, r3
	strb	r1, [r4, #0x1]
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	mov	r7, r9
	add	r5, r3, r7
	ldrb	r1, [r5, #0x1]
	and	r2, r2, r1
	strb	r2, [r5, #0x1]
	ldrh	r1, [r5, #0x4]
	mov	r8, r1
	mov	r7, r8
	lsl	r2, r7, #0x16
	lsr	r2, r2, #0x16
	add	r2, r2, #0x40
	ldr	r7, .L54+0x8
	add	r1, r7, #0
	and	r2, r2, r1
	ldr	r1, .L54+0xc
	mov	r7, r8
	and	r1, r1, r7
	orr	r1, r1, r2
	strh	r1, [r5, #0x4]
	strh	r0, [r4, #0x6]
	strh	r6, [r5, #0x38]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r3, r3, r9
	ldr	r0, .L54+0x10
	str	r0, [r3]
	add	r0, r6, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L55:
	.align	2, 0
.L54:
	.word	sHealthboxSafariSpriteTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
.Lfe4:
	.size	 CreateSafariPlayerHealthboxSprites,.Lfe4-CreateSafariPlayerHealthboxSprites
	.align	2, 0
	.type	 GetHealthboxElementGfxPtr,function
	.thumb_func
GetHealthboxElementGfxPtr:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x13
	ldr	r1, .L57
	add	r0, r0, r1
	bx	lr
.L58:
	.align	2, 0
.L57:
	.word	gHealthboxElementsGfxTable
.Lfe5:
	.size	 GetHealthboxElementGfxPtr,.Lfe5-GetHealthboxElementGfxPtr
	.align	2, 0
	.type	 SpriteCB_HealthBar,function
	.thumb_func
SpriteCB_HealthBar:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L62	@cond_branch
	cmp	r0, #0x1
	bgt	.L64	@cond_branch
	cmp	r0, #0
	bne	.L64	@cond_branch
	ldr	r2, .L68
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x10
	b	.L67
.L69:
	.align	2, 0
.L68:
	.word	gSprites
.L62:
	ldr	r2, .L70
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x10
	b	.L67
.L71:
	.align	2, 0
.L70:
	.word	gSprites
.L64:
	ldr	r2, .L72
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x8
.L67:
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r4, #0x22]
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	strh	r1, [r4, #0x24]
	ldrh	r0, [r0, #0x26]
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gSprites
.Lfe6:
	.size	 SpriteCB_HealthBar,.Lfe6-SpriteCB_HealthBar
	.align	2, 0
	.type	 SpriteCB_HealthBoxOther,function
	.thumb_func
SpriteCB_HealthBoxOther:
	ldrh	r1, [r0, #0x38]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L75
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r2, #0x20]
	add	r1, r1, #0x40
	strh	r1, [r0, #0x20]
	ldrh	r1, [r2, #0x22]
	strh	r1, [r0, #0x22]
	ldrh	r1, [r2, #0x24]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r2, #0x26]
	strh	r1, [r0, #0x26]
	bx	lr
.L76:
	.align	2, 0
.L75:
	.word	gSprites
.Lfe7:
	.size	 SpriteCB_HealthBoxOther,.Lfe7-SpriteCB_HealthBoxOther
	.align	2, 0
	.globl	SetBattleBarStruct
	.type	 SetBattleBarStruct,function
	.thumb_func
SetBattleBarStruct:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, [sp, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r6, .L78
	ldr	r4, [r6]
	ldr	r5, [r4, #0xc]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r5, r4, r5
	strb	r1, [r5]
	ldr	r0, [r6]
	ldr	r0, [r0, #0xc]
	add	r4, r4, r0
	str	r2, [r4, #0x4]
	str	r3, [r4, #0x8]
	str	r7, [r4, #0xc]
	ldr	r0, .L78+0x4
	str	r0, [r4, #0x10]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gBattleSpritesDataPtr
	.word	-0x8000
.Lfe8:
	.size	 SetBattleBarStruct,.Lfe8-SetBattleBarStruct
	.align	2, 0
	.globl	SetHealthboxSpriteInvisible
	.type	 SetHealthboxSpriteInvisible,function
	.thumb_func
SetHealthboxSpriteInvisible:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L81
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	add	r1, r2, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	mov	r0, #0x38
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	ldrh	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gSprites
.Lfe9:
	.size	 SetHealthboxSpriteInvisible,.Lfe9-SetHealthboxSpriteInvisible
	.align	2, 0
	.globl	SetHealthboxSpriteVisible
	.type	 SetHealthboxSpriteVisible,function
	.thumb_func
SetHealthboxSpriteVisible:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L84
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	add	r4, r2, #0
	add	r4, r4, #0x3e
	ldrb	r1, [r4]
	mov	r3, #0x5
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x38
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r4, [r0]
	add	r1, r3, #0
	and	r1, r1, r4
	strb	r1, [r0]
	ldrh	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L85:
	.align	2, 0
.L84:
	.word	gSprites
.Lfe10:
	.size	 SetHealthboxSpriteVisible,.Lfe10-SetHealthboxSpriteVisible
	.align	2, 0
	.type	 UpdateSpritePos,function
	.thumb_func
UpdateSpritePos:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L87
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r3, r3, r4
	strh	r1, [r3, #0x20]
	strh	r2, [r3, #0x22]
	pop	{r4}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gSprites
.Lfe11:
	.size	 UpdateSpritePos,.Lfe11-UpdateSpritePos
	.align	2, 0
	.globl	DestoryHealthboxSprite
	.type	 DestoryHealthboxSprite,function
	.thumb_func
DestoryHealthboxSprite:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L90
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r5
	ldrh	r1, [r4, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gSprites
.Lfe12:
	.size	 DestoryHealthboxSprite,.Lfe12-DestoryHealthboxSprite
	.align	2, 0
	.globl	DummyBattleInterfaceFunc
	.type	 DummyBattleInterfaceFunc,function
	.thumb_func
DummyBattleInterfaceFunc:
	bx	lr
.Lfe13:
	.size	 DummyBattleInterfaceFunc,.Lfe13-DummyBattleInterfaceFunc
	.align	2, 0
	.globl	UpdateOamPriorityInAllHealthboxes
	.type	 UpdateOamPriorityInAllHealthboxes,function
	.thumb_func
UpdateOamPriorityInAllHealthboxes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	ldr	r1, .L99
	mov	r8, r1
	ldrb	r2, [r1]
	cmp	r6, r2
	bge	.L95	@cond_branch
	ldr	r1, .L99+0x4
	mov	ip, r1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r5, r0, #0x2
	mov	r7, #0xd
	neg	r7, r7
	ldr	r2, .L99+0x8
	mov	r9, r2
.L97:
	mov	r1, r9
	add	r0, r6, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r4, [r1, #0x6]
	ldrh	r3, [r1, #0x38]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	add	r6, r6, #0x1
	mov	r2, r8
	ldrb	r2, [r2]
	cmp	r6, r2
	blt	.L97	@cond_branch
.L95:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gBattlersCount
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe14:
	.size	 UpdateOamPriorityInAllHealthboxes,.Lfe14-UpdateOamPriorityInAllHealthboxes
	.align	2, 0
	.globl	InitBattlerHealthboxCoords
	.type	 InitBattlerHealthboxCoords,function
	.thumb_func
InitBattlerHealthboxCoords:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	mov	r4, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L102	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L103	@cond_branch
	mov	r5, #0x2c
	mov	r4, #0x1e
	b	.L105
.L103:
	mov	r5, #0x9e
	mov	r4, #0x58
	b	.L105
.L102:
	add	r0, r6, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L109	@cond_branch
	cmp	r0, #0x1
	bgt	.L113	@cond_branch
	cmp	r0, #0
	beq	.L107	@cond_branch
	b	.L105
.L113:
	cmp	r0, #0x2
	beq	.L108	@cond_branch
	cmp	r0, #0x3
	beq	.L110	@cond_branch
	b	.L105
.L107:
	mov	r5, #0x9f
	mov	r4, #0x4b
	b	.L105
.L108:
	mov	r5, #0xab
	mov	r4, #0x64
	b	.L105
.L109:
	mov	r5, #0x2c
	mov	r4, #0x13
	b	.L105
.L110:
	mov	r5, #0x20
	mov	r4, #0x2c
.L105:
	ldr	r0, .L114
	add	r0, r6, r0
	ldrb	r0, [r0]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	UpdateSpritePos
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L115:
	.align	2, 0
.L114:
	.word	gHealthboxSpriteIds
.Lfe15:
	.size	 InitBattlerHealthboxCoords,.Lfe15-InitBattlerHealthboxCoords
	.section .rodata
.LC24:
	.byte	0xf9
	.byte	0x5
	.byte	0xff
	.space	13
.text
	.align	2, 0
	.type	 UpdateLvlInHealthbox,function
	.thumb_func
UpdateLvlInHealthbox:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	add	r5, r0, #0
	add	r4, r1, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L121
	mov	r0, sp
	mov	r2, #0x10
	bl	memcpy
	mov	r0, sp
	add	r0, r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r1, r0, #0
	sub	r1, r1, #0x2
	mov	r0, sp
	sub	r1, r1, r0
	mov	r0, #0x3
	sub	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	add	r3, sp, #0x10
	mov	r0, sp
	mov	r2, #0x3
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r6, r0, #0
	ldr	r0, .L121+0x4
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r4, r0, #0x11
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L117	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	ldr	r2, .L121+0x8
	add	r1, r4, r2
	cmp	r0, #0
	bne	.L120	@cond_branch
	ldr	r0, .L121+0xc
	add	r1, r4, r0
	b	.L120
.L122:
	.align	2, 0
.L121:
	.word	.LC24
	.word	gSprites
	.word	0x6010420
	.word	0x6010820
.L117:
	ldr	r2, .L123
	add	r1, r4, r2
.L120:
	add	r0, r1, #0
	add	r1, r6, #0
	mov	r2, #0x3
	bl	TextIntoHealthboxObject
	ldr	r0, [sp, #0x10]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L124:
	.align	2, 0
.L123:
	.word	0x6010400
.Lfe16:
	.size	 UpdateLvlInHealthbox,.Lfe16-UpdateLvlInHealthbox
	.section .rodata
.LC28:
	.byte	0xfc
	.byte	0x1
	.byte	0x1
	.byte	0xfc
	.byte	0x2
	.byte	0x2
	.space	14
.text
	.align	2, 0
	.globl	UpdateHpTextInHealthbox
	.type	 UpdateHpTextInHealthbox,function
	.thumb_func
UpdateHpTextInHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x30
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r1, .L145
	lsl	r0, r0, #0x4
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L126	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L126	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L127	@cond_branch
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x10
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r3, sp, #0x2c
	add	r0, sp, #0x10
	mov	r1, #0x0
	mov	r2, #0x5
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r5, r0, #0
	ldrh	r0, [r4, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	ldr	r1, .L145+0x4
	add	r0, r0, r1
	add	r1, r5, #0
	b	.L144
.L146:
	.align	2, 0
.L145:
	.word	gSprites
	.word	0x6010a40
.L127:
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x10
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r1, #0xba
	strb	r1, [r0]
	mov	r1, #0xff
	strb	r1, [r0, #0x1]
	add	r3, sp, #0x2c
	add	r0, sp, #0x10
	mov	r1, #0x4
	mov	r2, #0x5
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r5, r0, #0
	ldrh	r4, [r4, #0x4]
	lsl	r4, r4, #0x16
	lsr	r4, r4, #0x11
	ldr	r1, .L147
	add	r0, r4, r1
	add	r1, r5, #0
	mov	r2, #0x1
	bl	TextIntoHealthboxObject
	ldr	r2, .L147+0x4
	add	r4, r4, r2
	add	r1, r5, #0
	add	r1, r1, #0x20
	add	r0, r4, #0
.L144:
	mov	r2, #0x2
	bl	TextIntoHealthboxObject
	ldr	r0, [sp, #0x2c]
	bl	RemoveWindowOnHealthbox
	b	.L129
.L148:
	.align	2, 0
.L147:
	.word	0x60102e0
	.word	0x6010a00
.L126:
	add	r5, sp, #0x18
	ldr	r1, .L149
	add	r0, r5, #0
	mov	r2, #0x14
	bl	memcpy
	ldr	r1, .L149+0x4
	mov	r0, r9
	lsl	r4, r0, #0x4
	add	r0, r4, r0
	lsl	r0, r0, #0x2
	add	r7, r0, r1
	ldrh	r0, [r7, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L131	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L130	@cond_branch
.L131:
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	mov	r0, r9
	mov	r2, r8
	bl	UpdateHpTextInHealthboxInDoubles
	b	.L129
.L150:
	.align	2, 0
.L149:
	.word	.LC28
	.word	gSprites
.L130:
	ldrh	r0, [r7, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L133	@cond_branch
	mov	r6, #0x59
	mov	r0, r8
	cmp	r0, #0
	bne	.L136	@cond_branch
	mov	r6, #0x1d
	b	.L136
.L133:
	mov	r6, #0x30
	mov	r1, r8
	cmp	r1, #0
	bne	.L136	@cond_branch
	mov	r6, #0x14
.L136:
	mov	r0, sp
	add	r0, r0, #0x1e
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L151
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	str	r1, [sp, #0xc]
	add	r2, r5, #0
	mov	r3, #0x0
	bl	RenderTextFont9
	mov	r5, #0x0
	ldr	r1, .L151+0x4
	mov	r2, r9
	add	r0, r4, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r1
.L142:
	ldr	r0, .L151
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r5, #0x6
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, r6
	add	r1, r1, r5
	lsl	r1, r1, #0x5
	ldr	r2, .L151+0x8
	add	r1, r1, r2
	ldr	r2, .L151+0xc
	bl	CpuSet
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L142	@cond_branch
.L129:
	add	sp, sp, #0x30
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	gMonSpritesGfxPtr
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.Lfe17:
	.size	 UpdateHpTextInHealthbox,.Lfe17-UpdateHpTextInHealthbox
	.section .rodata
	.type	 gUnknown_8260540,object
gUnknown_8260540:
	.byte	0xba
	.byte	0xff
	.size	 gUnknown_8260540,2
.LC31:
	.byte	0xfc
	.byte	0x1
	.byte	0x1
	.byte	0xfc
	.byte	0x2
	.byte	0x0
	.space	14
.text
	.align	2, 0
	.type	 UpdateHpTextInHealthboxInDoubles,function
	.thumb_func
UpdateHpTextInHealthboxInDoubles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r1, .L167
	add	r0, sp, #0x10
	mov	r2, #0x14
	bl	memcpy
	ldr	r5, .L167+0x4
	mov	r1, r9
	lsl	r0, r1, #0x4
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r2, r0, r5
	ldrh	r0, [r2, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L167+0x8
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r3, sl
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1883
	b	.L154	@long jump
.LCB1883:
	mov	r6, #0x4
	mov	r1, r8
	neg	r0, r1
	orr	r0, r0, r1
	asr	r0, r0, #0x1f
	and	r6, r6, r0
	ldrh	r0, [r2, #0x38]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, sp
	add	r0, r0, #0x16
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r2, r8
	cmp	r2, #0
	bne	.L156	@cond_branch
	ldr	r1, .L167+0xc
	bl	StringCopy
.L156:
	ldr	r0, .L167+0x10
	ldr	r0, [r0]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	ldr	r0, [r0]
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	str	r1, [sp, #0xc]
	add	r2, sp, #0x10
	mov	r3, #0x0
	bl	RenderTextFont9
	add	r4, r6, #0
	add	r0, r4, #0x3
	cmp	r4, r0
	bge	.L158	@cond_branch
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r5, r0, r5
.L160:
	cmp	r4, #0x2
	bhi	.L161	@cond_branch
	ldr	r0, .L167+0x10
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	sub	r1, r4, r6
	lsl	r1, r1, #0x6
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r4, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r2, .L167+0x14
	add	r1, r1, r2
	ldr	r2, .L167+0x18
	bl	CpuSet
	b	.L159
.L168:
	.align	2, 0
.L167:
	.word	.LC31
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	gUnknown_8260540
	.word	gMonSpritesGfxPtr
	.word	0x6010000
	.word	0x4000008
.L161:
	ldr	r0, .L169
	ldr	r0, [r0]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	sub	r1, r4, r6
	lsl	r1, r1, #0x6
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r4, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L169+0x4
	add	r1, r1, r2
	ldr	r2, .L169+0x8
	bl	CpuSet
	add	r4, r4, #0x1
.L159:
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0x3
	cmp	r4, r0
	blt	.L160	@cond_branch
.L158:
	mov	r3, r8
	cmp	r3, #0
	bne	.L164	@cond_branch
	ldr	r0, .L169
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r0, r0, #0xe0
	ldr	r1, .L169+0xc
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, #0x80
	ldr	r5, .L169+0x10
	add	r1, r1, r5
	ldr	r2, .L169+0x8
	bl	CpuSet
	mov	r2, r8
	str	r2, [sp, #0x24]
	add	r0, sp, #0x24
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, r5
	ldr	r2, .L169+0x14
	bl	CpuSet
	b	.L154
.L170:
	.align	2, 0
.L169:
	.word	gMonSpritesGfxPtr
	.word	0x6010020
	.word	0x4000008
	.word	gSprites
	.word	0x6010000
	.word	0x5000008
.L164:
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L154	@cond_branch
	mov	r0, #0x74
	bl	GetHealthboxElementGfxPtr
	ldr	r2, .L171
	mov	r3, r9
	lsl	r1, r3, #0x4
	add	r1, r1, r9
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r2, #0xd0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	ldr	r2, .L171+0x4
	add	r1, r1, r2
	ldr	r2, .L171+0x8
	bl	CpuSet
.L154:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.Lfe18:
	.size	 UpdateHpTextInHealthboxInDoubles,.Lfe18-UpdateHpTextInHealthboxInDoubles
	.align	2, 0
	.type	 PrintSafariMonInfo,function
	.thumb_func
PrintSafariMonInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x30
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x24]
	ldr	r1, .L201
	add	r0, sp, #0x10
	mov	r2, #0x14
	bl	memcpy
	ldr	r1, .L201+0x4
	ldr	r2, [sp, #0x24]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	ldr	r1, .L201+0x8
	ldr	r2, [r1]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r2, r2, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x7
	mov	r0, #0xa4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldr	r0, [r2]
	add	r6, r0, r1
	mov	r1, #0x5
	mov	r8, r1
	add	r0, r4, #0
	bl	GetNature
	lsl	r0, r0, #0x18
	mov	r4, sp
	add	r4, r4, #0x16
	ldr	r1, .L201+0xc
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringCopy
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, sp, #0x10
	mov	r3, #0x0
	bl	RenderTextFont9
	mov	r7, #0x6
	mov	r5, #0x0
	mov	r2, sp
	add	r2, r2, #0x19
	str	r2, [sp, #0x28]
.L177:
	mov	r0, sp
	add	r0, r0, r7
	add	r0, r0, #0x10
	ldrb	r1, [r0]
	add	r0, r1, #0
	sub	r0, r0, #0x37
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bls	.L179	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x79
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bhi	.L178	@cond_branch
.L179:
	mov	r0, #0x2c
	b	.L180
.L202:
	.align	2, 0
.L201:
	.word	.LC28
	.word	gSprites
	.word	gMonSpritesGfxPtr
	.word	gNatureNamePointers
.L178:
	add	r0, r1, #0
	sub	r0, r0, #0x4b
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L182	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x65
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L181	@cond_branch
.L182:
	mov	r0, #0x2d
	b	.L180
.L181:
	mov	r0, #0x2b
.L180:
	bl	GetHealthboxElementGfxPtr
	lsl	r1, r5, #0x6
	add	r1, r6, r1
	ldr	r2, .L203
	bl	CpuSet
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r7, #0x1
	cmp	r5, r8
	bcc	.L177	@cond_branch
	mov	r7, #0x1
	ldr	r3, [sp, #0x24]
	lsl	r3, r3, #0x4
	str	r3, [sp, #0x2c]
	mov	r0, #0x1
	add	r0, r0, r8
	mov	r9, r0
	cmp	r7, r9
	bge	.L186	@cond_branch
	ldr	r1, .L203+0x4
	ldr	r2, .L203
	mov	sl, r2
	ldr	r2, [sp, #0x24]
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r8, r0
.L188:
	mov	r3, r8
	ldrh	r0, [r3, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r5, r7, #0
	cmp	r7, #0
	bge	.L189	@cond_branch
	add	r5, r7, #0x7
.L189:
	asr	r5, r5, #0x3
	lsl	r4, r5, #0x3
	sub	r4, r7, r4
	add	r0, r0, r4
	lsl	r5, r5, #0x6
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldr	r2, .L203+0x8
	add	r1, r0, r2
	add	r0, r6, #0
	mov	r2, sl
	bl	CpuSet
	add	r6, r6, #0x20
	mov	r3, r8
	ldrh	r0, [r3, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r4, r4, #0x8
	add	r0, r0, r4
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldr	r2, .L203+0x8
	add	r1, r0, r2
	add	r0, r6, #0
	mov	r2, sl
	bl	CpuSet
	add	r6, r6, #0x20
	add	r7, r7, #0x1
	cmp	r7, r9
	blt	.L188	@cond_branch
.L186:
	ldr	r6, .L203+0x4
	ldr	r3, [sp, #0x2c]
	ldr	r1, [sp, #0x24]
	add	r0, r3, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r4, [r0, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L203+0xc
	ldr	r0, [r5]
	add	r0, r0, #0x7c
	ldrb	r1, [r0]
	mov	r0, sp
	add	r0, r0, #0x16
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, [r5]
	add	r0, r0, #0x7b
	ldrb	r1, [r0]
	ldr	r0, [sp, #0x28]
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	add	r0, sp, #0x10
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	add	r2, r0, #0
	mov	r0, #0xba
	strb	r0, [r2, #0x8]
	ldr	r5, .L203+0x10
	ldr	r0, [r5]
	mov	r2, #0xba
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r1, [sp]
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	str	r1, [sp, #0xc]
	add	r2, sp, #0x10
	mov	r3, #0x0
	bl	RenderTextFont9
	mov	r7, #0x0
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r6, r0, r6
	mov	r4, #0x20
.L197:
	cmp	r7, #0x1
	bgt	.L198	@cond_branch
	ldr	r0, [r5]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrh	r1, [r6, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r7, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L203+0x8
	add	r1, r1, r2
	ldr	r2, .L203
	bl	CpuSet
	b	.L196
.L204:
	.align	2, 0
.L203:
	.word	0x4000008
	.word	gSprites
	.word	0x6010000
	.word	gBattleStruct
	.word	gMonSpritesGfxPtr
.L198:
	ldr	r0, [r5]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrh	r1, [r6, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r7, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L205
	add	r1, r1, r2
	ldr	r2, .L205+0x4
	bl	CpuSet
.L196:
	add	r4, r4, #0x40
	add	r7, r7, #0x1
	cmp	r7, #0x4
	ble	.L197	@cond_branch
	add	sp, sp, #0x30
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L206:
	.align	2, 0
.L205:
	.word	0x60100c0
	.word	0x4000008
.Lfe19:
	.size	 PrintSafariMonInfo,.Lfe19-PrintSafariMonInfo
	.align	2, 0
	.globl	SwapHpBarsWithHpText
	.type	 SwapHpBarsWithHpText,function
	.thumb_func
SwapHpBarsWithHpText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	r9, r0
	ldr	r0, .L227
	ldrb	r0, [r0]
	cmp	r9, r0
	blt	.LCB2532
	b	.L209	@long jump
.LCB2532:
	ldr	r1, .L227+0x4
	mov	sl, r1
	ldr	r2, .L227+0x8
	mov	r8, r2
.L211:
	ldr	r0, .L227+0xc
	mov	r1, r9
	add	r6, r1, r0
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, sl
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L227+0x10
	cmp	r1, r0
	beq	.LCB2557
	b	.L210	@long jump
.LCB2557:
	mov	r2, r9
	lsl	r0, r2, #0x18
	lsr	r7, r0, #0x18
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB2567
	b	.L210	@long jump
.LCB2567:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L213	@cond_branch
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2580
	b	.L210	@long jump
.LCB2580:
.L213:
	ldr	r5, .L227+0x14
	ldr	r0, [r5]
	ldr	r3, [r0]
	mov	r0, r9
	lsl	r4, r0, #0x2
	add	r3, r4, r3
	ldr	r0, [r3]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	mov	r2, #0x1
	eor	r2, r2, r0
	lsl	r2, r2, #0x4
	mov	ip, r2
	ldrb	r0, [r3]
	mov	r2, #0x11
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	mov	r1, ip
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, [r5]
	ldr	r0, [r0]
	add	r4, r4, r0
	ldr	r0, [r4]
	lsl	r0, r0, #0x1b
	lsr	r4, r0, #0x1f
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L214	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2629
	b	.L210	@long jump
.LCB2629:
	ldr	r0, .L227+0x18
	ldr	r2, [r0]
	mov	r0, #0x80
	and	r2, r2, r0
	cmp	r2, #0
	beq	.LCB2635
	b	.L210	@long jump
.LCB2635:
	cmp	r4, #0x1
	bne	.L217	@cond_branch
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	str	r2, [sp]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L227+0x1c
	add	r1, r1, r2
	mov	r0, sp
	ldr	r2, .L227+0x20
	bl	CpuSet
	ldrb	r4, [r6]
	mov	r1, r8
	ldrh	r0, [r1]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r1, .L227+0x24
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthboxInDoubles
	ldrb	r4, [r6]
	mov	r2, r8
	ldrh	r0, [r2]
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r2, .L227+0x24
	b	.L226
.L228:
	.align	2, 0
.L227:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerPartyIndexes
	.word	gHealthboxSpriteIds
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattleTypeFlags
	.word	0x6010000
	.word	0x5000040
	.word	gPlayerParty
.L217:
	ldrb	r0, [r6]
	bl	UpdateStatusIconInHealthbox
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mov	r2, #0x64
	mul	r1, r1, r2
	ldr	r2, .L229
	add	r1, r1, r2
	mov	r2, #0x5
	bl	UpdateHealthboxAttribute
	mov	r0, #0x75
	bl	GetHealthboxElementGfxPtr
	ldrb	r2, [r6]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L229+0x4
	add	r1, r1, r2
	ldr	r2, .L229+0x8
	bl	CpuSet
	b	.L219
.L230:
	.align	2, 0
.L229:
	.word	gPlayerParty
	.word	0x6010680
	.word	0x4000008
.L214:
	cmp	r4, #0x1
	bne	.L220	@cond_branch
	ldr	r0, .L231
	ldr	r2, [r0]
	mov	r0, #0x80
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L221	@cond_branch
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mov	r2, #0x64
	mul	r1, r1, r2
	ldr	r2, .L231+0x4
	add	r1, r1, r2
	bl	PrintSafariMonInfo
	b	.L219
.L232:
	.align	2, 0
.L231:
	.word	gBattleTypeFlags
	.word	gEnemyParty
.L221:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	str	r2, [sp]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r0, .L233
	add	r1, r1, r0
	mov	r0, sp
	ldr	r2, .L233+0x4
	bl	CpuSet
	ldrb	r4, [r6]
	mov	r1, r8
	ldrh	r0, [r1]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r1, .L233+0x8
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthboxInDoubles
	ldrb	r4, [r6]
	mov	r2, r8
	ldrh	r0, [r2]
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r2, .L233+0x8
.L226:
	add	r0, r0, r2
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x1
	bl	UpdateHpTextInHealthboxInDoubles
	b	.L219
.L234:
	.align	2, 0
.L233:
	.word	0x6010000
	.word	0x5000040
	.word	gEnemyParty
.L220:
	ldrb	r0, [r6]
	bl	UpdateStatusIconInHealthbox
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mov	r5, #0x64
	mul	r1, r1, r5
	ldr	r4, .L235
	add	r1, r1, r4
	mov	r2, #0x5
	bl	UpdateHealthboxAttribute
	ldr	r0, .L235+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L219	@cond_branch
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mul	r1, r1, r5
	add	r1, r1, r4
	mov	r2, #0x4
	bl	UpdateHealthboxAttribute
.L219:
	ldr	r0, .L235+0x8
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r1, [r0, #0x3c]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x3c]
.L210:
	mov	r0, #0x2
	add	r8, r8, r0
	mov	r1, #0x1
	add	r9, r9, r1
	ldr	r0, .L235+0xc
	ldrb	r0, [r0]
	cmp	r9, r0
	bge	.LCB2924
	b	.L211	@long jump
.LCB2924:
.L209:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L236:
	.align	2, 0
.L235:
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gBattlersCount
.Lfe20:
	.size	 SwapHpBarsWithHpText,.Lfe20-SwapHpBarsWithHpText
	.align	2, 0
	.globl	CreatePartyStatusSummarySprites
	.type	 CreatePartyStatusSummarySprites,function
	.thumb_func
CreatePartyStatusSummarySprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	str	r1, [sp, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r4, r2, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	cmp	r4, #0
	beq	.L239	@cond_branch
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L238	@cond_branch
.L239:
	ldr	r0, [sp, #0x8]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L240	@cond_branch
	mov	r7, #0x0
	mov	r1, #0x88
	mov	r2, #0x60
	mov	r0, #0x64
	mov	r8, r0
	ldr	r5, .L315
	b	.L245
.L316:
	.align	2, 0
.L315:
	.word	0xfffb
.L240:
	mov	r7, #0x1
	cmp	r4, #0
	beq	.L243	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L242	@cond_branch
.L243:
	mov	r1, #0x68
	mov	r2, #0x28
	b	.L244
.L242:
	mov	r1, #0x68
	mov	r2, #0x10
.L244:
	ldr	r3, .L317
	mov	r8, r3
	b	.L309
.L318:
	.align	2, 0
.L317:
	.word	0xff9c
.L238:
	mov	r7, #0x1
	mov	r1, #0x68
	mov	r2, #0x28
	ldr	r5, .L319
	mov	r8, r5
.L309:
	mov	r5, #0x5
.L245:
	mov	r6, #0x0
	str	r6, [sp, #0x14]
	lsl	r4, r7, #0x3
	ldr	r0, .L319+0x4
	mov	sl, r0
	lsl	r3, r7, #0x1
	mov	r9, r3
	lsl	r1, r1, #0x10
	str	r1, [sp, #0x20]
	lsl	r2, r2, #0x10
	str	r2, [sp, #0x24]
	ldr	r2, .L319+0x8
	ldr	r1, [sp, #0xc]
	mov	r6, #0x5
.L249:
	ldrh	r0, [r1]
	cmp	r0, r2
	beq	.L248	@cond_branch
	ldr	r3, [sp, #0x14]
	lsl	r0, r3, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x11
	add	r0, r0, r3
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
.L248:
	add	r1, r1, #0x8
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L249	@cond_branch
	mov	r6, sl
	add	r0, r4, r6
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L319+0xc
	add	r0, r4, r0
	bl	LoadSpriteSheet
	ldr	r0, .L319+0x10
	add	r0, r4, r0
	bl	LoadSpritePalette
	ldr	r0, .L319+0x14
	add	r0, r4, r0
	bl	LoadSpritePalette
	mov	r1, r9
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L319+0x18
	add	r0, r0, r1
	ldr	r2, [sp, #0x20]
	asr	r1, r2, #0x10
	ldr	r3, [sp, #0x24]
	asr	r2, r3, #0x10
	mov	r3, #0xa
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x18]
	lsl	r0, r0, #0x4
	ldr	r6, [sp, #0x18]
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L319+0x1c
	add	r4, r0, r1
	ldr	r1, .L319+0x20
	add	r0, r4, #0
	bl	SetSubspriteTables
	mov	r0, r8
	strh	r0, [r4, #0x24]
	strh	r5, [r4, #0x2e]
	cmp	r7, #0
	beq	.L252	@cond_branch
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, #0x60
	strh	r0, [r4, #0x20]
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
	b	.L253
.L320:
	.align	2, 0
.L319:
	.word	0xff9c
	.word	sStatusSummaryBarSpriteSheets
	.word	0xffff
	.word	sStatusSummaryBallsSpriteSheets
	.word	sStatusSummaryBarSpritePals
	.word	sStatusSummaryBallsSpritePals
	.word	sStatusSummaryBarSpriteTemplates
	.word	gSprites
	.word	sStatusSummaryBar_SubspriteTable
.L252:
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x60
	strh	r0, [r4, #0x20]
.L253:
	mov	r6, #0x0
	ldr	r1, .L321
	mov	sl, r1
	mov	r4, sp
	mov	r2, r9
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x1c]
	mov	r3, #0xa
	mov	r9, r3
	mov	r8, r6
.L257:
	ldr	r0, .L321+0x4
	ldr	r5, [sp, #0x24]
	ldr	r1, .L321+0x8
	add	r2, r5, r1
	ldr	r3, [sp, #0x1c]
	add	r0, r3, r0
	ldr	r5, [sp, #0x20]
	asr	r1, r5, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x9
	bl	CreateSpriteAtEnd
	strb	r0, [r4]
	ldr	r0, [sp, #0x10]
	cmp	r0, #0
	bne	.L258	@cond_branch
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L321+0xc
	add	r1, r1, r2
	ldr	r0, .L321+0x10
	str	r0, [r1]
.L258:
	ldr	r5, .L321
	cmp	r7, #0
	bne	.L259	@cond_branch
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	strh	r7, [r0, #0x24]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	strh	r7, [r0, #0x26]
.L259:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x0
	mov	r3, sp
	ldrh	r3, [r3, #0x18]
	strh	r3, [r0, #0x2e]
	cmp	r7, #0
	bne	.L260	@cond_branch
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x18
	add	r0, r0, r8
	strh	r0, [r1, #0x20]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r9
	strh	r1, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x78
	b	.L310
.L322:
	.align	2, 0
.L321:
	.word	gSprites
	.word	sStatusSummaryBallsSpriteTemplates
	.word	-0x40000
	.word	gSprites+0x1c
	.word	SpriteCB_StatusSummaryBallsOnSwitchout
.L260:
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldrh	r3, [r2, #0x20]
	sub	r3, r3, #0x18
	mov	r1, #0x5
	sub	r1, r1, r6
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	sub	r3, r3, r0
	strh	r3, [r2, #0x20]
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	mov	r1, #0x6
	sub	r1, r1, r6
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, #0xa
	strh	r0, [r2, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L323
.L310:
	strh	r1, [r0, #0x24]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r7, [r0, #0x32]
	add	r4, r4, #0x1
	mov	r2, #0x7
	add	r9, r9, r2
	mov	r3, #0xa
	add	r8, r8, r3
	add	r6, r6, #0x1
	cmp	r6, #0x5
	bgt	.LCB3340
	b	.L257	@long jump
.LCB3340:
	ldr	r0, [sp, #0x8]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L263	@cond_branch
	mov	r6, #0x0
	ldr	r5, .L323+0x4
	mov	sl, r5
	ldr	r0, .L323+0x8
	mov	r9, r0
	ldr	r7, .L323+0xc
	ldr	r1, .L323+0x10
	mov	ip, r1
	ldr	r2, .L323+0x14
	mov	r8, r2
	mov	r4, sp
	ldr	r5, [sp, #0xc]
.L267:
	mov	r3, sl
	ldr	r0, [r3]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L268	@cond_branch
	ldrh	r0, [r5]
	cmp	r0, r9
	beq	.L311	@cond_branch
	cmp	r0, #0
	bne	.L277	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L312
.L324:
	.align	2, 0
.L323:
	.word	0xff88
	.word	gBattleTypeFlags
	.word	0xffff
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L268:
	ldr	r1, [sp, #0x14]
	lsl	r0, r1, #0x18
	asr	r0, r0, #0x18
	cmp	r6, r0
	blt	.L275	@cond_branch
.L311:
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	mov	r0, ip
	and	r1, r1, r0
	mov	r0, r8
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	b	.L266
.L275:
	ldrh	r0, [r5]
	cmp	r0, #0
	bne	.L277	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L312
.L277:
	ldr	r0, [r5, #0x4]
	cmp	r0, #0
	beq	.L266	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L312:
	mov	r0, ip
	and	r1, r1, r0
	mov	r0, r8
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L266:
	add	r4, r4, #0x1
	add	r5, r5, #0x8
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L267	@cond_branch
	b	.L281
.L263:
	mov	r6, #0x0
	ldr	r1, .L325
	mov	sl, r1
	ldr	r2, .L325+0x4
	mov	r9, r2
	ldr	r7, .L325+0x8
	ldr	r3, .L325+0xc
	mov	ip, r3
	ldr	r5, .L325+0x10
	mov	r8, r5
	ldr	r5, [sp, #0xc]
	mov	r4, sp
	add	r4, r4, #0x5
.L285:
	mov	r1, sl
	ldr	r0, [r1]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L286	@cond_branch
	ldrh	r0, [r5]
	cmp	r0, r9
	beq	.L313	@cond_branch
	cmp	r0, #0
	bne	.L295	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L314
.L326:
	.align	2, 0
.L325:
	.word	gBattleTypeFlags
	.word	0xffff
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L286:
	ldr	r1, [sp, #0x14]
	lsl	r0, r1, #0x18
	asr	r0, r0, #0x18
	cmp	r6, r0
	blt	.L293	@cond_branch
.L313:
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	mov	r0, ip
	and	r1, r1, r0
	mov	r0, r8
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	b	.L292
.L293:
	ldrh	r0, [r5]
	cmp	r0, #0
	bne	.L295	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L314
.L295:
	ldr	r0, [r5, #0x4]
	cmp	r0, #0
	beq	.L292	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L314:
	mov	r0, ip
	and	r1, r1, r0
	mov	r0, r8
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L292:
	sub	r4, r4, #0x1
	add	r5, r5, #0x8
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L285	@cond_branch
.L281:
	ldr	r0, .L327
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L327+0x4
	lsl	r3, r4, #0x2
	add	r1, r3, r4
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	mov	r5, sp
	ldrh	r5, [r5, #0x8]
	strh	r5, [r0, #0x8]
	mov	r6, sp
	ldrh	r6, [r6, #0x18]
	strh	r6, [r0, #0xa]
	mov	r6, #0x0
	add	r0, r2, #0
	add	r0, r0, #0xe
	add	r1, r1, r0
.L307:
	mov	r5, sp
	add	r0, r5, r6
	ldrb	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L307	@cond_branch
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r6, [r5, #0x10]
	strh	r6, [r0, #0x1c]
	mov	r0, #0x6b
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	add	r0, r4, #0
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L328:
	.align	2, 0
.L327:
	.word	TaskDummy
	.word	gTasks
.Lfe21:
	.size	 CreatePartyStatusSummarySprites,.Lfe21-CreatePartyStatusSummarySprites
	.align	2, 0
	.globl	Task_HidePartyStatusSummary
	.type	 Task_HidePartyStatusSummary,function
	.thumb_func
Task_HidePartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L349
	lsl	r3, r0, #0x2
	add	r1, r3, r0
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	ldrb	r7, [r0, #0x1c]
	ldrb	r4, [r0, #0xa]
	mov	sl, r4
	ldrb	r0, [r0, #0x8]
	str	r0, [sp, #0x8]
	mov	r5, #0x0
	str	r3, [sp, #0xc]
	add	r2, r2, #0xe
	add	r2, r1, r2
.L333:
	mov	r0, sp
	add	r1, r0, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L333	@cond_branch
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r1, .L349
	ldr	r0, [sp, #0xc]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x10
	strh	r1, [r0, #0x26]
	mov	r5, #0x0
	mov	r1, sl
	lsl	r1, r1, #0x4
	str	r1, [sp, #0x10]
	ldr	r3, .L349+0x4
	mov	r6, #0xd
	neg	r6, r6
	mov	ip, r3
	mov	r4, #0x4
.L338:
	mov	r2, sp
	add	r0, r2, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0x1]
	add	r0, r6, #0
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x1]
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L338	@cond_branch
	ldr	r2, [sp, #0x10]
	add	r2, r2, sl
	lsl	r2, r2, #0x2
	add	r2, r2, ip
	ldrb	r1, [r2, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	cmp	r7, #0
	bne	.LCB3891
	b	.L340	@long jump
.LCB3891:
	mov	r5, #0x0
	mov	r6, ip
	mov	r9, r5
	add	r3, r6, #0
	add	r3, r3, #0x1c
	mov	r4, sp
	mov	r7, #0x0
.L344:
	ldr	r0, [sp, #0x8]
	str	r3, [sp, #0x14]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r3, [sp, #0x14]
	cmp	r2, #0
	beq	.L345	@cond_branch
	mov	r0, #0x5
	sub	r0, r0, r5
	mov	r1, sp
	add	r2, r1, r0
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r7, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, r9
	strh	r1, [r0, #0x34]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, r9
	strh	r1, [r0, #0x36]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L349+0x8
	str	r1, [r0]
	ldr	r2, .L349+0x4
	mov	ip, r2
	b	.L343
.L350:
	.align	2, 0
.L349:
	.word	gTasks
	.word	gSprites
	.word	sub_8049630
.L345:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r7, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x34]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x36]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L351
	str	r1, [r0]
	ldr	r0, .L351+0x4
	mov	ip, r0
.L343:
	add	r4, r4, #0x1
	add	r7, r7, #0x7
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L344	@cond_branch
	ldr	r3, [sp, #0x10]
	add	r3, r3, sl
	lsl	r3, r3, #0x2
	mov	r1, ip
	add	r0, r3, r1
	mov	r2, #0x2e
	ldrsh	r1, [r0, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	mov	r2, #0x0
	strh	r1, [r0, #0x2e]
	strh	r2, [r0, #0x30]
	mov	r1, ip
	add	r1, r1, #0x1c
	add	r3, r3, r1
	ldr	r1, .L351+0x8
	str	r1, [r3]
	ldr	r1, .L351+0xc
	bl	SetSubspriteTables
	ldr	r1, .L351+0x10
	ldr	r0, [sp, #0xc]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L351+0x14
	str	r1, [r0]
	b	.L348
.L352:
	.align	2, 0
.L351:
	.word	sub_8049630
	.word	gSprites
	.word	sub_8049568
	.word	gUnknown_8260404
	.word	gTasks
	.word	sub_8049388
.L340:
	ldr	r0, .L353
	ldr	r1, [sp, #0xc]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L353+0x4
	str	r0, [r1]
.L348:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L354:
	.align	2, 0
.L353:
	.word	gTasks
	.word	sub_804948C
.Lfe22:
	.size	 Task_HidePartyStatusSummary,.Lfe22-Task_HidePartyStatusSummary
	.align	2, 0
	.type	 sub_8049388,function
	.thumb_func
sub_8049388:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L359
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1e]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L356	@cond_branch
	ldrh	r0, [r4, #0x26]
	sub	r1, r0, #0x1
	strh	r1, [r4, #0x26]
	lsl	r0, r1, #0x10
	cmp	r0, #0
	blt	.L355	@cond_branch
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
.L356:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L355	@cond_branch
	ldr	r0, .L359+0x4
	str	r0, [r4]
.L355:
	pop	{r4}
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	gTasks
	.word	sub_80493E4
.Lfe23:
	.size	 sub_8049388,.Lfe23-sub_8049388
	.align	2, 0
	.type	 sub_80493E4,function
	.thumb_func
sub_80493E4:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r7, .L375
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r6, r0, #0x3
	add	r1, r6, r7
	ldrh	r0, [r1, #0x26]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r2, r0
	bne	.L362	@cond_branch
	ldrb	r3, [r1, #0xa]
	mov	r5, #0x0
	add	r0, r7, #0
	add	r0, r0, #0xe
	add	r2, r6, r0
.L366:
	mov	r0, sp
	add	r1, r0, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L366	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r4, .L375+0x4
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r5, #0x1
.L371:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L371	@cond_branch
	b	.L373
.L376:
	.align	2, 0
.L375:
	.word	gTasks
	.word	gSprites
.L362:
	mov	r0, #0x3
	neg	r0, r0
	cmp	r2, r0
	bne	.L373	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyTask
.L373:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 sub_80493E4,.Lfe24-sub_80493E4
	.align	2, 0
	.type	 sub_804948C,function
	.thumb_func
sub_804948C:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r7, .L393
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r6, r0, #0x3
	add	r3, r6, r7
	ldrh	r0, [r3, #0x26]
	sub	r1, r0, #0x1
	strh	r1, [r3, #0x26]
	lsl	r0, r1, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	blt	.L378	@cond_branch
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L379
.L394:
	.align	2, 0
.L393:
	.word	gTasks
.L378:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r2, r0
	bne	.L380	@cond_branch
	ldrb	r3, [r3, #0xa]
	mov	r5, #0x0
	add	r0, r7, #0
	add	r0, r0, #0xe
	add	r2, r6, r0
.L384:
	mov	r0, sp
	add	r1, r0, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L384	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r4, .L395
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r5, #0x1
.L389:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L389	@cond_branch
	b	.L379
.L396:
	.align	2, 0
.L395:
	.word	gSprites
.L380:
	mov	r0, #0x3
	neg	r0, r0
	cmp	r2, r0
	bne	.L379	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyTask
.L379:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 sub_804948C,.Lfe25-sub_804948C
	.align	2, 0
	.type	 SpriteCB_StatusSummaryBar,function
	.thumb_func
SpriteCB_StatusSummaryBar:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x24]
	mov	r3, #0x24
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L398	@cond_branch
	ldrh	r0, [r1, #0x2e]
	add	r0, r2, r0
	strh	r0, [r1, #0x24]
.L398:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 SpriteCB_StatusSummaryBar,.Lfe26-SpriteCB_StatusSummaryBar
	.align	2, 0
	.type	 sub_8049568,function
	.thumb_func
sub_8049568:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0
	add	r1, r1, #0x20
	strh	r1, [r2, #0x30]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L400	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x14
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	b	.L402
.L400:
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
.L402:
	strh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x30]
	mov	r0, #0xf
	and	r0, r0, r1
	strh	r0, [r2, #0x30]
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_8049568,.Lfe27-sub_8049568
	.align	2, 0
	.type	 SpriteCB_StatusSummaryBallsOnBattleStart,function
	.thumb_func
SpriteCB_StatusSummaryBallsOnBattleStart:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L404	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L403
.L404:
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrh	r2, [r4, #0x34]
	add	r0, r2, #0
	add	r0, r0, #0x38
	lsl	r1, r0, #0x10
	lsr	r2, r1, #0x10
	ldr	r0, .L413
	and	r2, r2, r0
	strh	r2, [r4, #0x34]
	cmp	r3, #0
	beq	.L405	@cond_branch
	lsr	r0, r1, #0x14
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L407	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	b	.L407
.L414:
	.align	2, 0
.L413:
	.word	0xfff0
.L405:
	lsr	r1, r1, #0x14
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L407	@cond_branch
	strh	r3, [r4, #0x24]
.L407:
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L403	@cond_branch
	mov	r1, #0x3f
	cmp	r3, #0
	beq	.L410	@cond_branch
	mov	r1, #0xc0
.L410:
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L411	@cond_branch
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x6d
	bl	PlaySE2WithPanning
	b	.L412
.L411:
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x6c
	bl	PlaySE1WithPanning
.L412:
	ldr	r0, .L415
	str	r0, [r4, #0x1c]
.L403:
	pop	{r4}
	pop	{r0}
	bx	r0
.L416:
	.align	2, 0
.L415:
	.word	SpriteCallbackDummy
.Lfe28:
	.size	 SpriteCB_StatusSummaryBallsOnBattleStart,.Lfe28-SpriteCB_StatusSummaryBallsOnBattleStart
	.align	2, 0
	.type	 sub_8049630,function
	.thumb_func
sub_8049630:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L418	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x30]
	b	.L417
.L418:
	ldrh	r0, [r3, #0x32]
	lsl	r0, r0, #0x18
	ldrh	r2, [r3, #0x34]
	add	r1, r2, #0
	add	r1, r1, #0x38
	lsl	r4, r1, #0x10
	lsr	r2, r4, #0x10
	ldr	r1, .L423
	and	r2, r2, r1
	strh	r2, [r3, #0x34]
	cmp	r0, #0
	beq	.L419	@cond_branch
	lsr	r0, r4, #0x14
	ldrh	r1, [r3, #0x24]
	add	r0, r0, r1
	b	.L422
.L424:
	.align	2, 0
.L423:
	.word	0xfff0
.L419:
	lsr	r1, r4, #0x14
	ldrh	r0, [r3, #0x24]
	sub	r0, r0, r1
.L422:
	strh	r0, [r3, #0x24]
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	mov	r2, #0x20
	ldrsh	r1, [r3, r2]
	add	r0, r0, r1
	add	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bls	.L417	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L425
	str	r0, [r3, #0x1c]
.L417:
	pop	{r4}
	pop	{r0}
	bx	r0
.L426:
	.align	2, 0
.L425:
	.word	SpriteCallbackDummy
.Lfe29:
	.size	 sub_8049630,.Lfe29-sub_8049630
	.align	2, 0
	.type	 SpriteCB_StatusSummaryBallsOnSwitchout,function
	.thumb_func
SpriteCB_StatusSummaryBallsOnSwitchout:
	ldrh	r2, [r0, #0x2e]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L428
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r2, [r1, #0x24]
	strh	r2, [r0, #0x24]
	ldrh	r1, [r1, #0x26]
	strh	r1, [r0, #0x26]
	bx	lr
.L429:
	.align	2, 0
.L428:
	.word	gSprites
.Lfe30:
	.size	 SpriteCB_StatusSummaryBallsOnSwitchout,.Lfe30-SpriteCB_StatusSummaryBallsOnSwitchout
	.section .rodata
	.type	 gUnknown_8260556,object
gUnknown_8260556:
	.byte	0xfc
	.byte	0x2
	.byte	0x2
	.byte	0xff
	.size	 gUnknown_8260556,4
.text
	.align	2, 0
	.globl	UpdateNickInHealthbox
	.type	 UpdateNickInHealthbox,function
	.thumb_func
UpdateNickInHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L444
	ldr	r1, .L444+0x4
	bl	StringCopy
	add	r5, r0, #0
	add	r0, r7, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	mov	r0, sp
	bl	StringGet_Nickname
	add	r0, r5, #0
	mov	r1, sp
	bl	StringCopy
	add	r5, r0, #0
	mov	r0, #0xfc
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x1
	strb	r0, [r5]
	add	r5, r5, #0x1
	add	r0, r7, #0
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r7, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r0, #0
	cmp	r0, #0x1d
	beq	.L432	@cond_branch
	cmp	r0, #0x20
	bne	.L431	@cond_branch
.L432:
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L444+0x8
	add	r1, r1, r0
	mov	r0, sp
	bl	StringCompare
	cmp	r0, #0
	bne	.L431	@cond_branch
	mov	r6, #0x64
.L431:
	ldr	r1, .L444+0xc
	mov	r0, r8
	lsl	r4, r0, #0x4
	add	r0, r4, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r7, #0
	bl	CheckBattleTypeGhost
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L433	@cond_branch
	mov	r6, #0x64
.L433:
	cmp	r6, #0
	beq	.L436	@cond_branch
	cmp	r6, #0xfe
	beq	.L437	@cond_branch
	mov	r0, #0xb
	b	.L443
.L445:
	.align	2, 0
.L444:
	.word	gDisplayedStringBattle
	.word	gUnknown_8260556
	.word	gSpeciesNames
	.word	gSprites
.L436:
	mov	r0, #0xb
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0xb5
	b	.L443
.L437:
	mov	r0, #0xa
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0xb6
.L443:
	strb	r0, [r5]
	mov	r0, #0xff
	strb	r0, [r5, #0x1]
	ldr	r0, .L446
	add	r3, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x3
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r6, r0, #0
	ldr	r0, .L446+0x4
	mov	r2, r8
	add	r1, r4, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r4, r0, #0x11
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L439	@cond_branch
	ldr	r1, .L446+0x8
	add	r0, r4, r1
	add	r1, r6, #0
	mov	r2, #0x6
	bl	TextIntoHealthboxObject
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	ldr	r2, .L446+0xc
	add	r5, r4, r2
	cmp	r0, #0
	bne	.L440	@cond_branch
	ldr	r0, .L446+0x10
	add	r5, r4, r0
.L440:
	add	r1, r6, #0
	add	r1, r1, #0xc0
	add	r0, r5, #0
	mov	r2, #0x1
	bl	TextIntoHealthboxObject
	b	.L442
.L447:
	.align	2, 0
.L446:
	.word	gDisplayedStringBattle
	.word	gSprites
	.word	0x6010040
	.word	0x6010400
	.word	0x6010800
.L439:
	ldr	r1, .L448
	add	r0, r4, r1
	add	r1, r6, #0
	mov	r2, #0x7
	bl	TextIntoHealthboxObject
.L442:
	ldr	r0, [sp, #0xc]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	0x6010020
.Lfe31:
	.size	 UpdateNickInHealthbox,.Lfe31-UpdateNickInHealthbox
	.align	2, 0
	.globl	TryAddPokeballIconToHealthbox
	.type	 TryAddPokeballIconToHealthbox,function
	.thumb_func
TryAddPokeballIconToHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	ldr	r0, .L458
	ldr	r1, [r0]
	ldr	r0, .L458+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L450	@cond_branch
	mov	r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L450	@cond_branch
	ldr	r0, .L458+0x8
	mov	r9, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	mov	r8, r0
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L450	@cond_branch
	ldr	r1, .L458+0xc
	lsl	r0, r4, #0x1
	add	r5, r0, r1
	ldrh	r0, [r5]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r6, .L458+0x10
	add	r0, r0, r6
	add	r1, r4, #0
	bl	CheckBattleTypeGhost
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L450	@cond_branch
	ldrh	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L450	@cond_branch
	mov	r1, r8
	ldrh	r0, [r1, #0x38]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r2, sl
	cmp	r2, #0
	beq	.L456	@cond_branch
	mov	r0, #0x46
	bl	GetHealthboxElementGfxPtr
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r2, .L458+0x14
	add	r1, r1, r2
	ldr	r2, .L458+0x18
	bl	CpuSet
	b	.L450
.L459:
	.align	2, 0
.L458:
	.word	gBattleTypeFlags
	.word	0x10210
	.word	gSprites
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	0x6010000
	.word	0x4000008
.L456:
	mov	r0, sl
	str	r0, [sp]
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r0, .L460
	add	r1, r1, r0
	ldr	r2, .L460+0x4
	mov	r0, sp
	bl	CpuSet
.L450:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L461:
	.align	2, 0
.L460:
	.word	0x6010000
	.word	0x5000008
.Lfe32:
	.size	 TryAddPokeballIconToHealthbox,.Lfe32-TryAddPokeballIconToHealthbox
	.section .rodata
	.align	1, 0
	.type	 sStatusIconColors,object
sStatusIconColors:
	.short	0x6198
	.short	0xef7
	.short	0x4694
	.short	0x72d1
	.short	0x29dc
	.size	 sStatusIconColors,10
.text
	.align	2, 0
	.type	 UpdateStatusIconInHealthbox,function
	.thumb_func
UpdateStatusIconInHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L486
	mov	r2, r9
	lsl	r1, r2, #0x4
	add	r1, r1, r9
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r1, #0x38]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L463	@cond_branch
	ldr	r1, .L486+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L486+0x8
	add	r0, r0, r1
	mov	r1, #0x37
	bl	GetMonData
	add	r4, r0, #0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	mov	r3, #0x12
	mov	r8, r3
	cmp	r0, #0
	bne	.L466	@cond_branch
	mov	r0, #0x1a
	mov	r8, r0
	b	.L466
.L487:
	.align	2, 0
.L486:
	.word	gSprites
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L463:
	ldr	r1, .L488
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L488+0x4
	add	r0, r0, r1
	mov	r1, #0x37
	bl	GetMonData
	add	r4, r0, #0
	mov	r1, #0x11
	mov	r8, r1
.L466:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L467	@cond_branch
	mov	r0, #0x1b
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x2
	b	.L468
.L489:
	.align	2, 0
.L488:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L467:
	mov	r0, #0x88
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L469	@cond_branch
	mov	r0, #0x15
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x0
	b	.L468
.L469:
	mov	r0, #0x10
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L471	@cond_branch
	mov	r0, #0x21
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x4
	b	.L468
.L471:
	mov	r0, #0x20
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L473	@cond_branch
	mov	r0, #0x1e
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x3
	b	.L468
.L473:
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L475	@cond_branch
	mov	r0, #0x18
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x1
	b	.L468
.L475:
	mov	r0, #0x27
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r4, #0x0
	mov	r2, r9
	lsl	r0, r2, #0x4
	mov	r3, r8
	lsl	r3, r3, #0x10
	mov	r8, r3
	lsl	r7, r7, #0x2
	ldr	r1, .L490
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L480:
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	mov	r2, r8
	asr	r0, r2, #0x10
	add	r1, r1, r0
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r3, .L490+0x4
	add	r1, r1, r3
	add	r0, r6, #0
	ldr	r2, .L490+0x8
	bl	CpuSet
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L480	@cond_branch
	ldr	r0, .L490+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r7, r0
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L482	@cond_branch
	mov	r0, #0x1
	bl	GetHealthboxElementGfxPtr
	ldr	r2, .L490
	mov	r3, sl
	lsl	r1, r3, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L490+0x4
	add	r1, r1, r2
	ldr	r2, .L490+0x10
	bl	CpuSet
.L482:
	mov	r0, r9
	mov	r1, #0x1
	bl	TryAddPokeballIconToHealthbox
	b	.L462
.L491:
	.align	2, 0
.L490:
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
	.word	gBattleSpritesDataPtr
	.word	0x4000010
.L468:
	mov	r1, r9
	lsl	r5, r1, #0x4
	add	r5, r5, r9
	lsl	r5, r5, #0x2
	ldr	r2, .L492
	add	r5, r5, r2
	ldrb	r4, [r5, #0x5]
	lsr	r4, r4, #0x4
	lsl	r4, r4, #0x4
	add	r4, r4, #0xc
	add	r4, r4, r7
	ldr	r1, .L492+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r4, r3
	mov	r2, #0x2
	bl	FillPalette
	lsl	r4, r4, #0x1
	ldr	r0, .L492+0x8
	add	r0, r4, r0
	ldr	r1, .L492+0xc
	add	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	CpuSet
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, r8
	lsl	r1, r1, #0x5
	ldr	r2, .L492+0x10
	mov	r8, r2
	add	r1, r1, r8
	ldr	r2, .L492+0x14
	add	r0, r6, #0
	bl	CpuSet
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L484	@cond_branch
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L483	@cond_branch
.L484:
	ldr	r0, .L492+0x18
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L483	@cond_branch
	mov	r0, #0x0
	bl	GetHealthboxElementGfxPtr
	mov	r3, sl
	lsl	r4, r3, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	ldr	r1, .L492
	add	r4, r4, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, r8
	ldr	r5, .L492+0x1c
	add	r2, r5, #0
	bl	CpuSet
	mov	r0, #0x41
	bl	GetHealthboxElementGfxPtr
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, #0x20
	add	r1, r1, r8
	add	r2, r5, #0
	bl	CpuSet
.L483:
	mov	r0, r9
	mov	r1, #0x0
	bl	TryAddPokeballIconToHealthbox
.L462:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gSprites
	.word	sStatusIconColors
	.word	gPlttBufferUnfaded+0x200
	.word	0x5000200
	.word	0x6010000
	.word	0x4000018
	.word	gBattleSpritesDataPtr
	.word	0x4000008
.Lfe33:
	.size	 UpdateStatusIconInHealthbox,.Lfe33-UpdateStatusIconInHealthbox
	.align	2, 0
	.type	 GetStatusIconForBattlerId,function
	.thumb_func
GetStatusIconForBattlerId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsr	r2, r0, #0x18
	add	r0, r2, #0
	sub	r0, r0, #0x15
	cmp	r0, #0xc
	bhi	.L495	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L533
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L534:
	.align	2, 0
.L533:
	.word	.L531
	.align	2, 0
	.align	2, 0
.L531:
	.word	.L496
	.word	.L495
	.word	.L495
	.word	.L503
	.word	.L495
	.word	.L495
	.word	.L510
	.word	.L495
	.word	.L495
	.word	.L517
	.word	.L495
	.word	.L495
	.word	.L524
.L496:
	mov	r2, #0x15
	cmp	r3, #0
	beq	.L495	@cond_branch
	mov	r2, #0x47
	cmp	r3, #0x1
	beq	.L495	@cond_branch
	mov	r2, #0x65
	cmp	r3, #0x2
	bne	.L495	@cond_branch
	mov	r2, #0x56
	b	.L495
.L503:
	mov	r2, #0x18
	cmp	r3, #0
	beq	.L495	@cond_branch
	mov	r2, #0x4a
	cmp	r3, #0x1
	beq	.L495	@cond_branch
	mov	r2, #0x68
	cmp	r3, #0x2
	bne	.L495	@cond_branch
	mov	r2, #0x59
	b	.L495
.L510:
	mov	r2, #0x1b
	cmp	r3, #0
	beq	.L495	@cond_branch
	mov	r2, #0x4d
	cmp	r3, #0x1
	beq	.L495	@cond_branch
	mov	r2, #0x6b
	cmp	r3, #0x2
	bne	.L495	@cond_branch
	mov	r2, #0x5c
	b	.L495
.L517:
	mov	r2, #0x1e
	cmp	r3, #0
	beq	.L495	@cond_branch
	mov	r2, #0x50
	cmp	r3, #0x1
	beq	.L495	@cond_branch
	mov	r2, #0x6e
	cmp	r3, #0x2
	bne	.L495	@cond_branch
	mov	r2, #0x5f
	b	.L495
.L524:
	mov	r2, #0x21
	cmp	r3, #0
	beq	.L495	@cond_branch
	mov	r2, #0x53
	cmp	r3, #0x1
	beq	.L495	@cond_branch
	mov	r2, #0x71
	cmp	r3, #0x2
	bne	.L495	@cond_branch
	mov	r2, #0x62
.L495:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 GetStatusIconForBattlerId,.Lfe34-GetStatusIconForBattlerId
	.align	2, 0
	.type	 UpdateSafariBallsTextOnHealthbox,function
	.thumb_func
UpdateSafariBallsTextOnHealthbox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L536
	mov	r1, #0x0
	mov	r2, #0x3
	mov	r3, sp
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r5, r0, #0
	ldr	r1, .L536+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x4]
	lsl	r4, r4, #0x16
	lsr	r4, r4, #0x11
	ldr	r1, .L536+0x8
	add	r0, r4, r1
	add	r1, r5, #0
	mov	r2, #0x6
	bl	TextIntoHealthboxObject
	ldr	r0, .L536+0xc
	add	r4, r4, r0
	add	r5, r5, #0xc0
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x2
	bl	TextIntoHealthboxObject
	ldr	r0, [sp]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	gText_SafariBalls
	.word	gSprites
	.word	0x6010040
	.word	0x6010800
.Lfe35:
	.size	 UpdateSafariBallsTextOnHealthbox,.Lfe35-UpdateSafariBallsTextOnHealthbox
	.align	2, 0
	.type	 UpdateLeftNoOfBallsTextOnHealthbox,function
	.thumb_func
UpdateLeftNoOfBallsTextOnHealthbox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L539
	mov	r0, sp
	bl	StringCopy
	ldr	r1, .L539+0x4
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r1, #0x2f
	sub	r1, r1, r0
	add	r3, sp, #0x10
	mov	r0, sp
	mov	r2, #0x3
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r5, r0, #0
	ldr	r1, .L539+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x4]
	lsl	r4, r4, #0x16
	lsr	r4, r4, #0x11
	ldr	r1, .L539+0xc
	add	r0, r4, r1
	add	r1, r5, #0
	mov	r2, #0x2
	bl	SafariTextIntoHealthboxObject
	ldr	r0, .L539+0x10
	add	r4, r4, r0
	add	r5, r5, #0x40
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x4
	bl	SafariTextIntoHealthboxObject
	ldr	r0, [sp, #0x10]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L540:
	.align	2, 0
.L539:
	.word	gText_HighlightRed_Left
	.word	gNumSafariBalls
	.word	gSprites
	.word	0x60102c0
	.word	0x6010a00
.Lfe36:
	.size	 UpdateLeftNoOfBallsTextOnHealthbox,.Lfe36-UpdateLeftNoOfBallsTextOnHealthbox
	.align	2, 0
	.globl	UpdateHealthboxAttribute
	.type	 UpdateHealthboxAttribute,function
	.thumb_func
UpdateHealthboxAttribute:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	ldr	r1, .L568
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r7, #0
	bne	.L542	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L542	@cond_branch
	mov	r0, r9
	bl	GetBattlerSide
.L542:
	ldr	r1, .L568
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5789
	b	.L543	@long jump
.LCB5789:
	cmp	r7, #0x3
	beq	.L545	@cond_branch
	cmp	r7, #0
	bne	.L544	@cond_branch
.L545:
	mov	r0, r8
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	UpdateLvlInHealthbox
.L544:
	cmp	r7, #0x1
	bhi	.L546	@cond_branch
	mov	r0, r8
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r6, #0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
.L546:
	cmp	r7, #0x2
	beq	.L548	@cond_branch
	cmp	r7, #0
	bne	.L547	@cond_branch
.L548:
	mov	r0, r8
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r6, #0
	mov	r2, #0x1
	bl	UpdateHpTextInHealthbox
.L547:
	cmp	r7, #0x5
	beq	.L550	@cond_branch
	cmp	r7, #0
	bne	.L549	@cond_branch
.L550:
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	mov	r0, r8
	mov	r1, #0x3a
	bl	GetMonData
	add	r4, r0, #0
	mov	r0, r8
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, r9
	add	r1, r6, #0
	add	r2, r4, #0
	bl	SetBattleBarStruct
	mov	r0, r9
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
.L549:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0
	bne	.L551	@cond_branch
	cmp	r7, #0x6
	beq	.L552	@cond_branch
	cmp	r7, #0
	bne	.L551	@cond_branch
.L552:
	mov	r0, #0x3
	bl	LoadBattleBarGfx
	mov	r0, r8
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, r8
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	mov	r1, #0x19
	bl	GetMonData
	add	r3, r0, #0
	ldr	r0, .L568+0x4
	mov	ip, r0
	lsl	r1, r4, #0x2
	ldr	r2, .L568+0x8
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, ip
	ldr	r1, [r1]
	sub	r3, r3, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r4, r4, ip
	ldr	r2, [r4]
	sub	r2, r2, r1
	mov	r0, sl
	str	r0, [sp]
	mov	r0, r9
	add	r1, r6, #0
	bl	SetBattleBarStruct
	mov	r0, r9
	add	r1, r6, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	MoveBattleBar
.L551:
	cmp	r7, #0x4
	beq	.L554	@cond_branch
	cmp	r7, #0
	bne	.L553	@cond_branch
.L554:
	add	r0, r6, #0
	mov	r1, r8
	bl	UpdateNickInHealthbox
.L553:
	cmp	r7, #0x9
	beq	.L556	@cond_branch
	cmp	r7, #0
	bne	.L555	@cond_branch
.L556:
	add	r0, r6, #0
	bl	UpdateStatusIconInHealthbox
.L555:
	cmp	r7, #0xa
	bne	.L557	@cond_branch
	add	r0, r6, #0
	bl	UpdateSafariBallsTextOnHealthbox
.L557:
	add	r0, r7, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L559	@cond_branch
	add	r0, r6, #0
	bl	UpdateLeftNoOfBallsTextOnHealthbox
	b	.L559
.L569:
	.align	2, 0
.L568:
	.word	gSprites
	.word	gExperienceTables
	.word	gBaseStats
.L543:
	cmp	r7, #0x3
	beq	.L561	@cond_branch
	cmp	r7, #0
	bne	.L560	@cond_branch
.L561:
	mov	r0, r8
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	UpdateLvlInHealthbox
.L560:
	cmp	r7, #0x5
	beq	.L563	@cond_branch
	cmp	r7, #0
	bne	.L562	@cond_branch
.L563:
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	mov	r0, r8
	mov	r1, #0x3a
	bl	GetMonData
	add	r4, r0, #0
	mov	r0, r8
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, r9
	add	r1, r6, #0
	add	r2, r4, #0
	bl	SetBattleBarStruct
	mov	r0, r9
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
.L562:
	cmp	r7, #0x4
	beq	.L565	@cond_branch
	cmp	r7, #0
	bne	.L564	@cond_branch
.L565:
	add	r0, r6, #0
	mov	r1, r8
	bl	UpdateNickInHealthbox
.L564:
	cmp	r7, #0x9
	beq	.L567	@cond_branch
	cmp	r7, #0
	bne	.L559	@cond_branch
.L567:
	add	r0, r6, #0
	bl	UpdateStatusIconInHealthbox
.L559:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 UpdateHealthboxAttribute,.Lfe37-UpdateHealthboxAttribute
	.align	2, 0
	.globl	MoveBattleBar
	.type	 MoveBattleBar,function
	.thumb_func
MoveBattleBar:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	cmp	r2, #0
	bne	.L571	@cond_branch
	ldr	r0, .L578
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, r8
	lsl	r5, r1, #0x2
	add	r3, r5, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r0, [r3, #0x4]
	ldr	r1, [r3, #0x8]
	ldr	r2, [r3, #0xc]
	add	r3, r3, #0x10
	mov	r4, #0x6
	str	r4, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	bl	CalcNewBarValue
	add	r4, r0, #0
	add	r7, r5, #0
	b	.L572
.L579:
	.align	2, 0
.L578:
	.word	gBattleSpritesDataPtr
.L571:
	ldr	r2, .L580
	mov	sl, r2
	ldr	r0, [r2]
	ldr	r2, [r0, #0xc]
	mov	r0, r8
	lsl	r4, r0, #0x2
	add	r0, r4, r0
	lsl	r6, r0, #0x2
	add	r2, r6, r2
	ldr	r0, [r2, #0x8]
	ldr	r1, [r2, #0xc]
	ldr	r2, [r2, #0x4]
	mov	r3, #0x8
	bl	GetScaledExpFraction
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r4, #0
	cmp	r5, #0
	bne	.L573	@cond_branch
	mov	r5, #0x1
.L573:
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r0, [r0, #0xc]
	add	r4, r6, r0
	ldr	r6, [r4, #0xc]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__divsi3
	cmp	r0, #0
	bge	.L574	@cond_branch
	neg	r0, r0
.L574:
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, [r4, #0x4]
	ldr	r1, [r4, #0x8]
	add	r3, r4, #0
	add	r3, r3, #0x10
	mov	r2, #0x8
	str	r2, [sp]
	str	r5, [sp, #0x4]
	add	r2, r6, #0
	bl	CalcNewBarValue
	add	r4, r0, #0
.L572:
	mov	r2, r9
	cmp	r2, #0x1
	beq	.L576	@cond_branch
	cmp	r2, #0
	bne	.L575	@cond_branch
	ldr	r0, .L580
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r7, r0
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L575	@cond_branch
.L576:
	mov	r0, r8
	mov	r1, r9
	bl	MoveBattleBarGraphically
.L575:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r4, r0
	bne	.L577	@cond_branch
	ldr	r0, .L580
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	mov	r2, r8
	add	r0, r7, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0, #0x10]
.L577:
	add	r0, r4, #0
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L581:
	.align	2, 0
.L580:
	.word	gBattleSpritesDataPtr
.Lfe38:
	.size	 MoveBattleBar,.Lfe38-MoveBattleBar
	.align	2, 0
	.type	 MoveBattleBarGraphically,function
	.thumb_func
MoveBattleBarGraphically:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0
	beq	.L584	@cond_branch
	cmp	r1, #0x1
	beq	.L596	@cond_branch
	b	.L583
.L584:
	ldr	r0, .L612
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	lsl	r5, r6, #0x2
	add	r3, r5, r6
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r0, [r3, #0x4]
	ldr	r1, [r3, #0x8]
	ldr	r2, [r3, #0xc]
	add	r3, r3, #0x10
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x6
	str	r4, [sp, #0x4]
	bl	CalcBarFilledPixels
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	mov	r9, r1
	add	r7, r5, #0
	cmp	r0, #0x18
	bhi	.L586	@cond_branch
	mov	r2, #0x38
	mov	r9, r2
	cmp	r0, #0x9
	bls	.L586	@cond_branch
	mov	r4, #0x2f
	mov	r9, r4
.L586:
	mov	r5, #0x0
	ldr	r0, .L612+0x4
	mov	r8, r0
.L592:
	ldr	r0, .L612
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	add	r0, r7, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r5, #0x1
	bhi	.L593	@cond_branch
	mov	r0, r9
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L612+0x8
	add	r1, r1, r2
	ldr	r2, .L612+0xc
	bl	CpuSet
	b	.L591
.L613:
	.align	2, 0
.L612:
	.word	gBattleSpritesDataPtr
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.L593:
	mov	r0, r9
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r5, r1
	lsl	r1, r1, #0x5
	ldr	r4, .L614
	add	r1, r1, r4
	ldr	r2, .L614+0x4
	bl	CpuSet
.L591:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L592	@cond_branch
	b	.L583
.L615:
	.align	2, 0
.L614:
	.word	0x6010040
	.word	0x4000008
.L596:
	ldr	r0, .L616
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	lsl	r5, r6, #0x2
	add	r3, r5, r6
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r0, [r3, #0x4]
	ldr	r1, [r3, #0x8]
	ldr	r2, [r3, #0xc]
	add	r3, r3, #0x10
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x8
	str	r4, [sp, #0x4]
	bl	CalcBarFilledPixels
	ldr	r1, .L616+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L616+0x8
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r5, #0
	cmp	r0, #0x64
	bne	.L597	@cond_branch
	mov	r5, #0x0
	mov	r1, #0x0
.L601:
	mov	r0, sp
	add	r0, r0, r5
	add	r0, r0, #0x8
	strb	r1, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L601	@cond_branch
.L597:
	mov	r5, #0x0
	ldr	r0, .L616+0xc
	mov	r8, r0
	add	r0, r7, r6
	lsl	r4, r0, #0x2
.L606:
	cmp	r5, #0x3
	bhi	.L607	@cond_branch
	mov	r0, #0xc
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, .L616
	ldr	r1, [r1]
	ldr	r1, [r1, #0xc]
	add	r1, r4, r1
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0
	add	r2, r2, #0x24
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L616+0x10
	add	r1, r1, r2
	ldr	r2, .L616+0x14
	bl	CpuSet
	b	.L605
.L617:
	.align	2, 0
.L616:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.L607:
	mov	r0, #0xc
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, .L618
	ldr	r1, [r1]
	ldr	r1, [r1, #0xc]
	add	r1, r4, r1
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r5, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L618+0x4
	add	r1, r1, r2
	ldr	r2, .L618+0x8
	bl	CpuSet
.L605:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L606	@cond_branch
.L583:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L619:
	.align	2, 0
.L618:
	.word	gBattleSpritesDataPtr
	.word	0x6010b80
	.word	0x4000008
.Lfe39:
	.size	 MoveBattleBarGraphically,.Lfe39-MoveBattleBarGraphically
	.align	2, 0
	.type	 CalcNewBarValue,function
	.thumb_func
CalcNewBarValue:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r4, r1, #0
	mov	r8, r2
	add	r5, r3, #0
	ldr	r1, [sp, #0x18]
	ldr	r0, [sp, #0x1c]
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	lsl	r1, r1, #0x1b
	lsr	r2, r1, #0x18
	ldr	r1, [r5]
	ldr	r0, .L645
	cmp	r1, r0
	bne	.L621	@cond_branch
	cmp	r7, r2
	bge	.L622	@cond_branch
	lsl	r0, r4, #0x8
	str	r0, [r5]
	b	.L621
.L646:
	.align	2, 0
.L645:
	.word	-0x8000
.L622:
	str	r4, [r5]
.L621:
	mov	r0, r8
	sub	r4, r4, r0
	cmp	r4, #0
	bge	.L624	@cond_branch
	mov	r4, #0x0
	b	.L625
.L624:
	cmp	r4, r7
	ble	.L625	@cond_branch
	add	r4, r7, #0
.L625:
	cmp	r7, r2
	bge	.L627	@cond_branch
	ldr	r0, [r5]
	asr	r1, r0, #0x8
	add	r6, r0, #0
	cmp	r4, r1
	bne	.L629	@cond_branch
	mov	r0, #0xff
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L629	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L642
.L627:
	ldr	r6, [r5]
	cmp	r4, r6
	bne	.L629	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L642
.L629:
	cmp	r7, r2
	bge	.L631	@cond_branch
	lsl	r0, r7, #0x8
	add	r1, r2, #0
	bl	__divsi3
	mov	r1, r8
	cmp	r1, #0
	bge	.L632	@cond_branch
	add	r0, r6, r0
	str	r0, [r5]
	asr	r2, r0, #0x8
	cmp	r2, r4
	blt	.L637	@cond_branch
	b	.L643
.L632:
	sub	r0, r6, r0
	str	r0, [r5]
	asr	r2, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	cmp	r0, #0
	ble	.L635	@cond_branch
	add	r2, r2, #0x1
.L635:
	cmp	r2, r4
	bgt	.L637	@cond_branch
.L643:
	lsl	r0, r4, #0x8
	str	r0, [r5]
	add	r2, r4, #0
	b	.L637
.L631:
	mov	r0, r8
	cmp	r0, #0
	bge	.L638	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, r3
	str	r0, [r5]
	cmp	r0, r4
	ble	.L641	@cond_branch
	b	.L644
.L638:
	ldr	r0, [r5]
	sub	r0, r0, r3
	str	r0, [r5]
	cmp	r0, r4
	bge	.L641	@cond_branch
.L644:
	str	r4, [r5]
.L641:
	ldr	r2, [r5]
.L637:
	add	r0, r2, #0
.L642:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 CalcNewBarValue,.Lfe40-CalcNewBarValue
	.align	2, 0
	.type	 CalcBarFilledPixels,function
	.thumb_func
CalcBarFilledPixels:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	ip, r3
	ldr	r7, [sp, #0x14]
	ldr	r0, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	sub	r5, r1, r2
	cmp	r5, #0
	bge	.L648	@cond_branch
	mov	r5, #0x0
	b	.L649
.L648:
	cmp	r5, r4
	ble	.L649	@cond_branch
	add	r5, r4, #0
.L649:
	lsl	r0, r6, #0x1b
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	cmp	r1, r6
	bcs	.L652	@cond_branch
	mov	r2, #0x0
.L654:
	add	r0, r7, r1
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcc	.L654	@cond_branch
.L652:
	cmp	r4, r3
	bge	.L656	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mul	r0, r0, r3
	add	r1, r4, #0
	bl	__divsi3
	asr	r0, r0, #0x8
	b	.L667
.L656:
	mov	r1, ip
	ldr	r0, [r1]
	mul	r0, r0, r3
	add	r1, r4, #0
	bl	__divsi3
.L667:
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	cmp	r3, #0
	bne	.L658	@cond_branch
	cmp	r5, #0
	ble	.L658	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7]
	mov	r3, #0x1
	b	.L659
.L658:
	mov	r1, #0x0
	mov	r4, #0x8
.L660:
	cmp	r1, r6
	bcs	.L659	@cond_branch
	cmp	r2, #0x7
	bls	.L664	@cond_branch
	add	r0, r7, r1
	strb	r4, [r0]
	add	r0, r2, #0
	sub	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	b	.L660
.L664:
	add	r0, r7, r1
	strb	r2, [r0]
.L659:
	add	r0, r3, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 CalcBarFilledPixels,.Lfe41-CalcBarFilledPixels
	.align	2, 0
	.type	 sub_804A460,function
	.thumb_func
sub_804A460:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x8
	mov	r9, r0
	mov	sl, r1
	add	r6, r2, #0
	mov	r8, r3
	ldr	r5, [sp, #0x24]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r1, #0x4]
	mov	r3, r9
	ldr	r2, [r3, #0x8]
	mov	r3, #0x6
	str	r3, [sp]
	mov	r3, #0x1
	str	r3, [sp, #0x4]
	mov	r3, sl
	bl	CalcNewBarValue
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	str	r5, [sp]
	mov	r0, r9
	mov	r1, sl
	add	r2, r6, #0
	mov	r3, r8
	bl	sub_804A510
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r0, r4, #0
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 sub_804A460,.Lfe42-sub_804A460
	.align	2, 0
	.type	 sub_804A4C8,function
	.thumb_func
sub_804A4C8:
	push	{r4, lr}
	add	sp, sp, #-0x8
	add	r3, r1, #0
	ldr	r4, [r0]
	ldr	r1, [r0, #0x4]
	ldr	r2, [r0, #0x8]
	mov	r0, #0x6
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	bl	CalcNewBarValue
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 sub_804A4C8,.Lfe43-sub_804A4C8
	.align	2, 0
	.type	 sub_804A4F0,function
	.thumb_func
sub_804A4F0:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0xc]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	bl	sub_804A510
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 sub_804A4F0,.Lfe44-sub_804A4F0
	.align	2, 0
	.type	 sub_804A510,function
	.thumb_func
sub_804A510:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, [sp, #0x40]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, [r4]
	ldr	r1, [r4, #0x4]
	ldr	r2, [r4, #0x8]
	add	r3, sp, #0xc
	str	r3, [sp]
	mov	r3, #0x6
	str	r3, [sp, #0x4]
	add	r3, r5, #0
	bl	CalcBarFilledPixels
	mov	r3, #0x0
	add	r6, sp, #0x14
	add	r7, r6, #0
	ldrb	r0, [r4, #0xc]
	lsl	r5, r0, #0x1b
	ldr	r4, [r4, #0x10]
.L675:
	lsl	r2, r3, #0x1
	add	r2, r7, r2
	lsr	r1, r5, #0xf
	mov	r0, sp
	add	r0, r0, r3
	add	r0, r0, #0xc
	ldrb	r0, [r0]
	add	r0, r4, r0
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x5
	bls	.L675	@cond_branch
	mov	r0, #0x6
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, r9
	add	r1, r6, #0
	mov	r2, sl
	mov	r3, r8
	bl	CopyToBgTilemapBufferRect_ChangePalette
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 sub_804A510,.Lfe45-sub_804A510
	.align	2, 0
	.type	 GetScaledExpFraction,function
	.thumb_func
GetScaledExpFraction:
	push	{r4, r5, r6, r7, lr}
	add	r6, r2, #0
	lsl	r3, r3, #0x1b
	lsr	r7, r3, #0x18
	sub	r5, r0, r1
	cmp	r5, #0
	bge	.L678	@cond_branch
	mov	r5, #0x0
	b	.L679
.L678:
	cmp	r5, r6
	ble	.L679	@cond_branch
	add	r5, r6, #0
.L679:
	mul	r0, r0, r7
	add	r1, r6, #0
	bl	__divsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r5
	mul	r0, r0, r7
	add	r1, r6, #0
	bl	__divsi3
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	sub	r0, r4, r0
	cmp	r0, #0
	bge	.L681	@cond_branch
	neg	r0, r0
.L681:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 GetScaledExpFraction,.Lfe46-GetScaledExpFraction
	.align	2, 0
	.globl	GetScaledHPFraction
	.type	 GetScaledHPFraction,function
	.thumb_func
GetScaledHPFraction:
	push	{r4, lr}
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	mov	r0, r4
	mul	r0, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L684	@cond_branch
	cmp	r4, #0
	ble	.L684	@cond_branch
	mov	r0, #0x1
.L684:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetScaledHPFraction,.Lfe47-GetScaledHPFraction
	.align	2, 0
	.globl	GetHPBarLevel
	.type	 GetHPBarLevel,function
	.thumb_func
GetHPBarLevel:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bne	.L686	@cond_branch
	mov	r0, #0x4
	b	.L687
.L686:
	mov	r2, #0x30
	bl	GetScaledHPFraction
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x3
	cmp	r1, #0x18
	bhi	.L687	@cond_branch
	mov	r0, #0x2
	cmp	r1, #0x9
	bhi	.L687	@cond_branch
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L687:
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 GetHPBarLevel,.Lfe48-GetHPBarLevel
	.section .rodata
	.align	2, 0
	.type	 sHealthboxWindowTemplate,object
	.size	 sHealthboxWindowTemplate,8
sHealthboxWindowTemplate:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x2
	.byte	0x0
	.short	0x0
.text
	.align	2, 0
	.type	 AddTextPrinterAndCreateWindowOnHealthbox,function
	.thumb_func
AddTextPrinterAndCreateWindowOnHealthbox:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x20
	mov	r9, r0
	add	r6, r1, #0
	mov	r8, r2
	mov	sl, r3
	ldr	r0, .L695
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r0, sp, #0x18
	bl	AddWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r4, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	mov	r1, #0x22
	bl	FillWindowPixelBuffer
	add	r1, sp, #0x14
	mov	r2, #0x0
	mov	r0, #0x2
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	str	r2, [sp]
	str	r2, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0xc]
	mov	r0, r9
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r6, #0
	mov	r3, r8
	bl	AddTextPrinterParameterized4
	mov	r0, sl
	str	r4, [r0]
	add	r0, r5, #0
	mov	r1, #0x7
	bl	GetWindowAttribute
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L696:
	.align	2, 0
.L695:
	.word	sHealthboxWindowTemplate
.Lfe49:
	.size	 AddTextPrinterAndCreateWindowOnHealthbox,.Lfe49-AddTextPrinterAndCreateWindowOnHealthbox
	.align	2, 0
	.type	 RemoveWindowOnHealthbox,function
	.thumb_func
RemoveWindowOnHealthbox:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 RemoveWindowOnHealthbox,.Lfe50-RemoveWindowOnHealthbox
	.align	2, 0
	.type	 TextIntoHealthboxObject,function
	.thumb_func
TextIntoHealthboxObject:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	add	r4, r2, #0
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r5, r1
	add	r1, r6, r1
	lsl	r2, r4, #0x3
	ldr	r3, .L705
	and	r2, r2, r3
	mov	r3, #0x80
	lsl	r3, r3, #0x13
	orr	r2, r2, r3
	bl	CpuSet
	cmp	r4, #0
	ble	.L699	@cond_branch
.L700:
	add	r0, r5, #0
	add	r0, r0, #0x14
	add	r1, r6, #0
	add	r1, r1, #0x14
	ldr	r2, .L705+0x4
	bl	CpuSet
	add	r6, r6, #0x20
	add	r5, r5, #0x20
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L700	@cond_branch
.L699:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	0x1fffff
	.word	0x4000003
.Lfe51:
	.size	 TextIntoHealthboxObject,.Lfe51-TextIntoHealthboxObject
	.align	2, 0
	.type	 SafariTextIntoHealthboxObject,function
	.thumb_func
SafariTextIntoHealthboxObject:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	lsl	r4, r2, #0x3
	ldr	r0, .L708
	and	r4, r4, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	orr	r4, r4, r0
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CpuSet
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	add	r6, r6, r0
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CpuSet
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L709:
	.align	2, 0
.L708:
	.word	0x1fffff
.Lfe52:
	.size	 SafariTextIntoHealthboxObject,.Lfe52-SafariTextIntoHealthboxObject
.text
	.align	2, 0 @ Don't pad with nop

