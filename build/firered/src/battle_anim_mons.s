@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sAnimTaskAffineAnim,object
	.size	 sAnimTaskAffineAnim,4
sAnimTaskAffineAnim:
	.word	0x0
	.align	2, 0
	.type	 sUnused,object
	.size	 sUnused,4
sUnused:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattlerCoords,object
sBattlerCoords:
	.byte	0x48
	.byte	0x50
	.space	2
	.byte	0xb0
	.byte	0x28
	.space	2
	.byte	0x30
	.byte	0x28
	.space	2
	.byte	0x70
	.byte	0x50
	.space	2
	.byte	0x20
	.byte	0x50
	.space	2
	.byte	0xc8
	.byte	0x28
	.space	2
	.byte	0x5a
	.byte	0x58
	.space	2
	.byte	0x98
	.byte	0x20
	.space	2
	.size	 sBattlerCoords,32
	.globl	gCastformFrontSpriteCoords
	.align	2, 0
	.type	 gCastformFrontSpriteCoords,object
	.size	 gCastformFrontSpriteCoords,16
gCastformFrontSpriteCoords:
	.byte	0x44
	.byte	0x11
	.space	2
	.byte	0x66
	.byte	0x9
	.space	2
	.byte	0x46
	.byte	0x9
	.space	2
	.byte	0x86
	.byte	0x8
	.space	2
	.type	 sCastformElevations,object
	.size	 sCastformElevations,4
sCastformElevations:
	.byte	0xd
	.byte	0xe
	.byte	0xd
	.byte	0xd
	.type	 sCastformBackSpriteYCoords,object
	.size	 sCastformBackSpriteYCoords,4
sCastformBackSpriteYCoords:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.align	2, 0
	.type	 sSpriteTemplates_MoveEffectMons,object
sSpriteTemplates_MoveEffectMons:
	.short	0xd755
	.short	0xd755
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd756
	.short	0xd756
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.size	 sSpriteTemplates_MoveEffectMons,48
	.align	2, 0
	.type	 sSpriteSheets_MoveEffectMons,object
sSpriteSheets_MoveEffectMons:
	.word	gMiscBlank_Gfx
	.short	0x800
	.short	0xd755
	.word	gMiscBlank_Gfx
	.short	0x800
	.short	0xd756
	.size	 sSpriteSheets_MoveEffectMons,16
.text
	.align	2, 0
	.globl	GetBattlerSpriteCoord
	.type	 GetBattlerSpriteCoord,function
	.thumb_func
GetBattlerSpriteCoord:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	cmp	r4, #0x4
	bhi	.L9	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L21
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L22:
	.align	2, 0
.L21:
	.word	.L18
	.align	2, 0
	.align	2, 0
.L18:
	.word	.L5
	.word	.L6
	.word	.L5
	.word	.L9
	.word	.L9
.L5:
	ldr	r4, .L23
	add	r0, r5, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L23+0x4
	ldr	r1, [r1]
	mov	r2, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r4
	ldrb	r0, [r0]
	b	.L3
.L24:
	.align	2, 0
.L23:
	.word	sBattlerCoords
	.word	gBattleTypeFlags
.L6:
	ldr	r4, .L25
	add	r0, r5, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L25+0x4
	ldr	r1, [r1]
	mov	r2, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r4
	ldrb	r0, [r0, #0x1]
	b	.L3
.L26:
	.align	2, 0
.L25:
	.word	sBattlerCoords
	.word	gBattleTypeFlags
.L9:
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L10	@cond_branch
	ldr	r0, .L27
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L14	@cond_branch
	ldr	r1, .L27+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L27+0x8
	b	.L19
.L28:
	.align	2, 0
.L27:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L10:
	ldr	r0, .L29
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L14	@cond_branch
	ldr	r1, .L29+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L29+0x8
.L19:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L13
.L30:
	.align	2, 0
.L29:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L14:
	ldrh	r1, [r1, #0x2]
.L13:
	cmp	r4, #0x3
	bne	.L16	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x1
	b	.L20
.L16:
	add	r0, r5, #0
	mov	r2, #0x0
.L20:
	bl	GetBattlerSpriteFinal_Y
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L3:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 GetBattlerSpriteCoord,.Lfe1-GetBattlerSpriteCoord
	.align	2, 0
	.type	 GetBattlerYDelta,function
	.thumb_func
GetBattlerYDelta:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r7, r4, #0
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L32	@cond_branch
	cmp	r4, #0xc9
	bne	.L33	@cond_branch
	ldr	r0, .L56
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r1, r5, #0x2
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L34	@cond_branch
	ldr	r1, .L56+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L56+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L35
.L57:
	.align	2, 0
.L56:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L34:
	ldr	r0, .L58
	add	r0, r1, r0
	ldr	r2, [r0]
.L35:
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L36	@cond_branch
	add	r0, r7, #0
	b	.L37
.L59:
	.align	2, 0
.L58:
	.word	gTransformedPersonalities
.L36:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L37:
	ldr	r1, .L60
	lsl	r0, r0, #0x2
	b	.L54
.L61:
	.align	2, 0
.L60:
	.word	gMonBackPicCoords
.L33:
	ldr	r0, .L62
	cmp	r4, r0
	bne	.L39	@cond_branch
	ldr	r0, .L62+0x4
	ldr	r1, .L62+0x8
	add	r1, r5, r1
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r1]
	b	.L43
.L63:
	.align	2, 0
.L62:
	.word	0x181
	.word	sCastformBackSpriteYCoords
	.word	gBattleMonForms
.L39:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bls	.L41	@cond_branch
	ldr	r0, .L64
	b	.L55
.L65:
	.align	2, 0
.L64:
	.word	gMonBackPicCoords
.L41:
	ldr	r1, .L66
	lsl	r0, r4, #0x2
	b	.L54
.L67:
	.align	2, 0
.L66:
	.word	gMonBackPicCoords
.L32:
	cmp	r4, #0xc9
	bne	.L44	@cond_branch
	ldr	r0, .L68
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r1, r5, #0x2
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L45	@cond_branch
	ldr	r1, .L68+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L68+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L46
.L69:
	.align	2, 0
.L68:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L45:
	ldr	r0, .L70
	add	r0, r1, r0
	ldr	r2, [r0]
.L46:
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L47	@cond_branch
	add	r0, r7, #0
	b	.L48
.L71:
	.align	2, 0
.L70:
	.word	gTransformedPersonalities
.L47:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L48:
	ldr	r1, .L72
	lsl	r0, r0, #0x2
	b	.L54
.L73:
	.align	2, 0
.L72:
	.word	gMonFrontPicCoords
.L44:
	ldr	r0, .L74
	cmp	r4, r0
	bne	.L50	@cond_branch
	ldr	r0, .L74+0x4
	ldr	r1, .L74+0x8
	add	r1, r6, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L43
.L75:
	.align	2, 0
.L74:
	.word	0x181
	.word	gCastformFrontSpriteCoords
	.word	gBattleMonForms
.L50:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bls	.L52	@cond_branch
	ldr	r0, .L76
	b	.L55
.L77:
	.align	2, 0
.L76:
	.word	gMonFrontPicCoords
.L52:
	ldr	r1, .L78
	lsl	r0, r7, #0x2
.L54:
	add	r0, r0, r1
.L55:
	ldrb	r0, [r0, #0x1]
.L43:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L79:
	.align	2, 0
.L78:
	.word	gMonFrontPicCoords
.Lfe2:
	.size	 GetBattlerYDelta,.Lfe2-GetBattlerYDelta
	.align	2, 0
	.type	 GetBattlerElevation,function
	.thumb_func
GetBattlerElevation:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r7, r4, #0
	mov	r5, #0x0
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L81	@cond_branch
	ldr	r0, .L87
	cmp	r4, r0
	bne	.L82	@cond_branch
	ldr	r0, .L87+0x4
	ldr	r1, .L87+0x8
	add	r1, r6, r1
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r5, [r1]
	b	.L81
.L88:
	.align	2, 0
.L87:
	.word	0x181
	.word	sCastformElevations
	.word	gBattleMonForms
.L82:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bls	.L84	@cond_branch
	ldr	r0, .L89
	b	.L86
.L90:
	.align	2, 0
.L89:
	.word	gEnemyMonElevation
.L84:
	ldr	r0, .L91
	add	r0, r7, r0
.L86:
	ldrb	r5, [r0]
.L81:
	add	r0, r5, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L92:
	.align	2, 0
.L91:
	.word	gEnemyMonElevation
.Lfe3:
	.size	 GetBattlerElevation,.Lfe3-GetBattlerElevation
	.align	2, 0
	.type	 GetBattlerSpriteFinal_Y,function
	.thumb_func
GetBattlerSpriteFinal_Y:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	bl	GetBattlerYDelta
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L95
.L94:
	add	r0, r6, #0
	add	r1, r4, #0
	bl	GetBattlerYDelta
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r6, #0
	add	r1, r4, #0
	bl	GetBattlerElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L95:
	add	r0, r6, #0
	bl	GetBattlerPosition
	ldr	r3, .L99
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L99+0x4
	ldr	r1, [r1]
	mov	r2, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	add	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r7, #0
	beq	.L96	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L97	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L97:
	cmp	r4, #0x68
	bls	.L96	@cond_branch
	mov	r4, #0x68
.L96:
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L100:
	.align	2, 0
.L99:
	.word	sBattlerCoords
	.word	gBattleTypeFlags
.Lfe4:
	.size	 GetBattlerSpriteFinal_Y,.Lfe4-GetBattlerSpriteFinal_Y
	.align	2, 0
	.globl	GetBattlerSpriteCoord2
	.type	 GetBattlerSpriteCoord2,function
	.thumb_func
GetBattlerSpriteCoord2:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	mov	r0, #0xfd
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	bhi	.L102	@cond_branch
	ldr	r0, .L112
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L103	@cond_branch
	ldr	r1, .L112+0x4
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L104
.L113:
	.align	2, 0
.L112:
	.word	gBattleSpritesDataPtr
	.word	gAnimBattlerSpecies
.L103:
	ldrh	r1, [r1, #0x2]
.L104:
	cmp	r3, #0x3
	bne	.L105	@cond_branch
	add	r0, r2, #0
	mov	r2, #0x1
	bl	GetBattlerSpriteFinal_Y
	b	.L110
.L105:
	add	r0, r2, #0
	mov	r2, #0x0
	bl	GetBattlerSpriteFinal_Y
	b	.L110
.L102:
	add	r0, r2, #0
	add	r1, r3, #0
	bl	GetBattlerSpriteCoord
.L110:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 GetBattlerSpriteCoord2,.Lfe5-GetBattlerSpriteCoord2
	.align	2, 0
	.globl	GetBattlerSpriteDefault_Y
	.type	 GetBattlerSpriteDefault_Y,function
	.thumb_func
GetBattlerSpriteDefault_Y:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x4
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 GetBattlerSpriteDefault_Y,.Lfe6-GetBattlerSpriteDefault_Y
	.align	2, 0
	.globl	GetSubstituteSpriteDefault_Y
	.type	 GetSubstituteSpriteDefault_Y,function
	.thumb_func
GetSubstituteSpriteDefault_Y:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L116	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	b	.L118
.L116:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0x88
	lsl	r1, r1, #0xd
.L118:
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 GetSubstituteSpriteDefault_Y,.Lfe7-GetSubstituteSpriteDefault_Y
	.align	2, 0
	.globl	GetGhostSpriteDefault_Y
	.type	 GetGhostSpriteDefault_Y,function
	.thumb_func
GetGhostSpriteDefault_Y:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L120	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	b	.L124
.L120:
	add	r0, r4, #0
	mov	r1, #0x4
.L124:
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 GetGhostSpriteDefault_Y,.Lfe8-GetGhostSpriteDefault_Y
	.align	2, 0
	.globl	GetBattlerYCoordWithElevation
	.type	 GetBattlerYCoordWithElevation,function
	.thumb_func
GetBattlerYCoordWithElevation:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L126	@cond_branch
	ldr	r0, .L134
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L130	@cond_branch
	ldr	r1, .L134+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L134+0x8
	b	.L133
.L135:
	.align	2, 0
.L134:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L126:
	ldr	r0, .L136
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L130	@cond_branch
	ldr	r1, .L136+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L136+0x8
.L133:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L129
.L137:
	.align	2, 0
.L136:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L130:
	ldrh	r4, [r1, #0x2]
.L129:
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L132	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetBattlerElevation
	sub	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L132:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 GetBattlerYCoordWithElevation,.Lfe9-GetBattlerYCoordWithElevation
	.align	2, 0
	.globl	GetAnimBattlerSpriteId
	.type	 GetAnimBattlerSpriteId,function
	.thumb_func
GetAnimBattlerSpriteId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0
	bne	.L139	@cond_branch
	ldr	r4, .L159
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L156	@cond_branch
	ldr	r1, .L159+0x4
	ldrb	r0, [r4]
	b	.L155
.L160:
	.align	2, 0
.L159:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
.L139:
	cmp	r0, #0x1
	bne	.L143	@cond_branch
	ldr	r4, .L161
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L156	@cond_branch
	ldr	r1, .L161+0x4
	ldrb	r0, [r4]
	b	.L155
.L162:
	.align	2, 0
.L161:
	.word	gBattleAnimTarget
	.word	gBattlerSpriteIds
.L143:
	cmp	r1, #0x2
	bne	.L147	@cond_branch
	ldr	r5, .L163
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L156	@cond_branch
	b	.L151
.L164:
	.align	2, 0
.L163:
	.word	gBattleAnimAttacker
.L147:
	ldr	r5, .L165
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L151	@cond_branch
.L156:
	mov	r0, #0xff
	b	.L153
.L166:
	.align	2, 0
.L165:
	.word	gBattleAnimTarget
.L151:
	ldr	r1, .L167
	ldrb	r0, [r5]
	eor	r0, r0, r4
.L155:
	add	r0, r0, r1
	ldrb	r0, [r0]
.L153:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L168:
	.align	2, 0
.L167:
	.word	gBattlerSpriteIds
.Lfe10:
	.size	 GetAnimBattlerSpriteId,.Lfe10-GetAnimBattlerSpriteId
	.align	2, 0
	.globl	StoreSpriteCallbackInData6
	.type	 StoreSpriteCallbackInData6,function
	.thumb_func
StoreSpriteCallbackInData6:
	strh	r1, [r0, #0x3a]
	lsr	r1, r1, #0x10
	strh	r1, [r0, #0x3c]
	bx	lr
.Lfe11:
	.size	 StoreSpriteCallbackInData6,.Lfe11-StoreSpriteCallbackInData6
	.align	2, 0
	.type	 SetCallbackToStoredInData6,function
	.thumb_func
SetCallbackToStoredInData6:
	ldrh	r2, [r0, #0x3a]
	mov	r3, #0x3c
	ldrsh	r1, [r0, r3]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	str	r2, [r0, #0x1c]
	bx	lr
.Lfe12:
	.size	 SetCallbackToStoredInData6,.Lfe12-SetCallbackToStoredInData6
	.align	2, 0
	.globl	TranslateSpriteInCircle
	.type	 TranslateSpriteInCircle,function
	.thumb_func
TranslateSpriteInCircle:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L172	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L173	@cond_branch
	ldr	r2, .L178
	b	.L177
.L179:
	.align	2, 0
.L178:
	.word	-0x100
.L173:
	cmp	r0, #0
	bge	.L174	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L177:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L174:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L176
.L172:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L176:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 TranslateSpriteInCircle,.Lfe13-TranslateSpriteInCircle
	.align	2, 0
	.globl	TranslateSpriteInGrowingCircle
	.type	 TranslateSpriteInGrowingCircle,function
	.thumb_func
TranslateSpriteInGrowingCircle:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L181	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x36]
	ldrh	r2, [r4, #0x38]
	add	r0, r0, r2
	strh	r0, [r4, #0x38]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L182	@cond_branch
	ldr	r2, .L187
	b	.L186
.L188:
	.align	2, 0
.L187:
	.word	-0x100
.L182:
	cmp	r0, #0
	bge	.L183	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L186:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L183:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L185
.L181:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L185:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 TranslateSpriteInGrowingCircle,.Lfe14-TranslateSpriteInGrowingCircle
	.align	2, 0
	.type	 TranslateSpriteInLissajousCurve,function
	.thumb_func
TranslateSpriteInLissajousCurve:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L190	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L191	@cond_branch
	ldr	r2, .L200
	b	.L198
.L201:
	.align	2, 0
.L200:
	.word	-0x100
.L191:
	cmp	r0, #0
	bge	.L192	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L198:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L192:
	ldrh	r1, [r4, #0x36]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xff
	ble	.L194	@cond_branch
	ldr	r2, .L202
	b	.L199
.L203:
	.align	2, 0
.L202:
	.word	-0x100
.L194:
	cmp	r0, #0
	bge	.L195	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L199:
	add	r0, r1, r2
	strh	r0, [r4, #0x36]
.L195:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L197
.L190:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L197:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 TranslateSpriteInLissajousCurve,.Lfe15-TranslateSpriteInLissajousCurve
	.align	2, 0
	.globl	TranslateSpriteInEllipse
	.type	 TranslateSpriteInEllipse,function
	.thumb_func
TranslateSpriteInEllipse:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L205	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L206	@cond_branch
	ldr	r2, .L211
	b	.L210
.L212:
	.align	2, 0
.L211:
	.word	-0x100
.L206:
	cmp	r0, #0
	bge	.L207	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L210:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L207:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L209
.L205:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L209:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 TranslateSpriteInEllipse,.Lfe16-TranslateSpriteInEllipse
	.align	2, 0
	.globl	WaitAnimForDuration
	.type	 WaitAnimForDuration,function
	.thumb_func
WaitAnimForDuration:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	ble	.L214	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x2e]
	b	.L215
.L214:
	add	r0, r1, #0
	bl	SetCallbackToStoredInData6
.L215:
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 WaitAnimForDuration,.Lfe17-WaitAnimForDuration
	.align	2, 0
	.type	 AnimPosToTranslateLinear,function
	.thumb_func
AnimPosToTranslateLinear:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ConvertPosDataToTranslateLinearData
	ldr	r1, .L217
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L218:
	.align	2, 0
.L217:
	.word	TranslateSpriteLinear
.Lfe18:
	.size	 AnimPosToTranslateLinear,.Lfe18-AnimPosToTranslateLinear
	.align	2, 0
	.globl	ConvertPosDataToTranslateLinearData
	.type	 ConvertPosDataToTranslateLinearData,function
	.thumb_func
ConvertPosDataToTranslateLinearData:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	ble	.L220	@cond_branch
	ldrh	r0, [r4, #0x2e]
	neg	r0, r0
	strh	r0, [r4, #0x2e]
.L220:
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	ldrh	r5, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	cmp	r0, #0
	bge	.L221	@cond_branch
	neg	r0, r0
.L221:
	strh	r0, [r4, #0x2e]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	strh	r5, [r4, #0x30]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 ConvertPosDataToTranslateLinearData,.Lfe19-ConvertPosDataToTranslateLinearData
	.align	2, 0
	.globl	TranslateSpriteLinear
	.type	 TranslateSpriteLinear,function
	.thumb_func
TranslateSpriteLinear:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	ble	.L223	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x2e]
	ldrh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
	strh	r0, [r1, #0x24]
	ldrh	r0, [r1, #0x32]
	ldrh	r3, [r1, #0x26]
	add	r0, r0, r3
	strh	r0, [r1, #0x26]
	b	.L224
.L223:
	add	r0, r1, #0
	bl	SetCallbackToStoredInData6
.L224:
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 TranslateSpriteLinear,.Lfe20-TranslateSpriteLinear
	.align	2, 0
	.globl	TranslateSpriteLinearFixedPoint
	.type	 TranslateSpriteLinearFixedPoint,function
	.thumb_func
TranslateSpriteLinearFixedPoint:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L226	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x34]
	add	r0, r0, r1
	strh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x32]
	ldrh	r3, [r2, #0x36]
	add	r1, r1, r3
	strh	r1, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r2, #0x26]
	b	.L227
.L226:
	add	r0, r2, #0
	bl	SetCallbackToStoredInData6
.L227:
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 TranslateSpriteLinearFixedPoint,.Lfe21-TranslateSpriteLinearFixedPoint
	.align	2, 0
	.type	 TranslateSpriteLinearFixedPointIconFrame,function
	.thumb_func
TranslateSpriteLinearFixedPointIconFrame:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L229	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r1, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	b	.L230
.L229:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L230:
	add	r0, r4, #0
	bl	UpdateMonIconFrame
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 TranslateSpriteLinearFixedPointIconFrame,.Lfe22-TranslateSpriteLinearFixedPointIconFrame
	.align	2, 0
	.type	 TranslateSpriteToBattleTargetPos,function
	.thumb_func
TranslateSpriteToBattleTargetPos:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldr	r5, .L232
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L232+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L233:
	.align	2, 0
.L232:
	.word	gBattleAnimTarget
	.word	AnimPosToTranslateLinear
.Lfe23:
	.size	 TranslateSpriteToBattleTargetPos,.Lfe23-TranslateSpriteToBattleTargetPos
	.align	2, 0
	.globl	TranslateSpriteLinearById
	.type	 TranslateSpriteLinearById,function
	.thumb_func
TranslateSpriteLinearById:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L235	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x2e]
	ldr	r2, .L237
	mov	r4, #0x34
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x30]
	ldrh	r4, [r0, #0x24]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
	mov	r0, #0x34
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x32]
	ldrh	r2, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	b	.L236
.L238:
	.align	2, 0
.L237:
	.word	gSprites
.L235:
	add	r0, r3, #0
	bl	SetCallbackToStoredInData6
.L236:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 TranslateSpriteLinearById,.Lfe24-TranslateSpriteLinearById
	.align	2, 0
	.globl	TranslateSpriteLinearByIdFixedPoint
	.type	 TranslateSpriteLinearByIdFixedPoint,function
	.thumb_func
TranslateSpriteLinearByIdFixedPoint:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L240	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	ldrh	r0, [r4, #0x34]
	add	r1, r1, r0
	strh	r1, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	ldr	r3, .L242
	mov	r0, #0x38
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r0, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x26]
	b	.L241
.L243:
	.align	2, 0
.L242:
	.word	gSprites
.L240:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L241:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 TranslateSpriteLinearByIdFixedPoint,.Lfe25-TranslateSpriteLinearByIdFixedPoint
	.align	2, 0
	.globl	TranslateSpriteLinearAndFlicker
	.type	 TranslateSpriteLinearAndFlicker,function
	.thumb_func
TranslateSpriteLinearAndFlicker:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L245	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r1, r1, r0
	strh	r1, [r4, #0x32]
	ldrh	r1, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r1, r1, r0
	strh	r1, [r4, #0x36]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L248	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L248	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L248
.L245:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L248:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 TranslateSpriteLinearAndFlicker,.Lfe26-TranslateSpriteLinearAndFlicker
	.align	2, 0
	.globl	DestroySpriteAndMatrix
	.type	 DestroySpriteAndMatrix,function
	.thumb_func
DestroySpriteAndMatrix:
	push	{r4, lr}
	add	r4, r0, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 DestroySpriteAndMatrix,.Lfe27-DestroySpriteAndMatrix
	.align	2, 0
	.type	 SetupAndStartSpriteLinearTranslationToAttacker,function
	.thumb_func
SetupAndStartSpriteLinearTranslationToAttacker:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldr	r5, .L251
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L251+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L252:
	.align	2, 0
.L251:
	.word	gBattleAnimAttacker
	.word	AnimPosToTranslateLinear
.Lfe28:
	.size	 SetupAndStartSpriteLinearTranslationToAttacker,.Lfe28-SetupAndStartSpriteLinearTranslationToAttacker
	.align	2, 0
	.type	 EndUnkPaletteAnim,function
	.thumb_func
EndUnkPaletteAnim:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	bl	PaletteStruct_ResetById
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 EndUnkPaletteAnim,.Lfe29-EndUnkPaletteAnim
	.align	2, 0
	.globl	RunStoredCallbackWhenAffineAnimEnds
	.type	 RunStoredCallbackWhenAffineAnimEnds,function
	.thumb_func
RunStoredCallbackWhenAffineAnimEnds:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L255	@cond_branch
	add	r0, r2, #0
	bl	SetCallbackToStoredInData6
.L255:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 RunStoredCallbackWhenAffineAnimEnds,.Lfe30-RunStoredCallbackWhenAffineAnimEnds
	.align	2, 0
	.globl	RunStoredCallbackWhenAnimEnds
	.type	 RunStoredCallbackWhenAnimEnds,function
	.thumb_func
RunStoredCallbackWhenAnimEnds:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L257	@cond_branch
	add	r0, r2, #0
	bl	SetCallbackToStoredInData6
.L257:
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 RunStoredCallbackWhenAnimEnds,.Lfe31-RunStoredCallbackWhenAnimEnds
	.align	2, 0
	.globl	DestroyAnimSpriteAndDisableBlend
	.type	 DestroyAnimSpriteAndDisableBlend,function
	.thumb_func
DestroyAnimSpriteAndDisableBlend:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 DestroyAnimSpriteAndDisableBlend,.Lfe32-DestroyAnimSpriteAndDisableBlend
	.align	2, 0
	.globl	DestroyAnimVisualTaskAndDisableBlend
	.type	 DestroyAnimVisualTaskAndDisableBlend,function
	.thumb_func
DestroyAnimVisualTaskAndDisableBlend:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 DestroyAnimVisualTaskAndDisableBlend,.Lfe33-DestroyAnimVisualTaskAndDisableBlend
	.align	2, 0
	.globl	SetSpriteCoordsToAnimAttackerCoords
	.type	 SetSpriteCoordsToAnimAttackerCoords,function
	.thumb_func
SetSpriteCoordsToAnimAttackerCoords:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L261
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L262:
	.align	2, 0
.L261:
	.word	gBattleAnimAttacker
.Lfe34:
	.size	 SetSpriteCoordsToAnimAttackerCoords,.Lfe34-SetSpriteCoordsToAnimAttackerCoords
	.align	2, 0
	.globl	SetAnimSpriteInitialXOffset
	.type	 SetAnimSpriteInitialXOffset,function
	.thumb_func
SetAnimSpriteInitialXOffset:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r8, r5
	ldr	r7, .L272
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L272+0x4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bhi	.L270	@cond_branch
	cmp	r6, r0
	bcs	.L266	@cond_branch
	lsl	r0, r5, #0x10
	b	.L271
.L273:
	.align	2, 0
.L272:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L266:
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L268	@cond_branch
.L270:
	ldrh	r1, [r4, #0x20]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	sub	r1, r1, r0
	strh	r1, [r4, #0x20]
	b	.L265
.L268:
	mov	r1, r8
	lsl	r0, r1, #0x10
.L271:
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
.L265:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 SetAnimSpriteInitialXOffset,.Lfe35-SetAnimSpriteInitialXOffset
	.align	2, 0
	.globl	InitAnimArcTranslation
	.type	 InitAnimArcTranslation,function
	.thumb_func
InitAnimArcTranslation:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	mov	r5, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	bl	__divsi3
	strh	r0, [r4, #0x3a]
	strh	r5, [r4, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 InitAnimArcTranslation,.Lfe36-InitAnimArcTranslation
	.align	2, 0
	.globl	TranslateAnimHorizontalArc
	.type	 TranslateAnimHorizontalArc,function
	.thumb_func
TranslateAnimHorizontalArc:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L276	@cond_branch
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r0, r0, r1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r0, #0x0
	b	.L277
.L276:
	mov	r0, #0x1
.L277:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 TranslateAnimHorizontalArc,.Lfe37-TranslateAnimHorizontalArc
	.align	2, 0
	.globl	TranslateAnimVerticalArc
	.type	 TranslateAnimVerticalArc,function
	.thumb_func
TranslateAnimVerticalArc:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L279	@cond_branch
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r0, r0, r1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	b	.L280
.L279:
	mov	r0, #0x1
.L280:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 TranslateAnimVerticalArc,.Lfe38-TranslateAnimVerticalArc
	.align	2, 0
	.globl	SetSpritePrimaryCoordsFromSecondaryCoords
	.type	 SetSpritePrimaryCoordsFromSecondaryCoords,function
	.thumb_func
SetSpritePrimaryCoordsFromSecondaryCoords:
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r1, [r0, #0x20]
	ldrh	r1, [r0, #0x26]
	ldrh	r3, [r0, #0x22]
	add	r1, r1, r3
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x24]
	strh	r2, [r0, #0x26]
	bx	lr
.Lfe39:
	.size	 SetSpritePrimaryCoordsFromSecondaryCoords,.Lfe39-SetSpritePrimaryCoordsFromSecondaryCoords
	.align	2, 0
	.globl	InitSpritePosToAnimTarget
	.type	 InitSpritePosToAnimTarget,function
	.thumb_func
InitSpritePosToAnimTarget:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L283	@cond_branch
	ldr	r4, .L284
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L283:
	ldr	r4, .L284+0x4
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.Lfe40:
	.size	 InitSpritePosToAnimTarget,.Lfe40-InitSpritePosToAnimTarget
	.align	2, 0
	.globl	InitSpritePosToAnimAttacker
	.type	 InitSpritePosToAnimAttacker,function
	.thumb_func
InitSpritePosToAnimAttacker:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L287	@cond_branch
	ldr	r4, .L290
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	b	.L289
.L291:
	.align	2, 0
.L290:
	.word	gBattleAnimAttacker
.L287:
	ldr	r4, .L292
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
.L289:
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L292+0x4
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L293:
	.align	2, 0
.L292:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe41:
	.size	 InitSpritePosToAnimAttacker,.Lfe41-InitSpritePosToAnimAttacker
	.align	2, 0
	.globl	GetBattlerSide
	.type	 GetBattlerSide,function
	.thumb_func
GetBattlerSide:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L295
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	bx	lr
.L296:
	.align	2, 0
.L295:
	.word	gBattlerPositions
.Lfe42:
	.size	 GetBattlerSide,.Lfe42-GetBattlerSide
	.align	2, 0
	.globl	GetBattlerPosition
	.type	 GetBattlerPosition,function
	.thumb_func
GetBattlerPosition:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L298
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L299:
	.align	2, 0
.L298:
	.word	gBattlerPositions
.Lfe43:
	.size	 GetBattlerPosition,.Lfe43-GetBattlerPosition
	.align	2, 0
	.globl	GetBattlerAtPosition
	.type	 GetBattlerAtPosition,function
	.thumb_func
GetBattlerAtPosition:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	ldr	r0, .L307
	ldrb	r2, [r0]
	cmp	r1, r2
	bcs	.L302	@cond_branch
	ldr	r4, .L307+0x4
	ldrb	r0, [r4]
	cmp	r0, r3
	beq	.L302	@cond_branch
.L303:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L302	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r3
	bne	.L303	@cond_branch
.L302:
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L308:
	.align	2, 0
.L307:
	.word	gBattlersCount
	.word	gBattlerPositions
.Lfe44:
	.size	 GetBattlerAtPosition,.Lfe44-GetBattlerAtPosition
	.align	2, 0
	.globl	IsBattlerSpritePresent
	.type	 IsBattlerSpritePresent,function
	.thumb_func
IsBattlerSpritePresent:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	ldr	r0, .L318
	add	r0, r4, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L311	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L312	@cond_branch
	ldr	r1, .L318+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L318+0x8
	b	.L317
.L319:
	.align	2, 0
.L318:
	.word	gBattlerPositions
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L312:
	ldr	r1, .L320
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L320+0x4
.L317:
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L311	@cond_branch
	mov	r0, #0x1
	b	.L316
.L321:
	.align	2, 0
.L320:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L311:
	mov	r0, #0x0
.L316:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 IsBattlerSpritePresent,.Lfe45-IsBattlerSpritePresent
	.align	2, 0
	.globl	IsDoubleBattle
	.type	 IsDoubleBattle,function
	.thumb_func
IsDoubleBattle:
	ldr	r0, .L323
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L324:
	.align	2, 0
.L323:
	.word	gBattleTypeFlags
.Lfe46:
	.size	 IsDoubleBattle,.Lfe46-IsDoubleBattle
	.align	2, 0
	.globl	GetBattleAnimBg1Data
	.type	 GetBattleAnimBg1Data,function
	.thumb_func
GetBattleAnimBg1Data:
	ldr	r1, .L326
	ldr	r1, [r1]
	str	r1, [r0]
	ldr	r1, .L326+0x4
	ldr	r1, [r1]
	str	r1, [r0, #0x4]
	mov	r2, #0x0
	mov	r1, #0x8
	strb	r1, [r0, #0x8]
	mov	r1, #0x1
	strb	r1, [r0, #0x9]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	strh	r1, [r0, #0xa]
	strh	r2, [r0, #0xc]
	bx	lr
.L327:
	.align	2, 0
.L326:
	.word	gBattleAnimBgTileBuffer
	.word	gBattleAnimBgTilemapBuffer
.Lfe47:
	.size	 GetBattleAnimBg1Data,.Lfe47-GetBattleAnimBg1Data
	.align	2, 0
	.globl	GetBattleAnimBgData
	.type	 GetBattleAnimBgData,function
	.thumb_func
GetBattleAnimBgData:
	push	{lr}
	add	r2, r0, #0
	cmp	r1, #0x1
	bne	.L329	@cond_branch
	bl	GetBattleAnimBg1Data
	b	.L330
.L329:
	ldr	r0, .L331
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, .L331+0x4
	ldr	r0, [r0]
	str	r0, [r2, #0x4]
	mov	r1, #0x0
	mov	r0, #0x9
	strb	r0, [r2, #0x8]
	mov	r0, #0x2
	strb	r0, [r2, #0x9]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	strh	r0, [r2, #0xa]
	strh	r1, [r2, #0xc]
.L330:
	pop	{r0}
	bx	r0
.L332:
	.align	2, 0
.L331:
	.word	gBattleAnimBgTileBuffer
	.word	gBattleAnimBgTilemapBuffer
.Lfe48:
	.size	 GetBattleAnimBgData,.Lfe48-GetBattleAnimBgData
	.align	2, 0
	.globl	GetBattleAnimBgDataByPriorityRank
	.type	 GetBattleAnimBgDataByPriorityRank,function
	.thumb_func
GetBattleAnimBgDataByPriorityRank:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L336
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L336+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	ldr	r0, .L336+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x1
	bne	.L334	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x8
	strb	r1, [r4, #0x8]
	strb	r2, [r4, #0x9]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	strh	r1, [r4, #0xa]
	strh	r0, [r4, #0xc]
	b	.L335
.L337:
	.align	2, 0
.L336:
	.word	gBattleAnimBgTileBuffer
	.word	gBattleAnimBgTilemapBuffer
	.word	gBattleAnimAttacker
.L334:
	mov	r1, #0x0
	mov	r0, #0x9
	strb	r0, [r4, #0x8]
	mov	r0, #0x2
	strb	r0, [r4, #0x9]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	strh	r0, [r4, #0xa]
	strh	r1, [r4, #0xc]
.L335:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 GetBattleAnimBgDataByPriorityRank,.Lfe49-GetBattleAnimBgDataByPriorityRank
	.align	2, 0
	.globl	InitBattleAnimBg
	.type	 InitBattleAnimBg,function
	.thumb_func
InitBattleAnimBg:
	push	{r4, lr}
	add	sp, sp, #-0x20
	add	r4, r0, #0
	add	r0, sp, #0xc
	add	r1, r4, #0
	bl	GetBattleAnimBgData
	mov	r0, #0x0
	str	r0, [sp, #0x1c]
	add	r0, sp, #0x1c
	ldr	r1, [sp, #0xc]
	ldr	r2, .L339
	bl	CpuSet
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, [sp, #0xc]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r0, sp, #0xc
	ldrh	r3, [r0, #0xa]
	add	r0, r4, #0
	bl	LoadBgTiles
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x40
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	add	r0, r4, #0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x20
	pop	{r4}
	pop	{r0}
	bx	r0
.L340:
	.align	2, 0
.L339:
	.word	0x5000800
.Lfe50:
	.size	 InitBattleAnimBg,.Lfe50-InitBattleAnimBg
	.align	2, 0
	.globl	AnimLoadCompressedBgGfx
	.type	 AnimLoadCompressedBgGfx,function
	.thumb_func
AnimLoadCompressedBgGfx:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r8, r1
	add	r6, r2, #0
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r4, .L342
	ldr	r1, [r4]
	ldr	r2, .L342+0x4
	mov	r0, sp
	bl	CpuSet
	ldr	r1, [r4]
	mov	r0, r8
	bl	LZDecompressWram
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	add	r0, r5, #0
	add	r3, r6, #0
	bl	LoadBgTiles
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	gBattleAnimBgTileBuffer
	.word	0x5000800
.Lfe51:
	.size	 AnimLoadCompressedBgGfx,.Lfe51-AnimLoadCompressedBgGfx
	.align	2, 0
	.globl	InitAnimBgTilemapBuffer
	.type	 InitAnimBgTilemapBuffer,function
	.thumb_func
InitAnimBgTilemapBuffer:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x40
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 InitAnimBgTilemapBuffer,.Lfe52-InitAnimBgTilemapBuffer
	.align	2, 0
	.globl	AnimLoadCompressedBgTilemap
	.type	 AnimLoadCompressedBgTilemap,function
	.thumb_func
AnimLoadCompressedBgTilemap:
	push	{r4, lr}
	add	r4, r0, #0
	bl	InitAnimBgTilemapBuffer
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	CopyBgTilemapBufferToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 AnimLoadCompressedBgTilemap,.Lfe53-AnimLoadCompressedBgTilemap
	.align	2, 0
	.globl	GetBattleBgPaletteNum
	.type	 GetBattleBgPaletteNum,function
	.thumb_func
GetBattleBgPaletteNum:
	mov	r0, #0x2
	bx	lr
.Lfe54:
	.size	 GetBattleBgPaletteNum,.Lfe54-GetBattleBgPaletteNum
	.align	2, 0
	.globl	ToggleBg3Mode
	.type	 ToggleBg3Mode,function
	.thumb_func
ToggleBg3Mode:
	push	{lr}
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L348	@cond_branch
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	b	.L349
.L348:
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L349:
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 ToggleBg3Mode,.Lfe55-ToggleBg3Mode
	.align	2, 0
	.globl	TradeMenuBouncePartySprites
	.type	 TradeMenuBouncePartySprites,function
	.thumb_func
TradeMenuBouncePartySprites:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitSpriteDataForLinearTranslation
	ldr	r1, .L351
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L352:
	.align	2, 0
.L351:
	.word	TranslateSpriteLinearFixedPointIconFrame
.Lfe56:
	.size	 TradeMenuBouncePartySprites,.Lfe56-TradeMenuBouncePartySprites
	.align	2, 0
	.globl	InitSpriteDataForLinearTranslation
	.type	 InitSpriteDataForLinearTranslation,function
	.thumb_func
InitSpriteDataForLinearTranslation:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x30]
	sub	r0, r0, r1
	ldrh	r4, [r5, #0x36]
	ldrh	r1, [r5, #0x34]
	sub	r4, r4, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	mov	r6, #0x0
	strh	r0, [r5, #0x30]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	__divsi3
	strh	r0, [r5, #0x32]
	strh	r6, [r5, #0x36]
	strh	r6, [r5, #0x34]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 InitSpriteDataForLinearTranslation,.Lfe57-InitSpriteDataForLinearTranslation
	.align	2, 0
	.globl	InitAnimLinearTranslation
	.type	 InitAnimLinearTranslation,function
	.thumb_func
InitAnimLinearTranslation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r7, r0]
	mov	r2, #0x30
	ldrsh	r0, [r7, r2]
	sub	r1, r1, r0
	mov	r3, #0x36
	ldrsh	r2, [r7, r3]
	mov	r3, #0x34
	ldrsh	r0, [r7, r3]
	sub	r2, r2, r0
	lsr	r0, r1, #0x1f
	mov	r8, r0
	lsr	r3, r2, #0x1f
	mov	r9, r3
	cmp	r1, #0
	bge	.L355	@cond_branch
	neg	r1, r1
.L355:
	lsl	r0, r1, #0x18
	lsr	r6, r0, #0x10
	add	r0, r2, #0
	cmp	r0, #0
	bge	.L356	@cond_branch
	neg	r0, r0
.L356:
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x10
	mov	r0, #0x2e
	ldrsh	r4, [r7, r0]
	add	r0, r6, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r2, r8
	cmp	r2, #0
	beq	.L357	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
	b	.L358
.L357:
	ldr	r0, .L361
	and	r6, r6, r0
.L358:
	mov	r3, r9
	cmp	r3, #0
	beq	.L359	@cond_branch
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L360
.L362:
	.align	2, 0
.L361:
	.word	0xfffe
.L359:
	ldr	r0, .L363
	and	r5, r5, r0
.L360:
	mov	r0, #0x0
	strh	r6, [r7, #0x30]
	strh	r5, [r7, #0x32]
	strh	r0, [r7, #0x36]
	strh	r0, [r7, #0x34]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L364:
	.align	2, 0
.L363:
	.word	0xfffe
.Lfe58:
	.size	 InitAnimLinearTranslation,.Lfe58-InitAnimLinearTranslation
	.align	2, 0
	.globl	StartAnimLinearTranslation
	.type	 StartAnimLinearTranslation,function
	.thumb_func
StartAnimLinearTranslation:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L366
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L367:
	.align	2, 0
.L366:
	.word	AnimTranslateLinear_WithFollowup
.Lfe59:
	.size	 StartAnimLinearTranslation,.Lfe59-StartAnimLinearTranslation
	.align	2, 0
	.globl	PlayerThrowBall_StartAnimLinearTranslation
	.type	 PlayerThrowBall_StartAnimLinearTranslation,function
	.thumb_func
PlayerThrowBall_StartAnimLinearTranslation:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L369
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	PlayerThrowBall_AnimTranslateLinear_WithFollowup
.Lfe60:
	.size	 PlayerThrowBall_StartAnimLinearTranslation,.Lfe60-PlayerThrowBall_StartAnimLinearTranslation
	.align	2, 0
	.globl	AnimTranslateLinear
	.type	 AnimTranslateLinear,function
	.thumb_func
AnimTranslateLinear:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L372	@cond_branch
	mov	r0, #0x1
	b	.L377
.L372:
	ldrh	r1, [r2, #0x30]
	ldrh	r4, [r2, #0x32]
	ldrh	r6, [r2, #0x34]
	ldrh	r5, [r2, #0x36]
	add	r0, r6, r1
	lsl	r3, r0, #0x10
	lsr	r6, r3, #0x10
	add	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L373	@cond_branch
	lsr	r0, r3, #0x18
	neg	r0, r0
	b	.L378
.L373:
	lsr	r0, r3, #0x18
.L378:
	strh	r0, [r2, #0x24]
	mov	r0, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L375	@cond_branch
	lsr	r0, r5, #0x8
	neg	r0, r0
	b	.L379
.L375:
	lsr	r0, r5, #0x8
.L379:
	strh	r0, [r2, #0x26]
	strh	r6, [r2, #0x34]
	strh	r5, [r2, #0x36]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	mov	r0, #0x0
.L377:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe61:
	.size	 AnimTranslateLinear,.Lfe61-AnimTranslateLinear
	.align	2, 0
	.globl	AnimTranslateLinear_WithFollowup
	.type	 AnimTranslateLinear_WithFollowup,function
	.thumb_func
AnimTranslateLinear_WithFollowup:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L381	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L381:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 AnimTranslateLinear_WithFollowup,.Lfe62-AnimTranslateLinear_WithFollowup
	.align	2, 0
	.type	 PlayerThrowBall_AnimTranslateLinear_WithFollowup,function
	.thumb_func
PlayerThrowBall_AnimTranslateLinear_WithFollowup:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdatePlayerPosInThrowAnim
	add	r0, r4, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L383	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L383:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 PlayerThrowBall_AnimTranslateLinear_WithFollowup,.Lfe63-PlayerThrowBall_AnimTranslateLinear_WithFollowup
	.align	2, 0
	.globl	InitAnimLinearTranslationWithSpeed
	.type	 InitAnimLinearTranslationWithSpeed,function
	.thumb_func
InitAnimLinearTranslationWithSpeed:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L385	@cond_branch
	neg	r0, r0
.L385:
	lsl	r0, r0, #0x8
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 InitAnimLinearTranslationWithSpeed,.Lfe64-InitAnimLinearTranslationWithSpeed
	.align	2, 0
	.globl	InitAnimLinearTranslationWithSpeedAndPos
	.type	 InitAnimLinearTranslationWithSpeedAndPos,function
	.thumb_func
InitAnimLinearTranslationWithSpeedAndPos:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslationWithSpeed
	ldr	r1, .L387
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L388:
	.align	2, 0
.L387:
	.word	AnimTranslateLinear_WithFollowup
.Lfe65:
	.size	 InitAnimLinearTranslationWithSpeedAndPos,.Lfe65-InitAnimLinearTranslationWithSpeedAndPos
	.align	2, 0
	.type	 InitAnimFastLinearTranslation,function
	.thumb_func
InitAnimFastLinearTranslation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r7, r0]
	mov	r2, #0x30
	ldrsh	r0, [r7, r2]
	sub	r1, r1, r0
	mov	r3, #0x36
	ldrsh	r2, [r7, r3]
	mov	r3, #0x34
	ldrsh	r0, [r7, r3]
	sub	r2, r2, r0
	lsr	r0, r1, #0x1f
	mov	r8, r0
	lsr	r3, r2, #0x1f
	mov	r9, r3
	cmp	r1, #0
	bge	.L390	@cond_branch
	neg	r1, r1
.L390:
	lsl	r0, r1, #0x14
	lsr	r6, r0, #0x10
	add	r0, r2, #0
	cmp	r0, #0
	bge	.L391	@cond_branch
	neg	r0, r0
.L391:
	lsl	r0, r0, #0x14
	lsr	r5, r0, #0x10
	mov	r0, #0x2e
	ldrsh	r4, [r7, r0]
	add	r0, r6, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r2, r8
	cmp	r2, #0
	beq	.L392	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
	b	.L393
.L392:
	ldr	r0, .L396
	and	r6, r6, r0
.L393:
	mov	r3, r9
	cmp	r3, #0
	beq	.L394	@cond_branch
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L395
.L397:
	.align	2, 0
.L396:
	.word	0xfffe
.L394:
	ldr	r0, .L398
	and	r5, r5, r0
.L395:
	mov	r0, #0x0
	strh	r6, [r7, #0x30]
	strh	r5, [r7, #0x32]
	strh	r0, [r7, #0x36]
	strh	r0, [r7, #0x34]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L399:
	.align	2, 0
.L398:
	.word	0xfffe
.Lfe66:
	.size	 InitAnimFastLinearTranslation,.Lfe66-InitAnimFastLinearTranslation
	.align	2, 0
	.globl	InitAndRunAnimFastLinearTranslation
	.type	 InitAndRunAnimFastLinearTranslation,function
	.thumb_func
InitAndRunAnimFastLinearTranslation:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimFastLinearTranslation
	ldr	r1, .L401
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L402:
	.align	2, 0
.L401:
	.word	AnimFastTranslateLinearWaitEnd
.Lfe67:
	.size	 InitAndRunAnimFastLinearTranslation,.Lfe67-InitAndRunAnimFastLinearTranslation
	.align	2, 0
	.globl	AnimFastTranslateLinear
	.type	 AnimFastTranslateLinear,function
	.thumb_func
AnimFastTranslateLinear:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L404	@cond_branch
	mov	r0, #0x1
	b	.L409
.L404:
	ldrh	r1, [r2, #0x30]
	ldrh	r4, [r2, #0x32]
	ldrh	r6, [r2, #0x34]
	ldrh	r5, [r2, #0x36]
	add	r0, r6, r1
	lsl	r3, r0, #0x10
	lsr	r6, r3, #0x10
	add	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L405	@cond_branch
	lsr	r0, r3, #0x14
	neg	r0, r0
	b	.L410
.L405:
	lsr	r0, r3, #0x14
.L410:
	strh	r0, [r2, #0x24]
	mov	r0, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L407	@cond_branch
	lsr	r0, r5, #0x4
	neg	r0, r0
	b	.L411
.L407:
	lsr	r0, r5, #0x4
.L411:
	strh	r0, [r2, #0x26]
	strh	r6, [r2, #0x34]
	strh	r5, [r2, #0x36]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	mov	r0, #0x0
.L409:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 AnimFastTranslateLinear,.Lfe68-AnimFastTranslateLinear
	.align	2, 0
	.type	 AnimFastTranslateLinearWaitEnd,function
	.thumb_func
AnimFastTranslateLinearWaitEnd:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimFastTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L413	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L413:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 AnimFastTranslateLinearWaitEnd,.Lfe69-AnimFastTranslateLinearWaitEnd
	.align	2, 0
	.globl	InitAnimFastLinearTranslationWithSpeed
	.type	 InitAnimFastLinearTranslationWithSpeed,function
	.thumb_func
InitAnimFastLinearTranslationWithSpeed:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L415	@cond_branch
	neg	r0, r0
.L415:
	lsl	r0, r0, #0x4
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitAnimFastLinearTranslation
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 InitAnimFastLinearTranslationWithSpeed,.Lfe70-InitAnimFastLinearTranslationWithSpeed
	.align	2, 0
	.globl	InitAnimFastLinearTranslationWithSpeedAndPos
	.type	 InitAnimFastLinearTranslationWithSpeedAndPos,function
	.thumb_func
InitAnimFastLinearTranslationWithSpeedAndPos:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimFastLinearTranslationWithSpeed
	ldr	r1, .L417
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L418:
	.align	2, 0
.L417:
	.word	AnimFastTranslateLinearWaitEnd
.Lfe71:
	.size	 InitAnimFastLinearTranslationWithSpeedAndPos,.Lfe71-InitAnimFastLinearTranslationWithSpeedAndPos
	.align	2, 0
	.globl	SetSpriteRotScale
	.type	 SetSpriteRotScale,function
	.thumb_func
SetSpriteRotScale:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r5, .L421
	lsl	r2, r2, #0x10
	lsr	r1, r1, #0x10
	orr	r1, r1, r2
	str	r1, [sp]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r5
	orr	r0, r0, r3
	str	r0, [sp, #0x4]
	bl	ShouldRotScaleSpeciesBeFlipped
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L420	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp]
	and	r1, r1, r5
	orr	r1, r1, r0
	str	r1, [sp]
.L420:
	ldr	r1, .L421+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x3]
	lsl	r4, r4, #0x1a
	lsr	r4, r4, #0x1b
	add	r5, sp, #0x8
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	ldr	r0, .L421+0x8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r5]
	strh	r0, [r4]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x4]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x6]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L422:
	.align	2, 0
.L421:
	.word	-0x10000
	.word	gSprites
	.word	gOamMatrices
.Lfe72:
	.size	 SetSpriteRotScale,.Lfe72-SetSpriteRotScale
	.align	2, 0
	.type	 ShouldRotScaleSpeciesBeFlipped,function
	.thumb_func
ShouldRotScaleSpeciesBeFlipped:
	mov	r0, #0x0
	bx	lr
.Lfe73:
	.size	 ShouldRotScaleSpeciesBeFlipped,.Lfe73-ShouldRotScaleSpeciesBeFlipped
	.align	2, 0
	.globl	PrepareBattlerSpriteForRotScale
	.type	 PrepareBattlerSpriteForRotScale,function
	.thumb_func
PrepareBattlerSpriteForRotScale:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r2, .L427
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r4, r1, r2
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L425	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L425:
	mov	r7, #0x3
	and	r5, r5, r7
	lsl	r2, r5, #0x2
	ldrb	r1, [r4, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x1]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L426	@cond_branch
	ldr	r0, .L427+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r4, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
.L426:
	ldrb	r3, [r4, #0x1]
	orr	r3, r3, r7
	strb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L428:
	.align	2, 0
.L427:
	.word	gSprites
	.word	gBattleSpritesDataPtr
.Lfe74:
	.size	 PrepareBattlerSpriteForRotScale,.Lfe74-PrepareBattlerSpriteForRotScale
	.align	2, 0
	.globl	ResetSpriteRotScale
	.type	 ResetSpriteRotScale,function
	.thumb_func
ResetSpriteRotScale:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldr	r1, .L430
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x1]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x1
	orr	r1, r1, r2
	mov	r2, #0xd
	neg	r2, r2
	and	r1, r1, r2
	strb	r1, [r0, #0x1]
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r2, [r3]
	mov	r1, #0x7f
	and	r1, r1, r2
	strb	r1, [r3]
	ldrb	r3, [r0, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r0, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	bl	CalcCenterToCornerVec
	pop	{r4}
	pop	{r0}
	bx	r0
.L431:
	.align	2, 0
.L430:
	.word	gSprites
.Lfe75:
	.size	 ResetSpriteRotScale,.Lfe75-ResetSpriteRotScale
	.align	2, 0
	.globl	SetBattlerSpriteYOffsetFromRotation
	.type	 SetBattlerSpriteYOffsetFromRotation,function
	.thumb_func
SetBattlerSpriteYOffsetFromRotation:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L434
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	ldr	r1, .L434+0x4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x4]
	mov	r3, #0x4
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	bge	.L433	@cond_branch
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L433:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r2, #0x26]
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	gSprites
	.word	gOamMatrices
.Lfe76:
	.size	 SetBattlerSpriteYOffsetFromRotation,.Lfe76-SetBattlerSpriteYOffsetFromRotation
	.align	2, 0
	.globl	TrySetSpriteRotScale
	.type	 TrySetSpriteRotScale,function
	.thumb_func
TrySetSpriteRotScale:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	ldr	r0, [sp, #0x28]
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r7, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L437	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	cmp	r6, #0
	beq	.L438	@cond_branch
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
.L438:
	ldr	r6, .L440
	lsl	r0, r7, #0x10
	orr	r5, r5, r0
	str	r5, [sp]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r6
	mov	r1, r8
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	bl	ShouldRotScaleSpeciesBeFlipped
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L439	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp]
	and	r1, r1, r6
	orr	r1, r1, r0
	str	r1, [sp]
.L439:
	ldrb	r4, [r4, #0x3]
	lsl	r4, r4, #0x1a
	lsr	r4, r4, #0x1b
	add	r5, sp, #0x8
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	ldr	r0, .L440+0x4
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r5]
	strh	r0, [r4]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x4]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x6]
.L437:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L441:
	.align	2, 0
.L440:
	.word	-0x10000
	.word	gOamMatrices
.Lfe77:
	.size	 TrySetSpriteRotScale,.Lfe77-TrySetSpriteRotScale
	.align	2, 0
	.globl	TryResetSpriteAffineState
	.type	 TryResetSpriteAffineState,function
	.thumb_func
TryResetSpriteAffineState:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 TryResetSpriteAffineState,.Lfe78-TryResetSpriteAffineState
	.align	2, 0
	.type	 ArcTan2_,function
	.thumb_func
ArcTan2_:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 ArcTan2_,.Lfe79-ArcTan2_
	.align	2, 0
	.globl	ArcTan2Neg
	.type	 ArcTan2Neg,function
	.thumb_func
ArcTan2Neg:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2_
	lsl	r0, r0, #0x10
	neg	r0, r0
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 ArcTan2Neg,.Lfe80-ArcTan2Neg
	.align	2, 0
	.globl	SetGreyscaleOrOriginalPalette
	.type	 SetGreyscaleOrOriginalPalette,function
	.thumb_func
SetGreyscaleOrOriginalPalette:
	push	{r4, r5, r6, r7, lr}
	lsl	r1, r1, #0x18
	lsl	r0, r0, #0x14
	lsr	r0, r0, #0x10
	cmp	r1, #0
	bne	.L446	@cond_branch
	ldr	r2, .L453
	ldr	r1, .L453+0x4
	lsl	r0, r0, #0x1
	add	r4, r0, r1
	add	r5, r0, r2
	mov	r6, #0xf
.L450:
	ldr	r0, [r5]
	lsl	r2, r0, #0x1b
	lsr	r2, r2, #0x1b
	lsl	r1, r0, #0x16
	lsr	r1, r1, #0x1b
	add	r2, r2, r1
	lsl	r0, r0, #0x11
	lsr	r0, r0, #0x1b
	add	r0, r0, r2
	mov	r1, #0x3
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1f
	and	r0, r0, r1
	ldrb	r1, [r4]
	mov	r3, #0x20
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4]
	lsl	r3, r0, #0x5
	ldrh	r1, [r4]
	ldr	r7, .L453+0x8
	add	r2, r7, #0
	and	r1, r1, r2
	orr	r1, r1, r3
	strh	r1, [r4]
	lsl	r0, r0, #0x2
	ldrb	r1, [r4, #0x1]
	mov	r3, #0x7d
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	add	r4, r4, #0x2
	add	r5, r5, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L450	@cond_branch
	b	.L452
.L454:
	.align	2, 0
.L453:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	-0x3e1
.L446:
	lsl	r1, r0, #0x1
	ldr	r0, .L455
	add	r0, r1, r0
	ldr	r2, .L455+0x4
	add	r1, r1, r2
	ldr	r2, .L455+0x8
	bl	CpuSet
.L452:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L456:
	.align	2, 0
.L455:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
.Lfe81:
	.size	 SetGreyscaleOrOriginalPalette,.Lfe81-SetGreyscaleOrOriginalPalette
	.align	2, 0
	.globl	GetBattlePalettesMask
	.type	 GetBattlePalettesMask,function
	.thumb_func
GetBattlePalettesMask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, [sp, #0x1c]
	ldr	r5, [sp, #0x20]
	ldr	r6, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r8, r5
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r9, r6
	mov	r4, #0x0
	cmp	r0, #0
	beq	.L458	@cond_branch
	mov	r4, #0xe
.L458:
	cmp	r1, #0
	beq	.L459	@cond_branch
	ldr	r0, .L467
	ldrb	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L459:
	cmp	r2, #0
	beq	.L460	@cond_branch
	ldr	r0, .L467+0x4
	ldrb	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L460:
	cmp	r3, #0
	beq	.L461	@cond_branch
	ldr	r6, .L467
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L461	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L461:
	cmp	r7, #0
	beq	.L463	@cond_branch
	ldr	r6, .L467+0x4
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L463	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L463:
	mov	r0, r8
	cmp	r0, #0
	beq	.L465	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	orr	r4, r4, r0
.L465:
	mov	r0, r9
	cmp	r0, #0
	beq	.L466	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	orr	r4, r4, r0
.L466:
	add	r0, r4, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L468:
	.align	2, 0
.L467:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe82:
	.size	 GetBattlePalettesMask,.Lfe82-GetBattlePalettesMask
	.align	2, 0
	.globl	GetBattleMonSpritePalettesMask
	.type	 GetBattleMonSpritePalettesMask,function
	.thumb_func
GetBattleMonSpritePalettesMask:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	mov	r4, #0x0
	cmp	r0, #0
	beq	.L470	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L470	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r4, #0x1
	lsl	r4, r4, r0
.L470:
	cmp	r5, #0
	beq	.L472	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L472	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L472:
	cmp	r6, #0
	beq	.L474	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L474	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L474:
	cmp	r7, #0
	beq	.L476	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L476	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L476:
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 GetBattleMonSpritePalettesMask,.Lfe83-GetBattleMonSpritePalettesMask
	.align	2, 0
	.globl	GetSpritePalIdxByBattler
	.type	 GetSpritePalIdxByBattler,function
	.thumb_func
GetSpritePalIdxByBattler:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.Lfe84:
	.size	 GetSpritePalIdxByBattler,.Lfe84-GetSpritePalIdxByBattler
	.align	2, 0
	.type	 GetSpritePalIdxByPosition,function
	.thumb_func
GetSpritePalIdxByPosition:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 GetSpritePalIdxByPosition,.Lfe85-GetSpritePalIdxByPosition
	.align	2, 0
	.globl	AnimSpriteOnMonPos
	.type	 AnimSpriteOnMonPos,function
	.thumb_func
AnimSpriteOnMonPos:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L481	@cond_branch
	ldr	r2, .L488
	mov	r3, #0x6
	ldrsh	r0, [r2, r3]
	mov	r1, #0x0
	cmp	r0, #0
	bne	.L482	@cond_branch
	mov	r1, #0x1
.L482:
	mov	r3, #0x4
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L484	@cond_branch
	add	r0, r4, #0
	bl	InitSpritePosToAnimAttacker
	b	.L485
.L489:
	.align	2, 0
.L488:
	.word	gBattleAnimArgs
.L484:
	add	r0, r4, #0
	bl	InitSpritePosToAnimTarget
.L485:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L486
.L481:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L486	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L486:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 AnimSpriteOnMonPos,.Lfe86-AnimSpriteOnMonPos
	.align	2, 0
	.globl	TranslateAnimSpriteToTargetMonLocation
	.type	 TranslateAnimSpriteToTargetMonLocation,function
	.thumb_func
TranslateAnimSpriteToTargetMonLocation:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r6, .L496
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0x0
	cmp	r0, #0
	bne	.L491	@cond_branch
	mov	r1, #0x1
.L491:
	ldrb	r0, [r6, #0xa]
	mov	r7, #0x1
	cmp	r0, #0
	bne	.L493	@cond_branch
	mov	r7, #0x3
.L493:
	add	r0, r5, #0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L496+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L495	@cond_branch
	ldrh	r0, [r6, #0x4]
	neg	r0, r0
	strh	r0, [r6, #0x4]
.L495:
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	ldr	r4, .L496+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	add	r1, r7, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L496+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L496+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe87:
	.size	 TranslateAnimSpriteToTargetMonLocation,.Lfe87-TranslateAnimSpriteToTargetMonLocation
	.align	2, 0
	.globl	AnimThrowProjectile
	.type	 AnimThrowProjectile,function
	.thumb_func
AnimThrowProjectile:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L500
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L499	@cond_branch
	ldr	r1, .L500+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L499:
	ldr	r4, .L500+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r5, .L500+0x8
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	add	r0, r6, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L500+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L501:
	.align	2, 0
.L500:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimThrowProjectile_Step
.Lfe88:
	.size	 AnimThrowProjectile,.Lfe88-AnimThrowProjectile
	.align	2, 0
	.type	 AnimThrowProjectile_Step,function
	.thumb_func
AnimThrowProjectile_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L503	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L503:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 AnimThrowProjectile_Step,.Lfe89-AnimThrowProjectile_Step
	.align	2, 0
	.globl	AnimTravelDiagonally
	.type	 AnimTravelDiagonally,function
	.thumb_func
AnimTravelDiagonally:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r0, .L511
	mov	r2, #0xc
	ldrsh	r1, [r0, r2]
	cmp	r1, #0
	bne	.L505	@cond_branch
	mov	r4, #0x1
	mov	r7, #0x3
	b	.L506
.L512:
	.align	2, 0
.L511:
	.word	gBattleAnimArgs
.L505:
	mov	r4, #0x0
	mov	r7, #0x1
.L506:
	mov	r1, #0xa
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L507	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L513
	b	.L510
.L514:
	.align	2, 0
.L513:
	.word	gBattleAnimAttacker
.L507:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L515
.L510:
	ldrb	r6, [r0]
	ldr	r0, .L515+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L509	@cond_branch
	ldr	r1, .L515+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L509:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitSpritePosToAnimTarget
	ldr	r4, .L515+0x8
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	add	r0, r6, #0
	add	r1, r7, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x6]
	add	r0, r0, r4
	strh	r0, [r5, #0x36]
	ldr	r0, .L515+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L515+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L516:
	.align	2, 0
.L515:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe90:
	.size	 AnimTravelDiagonally,.Lfe90-AnimTravelDiagonally
	.align	2, 0
	.globl	CloneBattlerSpriteWithBlend
	.type	 CloneBattlerSpriteWithBlend,function
	.thumb_func
CloneBattlerSpriteWithBlend:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L518	@cond_branch
	mov	r6, #0x0
	ldr	r2, .L526
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r1, r0, #0x2
.L522:
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	add	r5, r4, #0
	add	r5, r5, #0x3e
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L521	@cond_branch
	add	r0, r4, #0
	add	r1, r1, r2
	mov	r2, #0x44
	bl	memcpy
	ldrb	r1, [r4, #0x1]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	ldrb	r0, [r5]
	add	r2, r2, #0x8
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r5]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	b	.L525
.L527:
	.align	2, 0
.L526:
	.word	gSprites
.L521:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x3f
	bls	.L522	@cond_branch
.L518:
	mov	r0, #0x1
	neg	r0, r0
.L525:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 CloneBattlerSpriteWithBlend,.Lfe91-CloneBattlerSpriteWithBlend
	.align	2, 0
	.globl	DestroySpriteWithActiveSheet
	.type	 DestroySpriteWithActiveSheet,function
	.thumb_func
DestroySpriteWithActiveSheet:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x3f
	ldrb	r1, [r3]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r3]
	bl	DestroySprite
	pop	{r0}
	bx	r0
.Lfe92:
	.size	 DestroySpriteWithActiveSheet,.Lfe92-DestroySpriteWithActiveSheet
	.align	2, 0
	.globl	AnimTask_AlphaFadeIn
	.type	 AnimTask_AlphaFadeIn,function
	.thumb_func
AnimTask_AlphaFadeIn:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	mov	r3, #0x0
	ldr	r2, .L534
	mov	r0, #0x4
	ldrsh	r1, [r2, r0]
	mov	r4, #0x0
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	ble	.L530	@cond_branch
	mov	r3, #0x1
.L530:
	cmp	r1, r0
	bge	.L531	@cond_branch
	ldr	r3, .L534+0x4
.L531:
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	mov	r4, #0x2
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	ble	.L532	@cond_branch
	mov	r6, #0x1
.L532:
	cmp	r1, r0
	bge	.L533	@cond_branch
	ldr	r6, .L534+0x4
.L533:
	ldr	r0, .L534+0x8
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r1, #0x0
	strh	r1, [r4, #0x8]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r4, #0xa]
	strh	r1, [r4, #0xc]
	ldrh	r0, [r2]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r4, #0x10]
	strh	r3, [r4, #0x12]
	strh	r6, [r4, #0x14]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r4, #0x16]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r4, #0x18]
	ldrh	r1, [r2, #0x2]
	lsl	r1, r1, #0x8
	ldrh	r0, [r2]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L534+0xc
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L535:
	.align	2, 0
.L534:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
	.word	AnimTask_AlphaFadeIn_Step
.Lfe93:
	.size	 AnimTask_AlphaFadeIn,.Lfe93-AnimTask_AlphaFadeIn
	.align	2, 0
	.type	 AnimTask_AlphaFadeIn_Step,function
	.thumb_func
AnimTask_AlphaFadeIn_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L543
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	ble	.L537	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L538	@cond_branch
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r1, [r4, r3]
	mov	r3, #0x16
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	beq	.L540	@cond_branch
	ldrh	r0, [r4, #0x12]
	add	r0, r2, r0
	strh	r0, [r4, #0xe]
	b	.L540
.L544:
	.align	2, 0
.L543:
	.word	gTasks
.L538:
	ldrh	r2, [r4, #0x10]
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r3, #0x18
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	beq	.L540	@cond_branch
	ldrh	r0, [r4, #0x14]
	add	r0, r2, r0
	strh	r0, [r4, #0x10]
.L540:
	ldrh	r1, [r4, #0x10]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xe]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0xe
	ldrsh	r1, [r4, r0]
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L537	@cond_branch
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L537	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L537:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe94:
	.size	 AnimTask_AlphaFadeIn_Step,.Lfe94-AnimTask_AlphaFadeIn_Step
	.align	2, 0
	.globl	AnimTask_BlendMonInAndOut
	.type	 AnimTask_BlendMonInAndOut,function
	.thumb_func
AnimTask_BlendMonInAndOut:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L547
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L546	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L545
.L548:
	.align	2, 0
.L547:
	.word	gBattleAnimArgs
.L546:
	ldr	r1, .L549
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L549+0x4
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x5]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	ldr	r3, .L549+0x8
	add	r2, r3, #0
	add	r1, r1, r2
	strh	r1, [r0, #0x8]
	bl	AnimTask_BlendMonInAndOutSetup
.L545:
	pop	{r4}
	pop	{r0}
	bx	r0
.L550:
	.align	2, 0
.L549:
	.word	gTasks
	.word	gSprites
	.word	0x101
.Lfe95:
	.size	 AnimTask_BlendMonInAndOut,.Lfe95-AnimTask_BlendMonInAndOut
	.align	2, 0
	.type	 AnimTask_BlendMonInAndOutSetup,function
	.thumb_func
AnimTask_BlendMonInAndOutSetup:
	ldr	r3, .L552
	ldrh	r1, [r3, #0x2]
	mov	r2, #0x0
	strh	r1, [r0, #0xa]
	strh	r2, [r0, #0xc]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0xe]
	strh	r2, [r0, #0x10]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r0, #0x12]
	strh	r2, [r0, #0x14]
	ldrh	r1, [r3, #0x8]
	strh	r1, [r0, #0x16]
	ldr	r1, .L552+0x4
	str	r1, [r0]
	bx	lr
.L553:
	.align	2, 0
.L552:
	.word	gBattleAnimArgs
	.word	AnimTask_BlendMonInAndOut_Step
.Lfe96:
	.size	 AnimTask_BlendMonInAndOutSetup,.Lfe96-AnimTask_BlendMonInAndOutSetup
	.align	2, 0
	.type	 AnimTask_BlendMonInAndOut_Step,function
	.thumb_func
AnimTask_BlendMonInAndOut_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L562
	add	r4, r0, r1
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L555	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L556	@cond_branch
	ldrh	r2, [r4, #0xc]
	add	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldrh	r0, [r4, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrh	r3, [r4, #0xa]
	mov	r1, #0xf
	bl	BlendPalette
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L555	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L555
.L563:
	.align	2, 0
.L562:
	.word	gTasks
.L556:
	ldrh	r2, [r4, #0xc]
	sub	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldrh	r0, [r4, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrh	r3, [r4, #0xa]
	mov	r1, #0xf
	bl	BlendPalette
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L555	@cond_branch
	ldrh	r0, [r4, #0x16]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L560	@cond_branch
	strh	r1, [r4, #0x10]
	strh	r1, [r4, #0x14]
	b	.L555
.L560:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L555:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 AnimTask_BlendMonInAndOut_Step,.Lfe97-AnimTask_BlendMonInAndOut_Step
	.align	2, 0
	.globl	AnimTask_BlendPalInAndOutByTag
	.type	 AnimTask_BlendPalInAndOutByTag,function
	.thumb_func
AnimTask_BlendPalInAndOutByTag:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L566
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L565	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L564
.L567:
	.align	2, 0
.L566:
	.word	gBattleAnimArgs
.L565:
	ldr	r1, .L568
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsl	r1, r2, #0x4
	ldr	r2, .L568+0x4
	add	r1, r1, r2
	strh	r1, [r0, #0x8]
	bl	AnimTask_BlendMonInAndOutSetup
.L564:
	pop	{r4}
	pop	{r0}
	bx	r0
.L569:
	.align	2, 0
.L568:
	.word	gTasks
	.word	0x101
.Lfe98:
	.size	 AnimTask_BlendPalInAndOutByTag,.Lfe98-AnimTask_BlendPalInAndOutByTag
	.align	2, 0
	.globl	PrepareAffineAnimInTaskData
	.type	 PrepareAffineAnimInTaskData,function
	.thumb_func
PrepareAffineAnimInTaskData:
	push	{r4, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x0
	strh	r1, [r3, #0x16]
	strh	r1, [r3, #0x18]
	strh	r1, [r3, #0x1a]
	strh	r4, [r3, #0x26]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r3, #0x1c]
	strh	r0, [r3, #0x1e]
	strh	r1, [r3, #0x20]
	add	r0, r3, #0
	add	r0, r0, #0x22
	add	r3, r3, #0x24
	add	r1, r3, #0
	bl	StorePointerInVars
	add	r0, r4, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 PrepareAffineAnimInTaskData,.Lfe99-PrepareAffineAnimInTaskData
	.align	2, 0
	.globl	RunAffineAnimFromTaskData
	.type	 RunAffineAnimFromTaskData,function
	.thumb_func
RunAffineAnimFromTaskData:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L593
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	bl	LoadPointerFromVars
	mov	r3, #0x16
	ldrsh	r1, [r4, r3]
	lsl	r1, r1, #0x3
	add	r1, r0, r1
	str	r1, [r5]
	mov	r6, #0x0
	ldrsh	r2, [r1, r6]
	ldr	r0, .L593+0x4
	cmp	r2, r0
	beq	.L576	@cond_branch
	cmp	r2, r0
	bgt	.L589	@cond_branch
	sub	r0, r0, #0x1
	cmp	r2, r0
	beq	.L577	@cond_branch
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	bne	.L574	@cond_branch
	ldrh	r0, [r1]
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x1e]
	ldrb	r0, [r1, #0x4]
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	add	r0, r1, #0
	add	r0, r0, #0x8
	str	r0, [r5]
.L574:
	ldr	r1, [r5]
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x1c]
	add	r0, r0, r2
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x2]
	ldrh	r3, [r4, #0x1e]
	add	r0, r0, r3
	strh	r0, [r4, #0x1e]
	ldrh	r0, [r4, #0x20]
	ldrb	r1, [r1, #0x4]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x1c
	ldrsh	r1, [r4, r6]
	mov	r3, #0x1e
	ldrsh	r2, [r4, r3]
	ldrh	r3, [r4, #0x20]
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromYScale
	ldrh	r0, [r4, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r1, [r5]
	ldrb	r1, [r1, #0x5]
	cmp	r0, r1
	blt	.L572	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x18]
	b	.L578
.L594:
	.align	2, 0
.L593:
	.word	sAnimTaskAffineAnim
	.word	0x7ffe
.L576:
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x16]
	b	.L572
.L577:
	ldrh	r2, [r1, #0x2]
	mov	r6, #0x2
	ldrsh	r0, [r1, r6]
	cmp	r0, #0
	beq	.L578	@cond_branch
	ldrh	r1, [r4, #0x1a]
	mov	r3, #0x1a
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L579	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L581	@cond_branch
	b	.L578
.L579:
	strh	r2, [r4, #0x1a]
.L581:
	mov	r6, #0x16
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	beq	.L572	@cond_branch
	ldr	r3, .L595
	ldr	r5, .L595+0x4
.L585:
	ldrh	r2, [r4, #0x16]
	sub	r1, r2, #0x1
	strh	r1, [r4, #0x16]
	ldr	r0, [r3]
	sub	r0, r0, #0x8
	str	r0, [r3]
	mov	r6, #0x0
	ldrsh	r0, [r0, r6]
	cmp	r0, r5
	beq	.L592	@cond_branch
	lsl	r0, r1, #0x10
	cmp	r0, #0
	bne	.L585	@cond_branch
	b	.L572
.L596:
	.align	2, 0
.L595:
	.word	sAnimTaskAffineAnim
	.word	0x7ffd
.L578:
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	b	.L572
.L589:
	ldr	r2, .L597
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	mov	r0, #0x0
	b	.L591
.L598:
	.align	2, 0
.L597:
	.word	gSprites
.L592:
	strh	r2, [r4, #0x16]
.L572:
	mov	r0, #0x1
.L591:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe100:
	.size	 RunAffineAnimFromTaskData,.Lfe100-RunAffineAnimFromTaskData
	.align	2, 0
	.globl	SetBattlerSpriteYOffsetFromYScale
	.type	 SetBattlerSpriteYOffsetFromYScale,function
	.thumb_func
SetBattlerSpriteYOffsetFromYScale:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerYDeltaFromSpriteId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r1, #0x40
	sub	r5, r1, r0
	ldr	r1, .L601
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	lsl	r0, r5, #0x8
	ldr	r2, .L601+0x4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	cmp	r0, #0x80
	ble	.L600	@cond_branch
	mov	r0, #0x80
.L600:
	sub	r0, r5, r0
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L602:
	.align	2, 0
.L601:
	.word	gSprites
	.word	gOamMatrices
.Lfe101:
	.size	 SetBattlerSpriteYOffsetFromYScale,.Lfe101-SetBattlerSpriteYOffsetFromYScale
	.align	2, 0
	.globl	SetBattlerSpriteYOffsetFromOtherYScale
	.type	 SetBattlerSpriteYOffsetFromOtherYScale,function
	.thumb_func
SetBattlerSpriteYOffsetFromOtherYScale:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerYDeltaFromSpriteId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r1, #0x40
	sub	r5, r1, r0
	ldr	r1, .L605
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	lsl	r0, r5, #0x8
	ldr	r2, .L605+0x4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	cmp	r0, #0x80
	ble	.L604	@cond_branch
	mov	r0, #0x80
.L604:
	sub	r0, r5, r0
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L606:
	.align	2, 0
.L605:
	.word	gSprites
	.word	gOamMatrices
.Lfe102:
	.size	 SetBattlerSpriteYOffsetFromOtherYScale,.Lfe102-SetBattlerSpriteYOffsetFromOtherYScale
	.align	2, 0
	.type	 GetBattlerYDeltaFromSpriteId,function
	.thumb_func
GetBattlerYDeltaFromSpriteId:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L622
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r1, .L622+0x4
	ldr	r6, .L622+0x8
.L611:
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L610	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L613	@cond_branch
	ldr	r0, .L622+0xc
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L614	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L622+0x10
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L615
.L623:
	.align	2, 0
.L622:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattlerPartyIndexes
	.word	gBattleSpritesDataPtr
	.word	gPlayerParty
.L614:
	ldrh	r1, [r1, #0x2]
.L615:
	ldr	r0, .L624
	b	.L621
.L625:
	.align	2, 0
.L624:
	.word	gMonBackPicCoords
.L613:
	ldr	r0, .L626
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L617	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L626+0x4
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L618
.L627:
	.align	2, 0
.L626:
	.word	gBattleSpritesDataPtr
	.word	gEnemyParty
.L617:
	ldrh	r1, [r1, #0x2]
.L618:
	ldr	r0, .L628
.L621:
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L620
.L629:
	.align	2, 0
.L628:
	.word	gMonFrontPicCoords
.L610:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L611	@cond_branch
	mov	r0, #0x40
.L620:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe103:
	.size	 GetBattlerYDeltaFromSpriteId,.Lfe103-GetBattlerYDeltaFromSpriteId
	.align	2, 0
	.globl	StorePointerInVars
	.type	 StorePointerInVars,function
	.thumb_func
StorePointerInVars:
	strh	r2, [r0]
	asr	r2, r2, #0x10
	strh	r2, [r1]
	bx	lr
.Lfe104:
	.size	 StorePointerInVars,.Lfe104-StorePointerInVars
	.align	2, 0
	.globl	LoadPointerFromVars
	.type	 LoadPointerFromVars,function
	.thumb_func
LoadPointerFromVars:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	bx	lr
.Lfe105:
	.size	 LoadPointerFromVars,.Lfe105-LoadPointerFromVars
	.align	2, 0
	.globl	BattleAnimHelper_SetSpriteSquashParams
	.type	 BattleAnimHelper_SetSpriteSquashParams,function
	.thumb_func
BattleAnimHelper_SetSpriteSquashParams:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	add	r5, r3, #0
	ldr	r0, [sp, #0x14]
	ldr	r4, [sp, #0x18]
	ldr	r6, [sp, #0x1c]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r3, r8
	strh	r6, [r3, #0x18]
	strh	r1, [r3, #0x26]
	strh	r2, [r3, #0x1a]
	strh	r5, [r3, #0x1c]
	strh	r0, [r3, #0x22]
	strh	r4, [r3, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	sub	r0, r0, r2
	add	r1, r6, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1, #0x1e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	sub	r4, r4, r5
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	mov	r3, r8
	strh	r0, [r3, #0x20]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 BattleAnimHelper_SetSpriteSquashParams,.Lfe106-BattleAnimHelper_SetSpriteSquashParams
	.align	2, 0
	.globl	BattleAnimHelper_RunSpriteSquash
	.type	 BattleAnimHelper_RunSpriteSquash,function
	.thumb_func
BattleAnimHelper_RunSpriteSquash:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L634	@cond_branch
	mov	r0, #0x0
	b	.L639
.L634:
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L635	@cond_branch
	ldrh	r0, [r4, #0x1e]
	ldrh	r3, [r4, #0x1a]
	add	r0, r0, r3
	strh	r0, [r4, #0x1a]
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	b	.L640
.L635:
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x1a]
	ldrh	r0, [r4, #0x24]
.L640:
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1a
	ldrsh	r1, [r4, r2]
	mov	r3, #0x1c
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	SetSpriteRotScale
	mov	r0, #0x18
	ldrsh	r3, [r4, r0]
	cmp	r3, #0
	beq	.L637	@cond_branch
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromYScale
	b	.L638
.L637:
	ldr	r2, .L641
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
.L638:
	ldrb	r0, [r4, #0x18]
.L639:
	pop	{r4}
	pop	{r1}
	bx	r1
.L642:
	.align	2, 0
.L641:
	.word	gSprites
.Lfe107:
	.size	 BattleAnimHelper_RunSpriteSquash,.Lfe107-BattleAnimHelper_RunSpriteSquash
	.align	2, 0
	.globl	AnimTask_GetFrustrationPowerLevel
	.type	 AnimTask_GetFrustrationPowerLevel,function
	.thumb_func
AnimTask_GetFrustrationPowerLevel:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L650
	ldrb	r0, [r0]
	mov	r1, #0x0
	cmp	r0, #0x1e
	bls	.L645	@cond_branch
	mov	r1, #0x1
	cmp	r0, #0x64
	bls	.L645	@cond_branch
	mov	r1, #0x3
	cmp	r0, #0xc8
	bhi	.L645	@cond_branch
	mov	r1, #0x2
.L645:
	ldr	r0, .L650+0x4
	strh	r1, [r0, #0xe]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L651:
	.align	2, 0
.L650:
	.word	gAnimFriendship
	.word	gBattleAnimArgs
.Lfe108:
	.size	 AnimTask_GetFrustrationPowerLevel,.Lfe108-AnimTask_GetFrustrationPowerLevel
	.align	2, 0
	.type	 SetPriorityForVisibleBattlers,function
	.thumb_func
SetPriorityForVisibleBattlers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r7, r4, #0
	ldr	r6, .L657
	ldrb	r0, [r6]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L653	@cond_branch
	ldr	r2, .L657+0x4
	ldr	r1, .L657+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L653:
	ldr	r0, .L657+0xc
	mov	r8, r0
	ldrb	r0, [r0]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L654	@cond_branch
	ldr	r2, .L657+0x4
	ldr	r1, .L657+0x8
	mov	r3, r8
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L654:
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L655	@cond_branch
	ldr	r2, .L657+0x4
	ldr	r1, .L657+0x8
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L655:
	mov	r1, r8
	ldrb	r0, [r1]
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L656	@cond_branch
	ldr	r2, .L657+0x4
	ldr	r1, .L657+0x8
	mov	r3, r8
	ldrb	r0, [r3]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	and	r7, r7, r0
	lsl	r3, r7, #0x2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
.L656:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L658:
	.align	2, 0
.L657:
	.word	gBattleAnimTarget
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe109:
	.size	 SetPriorityForVisibleBattlers,.Lfe109-SetPriorityForVisibleBattlers
	.align	2, 0
	.globl	InitPrioritiesForVisibleBattlers
	.type	 InitPrioritiesForVisibleBattlers,function
	.thumb_func
InitPrioritiesForVisibleBattlers:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r0, .L666
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L661	@cond_branch
	ldr	r6, .L666+0x4
.L663:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L662	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSpriteSubpriority
	ldr	r3, .L666+0x8
	add	r3, r5, r3
	ldrb	r2, [r3]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r2, [r0, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r2, r2, r1
	mov	r1, #0x8
	orr	r2, r2, r1
	strb	r2, [r0, #0x5]
.L662:
	add	r5, r5, #0x1
	ldr	r0, .L666
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L663	@cond_branch
.L661:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L667:
	.align	2, 0
.L666:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe110:
	.size	 InitPrioritiesForVisibleBattlers,.Lfe110-InitPrioritiesForVisibleBattlers
	.align	2, 0
	.globl	GetBattlerSpriteSubpriority
	.type	 GetBattlerSpriteSubpriority,function
	.thumb_func
GetBattlerSpriteSubpriority:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1e
	cmp	r0, #0
	beq	.L670	@cond_branch
	mov	r1, #0x14
	cmp	r0, #0x2
	beq	.L670	@cond_branch
	mov	r1, #0x32
	cmp	r0, #0x1
	bne	.L670	@cond_branch
	mov	r1, #0x28
.L670:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.Lfe111:
	.size	 GetBattlerSpriteSubpriority,.Lfe111-GetBattlerSpriteSubpriority
	.align	2, 0
	.globl	GetBattlerSpriteBGPriority
	.type	 GetBattlerSpriteBGPriority,function
	.thumb_func
GetBattlerSpriteBGPriority:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L677	@cond_branch
	cmp	r0, #0x3
	bne	.L676	@cond_branch
.L677:
	mov	r0, #0x2
	b	.L681
.L676:
	mov	r0, #0x1
.L681:
	mov	r1, #0x4
	bl	GetAnimBgAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe112:
	.size	 GetBattlerSpriteBGPriority,.Lfe112-GetBattlerSpriteBGPriority
	.align	2, 0
	.globl	GetBattlerSpriteBGPriorityRank
	.type	 GetBattlerSpriteBGPriorityRank,function
	.thumb_func
GetBattlerSpriteBGPriorityRank:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L684	@cond_branch
	cmp	r0, #0x3
	bne	.L683	@cond_branch
.L684:
	mov	r0, #0x2
	b	.L686
.L683:
	mov	r0, #0x1
.L686:
	pop	{r1}
	bx	r1
.Lfe113:
	.size	 GetBattlerSpriteBGPriorityRank,.Lfe113-GetBattlerSpriteBGPriorityRank
	.align	2, 0
	.globl	CreateAdditionalMonSpriteForMoveAnim
	.type	 CreateAdditionalMonSpriteForMoveAnim,function
	.thumb_func
CreateAdditionalMonSpriteForMoveAnim:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x30]
	ldr	r5, [sp, #0x34]
	ldr	r6, [sp, #0x38]
	mov	r8, r6
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	sl, r3
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	str	r4, [sp, #0x4]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x8]
	lsl	r0, r7, #0x3
	ldr	r1, .L701
	add	r0, r0, r1
	bl	LoadSpriteSheet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	ldr	r1, .L701+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L701+0x8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L688	@cond_branch
	mov	r1, #0xbe
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L688	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	ldr	r1, [r4]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	str	r0, [r1]
.L688:
	mov	r3, r9
	cmp	r3, #0
	bne	.L689	@cond_branch
	add	r0, r6, #0
	ldr	r1, [sp, #0x3c]
	mov	r2, r8
	bl	GetMonSpritePalFromSpeciesAndPersonality
	lsl	r1, r5, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r3, [sp, #0x44]
	cmp	r3, #0x1
	beq	.L691	@cond_branch
	ldr	r0, [sp, #0x40]
	lsl	r1, r0, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x5
	bl	ShouldIgnoreDeoxysForm
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L691	@cond_branch
	ldr	r0, .L701+0xc
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r2, [sp, #0x40]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L690	@cond_branch
.L691:
	lsl	r0, r6, #0x3
	ldr	r1, .L701+0x10
	add	r0, r0, r1
	ldr	r1, .L701+0x8
	ldr	r1, [r1]
	mov	r3, #0xbe
	lsl	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r1, [r1]
	mov	r2, #0x1
	b	.L699
.L702:
	.align	2, 0
.L701:
	.word	sSpriteSheets_MoveEffectMons
	.word	sSpriteTemplates_MoveEffectMons
	.word	gMonSpritesGfxPtr
	.word	gBattleSpritesDataPtr
	.word	gMonFrontPicTable
.L690:
	lsl	r0, r6, #0x3
	ldr	r1, .L703
	add	r0, r0, r1
	ldr	r1, .L703+0x4
	ldr	r1, [r1]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r1, [r1]
	mov	r2, #0x1
	str	r2, [sp]
	add	r2, r6, #0
	mov	r3, r8
	bl	LoadSpecialPokePic
	b	.L693
.L704:
	.align	2, 0
.L703:
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
.L689:
	add	r0, r6, #0
	ldr	r1, [sp, #0x3c]
	mov	r2, r8
	bl	GetMonSpritePalFromSpeciesAndPersonality
	lsl	r1, r5, #0x14
	mov	r3, #0x80
	lsl	r3, r3, #0x11
	add	r1, r1, r3
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, [sp, #0x44]
	cmp	r0, #0x1
	beq	.L695	@cond_branch
	ldr	r2, [sp, #0x40]
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x5
	bl	ShouldIgnoreDeoxysForm
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L695	@cond_branch
	ldr	r0, .L705
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r3, [sp, #0x40]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrh	r2, [r0, #0x2]
	cmp	r2, #0
	beq	.L694	@cond_branch
.L695:
	lsl	r0, r6, #0x3
	ldr	r1, .L705+0x4
	add	r0, r0, r1
	ldr	r1, .L705+0x8
	ldr	r1, [r1]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r1, [r1]
	mov	r2, #0x0
.L699:
	str	r2, [sp]
	add	r2, r6, #0
	mov	r3, r8
	bl	LoadSpecialPokePic_DontHandleDeoxys
	b	.L693
.L706:
	.align	2, 0
.L705:
	.word	gBattleSpritesDataPtr
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
.L694:
	lsl	r0, r6, #0x3
	ldr	r1, .L707
	add	r0, r0, r1
	ldr	r1, .L707+0x4
	ldr	r1, [r1]
	mov	r3, #0xbe
	lsl	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r1, [r1]
	str	r2, [sp]
	add	r2, r6, #0
	mov	r3, r8
	bl	LoadSpecialPokePic
.L693:
	ldr	r5, .L707+0x4
	ldr	r0, [r5]
	mov	r4, #0xbe
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	ldr	r0, [r0]
	ldr	r2, [sp, #0xc]
	lsl	r1, r2, #0x5
	ldr	r3, .L707+0x8
	add	r1, r1, r3
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r3, #0x1
	bl	RequestDma3Copy
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x0
	str	r1, [r0]
	mov	r0, r9
	cmp	r0, #0
	bne	.L697	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L707+0xc
	add	r0, r0, r1
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	ldr	r3, .L707+0x10
	b	.L700
.L708:
	.align	2, 0
.L707:
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
	.word	0x6010000
	.word	sSpriteTemplates_MoveEffectMons
	.word	gMonFrontPicCoords
.L697:
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L709
	add	r0, r0, r1
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	ldr	r3, .L709+0x4
.L700:
	lsl	r2, r6, #0x2
	add	r2, r2, r3
	ldrb	r2, [r2, #0x1]
	ldr	r3, [sp, #0x4]
	add	r2, r2, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r3, [sp, #0x8]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L710:
	.align	2, 0
.L709:
	.word	sSpriteTemplates_MoveEffectMons
	.word	gMonBackPicCoords
.Lfe114:
	.size	 CreateAdditionalMonSpriteForMoveAnim,.Lfe114-CreateAdditionalMonSpriteForMoveAnim
	.align	2, 0
	.globl	DestroySpriteAndFreeResources_
	.type	 DestroySpriteAndFreeResources_,function
	.thumb_func
DestroySpriteAndFreeResources_:
	push	{lr}
	bl	DestroySpriteAndFreeResources
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 DestroySpriteAndFreeResources_,.Lfe115-DestroySpriteAndFreeResources_
	.align	2, 0
	.globl	GetBattlerSpriteCoordAttr
	.type	 GetBattlerSpriteCoordAttr,function
	.thumb_func
GetBattlerSpriteCoordAttr:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L713	@cond_branch
	ldr	r0, .L748
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, r8
	lsl	r2, r1, #0x2
	add	r1, r2, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L714	@cond_branch
	ldr	r0, .L748+0x4
	mov	r1, r8
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L748+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L715
.L749:
	.align	2, 0
.L748:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L714:
	ldrh	r7, [r1, #0x2]
	ldr	r0, .L750
	add	r0, r2, r0
	ldr	r2, [r0]
.L715:
	cmp	r7, #0xc9
	bne	.L716	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L717	@cond_branch
	mov	r0, #0xc9
	b	.L718
.L751:
	.align	2, 0
.L750:
	.word	gTransformedPersonalities
.L717:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L718:
	lsl	r1, r0, #0x2
	ldr	r0, .L752
	b	.L744
.L753:
	.align	2, 0
.L752:
	.word	gMonBackPicCoords
.L716:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	bls	.L720	@cond_branch
	ldr	r4, .L754
	b	.L722
.L755:
	.align	2, 0
.L754:
	.word	gMonBackPicCoords
.L720:
	lsl	r1, r7, #0x2
	ldr	r0, .L756
	b	.L744
.L757:
	.align	2, 0
.L756:
	.word	gMonBackPicCoords
.L713:
	ldr	r0, .L758
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, r8
	lsl	r2, r1, #0x2
	add	r1, r2, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L723	@cond_branch
	ldr	r0, .L758+0x4
	mov	r1, r8
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L758+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L724
.L759:
	.align	2, 0
.L758:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L723:
	ldrh	r7, [r1, #0x2]
	ldr	r0, .L760
	add	r0, r2, r0
	ldr	r2, [r0]
.L724:
	cmp	r7, #0xc9
	bne	.L725	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L726	@cond_branch
	mov	r0, #0xc9
	b	.L727
.L761:
	.align	2, 0
.L760:
	.word	gTransformedPersonalities
.L726:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L727:
	lsl	r1, r0, #0x2
	b	.L745
.L725:
	ldr	r0, .L762
	cmp	r7, r0
	bne	.L729	@cond_branch
	ldr	r0, .L762+0x4
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	ldr	r1, .L762+0x8
	add	r4, r0, r1
	b	.L722
.L763:
	.align	2, 0
.L762:
	.word	0x181
	.word	gBattleMonForms
	.word	gCastformFrontSpriteCoords
.L729:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	bls	.L731	@cond_branch
	ldr	r4, .L764
	b	.L722
.L765:
	.align	2, 0
.L764:
	.word	gMonFrontPicCoords
.L731:
	lsl	r1, r7, #0x2
.L745:
	ldr	r0, .L766
.L744:
	add	r4, r1, r0
.L722:
	mov	r0, r9
	cmp	r0, #0x6
	bhi	.L741	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L766+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L767:
	.align	2, 0
.L766:
	.word	gMonFrontPicCoords
	.word	.L742
	.align	2, 0
	.align	2, 0
.L742:
	.word	.L734
	.word	.L735
	.word	.L738
	.word	.L739
	.word	.L736
	.word	.L737
	.word	.L740
.L734:
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x3
	b	.L743
.L735:
	ldrb	r0, [r4]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x3
	b	.L743
.L736:
	mov	r0, r8
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4]
	lsr	r1, r1, #0x4
	b	.L746
.L737:
	mov	r0, r8
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4]
	lsr	r1, r1, #0x4
	b	.L747
.L738:
	mov	r0, r8
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4]
	mov	r1, #0xf
	and	r1, r1, r2
.L746:
	lsl	r1, r1, #0x2
	sub	r0, r0, r1
	b	.L743
.L739:
	mov	r0, r8
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4]
	mov	r1, #0xf
	and	r1, r1, r2
.L747:
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	b	.L743
.L740:
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1f
	ldrb	r1, [r4, #0x1]
	sub	r0, r0, r1
	b	.L743
.L741:
	mov	r0, #0x0
.L743:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe116:
	.size	 GetBattlerSpriteCoordAttr,.Lfe116-GetBattlerSpriteCoordAttr
	.align	2, 0
	.globl	SetAverageBattlerPositions
	.type	 SetAverageBattlerPositions,function
	.thumb_func
SetAverageBattlerPositions:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r2
	mov	sl, r3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L769	@cond_branch
	mov	r5, #0x0
	mov	r6, #0x1
	b	.L770
.L769:
	mov	r5, #0x2
	mov	r6, #0x3
.L770:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r0, r4, #0
	add	r1, r6, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L771	@cond_branch
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	add	r1, r6, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, r8
	lsl	r1, r0, #0x10
	lsl	r2, r7, #0x10
	b	.L772
.L771:
	mov	r0, r8
	lsl	r1, r0, #0x10
	lsr	r5, r1, #0x10
	lsl	r0, r7, #0x10
	lsr	r3, r0, #0x10
	add	r2, r0, #0
.L772:
	asr	r0, r1, #0x10
	add	r0, r0, r5
	asr	r0, r0, #0x1
	mov	r1, r9
	strh	r0, [r1]
	asr	r0, r2, #0x10
	add	r0, r0, r3
	asr	r0, r0, #0x1
	mov	r1, sl
	strh	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe117:
	.size	 SetAverageBattlerPositions,.Lfe117-SetAverageBattlerPositions
	.align	2, 0
	.globl	CreateInvisibleSpriteCopy
	.type	 CreateInvisibleSpriteCopy,function
	.thumb_func
CreateInvisibleSpriteCopy:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	lsl	r6, r1, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L774
	mov	sl, r0
	bl	CreateInvisibleSpriteWithCallback
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L774+0x4
	mov	r9, r0
	mov	r0, r8
	lsl	r3, r0, #0x4
	add	r3, r3, r8
	lsl	r3, r3, #0x2
	mov	r0, r9
	add	r5, r3, r0
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x44
	str	r3, [sp]
	bl	memcpy
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r5, #0x5]
	ldrb	r0, [r5, #0x1]
	and	r1, r1, r0
	mov	r0, #0x8
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L774+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r0, #0x1c
	add	r9, r9, r0
	ldr	r3, [sp]
	add	r3, r3, r9
	mov	r0, sl
	str	r0, [r3]
	mov	r0, r8
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L775:
	.align	2, 0
.L774:
	.word	SpriteCallbackDummy
	.word	gSprites
	.word	-0x400
.Lfe118:
	.size	 CreateInvisibleSpriteCopy,.Lfe118-CreateInvisibleSpriteCopy
	.align	2, 0
	.globl	AnimTranslateLinearAndFlicker_Flipped
	.type	 AnimTranslateLinearAndFlicker_Flipped,function
	.thumb_func
AnimTranslateLinearAndFlicker_Flipped:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L779
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L777	@cond_branch
	ldr	r2, .L779+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x6]
	neg	r0, r0
	strh	r0, [r2, #0x6]
	add	r3, r4, #0
	add	r3, r3, #0x3f
	ldrb	r0, [r3]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r1, r2, #0
	b	.L778
.L780:
	.align	2, 0
.L779:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L777:
	ldr	r1, .L781
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
.L778:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldr	r1, .L781+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L781+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteLinearAndFlicker
.Lfe119:
	.size	 AnimTranslateLinearAndFlicker_Flipped,.Lfe119-AnimTranslateLinearAndFlicker_Flipped
	.align	2, 0
	.globl	AnimTranslateLinearAndFlicker
	.type	 AnimTranslateLinearAndFlicker,function
	.thumb_func
AnimTranslateLinearAndFlicker:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L786
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L784	@cond_branch
	ldr	r2, .L786+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	mov	r1, #0x6
	ldrsh	r0, [r2, r1]
	neg	r0, r0
	strh	r0, [r2, #0x6]
	add	r1, r2, #0
	b	.L785
.L787:
	.align	2, 0
.L786:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L784:
	ldr	r1, .L788
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
.L785:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r1, #0xc]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r1, .L788+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L788+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L789:
	.align	2, 0
.L788:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteLinearAndFlicker
.Lfe120:
	.size	 AnimTranslateLinearAndFlicker,.Lfe120-AnimTranslateLinearAndFlicker
	.align	2, 0
	.globl	AnimSpinningSparkle
	.type	 AnimSpinningSparkle,function
	.thumb_func
AnimSpinningSparkle:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L793
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L791	@cond_branch
	ldr	r0, .L793+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	b	.L792
.L794:
	.align	2, 0
.L793:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L791:
	ldr	r1, .L795
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r0, r1, #0
.L792:
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L795+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L795+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L796:
	.align	2, 0
.L795:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe121:
	.size	 AnimSpinningSparkle,.Lfe121-AnimSpinningSparkle
	.align	2, 0
	.globl	AnimTask_AttackerPunchWithTrace
	.type	 AnimTask_AttackerPunchWithTrace,function
	.thumb_func
AnimTask_AttackerPunchWithTrace:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L804
	add	r5, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r5, #0x8]
	ldr	r7, .L804+0x4
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x8
	cmp	r0, #0
	beq	.L798	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	add	r1, r0, #0
.L798:
	strh	r1, [r5, #0xa]
	strh	r6, [r5, #0xc]
	strh	r6, [r5, #0xe]
	ldr	r4, .L804+0x8
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r5, #0x8]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldr	r0, .L804+0xc
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x10]
	strh	r6, [r5, #0x12]
	mov	r1, #0x10
	ldrsh	r0, [r5, r1]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x14
	lsr	r6, r0, #0x10
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r4, r0, #0x4
	ldrb	r0, [r7]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	cmp	r0, #0x14
	beq	.L801	@cond_branch
	cmp	r0, #0x28
	bne	.L800	@cond_branch
.L801:
	mov	r0, #0x2
	b	.L803
.L805:
	.align	2, 0
.L804:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	0x2771
.L800:
	mov	r0, #0x3
.L803:
	strh	r0, [r5, #0x14]
	lsl	r0, r4, #0x1
	ldr	r1, .L806
	add	r0, r0, r1
	lsl	r1, r6, #0x1
	ldr	r2, .L806+0x4
	add	r1, r1, r2
	ldr	r2, .L806+0x8
	bl	CpuSet
	ldr	r0, .L806+0xc
	ldrb	r2, [r0, #0x2]
	ldrh	r3, [r0]
	add	r0, r6, #0
	mov	r1, #0x10
	bl	BlendPalette
	ldr	r0, .L806+0x10
	str	r0, [r5]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L807:
	.align	2, 0
.L806:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
	.word	gBattleAnimArgs
	.word	AnimTask_AttackerPunchWithTrace_Step
.Lfe122:
	.size	 AnimTask_AttackerPunchWithTrace,.Lfe122-AnimTask_AttackerPunchWithTrace
	.align	2, 0
	.type	 AnimTask_AttackerPunchWithTrace_Step,function
	.thumb_func
AnimTask_AttackerPunchWithTrace_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L820
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L812	@cond_branch
	cmp	r0, #0x1
	bgt	.L818	@cond_branch
	cmp	r0, #0
	beq	.L810	@cond_branch
	b	.L809
.L821:
	.align	2, 0
.L820:
	.word	gTasks
.L818:
	cmp	r0, #0x2
	beq	.L814	@cond_branch
	b	.L809
.L810:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	CreateBattlerTrace
	ldr	r2, .L822
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0xa]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r1, [r4, #0xe]
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L809	@cond_branch
	strh	r1, [r4, #0xe]
	b	.L819
.L823:
	.align	2, 0
.L822:
	.word	gSprites
.L812:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	CreateBattlerTrace
	ldr	r3, .L824
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r4, #0xa]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bne	.L809	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r2, [r1, #0x24]
.L819:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L809
.L825:
	.align	2, 0
.L824:
	.word	gSprites
.L814:
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L809	@cond_branch
	ldr	r0, .L826
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L809:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L827:
	.align	2, 0
.L826:
	.word	0x2771
.Lfe123:
	.size	 AnimTask_AttackerPunchWithTrace_Step,.Lfe123-AnimTask_AttackerPunchWithTrace_Step
	.align	2, 0
	.type	 CreateBattlerTrace,function
	.thumb_func
CreateBattlerTrace:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, #0x0
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	blt	.L829	@cond_branch
	ldr	r5, .L830
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r3, r4, r5
	mov	r0, #0x3
	ldrb	r1, [r6, #0x14]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	ldrb	r1, [r6, #0x10]
	lsl	r1, r1, #0x4
	mov	r2, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	mov	r0, #0x8
	strh	r0, [r3, #0x2e]
	mov	r0, r8
	strh	r0, [r3, #0x30]
	strh	r7, [r3, #0x32]
	mov	r0, #0x8
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r0, [r0, #0x24]
	strh	r0, [r3, #0x24]
	add	r5, r5, #0x1c
	add	r4, r4, r5
	ldr	r0, .L830+0x4
	str	r0, [r4]
	ldrh	r0, [r6, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x12]
.L829:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L831:
	.align	2, 0
.L830:
	.word	gSprites
	.word	AnimBattlerTrace
.Lfe124:
	.size	 CreateBattlerTrace,.Lfe124-CreateBattlerTrace
	.align	2, 0
	.type	 AnimBattlerTrace,function
	.thumb_func
AnimBattlerTrace:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L833	@cond_branch
	ldr	r2, .L834
	mov	r0, #0x30
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x12]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x12]
	add	r0, r3, #0
	bl	DestroySpriteWithActiveSheet
.L833:
	pop	{r0}
	bx	r0
.L835:
	.align	2, 0
.L834:
	.word	gTasks
.Lfe125:
	.size	 AnimBattlerTrace,.Lfe125-AnimBattlerTrace
	.align	2, 0
	.globl	AnimWeatherBallUp
	.type	 AnimWeatherBallUp,function
	.thumb_func
AnimWeatherBallUp:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L840
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L837	@cond_branch
	mov	r0, #0x5
	b	.L839
.L841:
	.align	2, 0
.L840:
	.word	gBattleAnimAttacker
.L837:
	ldr	r0, .L842
.L839:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L842+0x4
	strh	r0, [r5, #0x30]
	ldr	r0, .L842+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L843:
	.align	2, 0
.L842:
	.word	0xfff6
	.word	0xffd8
	.word	AnimWeatherBallUp_Step
.Lfe126:
	.size	 AnimWeatherBallUp,.Lfe126-AnimWeatherBallUp
	.align	2, 0
	.type	 AnimWeatherBallUp_Step,function
	.thumb_func
AnimWeatherBallUp_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r5, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r0, r5, r2
	strh	r0, [r4, #0x34]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x26]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x14
	neg	r1, r1
	cmp	r0, r1
	bge	.L845	@cond_branch
	add	r0, r5, #0x1
	strh	r0, [r4, #0x30]
.L845:
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L846	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L846:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 AnimWeatherBallUp_Step,.Lfe127-AnimWeatherBallUp_Step
	.align	2, 0
	.globl	AnimWeatherBallDown
	.type	 AnimWeatherBallDown,function
	.thumb_func
AnimWeatherBallDown:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L851
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0xa]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldr	r0, .L851+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L848	@cond_branch
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1e
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x14
	b	.L850
.L852:
	.align	2, 0
.L851:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L848:
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1e
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x50
.L850:
	strh	r0, [r4, #0x22]
	ldr	r0, .L853
	str	r0, [r4, #0x1c]
	ldr	r1, .L853+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L854:
	.align	2, 0
.L853:
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe128:
	.size	 AnimWeatherBallDown,.Lfe128-AnimWeatherBallDown
.text
	.align	2, 0 @ Don't pad with nop

