@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	1, 0
	.type	 sGiftItemFlagIds,object
sGiftItemFlagIds:
	.short	0x2a7
	.short	0x2a8
	.short	0x2a9
	.short	0x2aa
	.short	0x2ab
	.short	0x2ac
	.short	0x2ad
	.short	0x2ae
	.short	0x2af
	.short	0x2b0
	.short	0x2b1
	.short	0x2b2
	.short	0x2b3
	.short	0x2b4
	.short	0x2b5
	.short	0x2b6
	.short	0x2b7
	.short	0x2b8
	.short	0x2b9
	.short	0x2ba
	.size	 sGiftItemFlagIds,40
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sReceivedWonderCardIsValid,object
	.size	 sReceivedWonderCardIsValid,4
sReceivedWonderCardIsValid:
	.word	0x0
.text
	.align	2, 0
	.globl	SendUnknownSerialData_Init
	.type	 SendUnknownSerialData_Init,function
	.thumb_func
SendUnknownSerialData_Init:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	mov	r1, sp
	ldr	r4, .L3
	ldrh	r0, [r4]
	strh	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r4]
	ldr	r1, .L3+0x4
	ldr	r0, .L3+0x8
	str	r0, [r1, #0x4]
	ldr	r0, .L3+0xc
	str	r0, [r1, #0x8]
	bl	EReaderHelper_SaveRegsState
	bl	EReaderHelper_ClearsSendRecvMgr
	ldr	r2, .L3+0x10
	ldrh	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4]
	mov	r0, #0x0
	strh	r0, [r5]
	str	r6, [r5, #0x4]
	mov	r0, r8
	str	r0, [r5, #0x8]
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	0x4000208
	.word	gIntrTable
	.word	EReaderHelper_SerialCallback
	.word	EReaderHelper_Timer3Callback
	.word	0x4000200
.Lfe1:
	.size	 SendUnknownSerialData_Init,.Lfe1-SendUnknownSerialData_Init
	.align	2, 0
	.globl	SendUnknownSerialData_Teardown
	.type	 SendUnknownSerialData_Teardown,function
	.thumb_func
SendUnknownSerialData_Teardown:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	ldr	r4, .L6
	ldrh	r0, [r4]
	strh	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r4]
	bl	EReaderHelper_ClearsSendRecvMgr
	bl	EReaderHelper_RestoreRegsState
	bl	RestoreSerialTimer3IntrHandlers
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	0x4000208
.Lfe2:
	.size	 SendUnknownSerialData_Teardown,.Lfe2-SendUnknownSerialData_Teardown
	.align	2, 0
	.globl	SendUnknownSerialData_Run
	.type	 SendUnknownSerialData_Run,function
	.thumb_func
SendUnknownSerialData_Run:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	ldr	r1, [r4, #0x4]
	ldr	r2, [r4, #0x8]
	mov	r0, #0x1
	mov	r3, #0x0
	bl	EReaderHandleTransfer
	add	r1, r0, #0
	strh	r1, [r4]
	mov	r0, #0x13
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L9	@cond_branch
	mov	r5, #0x1
.L9:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L10	@cond_branch
	mov	r5, #0x2
.L10:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L11	@cond_branch
	mov	r5, #0x3
.L11:
	ldr	r1, .L12
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L13:
	.align	2, 0
.L12:
	.word	gShouldAdvanceLinkState
.Lfe3:
	.size	 SendUnknownSerialData_Run,.Lfe3-SendUnknownSerialData_Run
	.align	2, 0
	.type	 ResetTTDataBuffer,function
	.thumb_func
ResetTTDataBuffer:
	push	{lr}
	ldr	r0, .L15
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	mov	r1, #0x0
	bl	memset
	ldr	r1, .L15+0x4
	ldr	r2, .L15+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	bl	OpenLink
	mov	r0, #0x1
	bl	SetSuppressLinkErrorMessage
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gDecompressionBuffer
	.word	gLinkType
	.word	0x5502
.Lfe4:
	.size	 ResetTTDataBuffer,.Lfe4-ResetTTDataBuffer
	.align	2, 0
	.globl	sub_81436EC
	.type	 sub_81436EC,function
	.thumb_func
sub_81436EC:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r1, sp
	ldr	r2, .L20
	ldrh	r0, [r2]
	strh	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r2]
	ldr	r0, .L20+0x4
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r2]
	add	r2, sp, #0x4
	ldrh	r1, [r2]
	ldr	r0, .L20+0x8
	cmp	r1, r0
	bne	.L18	@cond_branch
	ldrh	r1, [r2, #0x2]
	ldr	r0, .L20+0xc
	cmp	r1, r0
	bne	.L18	@cond_branch
	ldrh	r1, [r2, #0x4]
	ldr	r0, .L20+0x10
	cmp	r1, r0
	bne	.L18	@cond_branch
	ldrh	r0, [r2, #0x6]
	cmp	r0, r1
	bne	.L18	@cond_branch
	mov	r0, #0x1
	b	.L19
.L21:
	.align	2, 0
.L20:
	.word	0x4000208
	.word	gLink+0x4
	.word	0xb9a0
	.word	0xccd0
	.word	0xffff
.L18:
	mov	r0, #0x0
.L19:
	add	sp, sp, #0xc
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 sub_81436EC,.Lfe5-sub_81436EC
	.align	2, 0
	.type	 IsEReaderConnectionSane,function
	.thumb_func
IsEReaderConnectionSane:
	push	{lr}
	bl	IsLinkMaster
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L23	@cond_branch
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L23	@cond_branch
	mov	r0, #0x1
	b	.L24
.L23:
	mov	r0, #0x0
.L24:
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 IsEReaderConnectionSane,.Lfe6-IsEReaderConnectionSane
	.align	2, 0
	.type	 EReaderReceive,function
	.thumb_func
EReaderReceive:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r4]
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bhi	.L26	@cond_branch
	bl	HasLinkErrorOccurred
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L26	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
	mov	r0, #0x3
	b	.L51
.L26:
	ldrb	r0, [r4]
	cmp	r0, #0x5
	bls	.LCB304
	b	.L27	@long jump
.LCB304:
	lsl	r0, r0, #0x2
	ldr	r1, .L52
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L53:
	.align	2, 0
.L52:
	.word	.L49
	.align	2, 0
	.align	2, 0
.L49:
	.word	.L28
	.word	.L32
	.word	.L34
	.word	.L38
	.word	.L46
	.word	.L47
.L28:
	bl	IsLinkMaster
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L35	@cond_branch
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L35	@cond_branch
	mov	r0, #0x1
	strb	r0, [r4]
	b	.L27
.L32:
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bls	.L27	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5]
	mov	r0, #0x2
	strb	r0, [r4]
	b	.L27
.L34:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L35	@cond_branch
	mov	r0, #0x42
	bl	PlaySE
	bl	CheckShouldAdvanceLinkState
	mov	r0, #0x0
	strh	r0, [r5]
	b	.L42
.L35:
	ldr	r0, .L54
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L27	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
	mov	r0, #0x1
	b	.L51
.L55:
	.align	2, 0
.L54:
	.word	gMain
.L38:
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bls	.L39	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
	mov	r0, #0x5
	b	.L51
.L39:
	bl	IsLinkConnectionEstablished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L27	@cond_branch
	ldr	r0, .L56
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L42	@cond_branch
	bl	IsLinkPlayerDataExchangeComplete
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
	mov	r0, #0x2
	b	.L51
.L57:
	.align	2, 0
.L56:
	.word	gReceivedRemoteLinkPlayers
.L43:
	mov	r0, #0x4
	strb	r0, [r4]
	b	.L27
.L42:
	mov	r0, #0x3
	strb	r0, [r4]
	b	.L27
.L46:
	mov	r0, #0x0
	bl	SetCloseLinkCallbackAndType
	mov	r0, #0x5
	strb	r0, [r4]
	b	.L27
.L47:
	ldr	r0, .L58
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L27	@cond_branch
	strb	r0, [r4]
	mov	r0, #0x4
	b	.L51
.L59:
	.align	2, 0
.L58:
	.word	gReceivedRemoteLinkPlayers
.L27:
	mov	r0, #0x0
.L51:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 EReaderReceive,.Lfe7-EReaderReceive
	.align	2, 0
	.globl	task_add_00_ereader
	.type	 task_add_00_ereader,function
	.thumb_func
task_add_00_ereader:
	push	{r4, lr}
	ldr	r0, .L61
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L61+0x4
	add	r4, r4, r0
	mov	r0, #0x0
	strb	r0, [r4, #0x8]
	strb	r0, [r4, #0x9]
	strb	r0, [r4, #0xa]
	strb	r0, [r4, #0xb]
	strb	r0, [r4, #0xc]
	strb	r0, [r4, #0xd]
	mov	r1, #0x0
	strh	r0, [r4]
	strh	r0, [r4, #0x2]
	strh	r0, [r4, #0x4]
	strh	r0, [r4, #0x6]
	strb	r1, [r4, #0xe]
	mov	r0, #0x40
	bl	AllocZeroed
	str	r0, [r4, #0x10]
	pop	{r4}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	Task_EReaderComm
	.word	gTasks+0x8
.Lfe8:
	.size	 task_add_00_ereader,.Lfe8-task_add_00_ereader
	.align	2, 0
	.type	 ResetDelayTimer,function
	.thumb_func
ResetDelayTimer:
	mov	r1, #0x0
	strh	r1, [r0]
	bx	lr
.Lfe9:
	.size	 ResetDelayTimer,.Lfe9-ResetDelayTimer
	.align	2, 0
	.type	 AdvanceDelayTimerCheckTimeout,function
	.thumb_func
AdvanceDelayTimerCheckTimeout:
	push	{lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, r1
	bhi	.L65	@cond_branch
	mov	r0, #0x0
	b	.L66
.L65:
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r0, #0x1
.L66:
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 AdvanceDelayTimerCheckTimeout,.Lfe10-AdvanceDelayTimerCheckTimeout
	.align	2, 0
	.type	 Task_EReaderComm,function
	.thumb_func
Task_EReaderComm:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L148
	add	r4, r0, r1
	ldrb	r0, [r4, #0x8]
	cmp	r0, #0x1a
	bls	.LCB600
	b	.L68	@long jump
.LCB600:
	lsl	r0, r0, #0x2
	ldr	r1, .L148+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L149:
	.align	2, 0
.L148:
	.word	gTasks+0x8
	.word	.L139
	.align	2, 0
	.align	2, 0
.L139:
	.word	.L69
	.word	.L71
	.word	.L72
	.word	.L74
	.word	.L77
	.word	.L79
	.word	.L83
	.word	.L91
	.word	.L93
	.word	.L94
	.word	.L96
	.word	.L101
	.word	.L103
	.word	.L104
	.word	.L114
	.word	.L118
	.word	.L119
	.word	.L123
	.word	.L126
	.word	.L128
	.word	.L132
	.word	.L134
	.word	.L136
	.word	.L130
	.word	.L68
	.word	.L68
	.word	.L138
.L69:
	add	r0, r4, #0
	add	r0, r0, #0x9
	ldr	r1, .L150
	bl	MG_PrintTextOnWindow1AndWaitButton
	cmp	r0, #0
	bne	.LCB628
	b	.L68	@long jump
.LCB628:
	mov	r0, #0x1
	strb	r0, [r4, #0x8]
	b	.L68
.L151:
	.align	2, 0
.L150:
	.word	gJPText_ReceiveMysteryGiftWithEReader
.L71:
	bl	ResetTTDataBuffer
	add	r0, r4, #0
	bl	ResetDelayTimer
	mov	r0, #0x2
	strb	r0, [r4, #0x8]
	b	.L68
.L72:
	add	r0, r4, #0
	mov	r1, #0xa
	bl	AdvanceDelayTimerCheckTimeout
	cmp	r0, #0
	bne	.LCB653
	b	.L68	@long jump
.LCB653:
	mov	r0, #0x3
	strb	r0, [r4, #0x8]
	b	.L68
.L74:
	bl	IsEReaderConnectionSane
	cmp	r0, #0
	beq	.LCB662
	b	.L142	@long jump
.LCB662:
	bl	CloseLink
	b	.L141
.L77:
	add	r0, r4, #0
	add	r0, r0, #0x9
	ldr	r1, .L152
	bl	MG_PrintTextOnWindow1AndWaitButton
	cmp	r0, #0
	bne	.LCB676
	b	.L68	@long jump
.LCB676:
	ldr	r0, .L152+0x4
	bl	AddTextPrinterToWindow1
	add	r0, r4, #0
	bl	ResetDelayTimer
	mov	r0, #0x5
	strb	r0, [r4, #0x8]
	b	.L68
.L153:
	.align	2, 0
.L152:
	.word	gJPText_SelectConnectFromEReaderMenu
	.word	gJPText_SelectConnectWithGBA
.L79:
	add	r0, r4, #0
	mov	r1, #0x5a
	bl	AdvanceDelayTimerCheckTimeout
	cmp	r0, #0
	beq	.L80	@cond_branch
	bl	ResetTTDataBuffer
	mov	r0, #0x6
	strb	r0, [r4, #0x8]
	b	.L68
.L80:
	ldr	r0, .L154
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB718
	b	.L68	@long jump
.LCB718:
	add	r0, r4, #0
	bl	ResetDelayTimer
	mov	r0, #0x5
	bl	PlaySE
	b	.L143
.L155:
	.align	2, 0
.L154:
	.word	gMain
.L83:
	ldr	r0, .L156
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L84	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	CloseLink
	add	r0, r4, #0
	bl	ResetDelayTimer
	b	.L143
.L157:
	.align	2, 0
.L156:
	.word	gMain
.L84:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L86	@cond_branch
	add	r0, r4, #0
	bl	ResetDelayTimer
	bl	CloseLink
	mov	r0, #0x7
	strb	r0, [r4, #0x8]
	b	.L68
.L86:
	bl	sub_81436EC
	cmp	r0, #0
	beq	.L88	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	CloseLink
	add	r0, r4, #0
	bl	ResetDelayTimer
	mov	r0, #0x8
	strb	r0, [r4, #0x8]
	b	.L68
.L88:
	add	r0, r4, #0
	mov	r1, #0xa
	bl	AdvanceDelayTimerCheckTimeout
	cmp	r0, #0
	bne	.LCB794
	b	.L68	@long jump
.LCB794:
	bl	CloseLink
	bl	ResetTTDataBuffer
	add	r0, r4, #0
	bl	ResetDelayTimer
	b	.L68
.L91:
	add	r0, r4, #0
	add	r0, r0, #0x9
	ldr	r1, .L158
	bl	MG_PrintTextOnWindow1AndWaitButton
	cmp	r0, #0
	bne	.LCB811
	b	.L68	@long jump
.LCB811:
.L141:
	mov	r0, #0x4
	strb	r0, [r4, #0x8]
	b	.L68
.L159:
	.align	2, 0
.L158:
	.word	gJPText_LinkIsIncorrect
.L93:
	ldr	r0, .L160
	bl	AddTextPrinterToWindow1
	ldr	r0, .L160+0x4
	ldr	r1, .L160+0x8
	ldr	r2, .L160+0xc
	sub	r1, r1, r2
	bl	SendUnknownSerialData_Init
	mov	r0, #0x9
	strb	r0, [r4, #0x8]
	b	.L68
.L161:
	.align	2, 0
.L160:
	.word	gJPText_Connecting
	.word	sMEventSendToEReaderManager
	.word	gMultiBootProgram_EReader_End
	.word	gMultiBootProgram_EReader_Start
.L94:
	ldr	r0, .L162
	bl	SendUnknownSerialData_Run
	strb	r0, [r4, #0xe]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB857
	b	.L68	@long jump
.LCB857:
	mov	r0, #0xa
	strb	r0, [r4, #0x8]
	b	.L68
.L163:
	.align	2, 0
.L162:
	.word	sMEventSendToEReaderManager
.L96:
	ldr	r0, .L164
	bl	SendUnknownSerialData_Teardown
	ldrb	r0, [r4, #0xe]
	cmp	r0, #0x3
	bne	.LCB876
	b	.L121	@long jump
.LCB876:
	cmp	r0, #0x1
	beq	.LCB878
	b	.L144	@long jump
.LCB878:
	add	r0, r4, #0
	bl	ResetDelayTimer
	ldr	r0, .L164+0x4
	bl	AddTextPrinterToWindow1
	mov	r0, #0xb
	strb	r0, [r4, #0x8]
	b	.L68
.L165:
	.align	2, 0
.L164:
	.word	sMEventSendToEReaderManager
	.word	gJPText_PleaseWaitAMoment
.L101:
	mov	r1, #0xd2
	lsl	r1, r1, #0x2
	add	r0, r4, #0
	bl	AdvanceDelayTimerCheckTimeout
	cmp	r0, #0
	bne	.LCB904
	b	.L68	@long jump
.LCB904:
	mov	r0, #0xc
	strb	r0, [r4, #0x8]
	b	.L68
.L103:
	bl	ResetTTDataBuffer
	ldr	r0, .L166
	bl	AddTextPrinterToWindow1
.L142:
	mov	r0, #0xd
	strb	r0, [r4, #0x8]
	b	.L68
.L167:
	.align	2, 0
.L166:
	.word	gJPText_AllowEReaderToLoadCard
.L104:
	add	r0, r4, #0
	add	r0, r0, #0x9
	add	r1, r4, #0
	bl	EReaderReceive
	cmp	r0, #0x5
	bls	.LCB934
	b	.L68	@long jump
.LCB934:
	lsl	r0, r0, #0x2
	ldr	r1, .L168
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L169:
	.align	2, 0
.L168:
	.word	.L112
	.align	2, 0
	.align	2, 0
.L112:
	.word	.L68
	.word	.L108
	.word	.L107
	.word	.L147
	.word	.L147
	.word	.L109
.L107:
	ldr	r0, .L170
	bl	AddTextPrinterToWindow1
	mov	r0, #0xe
	strb	r0, [r4, #0x8]
	b	.L68
.L171:
	.align	2, 0
.L170:
	.word	gJPText_Connecting
.L108:
	mov	r0, #0x5
	bl	PlaySE
	bl	CloseLink
.L143:
	mov	r0, #0x17
	strb	r0, [r4, #0x8]
	b	.L68
.L109:
	bl	CloseLink
	mov	r0, #0x15
	strb	r0, [r4, #0x8]
	b	.L68
.L114:
	bl	HasLinkErrorOccurred
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L115	@cond_branch
.L147:
	bl	CloseLink
	b	.L121
.L115:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB999
	b	.L68	@long jump
.LCB999:
	bl	ResetBlockReceivedFlags
	mov	r0, #0xf
	strb	r0, [r4, #0x8]
	b	.L68
.L118:
	ldr	r0, .L172
	bl	ValidateTrainerTowerData
	strb	r0, [r4, #0xe]
	ldrb	r0, [r4, #0xe]
	bl	SetCloseLinkCallbackAndType
	mov	r0, #0x10
	strb	r0, [r4, #0x8]
	b	.L68
.L173:
	.align	2, 0
.L172:
	.word	gDecompressionBuffer
.L119:
	ldr	r0, .L174
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L68	@cond_branch
	ldrb	r0, [r4, #0xe]
	cmp	r0, #0x1
	bne	.L121	@cond_branch
	mov	r0, #0x11
	strb	r0, [r4, #0x8]
	b	.L68
.L175:
	.align	2, 0
.L174:
	.word	gReceivedRemoteLinkPlayers
.L121:
	mov	r0, #0x14
	strb	r0, [r4, #0x8]
	b	.L68
.L123:
	ldr	r0, .L176
	bl	CEReaderTool_SaveTrainerTower
	cmp	r0, #0
	beq	.L124	@cond_branch
	ldr	r0, .L176+0x4
	bl	AddTextPrinterToWindow1
	add	r0, r4, #0
	bl	ResetDelayTimer
	mov	r0, #0x12
	strb	r0, [r4, #0x8]
	b	.L68
.L177:
	.align	2, 0
.L176:
	.word	gDecompressionBuffer
	.word	gJPText_ConnectionComplete
.L124:
	mov	r0, #0x16
	strb	r0, [r4, #0x8]
	b	.L68
.L126:
	add	r0, r4, #0
	mov	r1, #0x78
	bl	AdvanceDelayTimerCheckTimeout
	cmp	r0, #0
	beq	.L68	@cond_branch
	ldr	r0, .L178
	bl	AddTextPrinterToWindow1
	mov	r0, #0x81
	lsl	r0, r0, #0x1
	bl	PlayFanfare
	mov	r0, #0x13
	strb	r0, [r4, #0x8]
	b	.L68
.L179:
	.align	2, 0
.L178:
	.word	gJPText_NewTrainerHasComeToSevii
.L128:
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L68	@cond_branch
	ldr	r0, .L180
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	b	.L145
.L181:
	.align	2, 0
.L180:
	.word	gMain
.L130:
	add	r0, r4, #0
	add	r0, r0, #0x9
	ldr	r1, .L182
	bl	MG_PrintTextOnWindow1AndWaitButton
.L145:
	cmp	r0, #0
	beq	.L68	@cond_branch
	mov	r0, #0x1a
	strb	r0, [r4, #0x8]
	b	.L68
.L183:
	.align	2, 0
.L182:
	.word	gJPText_CardReadingHasBeenHalted
.L132:
	add	r0, r4, #0
	add	r0, r0, #0x9
	ldr	r1, .L184
	b	.L146
.L185:
	.align	2, 0
.L184:
	.word	gJPText_ConnectionErrorCheckLink
.L134:
	add	r0, r4, #0
	add	r0, r0, #0x9
	ldr	r1, .L186
	b	.L146
.L187:
	.align	2, 0
.L186:
	.word	gJPText_ConnectionErrorTryAgain
.L136:
	add	r0, r4, #0
	add	r0, r0, #0x9
	ldr	r1, .L188
.L146:
	bl	MG_PrintTextOnWindow1AndWaitButton
	cmp	r0, #0
	beq	.L68	@cond_branch
.L144:
	mov	r0, #0x0
	strb	r0, [r4, #0x8]
	b	.L68
.L189:
	.align	2, 0
.L188:
	.word	gJPText_WriteErrorUnableToSaveData
.L138:
	bl	HelpSystem_Enable
	ldr	r0, [r4, #0x10]
	bl	Free
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r0, .L190
	bl	SetMainCallback2
.L68:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L191:
	.align	2, 0
.L190:
	.word	MainCB_FreeAllBuffersAndReturnToInitTitleScreen
.Lfe11:
	.size	 Task_EReaderComm,.Lfe11-Task_EReaderComm
	.align	2, 0
	.globl	InitMEventData
	.type	 InitMEventData,function
	.thumb_func
InitMEventData:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L193
	ldr	r1, [r0]
	ldr	r0, .L193+0x4
	add	r1, r1, r0
	ldr	r2, .L193+0x8
	mov	r0, sp
	bl	CpuSet
	bl	BlankMENewsJisan
	bl	EC_ResetMEventProfileMaybe
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L194:
	.align	2, 0
.L193:
	.word	gSaveBlock1Ptr
	.word	0x3120
	.word	0x50000db
.Lfe12:
	.size	 InitMEventData,.Lfe12-InitMEventData
	.align	2, 0
	.globl	GetSavedWonderNews
	.type	 GetSavedWonderNews,function
	.thumb_func
GetSavedWonderNews:
	ldr	r0, .L196
	ldr	r0, [r0]
	ldr	r1, .L196+0x4
	add	r0, r0, r1
	bx	lr
.L197:
	.align	2, 0
.L196:
	.word	gSaveBlock1Ptr
	.word	0x3124
.Lfe13:
	.size	 GetSavedWonderNews,.Lfe13-GetSavedWonderNews
	.align	2, 0
	.globl	GetSavedWonderCard
	.type	 GetSavedWonderCard,function
	.thumb_func
GetSavedWonderCard:
	ldr	r0, .L199
	ldr	r0, [r0]
	ldr	r1, .L199+0x4
	add	r0, r0, r1
	bx	lr
.L200:
	.align	2, 0
.L199:
	.word	gSaveBlock1Ptr
	.word	0x32e4
.Lfe14:
	.size	 GetSavedWonderCard,.Lfe14-GetSavedWonderCard
	.align	2, 0
	.globl	sav1_get_mevent_buffer_2
	.type	 sav1_get_mevent_buffer_2,function
	.thumb_func
sav1_get_mevent_buffer_2:
	ldr	r0, .L202
	ldr	r0, [r0]
	ldr	r1, .L202+0x4
	add	r0, r0, r1
	bx	lr
.L203:
	.align	2, 0
.L202:
	.word	gSaveBlock1Ptr
	.word	0x3434
.Lfe15:
	.size	 sav1_get_mevent_buffer_2,.Lfe15-sav1_get_mevent_buffer_2
	.align	2, 0
	.globl	GetMENewsJisanStructPtr
	.type	 GetMENewsJisanStructPtr,function
	.thumb_func
GetMENewsJisanStructPtr:
	ldr	r0, .L205
	ldr	r0, [r0]
	ldr	r1, .L205+0x4
	add	r0, r0, r1
	bx	lr
.L206:
	.align	2, 0
.L205:
	.word	gSaveBlock1Ptr
	.word	0x3460
.Lfe16:
	.size	 GetMENewsJisanStructPtr,.Lfe16-GetMENewsJisanStructPtr
	.align	2, 0
	.globl	GetMEventProfileECWordsMaybe
	.type	 GetMEventProfileECWordsMaybe,function
	.thumb_func
GetMEventProfileECWordsMaybe:
	ldr	r0, .L208
	ldr	r0, [r0]
	ldr	r1, .L208+0x4
	add	r0, r0, r1
	bx	lr
.L209:
	.align	2, 0
.L208:
	.word	gSaveBlock1Ptr
	.word	0x3458
.Lfe17:
	.size	 GetMEventProfileECWordsMaybe,.Lfe17-GetMEventProfileECWordsMaybe
	.align	2, 0
	.globl	DestroyWonderNews
	.type	 DestroyWonderNews,function
	.thumb_func
DestroyWonderNews:
	push	{lr}
	bl	BlankWonderNews
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 DestroyWonderNews,.Lfe18-DestroyWonderNews
	.align	2, 0
	.globl	OverwriteSavedWonderNewsWithReceivedNews
	.type	 OverwriteSavedWonderNewsWithReceivedNews,function
	.thumb_func
OverwriteSavedWonderNewsWithReceivedNews:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	bl	IsReceivedWonderNewsHeaderValid
	cmp	r0, #0
	beq	.L212	@cond_branch
	bl	BlankWonderNews
	ldr	r4, .L214
	ldr	r0, [r4]
	ldr	r5, .L214+0x4
	add	r0, r0, r5
	mov	r6, #0xde
	lsl	r6, r6, #0x1
	add	r1, r7, #0
	add	r2, r6, #0
	bl	memcpy
	ldr	r0, [r4]
	add	r0, r0, r5
	add	r1, r6, #0
	bl	CalcCRC16WithTable
	ldr	r1, [r4]
	ldr	r2, .L214+0x8
	add	r1, r1, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [r1]
	mov	r0, #0x1
	b	.L213
.L215:
	.align	2, 0
.L214:
	.word	gSaveBlock1Ptr
	.word	0x3124
	.word	0x3120
.L212:
	mov	r0, #0x0
.L213:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 OverwriteSavedWonderNewsWithReceivedNews,.Lfe19-OverwriteSavedWonderNewsWithReceivedNews
	.align	2, 0
	.globl	ValidateReceivedWonderNews
	.type	 ValidateReceivedWonderNews,function
	.thumb_func
ValidateReceivedWonderNews:
	push	{r4, lr}
	ldr	r4, .L220
	ldr	r0, [r4]
	ldr	r1, .L220+0x4
	add	r0, r0, r1
	mov	r1, #0xde
	lsl	r1, r1, #0x1
	bl	CalcCRC16WithTable
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, [r4]
	ldr	r2, .L220+0x8
	add	r1, r4, r2
	ldr	r1, [r1]
	cmp	r0, r1
	bne	.L218	@cond_branch
	ldr	r1, .L220+0x4
	add	r0, r4, r1
	bl	IsReceivedWonderNewsHeaderValid
	cmp	r0, #0
	beq	.L218	@cond_branch
	mov	r0, #0x1
	b	.L219
.L221:
	.align	2, 0
.L220:
	.word	gSaveBlock1Ptr
	.word	0x3124
	.word	0x3120
.L218:
	mov	r0, #0x0
.L219:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 ValidateReceivedWonderNews,.Lfe20-ValidateReceivedWonderNews
	.align	2, 0
	.type	 IsReceivedWonderNewsHeaderValid,function
	.thumb_func
IsReceivedWonderNewsHeaderValid:
	push	{lr}
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L223	@cond_branch
	mov	r0, #0x1
	b	.L224
.L223:
	mov	r0, #0x0
.L224:
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 IsReceivedWonderNewsHeaderValid,.Lfe21-IsReceivedWonderNewsHeaderValid
	.align	2, 0
	.globl	WonderNews_Test_Unk_02
	.type	 WonderNews_Test_Unk_02,function
	.thumb_func
WonderNews_Test_Unk_02:
	push	{lr}
	ldr	r0, .L228
	ldr	r0, [r0]
	ldr	r1, .L228+0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L226	@cond_branch
	mov	r0, #0x1
	b	.L227
.L229:
	.align	2, 0
.L228:
	.word	gSaveBlock1Ptr
	.word	0x3124
.L226:
	mov	r0, #0x0
.L227:
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 WonderNews_Test_Unk_02,.Lfe22-WonderNews_Test_Unk_02
	.align	2, 0
	.type	 BlankWonderNews,function
	.thumb_func
BlankWonderNews:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, #0x0
	str	r4, [sp]
	bl	GetSavedWonderNews
	add	r1, r0, #0
	ldr	r2, .L231
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L231+0x4
	ldr	r0, [r0]
	ldr	r1, .L231+0x8
	add	r0, r0, r1
	str	r4, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L232:
	.align	2, 0
.L231:
	.word	0x500006f
	.word	gSaveBlock1Ptr
	.word	0x3120
.Lfe23:
	.size	 BlankWonderNews,.Lfe23-BlankWonderNews
	.align	2, 0
	.type	 BlankMENewsJisan,function
	.thumb_func
BlankMENewsJisan:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	bl	GetMENewsJisanStructPtr
	add	r1, r0, #0
	ldr	r2, .L234
	mov	r0, sp
	bl	CpuSet
	bl	MENewsJisanReset
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L235:
	.align	2, 0
.L234:
	.word	0x5000001
.Lfe24:
	.size	 BlankMENewsJisan,.Lfe24-BlankMENewsJisan
	.align	2, 0
	.globl	MEvent_HaveAlreadyReceivedWonderNews
	.type	 MEvent_HaveAlreadyReceivedWonderNews,function
	.thumb_func
MEvent_HaveAlreadyReceivedWonderNews:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L247
	ldr	r0, [r0]
	ldr	r1, .L247+0x4
	add	r4, r0, r1
	bl	ValidateReceivedWonderNews
	cmp	r0, #0
	bne	.L237	@cond_branch
.L246:
	mov	r0, #0x0
	b	.L244
.L248:
	.align	2, 0
.L247:
	.word	gSaveBlock1Ptr
	.word	0x3124
.L237:
	mov	r2, #0x0
	ldr	r3, .L249
.L241:
	add	r0, r4, r2
	add	r1, r5, r2
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L246	@cond_branch
	add	r2, r2, #0x1
	cmp	r2, r3
	bls	.L241	@cond_branch
	mov	r0, #0x1
.L244:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L250:
	.align	2, 0
.L249:
	.word	0x1bb
.Lfe25:
	.size	 MEvent_HaveAlreadyReceivedWonderNews,.Lfe25-MEvent_HaveAlreadyReceivedWonderNews
	.align	2, 0
	.globl	DestroyWonderCard
	.type	 DestroyWonderCard,function
	.thumb_func
DestroyWonderCard:
	push	{lr}
	bl	BlankSavedWonderCard
	bl	BlankMEventBuffer2
	bl	BlankBuffer344
	bl	ClearRamScript
	bl	ResetMysteryEventFlags
	bl	ResetMysteryEventVars
	ldr	r0, .L252
	ldr	r0, [r0]
	mov	r1, #0x94
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	bl	ClearEReaderTrainer
	pop	{r0}
	bx	r0
.L253:
	.align	2, 0
.L252:
	.word	gSaveBlock2Ptr
.Lfe26:
	.size	 DestroyWonderCard,.Lfe26-DestroyWonderCard
	.align	2, 0
	.globl	OverwriteSavedWonderCardWithReceivedCard
	.type	 OverwriteSavedWonderCardWithReceivedCard,function
	.thumb_func
OverwriteSavedWonderCardWithReceivedCard:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	bl	IsReceivedWonderCardHeaderValid
	cmp	r0, #0
	beq	.L255	@cond_branch
	bl	DestroyWonderCard
	ldr	r4, .L257
	ldr	r0, [r4]
	ldr	r5, .L257+0x4
	add	r0, r0, r5
	mov	r6, #0xa6
	lsl	r6, r6, #0x1
	add	r1, r7, #0
	add	r2, r6, #0
	bl	memcpy
	ldr	r0, [r4]
	add	r0, r0, r5
	add	r1, r6, #0
	bl	CalcCRC16WithTable
	ldr	r1, [r4]
	ldr	r3, .L257+0x8
	add	r2, r1, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [r2]
	ldr	r0, .L257+0xc
	add	r2, r1, r0
	add	r1, r1, r5
	ldrh	r0, [r1, #0x2]
	strh	r0, [r2, #0x6]
	mov	r0, #0x1
	b	.L256
.L258:
	.align	2, 0
.L257:
	.word	gSaveBlock1Ptr
	.word	0x32e4
	.word	0x32e0
	.word	0x3434
.L255:
	mov	r0, #0x0
.L256:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 OverwriteSavedWonderCardWithReceivedCard,.Lfe27-OverwriteSavedWonderCardWithReceivedCard
	.align	2, 0
	.globl	ValidateReceivedWonderCard
	.type	 ValidateReceivedWonderCard,function
	.thumb_func
ValidateReceivedWonderCard:
	push	{r4, r5, lr}
	ldr	r5, .L264
	ldr	r0, [r5]
	ldr	r1, .L264+0x4
	add	r4, r0, r1
	add	r1, r1, #0x4
	add	r0, r0, r1
	mov	r1, #0xa6
	lsl	r1, r1, #0x1
	bl	CalcCRC16WithTable
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [r4]
	cmp	r1, r0
	bne	.L262	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L264+0x8
	add	r0, r0, r1
	bl	IsReceivedWonderCardHeaderValid
	cmp	r0, #0
	beq	.L262	@cond_branch
	bl	ValidateRamScript
	cmp	r0, #0
	beq	.L262	@cond_branch
	mov	r0, #0x1
	b	.L263
.L265:
	.align	2, 0
.L264:
	.word	gSaveBlock1Ptr
	.word	0x32e0
	.word	0x32e4
.L262:
	mov	r0, #0x0
.L263:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 ValidateReceivedWonderCard,.Lfe28-ValidateReceivedWonderCard
	.align	2, 0
	.type	 IsReceivedWonderCardHeaderValid,function
	.thumb_func
IsReceivedWonderCardHeaderValid:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L271	@cond_branch
	ldrb	r1, [r2, #0x8]
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x2
	bhi	.L271	@cond_branch
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L269	@cond_branch
	cmp	r0, #0x40
	beq	.L269	@cond_branch
	cmp	r0, #0x80
	bne	.L271	@cond_branch
.L269:
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x1c
	cmp	r0, #0x7
	bhi	.L271	@cond_branch
	ldrb	r0, [r2, #0x9]
	cmp	r0, #0x7
	bhi	.L271	@cond_branch
	mov	r0, #0x1
	b	.L272
.L271:
	mov	r0, #0x0
.L272:
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 IsReceivedWonderCardHeaderValid,.Lfe29-IsReceivedWonderCardHeaderValid
	.align	2, 0
	.globl	WonderCard_Test_Unk_08_6
	.type	 WonderCard_Test_Unk_08_6,function
	.thumb_func
WonderCard_Test_Unk_08_6:
	push	{lr}
	ldr	r0, .L276
	ldr	r0, [r0]
	ldr	r1, .L276+0x4
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L274	@cond_branch
	mov	r0, #0x1
	b	.L275
.L277:
	.align	2, 0
.L276:
	.word	gSaveBlock1Ptr
	.word	0x32e4
.L274:
	mov	r0, #0x0
.L275:
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 WonderCard_Test_Unk_08_6,.Lfe30-WonderCard_Test_Unk_08_6
	.align	2, 0
	.type	 BlankSavedWonderCard,function
	.thumb_func
BlankSavedWonderCard:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r5, #0x0
	str	r5, [sp]
	ldr	r4, .L279
	ldr	r1, [r4]
	ldr	r0, .L279+0x4
	add	r1, r1, r0
	ldr	r2, .L279+0x8
	mov	r0, sp
	bl	CpuSet
	ldr	r0, [r4]
	ldr	r1, .L279+0xc
	add	r0, r0, r1
	str	r5, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	gSaveBlock1Ptr
	.word	0x32e4
	.word	0x5000053
	.word	0x32e0
.Lfe31:
	.size	 BlankSavedWonderCard,.Lfe31-BlankSavedWonderCard
	.align	2, 0
	.type	 BlankMEventBuffer2,function
	.thumb_func
BlankMEventBuffer2:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, #0x0
	str	r4, [sp]
	bl	sav1_get_mevent_buffer_2
	add	r1, r0, #0
	ldr	r2, .L282
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L282+0x4
	ldr	r0, [r0]
	ldr	r1, .L282+0x8
	add	r0, r0, r1
	str	r4, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L283:
	.align	2, 0
.L282:
	.word	0x5000009
	.word	gSaveBlock1Ptr
	.word	0x3430
.Lfe32:
	.size	 BlankMEventBuffer2,.Lfe32-BlankMEventBuffer2
	.align	2, 0
	.globl	GetWonderCardFlagId
	.type	 GetWonderCardFlagId,function
	.thumb_func
GetWonderCardFlagId:
	push	{lr}
	bl	ValidateReceivedWonderCard
	cmp	r0, #0
	bne	.L285	@cond_branch
	mov	r0, #0x0
	b	.L286
.L285:
	ldr	r0, .L287
	ldr	r0, [r0]
	ldr	r1, .L287+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
.L286:
	pop	{r1}
	bx	r1
.L288:
	.align	2, 0
.L287:
	.word	gSaveBlock1Ptr
	.word	0x32e4
.Lfe33:
	.size	 GetWonderCardFlagId,.Lfe33-GetWonderCardFlagId
	.align	2, 0
	.globl	MEvent_WonderCardResetUnk08_6
	.type	 MEvent_WonderCardResetUnk08_6,function
	.thumb_func
MEvent_WonderCardResetUnk08_6:
	push	{lr}
	add	r2, r0, #0
	ldrb	r1, [r2, #0x8]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L290	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
.L290:
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 MEvent_WonderCardResetUnk08_6,.Lfe34-MEvent_WonderCardResetUnk08_6
	.align	2, 0
	.type	 IsCardIdInValidRange,function
	.thumb_func
IsCardIdInValidRange:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r1, .L294
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	cmp	r0, #0x13
	bls	.L292	@cond_branch
	mov	r0, #0x0
	b	.L293
.L295:
	.align	2, 0
.L294:
	.word	-0x3e80000
.L292:
	mov	r0, #0x1
.L293:
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 IsCardIdInValidRange,.Lfe35-IsCardIdInValidRange
	.align	2, 0
	.globl	CheckReceivedGiftFromWonderCard
	.type	 CheckReceivedGiftFromWonderCard,function
	.thumb_func
CheckReceivedGiftFromWonderCard:
	push	{r4, lr}
	bl	GetWonderCardFlagId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	bl	IsCardIdInValidRange
	cmp	r0, #0
	beq	.L298	@cond_branch
	ldr	r1, .L300
	ldr	r2, .L300+0x4
	add	r0, r4, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L298	@cond_branch
	mov	r0, #0x1
	b	.L299
.L301:
	.align	2, 0
.L300:
	.word	sGiftItemFlagIds
	.word	-0x3e8
.L298:
	mov	r0, #0x0
.L299:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 CheckReceivedGiftFromWonderCard,.Lfe36-CheckReceivedGiftFromWonderCard
	.align	2, 0
	.type	 CountReceivedDistributionMons,function
	.thumb_func
CountReceivedDistributionMons:
	push	{lr}
	mov	r3, #0x0
	cmp	r3, r1
	bge	.L304	@cond_branch
	add	r2, r0, #0
	add	r2, r2, #0x8
.L306:
	ldrh	r0, [r2, #0xe]
	cmp	r0, #0
	beq	.L305	@cond_branch
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L305	@cond_branch
	add	r3, r3, #0x1
.L305:
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L306	@cond_branch
.L304:
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 CountReceivedDistributionMons,.Lfe37-CountReceivedDistributionMons
	.align	2, 0
	.type	 HasPlayerAlreadyReceivedDistributedMon,function
	.thumb_func
HasPlayerAlreadyReceivedDistributedMon:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r1, #0x0
	cmp	r1, r2
	bge	.L311	@cond_branch
	ldrh	r6, [r4, #0x2]
	mov	r0, #0x16
	add	r0, r0, r5
	mov	ip, r0
.L313:
	lsl	r3, r1, #0x1
	mov	r7, ip
	ldrh	r0, [r7]
	cmp	r0, r6
	beq	.L318	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r3, [r4]
	cmp	r0, r3
	bne	.L312	@cond_branch
.L318:
	mov	r0, #0x1
	b	.L317
.L312:
	mov	r7, #0x2
	add	ip, ip, r7
	add	r1, r1, #0x1
	cmp	r1, r2
	blt	.L313	@cond_branch
.L311:
	mov	r0, #0x0
.L317:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 HasPlayerAlreadyReceivedDistributedMon,.Lfe38-HasPlayerAlreadyReceivedDistributedMon
	.align	2, 0
	.type	 IsWonderCardSpeciesValid,function
	.thumb_func
IsWonderCardSpeciesValid:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L322	@cond_branch
	ldrh	r1, [r1]
	cmp	r1, #0
	beq	.L322	@cond_branch
	ldr	r0, .L324
	cmp	r1, r0
	bhi	.L322	@cond_branch
	mov	r0, #0x1
	b	.L323
.L325:
	.align	2, 0
.L324:
	.word	0x19b
.L322:
	mov	r0, #0x0
.L323:
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 IsWonderCardSpeciesValid,.Lfe39-IsWonderCardSpeciesValid
	.align	2, 0
	.type	 ValidateCardAndCountMonsReceived,function
	.thumb_func
ValidateCardAndCountMonsReceived:
	push	{lr}
	bl	ValidateReceivedWonderCard
	cmp	r0, #0
	beq	.L328	@cond_branch
	ldr	r0, .L330
	ldr	r3, [r0]
	ldr	r0, .L330+0x4
	add	r2, r3, r0
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L328	@cond_branch
	ldr	r1, .L330+0x8
	add	r0, r3, r1
	ldrb	r1, [r2, #0x9]
	bl	CountReceivedDistributionMons
	b	.L329
.L331:
	.align	2, 0
.L330:
	.word	gSaveBlock1Ptr
	.word	0x32e4
	.word	0x3434
.L328:
	mov	r0, #0x0
.L329:
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 ValidateCardAndCountMonsReceived,.Lfe40-ValidateCardAndCountMonsReceived
	.align	2, 0
	.globl	MEvent_ReceiveDistributionMon
	.type	 MEvent_ReceiveDistributionMon,function
	.thumb_func
MEvent_ReceiveDistributionMon:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L343
	ldr	r0, [r6]
	ldr	r1, .L343+0x4
	add	r0, r0, r1
	ldrb	r4, [r0, #0x9]
	add	r0, r5, #0
	bl	IsWonderCardSpeciesValid
	cmp	r0, #0
	beq	.L336	@cond_branch
	ldr	r0, [r6]
	ldr	r1, .L343+0x8
	add	r0, r0, r1
	add	r1, r5, #0
	add	r2, r4, #0
	bl	HasPlayerAlreadyReceivedDistributedMon
	cmp	r0, #0
	beq	.L334	@cond_branch
	b	.L336
.L344:
	.align	2, 0
.L343:
	.word	gSaveBlock1Ptr
	.word	0x32e4
	.word	0x3434
.L342:
	ldrh	r0, [r5, #0x2]
	strh	r0, [r1]
	ldrh	r0, [r5]
	strh	r0, [r2]
	mov	r0, #0x1
	b	.L341
.L334:
	mov	r3, #0x0
	cmp	r3, r4
	bge	.L336	@cond_branch
	ldr	r0, [r6]
	ldr	r6, .L345
	add	r2, r0, r6
	add	r6, r6, #0xe
	add	r1, r0, r6
.L338:
	ldrh	r0, [r2, #0xe]
	cmp	r0, #0
	bne	.L337	@cond_branch
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L342	@cond_branch
.L337:
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, r4
	blt	.L338	@cond_branch
.L336:
	mov	r0, #0x0
.L341:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L346:
	.align	2, 0
.L345:
	.word	0x343c
.Lfe41:
	.size	 MEvent_ReceiveDistributionMon,.Lfe41-MEvent_ReceiveDistributionMon
	.align	2, 0
	.globl	BuildMEventClientHeader
	.type	 BuildMEventClientHeader,function
	.thumb_func
BuildMEventClientHeader:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r2, .L360
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuSet
	ldr	r0, .L360+0x4
	str	r0, [r4]
	mov	r0, #0x1
	strh	r0, [r4, #0x4]
	str	r0, [r4, #0x8]
	strh	r0, [r4, #0xc]
	str	r0, [r4, #0x10]
	bl	ValidateReceivedWonderCard
	cmp	r0, #0
	beq	.L348	@cond_branch
	bl	GetSavedWonderCard
	ldrh	r0, [r0]
	strh	r0, [r4, #0x14]
	bl	sav1_get_mevent_buffer_2
	add	r1, r4, #0
	add	r1, r1, #0x20
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	bl	GetSavedWonderCard
	ldrb	r1, [r0, #0x9]
	add	r0, r4, #0
	add	r0, r0, #0x44
	strb	r1, [r0]
	b	.L349
.L361:
	.align	2, 0
.L360:
	.word	0x5000019
	.word	0x101
.L348:
	strh	r0, [r4, #0x14]
.L349:
	add	r5, r4, #0
	add	r5, r5, #0x4c
	ldr	r0, .L362
	mov	r8, r0
	add	r6, r4, #0
	add	r6, r6, #0x45
	add	r7, r4, #0
	add	r7, r7, #0x50
	mov	r1, #0x5c
	add	r1, r1, r4
	mov	r9, r1
	mov	r2, #0x60
	add	r2, r2, r4
	mov	sl, r2
	ldr	r0, .L362+0x4
	ldr	r0, [r0]
	ldr	r3, .L362+0x8
	add	r2, r0, r3
	add	r1, r4, #0
	add	r1, r1, #0x16
	mov	r3, #0x3
.L353:
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L353	@cond_branch
	mov	r0, r8
	ldr	r1, [r0]
	add	r1, r1, #0xa
	add	r0, r5, #0
	bl	CopyTrainerId
	mov	r2, r8
	ldr	r1, [r2]
	add	r0, r6, #0
	bl	StringCopy
	ldr	r0, .L362+0x4
	ldr	r0, [r0]
	ldr	r3, .L362+0xc
	add	r2, r0, r3
	add	r1, r7, #0
	mov	r3, #0x5
.L358:
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L358	@cond_branch
	ldr	r1, .L362+0x10
	mov	r0, r9
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L362+0x14
	ldrb	r0, [r0]
	mov	r5, sl
	strb	r0, [r5]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	gSaveBlock2Ptr
	.word	gSaveBlock1Ptr
	.word	0x3458
	.word	0x2ca0
	.word	RomHeaderGameCode
	.word	RomHeaderSoftwareVersion
.Lfe42:
	.size	 BuildMEventClientHeader,.Lfe42-BuildMEventClientHeader
	.align	2, 0
	.globl	ValidateMEventClientHeader
	.type	 ValidateMEventClientHeader,function
	.thumb_func
ValidateMEventClientHeader:
	push	{lr}
	add	r2, r0, #0
	ldr	r1, [r2]
	ldr	r0, .L371
	cmp	r1, r0
	bne	.L369	@cond_branch
	ldrh	r1, [r2, #0x4]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L369	@cond_branch
	ldr	r0, [r2, #0x8]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L369	@cond_branch
	ldrh	r1, [r2, #0xc]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L369	@cond_branch
	ldr	r0, [r2, #0x10]
	mov	r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L369	@cond_branch
	mov	r0, #0x1
	b	.L370
.L372:
	.align	2, 0
.L371:
	.word	0x101
.L369:
	mov	r0, #0x0
.L370:
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 ValidateMEventClientHeader,.Lfe43-ValidateMEventClientHeader
	.align	2, 0
	.globl	sub_8144418
	.type	 sub_8144418,function
	.thumb_func
sub_8144418:
	push	{lr}
	ldrh	r1, [r1, #0x14]
	cmp	r1, #0
	bne	.L374	@cond_branch
	mov	r0, #0x0
	b	.L376
.L374:
	ldrh	r0, [r0]
	cmp	r0, r1
	beq	.L375	@cond_branch
	mov	r0, #0x2
	b	.L376
.L375:
	mov	r0, #0x1
.L376:
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 sub_8144418,.Lfe44-sub_8144418
	.align	2, 0
	.globl	MEvent_CanPlayerReceiveDistributionMon
	.type	 MEvent_CanPlayerReceiveDistributionMon,function
	.thumb_func
MEvent_CanPlayerReceiveDistributionMon:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r4, #0
	add	r5, r5, #0x20
	add	r4, r4, #0x44
	ldrb	r1, [r4]
	add	r0, r5, #0
	bl	CountReceivedDistributionMons
	ldrb	r2, [r4]
	sub	r4, r2, r0
	cmp	r4, #0
	bne	.L378	@cond_branch
	mov	r0, #0x1
	b	.L381
.L378:
	add	r0, r5, #0
	add	r1, r6, #0
	bl	HasPlayerAlreadyReceivedDistributedMon
	cmp	r0, #0
	beq	.L379	@cond_branch
	mov	r0, #0x3
	b	.L381
.L379:
	cmp	r4, #0x1
	beq	.L380	@cond_branch
	mov	r0, #0x2
	b	.L381
.L380:
	mov	r0, #0x4
.L381:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 MEvent_CanPlayerReceiveDistributionMon,.Lfe45-MEvent_CanPlayerReceiveDistributionMon
	.align	2, 0
	.globl	sub_8144474
	.type	 sub_8144474,function
	.thumb_func
sub_8144474:
	push	{r4, lr}
	mov	r3, #0x0
	add	r2, r0, #0
	add	r2, r2, #0x16
.L386:
	ldrh	r0, [r2]
	ldrh	r4, [r1]
	cmp	r0, r4
	beq	.L385	@cond_branch
	mov	r0, #0x0
	b	.L389
.L385:
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L386	@cond_branch
	mov	r0, #0x1
.L389:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 sub_8144474,.Lfe46-sub_8144474
	.align	2, 0
	.type	 GetNumReceivedDistributionMons,function
	.thumb_func
GetNumReceivedDistributionMons:
	push	{lr}
	add	r2, r0, #0
	add	r2, r2, #0x20
	add	r0, r0, #0x44
	ldrb	r1, [r0]
	add	r0, r2, #0
	bl	CountReceivedDistributionMons
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetNumReceivedDistributionMons,.Lfe47-GetNumReceivedDistributionMons
	.section .rodata
	.align	2, 0
.LC64:
	.ascii	"C:/WORK/POKeFRLG/src/pm_lgfr_ose/source/mevent.c\000"
	.align	2, 0
.LC66:
	.ascii	"0\000"
.text
	.align	2, 0
	.globl	sub_81444B0
	.type	 sub_81444B0,function
	.thumb_func
sub_81444B0:
	push	{lr}
	add	r2, r0, #0
	cmp	r1, #0x4
	bhi	.L398	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L401
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L402:
	.align	2, 0
.L401:
	.word	.L399
	.align	2, 0
	.align	2, 0
.L399:
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
.L393:
	ldrh	r0, [r2, #0x20]
	b	.L400
.L394:
	ldrh	r0, [r2, #0x22]
	b	.L400
.L395:
	ldrh	r0, [r2, #0x24]
	b	.L400
.L396:
	add	r0, r2, #0
	bl	GetNumReceivedDistributionMons
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L400
.L397:
	add	r0, r2, #0
	add	r0, r0, #0x44
	ldrb	r0, [r0]
	b	.L400
.L398:
	ldr	r0, .L403
	ldr	r1, .L403+0x4
	ldr	r2, .L403+0x8
	mov	r3, #0x1
	bl	AGBAssert
	mov	r0, #0x0
.L400:
	pop	{r1}
	bx	r1
.L404:
	.align	2, 0
.L403:
	.word	.LC64
	.word	0x339
	.word	.LC66
.Lfe48:
	.size	 sub_81444B0,.Lfe48-sub_81444B0
	.align	2, 0
	.type	 IncrementBattleCardCount,function
	.thumb_func
IncrementBattleCardCount:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, .L419
	ldr	r0, [r2]
	ldr	r1, .L419+0x4
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x3
	and	r0, r0, r1
	add	r3, r2, #0
	cmp	r0, #0x2
	bne	.L406	@cond_branch
	mov	r2, #0x0
	cmp	r4, #0x4
	bhi	.L407	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L419+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L420:
	.align	2, 0
.L419:
	.word	gSaveBlock1Ptr
	.word	0x32e4
	.word	.L413
	.align	2, 0
	.align	2, 0
.L413:
	.word	.L408
	.word	.L409
	.word	.L410
	.word	.L407
	.word	.L407
.L408:
	ldr	r0, [r3]
	ldr	r1, .L421
	b	.L418
.L422:
	.align	2, 0
.L421:
	.word	0x3434
.L409:
	ldr	r0, [r3]
	ldr	r1, .L423
	b	.L418
.L424:
	.align	2, 0
.L423:
	.word	0x3436
.L410:
	ldr	r0, [r3]
	ldr	r1, .L425
.L418:
	add	r2, r0, r1
.L407:
	cmp	r2, #0
	bne	.L415	@cond_branch
	ldr	r0, .L425+0x4
	mov	r1, #0xd9
	lsl	r1, r1, #0x2
	ldr	r2, .L425+0x8
	mov	r3, #0x1
	bl	AGBAssert
	b	.L406
.L426:
	.align	2, 0
.L425:
	.word	0x3438
	.word	.LC64
	.word	.LC66
.L415:
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L427
	cmp	r0, r1
	bls	.L406	@cond_branch
	strh	r1, [r2]
.L406:
	pop	{r4}
	pop	{r0}
	bx	r0
.L428:
	.align	2, 0
.L427:
	.word	0x3e7
.Lfe49:
	.size	 IncrementBattleCardCount,.Lfe49-IncrementBattleCardCount
	.align	2, 0
	.globl	MEvent_GetBattleCardCount
	.type	 MEvent_GetBattleCardCount,function
	.thumb_func
MEvent_GetBattleCardCount:
	push	{lr}
	cmp	r0, #0x4
	bhi	.L430	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L444
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L445:
	.align	2, 0
.L444:
	.word	.L441
	.align	2, 0
	.align	2, 0
.L441:
	.word	.L431
	.word	.L433
	.word	.L435
	.word	.L437
	.word	.L439
.L431:
	ldr	r0, .L446
	ldr	r2, [r0]
	ldr	r1, .L446+0x4
	add	r0, r2, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L430	@cond_branch
	ldr	r1, .L446+0x8
	add	r0, r2, r1
	ldrh	r0, [r0]
	b	.L443
.L447:
	.align	2, 0
.L446:
	.word	gSaveBlock1Ptr
	.word	0x32e4
	.word	0x3434
.L433:
	ldr	r0, .L448
	ldr	r2, [r0]
	ldr	r1, .L448+0x4
	add	r0, r2, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L430	@cond_branch
	ldr	r1, .L448+0x8
	add	r0, r2, r1
	ldrh	r0, [r0, #0x2]
	b	.L443
.L449:
	.align	2, 0
.L448:
	.word	gSaveBlock1Ptr
	.word	0x32e4
	.word	0x3434
.L435:
	ldr	r0, .L450
	ldr	r2, [r0]
	ldr	r1, .L450+0x4
	add	r0, r2, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L430	@cond_branch
	ldr	r1, .L450+0x8
	add	r0, r2, r1
	ldrh	r0, [r0, #0x4]
	b	.L443
.L451:
	.align	2, 0
.L450:
	.word	gSaveBlock1Ptr
	.word	0x32e4
	.word	0x3434
.L437:
	ldr	r0, .L452
	ldr	r0, [r0]
	ldr	r1, .L452+0x4
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L430	@cond_branch
	bl	ValidateCardAndCountMonsReceived
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L443
.L453:
	.align	2, 0
.L452:
	.word	gSaveBlock1Ptr
	.word	0x32e4
.L439:
	ldr	r0, .L454
	ldr	r0, [r0]
	ldr	r1, .L454+0x4
	add	r2, r0, r1
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L430	@cond_branch
	ldrb	r0, [r2, #0x9]
	b	.L443
.L455:
	.align	2, 0
.L454:
	.word	gSaveBlock1Ptr
	.word	0x32e4
.L430:
	ldr	r0, .L456
	ldr	r1, .L456+0x4
	ldr	r2, .L456+0x8
	mov	r3, #0x1
	bl	AGBAssert
	mov	r0, #0x0
.L443:
	pop	{r1}
	bx	r1
.L457:
	.align	2, 0
.L456:
	.word	.LC64
	.word	0x391
	.word	.LC66
.Lfe50:
	.size	 MEvent_GetBattleCardCount,.Lfe50-MEvent_GetBattleCardCount
	.align	2, 0
	.globl	ResetReceivedWonderCardFlag
	.type	 ResetReceivedWonderCardFlag,function
	.thumb_func
ResetReceivedWonderCardFlag:
	ldr	r1, .L459
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L460:
	.align	2, 0
.L459:
	.word	sReceivedWonderCardIsValid
.Lfe51:
	.size	 ResetReceivedWonderCardFlag,.Lfe51-ResetReceivedWonderCardFlag
	.align	2, 0
	.globl	MEventHandleReceivedWonderCard
	.type	 MEventHandleReceivedWonderCard,function
	.thumb_func
MEventHandleReceivedWonderCard:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r0, #0
	ldr	r5, .L466
	mov	r0, #0x0
	str	r0, [r5]
	cmp	r4, #0
	beq	.L465	@cond_branch
	bl	ValidateReceivedWonderCard
	cmp	r0, #0
	beq	.L464	@cond_branch
	ldr	r0, .L466+0x4
	ldr	r0, [r0]
	ldr	r1, .L466+0x8
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r4
	bne	.L464	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
	b	.L465
.L467:
	.align	2, 0
.L466:
	.word	sReceivedWonderCardIsValid
	.word	gSaveBlock1Ptr
	.word	0x32e4
.L464:
	mov	r0, #0x0
.L465:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 MEventHandleReceivedWonderCard,.Lfe52-MEventHandleReceivedWonderCard
	.align	2, 0
	.globl	MysteryGift_TryIncrementStat
	.type	 MysteryGift_TryIncrementStat,function
	.thumb_func
MysteryGift_TryIncrementStat:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L477
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L469	@cond_branch
	cmp	r2, #0x1
	beq	.L473	@cond_branch
	cmp	r2, #0x1
	bcc	.L472	@cond_branch
	cmp	r2, #0x2
	bne	.L474	@cond_branch
	ldr	r0, .L477+0x4
	ldr	r2, [r0]
	ldr	r0, .L477+0x8
	add	r2, r2, r0
	mov	r0, #0x2
	b	.L476
.L478:
	.align	2, 0
.L477:
	.word	sReceivedWonderCardIsValid
	.word	gSaveBlock1Ptr
	.word	0x3478
.L472:
	ldr	r0, .L479
	ldr	r2, [r0]
	ldr	r0, .L479+0x4
	add	r2, r2, r0
	mov	r0, #0x0
	b	.L476
.L480:
	.align	2, 0
.L479:
	.word	gSaveBlock1Ptr
	.word	0x3464
.L473:
	ldr	r0, .L481
	ldr	r2, [r0]
	ldr	r0, .L481+0x4
	add	r2, r2, r0
	mov	r0, #0x1
.L476:
	mov	r3, #0x5
	bl	RecordIdOfWonderCardSender
	b	.L469
.L482:
	.align	2, 0
.L481:
	.word	gSaveBlock1Ptr
	.word	0x3464
.L474:
	ldr	r0, .L483
	mov	r1, #0xf7
	lsl	r1, r1, #0x2
	ldr	r2, .L483+0x4
	mov	r3, #0x1
	bl	AGBAssert
.L469:
	pop	{r0}
	bx	r0
.L484:
	.align	2, 0
.L483:
	.word	.LC64
	.word	.LC66
.Lfe53:
	.size	 MysteryGift_TryIncrementStat,.Lfe53-MysteryGift_TryIncrementStat
	.align	2, 0
	.type	 BlankBuffer344,function
	.thumb_func
BlankBuffer344:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L486
	ldr	r1, [r0]
	ldr	r0, .L486+0x4
	add	r1, r1, r0
	ldr	r2, .L486+0x8
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L487:
	.align	2, 0
.L486:
	.word	gSaveBlock1Ptr
	.word	0x3464
	.word	0x500000a
.Lfe54:
	.size	 BlankBuffer344,.Lfe54-BlankBuffer344
	.align	2, 0
	.type	 PlaceTrainerIdAtFrontOfList,function
	.thumb_func
PlaceTrainerIdAtFrontOfList:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r1, #0x0
	cmp	r1, r2
	bge	.L490	@cond_branch
	ldr	r0, [r4]
	cmp	r0, r5
	beq	.L490	@cond_branch
	add	r3, r4, #0
.L491:
	add	r3, r3, #0x4
	add	r1, r1, #0x1
	cmp	r1, r2
	bge	.L490	@cond_branch
	ldr	r0, [r3]
	cmp	r0, r5
	bne	.L491	@cond_branch
.L490:
	cmp	r1, r2
	bne	.L495	@cond_branch
	sub	r3, r1, #0x1
	cmp	r3, #0
	ble	.L497	@cond_branch
	lsl	r0, r3, #0x2
	sub	r0, r0, #0x4
	add	r2, r0, r4
.L499:
	ldr	r0, [r2]
	str	r0, [r2, #0x4]
	sub	r2, r2, #0x4
	sub	r3, r3, #0x1
	cmp	r3, #0
	bgt	.L499	@cond_branch
.L497:
	str	r5, [r4]
	mov	r0, #0x1
	b	.L507
.L495:
	add	r3, r1, #0
	cmp	r3, #0
	ble	.L503	@cond_branch
	lsl	r0, r3, #0x2
	sub	r0, r0, #0x4
	add	r2, r0, r4
.L505:
	ldr	r0, [r2]
	str	r0, [r2, #0x4]
	sub	r2, r2, #0x4
	sub	r3, r3, #0x1
	cmp	r3, #0
	bgt	.L505	@cond_branch
.L503:
	str	r5, [r4]
	mov	r0, #0x0
.L507:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe55:
	.size	 PlaceTrainerIdAtFrontOfList,.Lfe55-PlaceTrainerIdAtFrontOfList
	.align	2, 0
	.type	 RecordIdOfWonderCardSender,function
	.thumb_func
RecordIdOfWonderCardSender:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r2, r3, #0
	bl	PlaceTrainerIdAtFrontOfList
	cmp	r0, #0
	beq	.L509	@cond_branch
	add	r0, r4, #0
	bl	IncrementBattleCardCount
.L509:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 RecordIdOfWonderCardSender,.Lfe56-RecordIdOfWonderCardSender
	.comm	sMEventSendToEReaderManager, 12	@ 12
.text
	.align	2, 0 @ Don't pad with nop

