@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sCancelDisabled,object
	.size	 sCancelDisabled,4
sCancelDisabled:
	.word	0x0
	.type	 sPSATaskId,object
	.size	 sPSATaskId,1
sPSATaskId:
	.byte	0x0
	.align	2, 0
	.type	 sPSAWork,object
	.size	 sPSAWork,4
sPSAWork:
	.word	0x0
.text
	.align	2, 0
	.globl	StartUseItemAnim_Normal
	.type	 StartUseItemAnim_Normal,function
	.thumb_func
StartUseItemAnim_Normal:
	push	{r4, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	AllocPSA
	cmp	r0, #0
	bne	.L3	@cond_branch
	add	r0, r4, #0
	bl	SetMainCallback2
	b	.L4
.L3:
	bl	SetUpUseItemAnim_Normal
.L4:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 StartUseItemAnim_Normal,.Lfe1-StartUseItemAnim_Normal
	.align	2, 0
	.globl	StartUseItemAnim_ForgetMoveAndLearnTMorHM
	.type	 StartUseItemAnim_ForgetMoveAndLearnTMorHM,function
	.thumb_func
StartUseItemAnim_ForgetMoveAndLearnTMorHM:
	push	{r4, r5, r6, lr}
	add	r5, r3, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	add	r2, r5, #0
	bl	AllocPSA
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L6	@cond_branch
	add	r0, r5, #0
	bl	SetMainCallback2
	b	.L7
.L6:
	add	r0, r4, #0
	add	r0, r0, #0x77
	mov	r1, #0xd
	mul	r1, r1, r6
	ldr	r2, .L8
	add	r1, r1, r2
	bl	StringCopy
	add	r0, r4, #0
	bl	SetUpUseItemAnim_ForgetMoveAndLearnTMorHM
.L7:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gMoveNames
.Lfe2:
	.size	 StartUseItemAnim_ForgetMoveAndLearnTMorHM,.Lfe2-StartUseItemAnim_ForgetMoveAndLearnTMorHM
	.align	2, 0
	.globl	StartUseItemAnim_CantEvolve
	.type	 StartUseItemAnim_CantEvolve,function
	.thumb_func
StartUseItemAnim_CantEvolve:
	push	{r4, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	AllocPSA
	cmp	r0, #0
	bne	.L11	@cond_branch
	add	r0, r4, #0
	bl	SetMainCallback2
	b	.L12
.L11:
	bl	SetUpUseItemAnim_CantEvolve
.L12:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 StartUseItemAnim_CantEvolve,.Lfe3-StartUseItemAnim_CantEvolve
	.align	2, 0
	.type	 AllocPSA,function
	.thumb_func
AllocPSA:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r0, .L18
	ldr	r1, .L18+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L14	@cond_branch
	bl	ResetTasks
.L14:
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r0, .L18+0x8
	bl	Alloc
	add	r7, r0, #0
	cmp	r7, #0
	bne	.L15	@cond_branch
	add	r0, r5, #0
	bl	SetMainCallback2
	mov	r0, #0x0
	b	.L17
.L19:
	.align	2, 0
.L18:
	.word	gMain
	.word	0x439
	.word	0x28dc
.L15:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	ldr	r0, .L20
	add	r4, r4, r0
	add	r0, r7, #0
	add	r0, r0, #0x92
	mov	r1, #0x0
	mov	r9, r1
	mov	r1, r9
	strh	r1, [r0]
	str	r5, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r7, #0
	add	r1, r1, #0x94
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetClosenessFromFriendship
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r7, #0
	add	r1, r1, #0x9c
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r1, r7, #0
	add	r1, r1, #0xa0
	str	r0, [r1]
	add	r0, r7, #0
	add	r0, r0, #0x9a
	mov	r1, r8
	strh	r1, [r0]
	sub	r0, r0, #0x4
	strh	r6, [r0]
	add	r0, r6, #0
	bl	GetAnimTypeByItemId
	add	r5, r7, #0
	add	r5, r5, #0x98
	strh	r0, [r5]
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r0, r7, #0
	add	r0, r0, #0xa4
	mov	r1, r9
	str	r1, [r0]
	add	r2, r7, #0
	add	r2, r2, #0x6c
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetMonData
	ldrh	r0, [r5]
	cmp	r0, #0x4
	bne	.L16	@cond_branch
	add	r0, r6, #0
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r2, r7, #0
	add	r2, r2, #0x84
	mov	r1, #0xd
	mul	r1, r1, r0
	ldr	r0, .L20+0x4
	add	r1, r1, r0
	add	r0, r2, #0
	bl	StringCopy
.L16:
	add	r0, r7, #0
.L17:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L21:
	.align	2, 0
.L20:
	.word	gPlayerParty
	.word	gMoveNames
.Lfe4:
	.size	 AllocPSA,.Lfe4-AllocPSA
	.align	2, 0
	.type	 VBlankCB_PSA,function
	.thumb_func
VBlankCB_PSA:
	push	{lr}
	bl	TransferPlttBuffer
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 VBlankCB_PSA,.Lfe5-VBlankCB_PSA
	.align	2, 0
	.type	 CB2_PSA,function
	.thumb_func
CB2_PSA:
	push	{lr}
	bl	RunTextPrinters
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CB2_PSA,.Lfe6-CB2_PSA
	.align	2, 0
	.type	 SetUseItemAnimCallback,function
	.thumb_func
SetUseItemAnimCallback:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetWordTaskArg
	add	r0, r0, #0x92
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r1, .L25
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	str	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gTasks
.Lfe7:
	.size	 SetUseItemAnimCallback,.Lfe7-SetUseItemAnimCallback
	.align	2, 0
	.type	 SetUpUseItemAnim_Normal,function
	.thumb_func
SetUpUseItemAnim_Normal:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r0, r0, #0x98
	ldrh	r0, [r0]
	cmp	r0, #0x3
	beq	.L31	@cond_branch
	cmp	r0, #0x3
	ble	.L35	@cond_branch
	cmp	r0, #0x4
	beq	.L32	@cond_branch
	b	.L33
.L35:
	cmp	r0, #0x1
	bgt	.L33	@cond_branch
	cmp	r0, #0
	blt	.L33	@cond_branch
.L31:
	ldr	r0, .L37
	b	.L36
.L38:
	.align	2, 0
.L37:
	.word	Task_UseItem_Normal
.L32:
	ldr	r0, .L39
.L36:
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	b	.L28
.L40:
	.align	2, 0
.L39:
	.word	Task_UseTM_NoForget
.L33:
	ldr	r0, [r5, #0x4]
	bl	SetMainCallback2
	add	r0, r5, #0
	bl	Free
	b	.L27
.L28:
	add	r1, r5, #0
	add	r1, r1, #0x91
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	SetWordTaskArg
	ldr	r0, .L41
	bl	SetMainCallback2
	ldr	r0, .L41+0x4
	strb	r4, [r0]
.L27:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L42:
	.align	2, 0
.L41:
	.word	CB2_PSA
	.word	sPSATaskId
.Lfe8:
	.size	 SetUpUseItemAnim_Normal,.Lfe8-SetUpUseItemAnim_Normal
	.align	2, 0
	.type	 SetUpUseItemAnim_ForgetMoveAndLearnTMorHM,function
	.thumb_func
SetUpUseItemAnim_ForgetMoveAndLearnTMorHM:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L44
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	SetWordTaskArg
	ldr	r0, .L44+0x4
	bl	SetMainCallback2
	ldr	r0, .L44+0x8
	strb	r4, [r0]
	add	r5, r5, #0x91
	mov	r0, #0x0
	strb	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	Task_ForgetMove
	.word	CB2_PSA
	.word	sPSATaskId
.Lfe9:
	.size	 SetUpUseItemAnim_ForgetMoveAndLearnTMorHM,.Lfe9-SetUpUseItemAnim_ForgetMoveAndLearnTMorHM
	.align	2, 0
	.type	 SetUpUseItemAnim_CantEvolve,function
	.thumb_func
SetUpUseItemAnim_CantEvolve:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L47
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	SetWordTaskArg
	ldr	r0, .L47+0x4
	bl	SetMainCallback2
	ldr	r0, .L47+0x8
	strb	r4, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	Task_EvoStone_CantEvolve
	.word	CB2_PSA
	.word	sPSATaskId
.Lfe10:
	.size	 SetUpUseItemAnim_CantEvolve,.Lfe10-SetUpUseItemAnim_CantEvolve
	.align	2, 0
	.type	 Task_UseItem_Normal,function
	.thumb_func
Task_UseItem_Normal:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetWordTaskArg
	add	r4, r0, #0
	add	r0, r0, #0x91
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L50	@cond_branch
	ldr	r0, .L83
	ldrh	r1, [r0, #0x2c]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L50	@cond_branch
	bl	PSA_UseItem_CleanUpForCancel
	ldr	r1, .L83+0x4
	add	r0, r6, #0
	bl	SetUseItemAnimCallback
	b	.L49
.L84:
	.align	2, 0
.L83:
	.word	gMain
	.word	Task_CleanUp
.L50:
	add	r0, r4, #0
	add	r0, r0, #0x92
	ldrh	r1, [r0]
	add	r5, r0, #0
	cmp	r1, #0xe
	bls	.LCB546
	b	.L49	@long jump
.LCB546:
	lsl	r0, r1, #0x2
	ldr	r1, .L85
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L86:
	.align	2, 0
.L85:
	.word	.L79
	.align	2, 0
	.align	2, 0
.L79:
	.word	.L52
	.word	.L53
	.word	.L76
	.word	.L57
	.word	.L58
	.word	.L60
	.word	.L62
	.word	.L63
	.word	.L66
	.word	.L67
	.word	.L69
	.word	.L70
	.word	.L72
	.word	.L76
	.word	.L78
.L52:
	mov	r0, #0x0
	bl	SetVBlankCallback
	add	r0, r4, #0
	add	r0, r0, #0xa8
	add	r1, r4, #0
	add	r1, r1, #0x98
	ldrh	r1, [r1]
	bl	InitPokemonSpecialAnimScene
	mov	r0, #0x0
	bl	PSA_CreateMonSpriteAtCloseness
	b	.L81
.L53:
	bl	PokemonSpecialAnimSceneInitIsNotFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB586
	b	.L49	@long jump
.LCB586:
	mov	r1, #0x1
	neg	r1, r1
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	ldr	r0, .L87
	bl	SetVBlankCallback
	b	.L49
.L88:
	.align	2, 0
.L87:
	.word	VBlankCB_PSA
.L57:
	add	r0, r4, #0
	add	r0, r0, #0x9c
	ldrb	r0, [r0]
	bl	PSA_SetUpZoomAnim
	b	.L81
.L58:
	bl	PSA_IsZoomTaskActive
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L49	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x9e
	strh	r1, [r0]
	b	.L81
.L60:
	bl	PSA_LevelUpVerticalSpritesTaskIsRunning
	lsl	r0, r0, #0x18
	b	.L82
.L62:
	add	r0, r4, #0
	add	r0, r0, #0x96
	ldrh	r0, [r0]
	add	r1, r4, #0
	add	r1, r1, #0x9c
	ldrb	r1, [r1]
	mov	r2, #0x1
	bl	PSA_SetUpItemUseOnMonAnim
	b	.L81
.L63:
	bl	PSA_IsItemUseOnMonAnimActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L49	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x91
	mov	r0, #0x1
	strb	r0, [r1]
	add	r0, r4, #0
	add	r0, r0, #0x9c
	ldrh	r0, [r0]
	cmp	r0, #0x3
	bne	.L65	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x94
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	PlayCry_Normal
.L65:
	bl	PSA_ShowMessageWindow
	b	.L81
.L66:
	mov	r0, #0x0
	bl	PSA_PrintMessage
	b	.L81
.L67:
	bl	PSA_IsMessagePrintTaskActive
	lsl	r0, r0, #0x18
	b	.L82
.L69:
	mov	r0, #0x0
	bl	PSA_SetUpZoomAnim
	b	.L81
.L70:
	bl	PSA_IsZoomTaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L49	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x91
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L81
.L72:
	ldr	r0, .L89
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L49	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x96
	ldrh	r0, [r0]
	bl	CheckIfItemIsTMHMOrEvolutionStone
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L74	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L81
.L90:
	.align	2, 0
.L89:
	.word	gMain
.L74:
	ldrh	r0, [r5]
	add	r0, r0, #0x2
	strh	r0, [r5]
	b	.L49
.L76:
	ldr	r0, .L91
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
.L82:
	cmp	r0, #0
	bne	.L49	@cond_branch
.L81:
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	b	.L49
.L92:
	.align	2, 0
.L91:
	.word	gPaletteFade
.L78:
	ldr	r0, [r4, #0x4]
	bl	SetMainCallback2
	bl	PSA_FreeWindowBuffers
	add	r0, r4, #0
	bl	Free
	add	r0, r6, #0
	bl	DestroyTask
.L49:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 Task_UseItem_Normal,.Lfe11-Task_UseItem_Normal
	.align	2, 0
	.type	 Task_ForgetMove,function
	.thumb_func
Task_ForgetMove:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetWordTaskArg
	add	r5, r0, #0
	add	r0, r0, #0x92
	ldrh	r0, [r0]
	cmp	r0, #0xd
	bls	.LCB844
	b	.L94	@long jump
.LCB844:
	lsl	r0, r0, #0x2
	ldr	r1, .L123
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L124:
	.align	2, 0
.L123:
	.word	.L119
	.align	2, 0
	.align	2, 0
.L119:
	.word	.L95
	.word	.L96
	.word	.L98
	.word	.L100
	.word	.L102
	.word	.L103
	.word	.L105
	.word	.L107
	.word	.L109
	.word	.L111
	.word	.L113
	.word	.L114
	.word	.L116
	.word	.L118
.L95:
	mov	r0, #0x0
	bl	SetVBlankCallback
	add	r0, r5, #0
	add	r0, r0, #0xa8
	add	r1, r5, #0
	add	r1, r1, #0x98
	ldrh	r1, [r1]
	bl	InitPokemonSpecialAnimScene
	mov	r0, #0x3
	bl	PSA_CreateMonSpriteAtCloseness
	b	.L121
.L96:
	bl	PokemonSpecialAnimSceneInitIsNotFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB883
	b	.L94	@long jump
.LCB883:
	mov	r1, #0x1
	neg	r1, r1
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	add	r1, r5, #0
	add	r1, r1, #0x92
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	ldr	r0, .L125
	bl	SetVBlankCallback
	b	.L94
.L126:
	.align	2, 0
.L125:
	.word	VBlankCB_PSA
.L98:
	ldr	r0, .L127
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x9e
	strh	r0, [r1]
	sub	r1, r1, #0xc
	b	.L122
.L128:
	.align	2, 0
.L127:
	.word	gPaletteFade
.L100:
	add	r1, r5, #0
	add	r1, r1, #0x9e
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bls	.L94	@cond_branch
	bl	PSA_ShowMessageWindow
	b	.L121
.L102:
	mov	r0, #0x2
	bl	PSA_PrintMessage
	b	.L121
.L103:
	bl	PSA_IsMessagePrintTaskActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x9e
	strh	r0, [r1]
	sub	r1, r1, #0xc
	b	.L122
.L105:
	add	r1, r5, #0
	add	r1, r1, #0x9e
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bls	.L94	@cond_branch
	mov	r0, #0x3
	bl	PSA_PrintMessage
	b	.L121
.L107:
	bl	PSA_IsMessagePrintTaskActive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x9e
	strh	r0, [r1]
	sub	r1, r1, #0xc
	b	.L122
.L109:
	add	r1, r5, #0
	add	r1, r1, #0x9e
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bls	.L94	@cond_branch
	mov	r0, #0xe1
	bl	PlaySE
	mov	r0, #0x4
	bl	PSA_PrintMessage
	bl	PSA_DarkenMonSprite
	b	.L121
.L111:
	bl	PSA_RunPoofAnim
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	PSA_IsMessagePrintTaskActive
	orr	r4, r4, r0
	lsl	r4, r4, #0x18
	cmp	r4, #0
	bne	.L94	@cond_branch
	bl	PSA_AfterPoof_ClearMessageWindow
	b	.L121
.L113:
	mov	r0, #0x5
	bl	PSA_PrintMessage
	b	.L121
.L114:
	bl	PSA_IsMessagePrintTaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	mov	r0, #0x6
	bl	PSA_PrintMessage
	b	.L121
.L116:
	bl	PSA_IsMessagePrintTaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	bl	PSA_HideMessageWindow
.L121:
	add	r1, r5, #0
	add	r1, r1, #0x92
.L122:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L94
.L118:
	ldr	r1, .L129
	add	r0, r4, #0
	bl	SetUseItemAnimCallback
.L94:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	Task_MachineSet
.Lfe12:
	.size	 Task_ForgetMove,.Lfe12-Task_ForgetMove
	.align	2, 0
	.type	 Task_EvoStone_CantEvolve,function
	.thumb_func
Task_EvoStone_CantEvolve:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetWordTaskArg
	add	r5, r0, #0
	add	r0, r0, #0x91
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L132	@cond_branch
	ldr	r0, .L153
	ldrh	r1, [r0, #0x2c]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L132	@cond_branch
	ldr	r1, .L153+0x4
	add	r0, r6, #0
	bl	SetUseItemAnimCallback
	b	.L131
.L154:
	.align	2, 0
.L153:
	.word	gMain
	.word	Task_CleanUp
.L132:
	add	r0, r5, #0
	add	r0, r0, #0x92
	ldrh	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0x9
	bls	.LCB1139
	b	.L131	@long jump
.LCB1139:
	lsl	r0, r1, #0x2
	ldr	r1, .L155
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L156:
	.align	2, 0
.L155:
	.word	.L150
	.align	2, 0
	.align	2, 0
.L150:
	.word	.L134
	.word	.L135
	.word	.L137
	.word	.L139
	.word	.L140
	.word	.L141
	.word	.L143
	.word	.L144
	.word	.L146
	.word	.L148
.L134:
	mov	r0, #0x0
	bl	SetVBlankCallback
	add	r0, r5, #0
	add	r0, r0, #0xa8
	add	r1, r5, #0
	add	r1, r1, #0x98
	ldrh	r1, [r1]
	bl	InitPokemonSpecialAnimScene
	mov	r0, #0x0
	bl	PSA_CreateMonSpriteAtCloseness
	b	.L152
.L135:
	bl	PokemonSpecialAnimSceneInitIsNotFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L131	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L157
	bl	SetVBlankCallback
	b	.L131
.L158:
	.align	2, 0
.L157:
	.word	VBlankCB_PSA
.L137:
	ldr	r0, .L159
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L131	@cond_branch
	b	.L152
.L160:
	.align	2, 0
.L159:
	.word	gPaletteFade
.L139:
	add	r0, r5, #0
	add	r0, r0, #0x9c
	ldrb	r0, [r0]
	bl	PSA_SetUpZoomAnim
	b	.L152
.L140:
	add	r0, r5, #0
	add	r0, r0, #0x96
	ldrh	r0, [r0]
	add	r1, r5, #0
	add	r1, r1, #0x9c
	ldrb	r1, [r1]
	mov	r2, #0x0
	bl	PSA_SetUpItemUseOnMonAnim
	b	.L152
.L141:
	bl	PSA_IsItemUseOnMonAnimActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L131	@cond_branch
	bl	PSA_ShowMessageWindow
	b	.L152
.L143:
	mov	r0, #0x8
	bl	PSA_PrintMessage
	b	.L152
.L144:
	bl	PSA_IsMessagePrintTaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L131	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x91
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L152
.L146:
	ldr	r0, .L161
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L131	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L152:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L131
.L162:
	.align	2, 0
.L161:
	.word	gMain
.L148:
	ldr	r0, .L163
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L131	@cond_branch
	ldr	r0, [r5, #0x4]
	bl	SetMainCallback2
	bl	PSA_FreeWindowBuffers
	add	r0, r5, #0
	bl	Free
	add	r0, r6, #0
	bl	DestroyTask
.L131:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L164:
	.align	2, 0
.L163:
	.word	gPaletteFade
.Lfe13:
	.size	 Task_EvoStone_CantEvolve,.Lfe13-Task_EvoStone_CantEvolve
	.align	2, 0
	.type	 Task_UseTM_NoForget,function
	.thumb_func
Task_UseTM_NoForget:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetWordTaskArg
	add	r5, r0, #0
	ldr	r0, .L179
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L166	@cond_branch
	ldr	r1, .L179+0x4
	add	r0, r6, #0
	bl	SetUseItemAnimCallback
	b	.L165
.L180:
	.align	2, 0
.L179:
	.word	gMain
	.word	Task_CleanUp
.L166:
	add	r4, r5, #0
	add	r4, r4, #0x92
	ldrh	r0, [r4]
	cmp	r0, #0x1
	beq	.L169	@cond_branch
	cmp	r0, #0x1
	bgt	.L177	@cond_branch
	cmp	r0, #0
	beq	.L168	@cond_branch
	b	.L165
.L177:
	cmp	r0, #0x2
	beq	.L171	@cond_branch
	cmp	r0, #0x3
	beq	.L173	@cond_branch
	b	.L165
.L168:
	mov	r0, #0x0
	bl	SetVBlankCallback
	add	r0, r5, #0
	add	r0, r0, #0xa8
	add	r1, r5, #0
	add	r1, r1, #0x98
	ldrh	r1, [r1]
	bl	InitPokemonSpecialAnimScene
	mov	r0, #0x3
	bl	PSA_CreateMonSpriteAtCloseness
	b	.L178
.L169:
	bl	PokemonSpecialAnimSceneInitIsNotFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L165	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L181
	bl	SetVBlankCallback
	b	.L165
.L182:
	.align	2, 0
.L181:
	.word	VBlankCB_PSA
.L171:
	ldr	r0, .L183
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L165	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x9e
	strh	r1, [r0]
.L178:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L165
.L184:
	.align	2, 0
.L183:
	.word	gPaletteFade
.L173:
	add	r1, r5, #0
	add	r1, r1, #0x9e
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x14
	bls	.L165	@cond_branch
	ldr	r1, .L185
	add	r0, r6, #0
	bl	SetUseItemAnimCallback
.L165:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	Task_MachineSet
.Lfe14:
	.size	 Task_UseTM_NoForget,.Lfe14-Task_UseTM_NoForget
	.align	2, 0
	.type	 Task_MachineSet,function
	.thumb_func
Task_MachineSet:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetWordTaskArg
	add	r5, r0, #0
	add	r0, r0, #0x91
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L188	@cond_branch
	ldr	r0, .L209
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L188	@cond_branch
	bl	PSA_UseTM_CleanUpForCancel
	ldr	r1, .L209+0x4
	add	r0, r6, #0
	bl	SetUseItemAnimCallback
	b	.L187
.L210:
	.align	2, 0
.L209:
	.word	gMain
	.word	Task_CleanUp
.L188:
	add	r0, r5, #0
	add	r0, r0, #0x92
	ldrh	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0x9
	bhi	.L187	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L211
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L212:
	.align	2, 0
.L211:
	.word	.L206
	.align	2, 0
	.align	2, 0
.L206:
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L194
	.word	.L195
	.word	.L197
	.word	.L198
	.word	.L200
	.word	.L202
	.word	.L204
.L190:
	add	r0, r5, #0
	add	r0, r0, #0x96
	ldrh	r0, [r0]
	bl	CreateItemIconSpriteAtMaxCloseness
	add	r1, r5, #0
	add	r1, r1, #0x9e
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L208
.L191:
	bl	PSA_ShowMessageWindow
	mov	r0, #0x7
	bl	PSA_PrintMessage
	b	.L208
.L192:
	bl	PSA_IsMessagePrintTaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	bl	PSA_HideMessageWindow
	b	.L208
.L194:
	bl	PSA_UseTM_SetUpMachineSetWobble
	b	.L208
.L195:
	bl	PSA_UseTM_RunMachineSetWobble
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	b	.L208
.L197:
	bl	PSA_UseTM_SetUpZoomOutAnim
	b	.L208
.L198:
	bl	PSA_UseTM_RunZoomOutAnim
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L187	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x9e
	strh	r1, [r0]
	b	.L208
.L200:
	add	r1, r5, #0
	add	r1, r1, #0x9e
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bls	.L187	@cond_branch
	bl	PSA_ShowMessageWindow
	mov	r0, #0x9
	bl	PSA_PrintMessage
	b	.L208
.L202:
	bl	PSA_IsMessagePrintTaskActive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	ldr	r0, .L213
	bl	PlayFanfare
	add	r1, r5, #0
	add	r1, r1, #0x91
	mov	r0, #0x1
	strb	r0, [r1]
.L208:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L187
.L214:
	.align	2, 0
.L213:
	.word	0x101
.L204:
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L187	@cond_branch
	ldr	r1, .L215
	add	r0, r6, #0
	bl	SetUseItemAnimCallback
.L187:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L216:
	.align	2, 0
.L215:
	.word	Task_CleanUp
.Lfe15:
	.size	 Task_MachineSet,.Lfe15-Task_MachineSet
	.align	2, 0
	.type	 Task_CleanUp,function
	.thumb_func
Task_CleanUp:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetWordTaskArg
	add	r5, r0, #0
	add	r4, r5, #0
	add	r4, r4, #0x92
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L219	@cond_branch
	cmp	r0, #0x1
	beq	.L220	@cond_branch
	b	.L218
.L219:
	ldr	r0, .L225
	bl	SetVBlankCallback
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L218
.L226:
	.align	2, 0
.L225:
	.word	VBlankCB_PSA
.L220:
	ldr	r0, .L227
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L218	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0xa4
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L222	@cond_branch
	bl	IsCryFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L218	@cond_branch
.L222:
	ldr	r0, .L227+0x4
	add	r1, r5, #0
	add	r1, r1, #0x91
	ldrb	r1, [r1]
	str	r1, [r0]
	ldr	r0, [r5, #0x4]
	bl	SetMainCallback2
	add	r0, r6, #0
	bl	DestroyTask
	bl	PSA_FreeWindowBuffers
	add	r0, r5, #0
	bl	Free
.L218:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	gPaletteFade
	.word	sCancelDisabled
.Lfe16:
	.size	 Task_CleanUp,.Lfe16-Task_CleanUp
	.section .rodata
	.align	2, 0
	.type	 sItemAnimMap,object
	.size	 sItemAnimMap,8
sItemAnimMap:
	.short	0x44
	.short	0x0
	.short	0xd
	.short	0x1
.text
	.align	2, 0
	.type	 GetAnimTypeByItemId,function
	.thumb_func
GetAnimTypeByItemId:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	ldr	r4, .L239
.L233:
	add	r1, r4, #0
	ldrh	r0, [r1]
	cmp	r0, r3
	beq	.L238	@cond_branch
	add	r4, r1, #0x4
	add	r2, r2, #0x1
	cmp	r2, #0x1
	bls	.L233	@cond_branch
	ldr	r1, .L239+0x4
	add	r0, r3, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x39
	bls	.L236	@cond_branch
	mov	r0, #0x0
	b	.L237
.L240:
	.align	2, 0
.L239:
	.word	sItemAnimMap
	.word	-0x121
.L238:
	ldrh	r0, [r4, #0x2]
	b	.L237
.L236:
	mov	r0, #0x4
.L237:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 GetAnimTypeByItemId,.Lfe17-GetAnimTypeByItemId
	.align	2, 0
	.type	 GetClosenessFromFriendship,function
	.thumb_func
GetClosenessFromFriendship:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r0, #0
	cmp	r0, #0x64
	bhi	.L242	@cond_branch
	mov	r0, #0x0
	b	.L248
.L242:
	cmp	r0, #0x96
	bhi	.L244	@cond_branch
	mov	r0, #0x1
	b	.L248
.L244:
	cmp	r1, #0xc8
	bls	.L246	@cond_branch
	mov	r0, #0x3
	b	.L248
.L246:
	mov	r0, #0x2
.L248:
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 GetClosenessFromFriendship,.Lfe18-GetClosenessFromFriendship
	.align	2, 0
	.globl	GetPSAStruct
	.type	 GetPSAStruct,function
	.thumb_func
GetPSAStruct:
	push	{lr}
	ldr	r0, .L250
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetWordTaskArg
	pop	{r1}
	bx	r1
.L251:
	.align	2, 0
.L250:
	.word	sPSATaskId
.Lfe19:
	.size	 GetPSAStruct,.Lfe19-GetPSAStruct
	.align	2, 0
	.globl	PSA_GetPokemon
	.type	 PSA_GetPokemon,function
	.thumb_func
PSA_GetPokemon:
	push	{lr}
	bl	GetPSAStruct
	ldr	r1, .L253
	str	r0, [r1]
	add	r0, r0, #0x8
	pop	{r1}
	bx	r1
.L254:
	.align	2, 0
.L253:
	.word	sPSAWork
.Lfe20:
	.size	 PSA_GetPokemon,.Lfe20-PSA_GetPokemon
	.align	2, 0
	.globl	PSA_GetSceneWork
	.type	 PSA_GetSceneWork,function
	.thumb_func
PSA_GetSceneWork:
	push	{lr}
	bl	GetPSAStruct
	add	r0, r0, #0xa8
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 PSA_GetSceneWork,.Lfe21-PSA_GetSceneWork
	.align	2, 0
	.globl	PSA_GetItemId
	.type	 PSA_GetItemId,function
	.thumb_func
PSA_GetItemId:
	push	{lr}
	bl	GetPSAStruct
	add	r0, r0, #0x96
	ldrh	r0, [r0]
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 PSA_GetItemId,.Lfe22-PSA_GetItemId
	.align	2, 0
	.globl	PSA_GetNameOfMoveForgotten
	.type	 PSA_GetNameOfMoveForgotten,function
	.thumb_func
PSA_GetNameOfMoveForgotten:
	push	{lr}
	bl	GetPSAStruct
	add	r0, r0, #0x77
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 PSA_GetNameOfMoveForgotten,.Lfe23-PSA_GetNameOfMoveForgotten
	.align	2, 0
	.globl	PSA_GetNameOfMoveToTeach
	.type	 PSA_GetNameOfMoveToTeach,function
	.thumb_func
PSA_GetNameOfMoveToTeach:
	push	{lr}
	bl	GetPSAStruct
	add	r0, r0, #0x84
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 PSA_GetNameOfMoveToTeach,.Lfe24-PSA_GetNameOfMoveToTeach
	.align	2, 0
	.globl	PSA_CopyMonNickname
	.type	 PSA_CopyMonNickname,function
	.thumb_func
PSA_CopyMonNickname:
	push	{r4, lr}
	add	r4, r0, #0
	bl	GetPSAStruct
	add	r1, r0, #0
	add	r1, r1, #0x6c
	add	r0, r4, #0
	bl	StringCopy
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 PSA_CopyMonNickname,.Lfe25-PSA_CopyMonNickname
	.align	2, 0
	.globl	PSA_GetMonNickname
	.type	 PSA_GetMonNickname,function
	.thumb_func
PSA_GetMonNickname:
	push	{lr}
	bl	GetPSAStruct
	add	r0, r0, #0x6c
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 PSA_GetMonNickname,.Lfe26-PSA_GetMonNickname
	.align	2, 0
	.globl	PSA_GetAnimType
	.type	 PSA_GetAnimType,function
	.thumb_func
PSA_GetAnimType:
	push	{lr}
	bl	GetPSAStruct
	add	r0, r0, #0x98
	ldrb	r0, [r0]
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 PSA_GetAnimType,.Lfe27-PSA_GetAnimType
	.align	2, 0
	.globl	PSA_GetMonSpecies
	.type	 PSA_GetMonSpecies,function
	.thumb_func
PSA_GetMonSpecies:
	push	{lr}
	bl	GetPSAStruct
	add	r0, r0, #0x94
	ldrh	r0, [r0]
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 PSA_GetMonSpecies,.Lfe28-PSA_GetMonSpecies
	.align	2, 0
	.globl	PSA_GetMonPersonality
	.type	 PSA_GetMonPersonality,function
	.thumb_func
PSA_GetMonPersonality:
	push	{lr}
	bl	GetPSAStruct
	add	r0, r0, #0xa0
	ldr	r0, [r0]
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 PSA_GetMonPersonality,.Lfe29-PSA_GetMonPersonality
	.align	2, 0
	.globl	GetMonLevelUpWindowStats
	.type	 GetMonLevelUpWindowStats,function
	.thumb_func
GetMonLevelUpWindowStats:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	strh	r0, [r5, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	strh	r0, [r5, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	strh	r0, [r5, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	strh	r0, [r5, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	strh	r0, [r5, #0xa]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 GetMonLevelUpWindowStats,.Lfe30-GetMonLevelUpWindowStats
	.align	2, 0
	.globl	PSA_IsCancelDisabled
	.type	 PSA_IsCancelDisabled,function
	.thumb_func
PSA_IsCancelDisabled:
	ldr	r0, .L266
	ldr	r0, [r0]
	bx	lr
.L267:
	.align	2, 0
.L266:
	.word	sCancelDisabled
.Lfe31:
	.size	 PSA_IsCancelDisabled,.Lfe31-PSA_IsCancelDisabled
.text
	.align	2, 0 @ Don't pad with nop

