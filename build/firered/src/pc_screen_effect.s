@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	BeginPCScreenEffect_TurnOn
	.type	 BeginPCScreenEffect_TurnOn,function
	.thumb_func
BeginPCScreenEffect_TurnOn:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r3, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L3
	add	r1, r4, #0
	add	r2, r5, #0
	bl	BeginPCScreenEffect
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	Task_PCScreenEffect_TurnOn
.Lfe1:
	.size	 BeginPCScreenEffect_TurnOn,.Lfe1-BeginPCScreenEffect_TurnOn
	.align	2, 0
	.globl	BeginPCScreenEffect_TurnOff
	.type	 BeginPCScreenEffect_TurnOff,function
	.thumb_func
BeginPCScreenEffect_TurnOff:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r3, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L6
	add	r1, r4, #0
	add	r2, r5, #0
	bl	BeginPCScreenEffect
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	Task_PCScreenEffect_TurnOff
.Lfe2:
	.size	 BeginPCScreenEffect_TurnOff,.Lfe2-BeginPCScreenEffect_TurnOff
	.align	2, 0
	.globl	IsPCScreenEffectRunning_TurnOn
	.type	 IsPCScreenEffectRunning_TurnOn,function
	.thumb_func
IsPCScreenEffectRunning_TurnOn:
	push	{lr}
	ldr	r0, .L9
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L10:
	.align	2, 0
.L9:
	.word	Task_PCScreenEffect_TurnOn
.Lfe3:
	.size	 IsPCScreenEffectRunning_TurnOn,.Lfe3-IsPCScreenEffectRunning_TurnOn
	.align	2, 0
	.globl	IsPCScreenEffectRunning_TurnOff
	.type	 IsPCScreenEffectRunning_TurnOff,function
	.thumb_func
IsPCScreenEffectRunning_TurnOff:
	push	{lr}
	ldr	r0, .L12
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L13:
	.align	2, 0
.L12:
	.word	Task_PCScreenEffect_TurnOff
.Lfe4:
	.size	 IsPCScreenEffectRunning_TurnOff,.Lfe4-IsPCScreenEffectRunning_TurnOff
	.align	2, 0
	.type	 BeginPCScreenEffect,function
	.thumb_func
BeginPCScreenEffect:
	push	{r4, r5, lr}
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r5, r4, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r1, r3, #0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	ldr	r1, .L19
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	mov	r0, #0x10
	cmp	r4, #0
	beq	.L15	@cond_branch
	add	r0, r4, #0
.L15:
	strh	r0, [r1, #0xa]
	mov	r0, #0x14
	cmp	r5, #0
	beq	.L17	@cond_branch
	add	r0, r5, #0
.L17:
	strh	r0, [r1, #0xc]
	ldr	r1, [r1]
	add	r0, r2, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gTasks
.Lfe5:
	.size	 BeginPCScreenEffect,.Lfe5-BeginPCScreenEffect
	.align	2, 0
	.type	 Task_PCScreenEffect_TurnOn,function
	.thumb_func
Task_PCScreenEffect_TurnOn:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L37
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L24	@cond_branch
	cmp	r0, #0x1
	bgt	.L35	@cond_branch
	cmp	r0, #0
	beq	.L23	@cond_branch
	b	.L33
.L38:
	.align	2, 0
.L37:
	.word	gTasks
.L35:
	cmp	r0, #0x2
	beq	.L25	@cond_branch
	cmp	r0, #0x3
	beq	.L29	@cond_branch
	b	.L33
.L23:
	mov	r0, #0x78
	strh	r0, [r4, #0xe]
	strh	r0, [r4, #0x10]
	mov	r0, #0x50
	strh	r0, [r4, #0x12]
	mov	r0, #0x51
	strh	r0, [r4, #0x14]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x10]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x40
	bl	SetGpuReg
	ldrh	r1, [r4, #0x12]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x14]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x44
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L22
.L24:
	mov	r0, #0x50
	bl	GetGpuReg
	strh	r0, [r4, #0x16]
	mov	r0, #0x54
	bl	GetGpuReg
	strh	r0, [r4, #0x18]
	mov	r0, #0x50
	mov	r1, #0xbf
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x10
	bl	SetGpuReg
	b	.L22
.L25:
	ldrh	r0, [r4, #0xe]
	ldrh	r1, [r4, #0xa]
	sub	r0, r0, r1
	mov	r5, #0x0
	strh	r0, [r4, #0xe]
	ldrh	r2, [r4, #0x10]
	add	r1, r1, r2
	strh	r1, [r4, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L27	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xef
	ble	.L26	@cond_branch
.L27:
	strh	r5, [r4, #0xe]
	mov	r0, #0xf0
	strh	r0, [r4, #0x10]
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4, #0x16]
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BlendPalettes
	ldr	r0, .L39
	strh	r5, [r0]
.L26:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x10]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x40
	bl	SetGpuReg
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	b	.L36
.L40:
	.align	2, 0
.L39:
	.word	gPlttBufferFaded
.L29:
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0xc]
	sub	r0, r0, r1
	strh	r0, [r4, #0x12]
	ldrh	r2, [r4, #0x14]
	add	r1, r1, r2
	strh	r1, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L31	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9f
	ble	.L30	@cond_branch
.L31:
	mov	r0, #0x0
	strh	r0, [r4, #0x12]
	mov	r0, #0xa0
	strh	r0, [r4, #0x14]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	ClearGpuRegBits
.L30:
	ldrh	r1, [r4, #0x12]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x14]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x44
	bl	SetGpuReg
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
.L36:
	cmp	r0, #0
	bne	.L21	@cond_branch
	b	.L22
.L33:
	ldrh	r1, [r4, #0x16]
	mov	r0, #0x50
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyTask
	b	.L21
.L22:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L21:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 Task_PCScreenEffect_TurnOn,.Lfe6-Task_PCScreenEffect_TurnOn
	.align	2, 0
	.type	 Task_PCScreenEffect_TurnOff,function
	.thumb_func
Task_PCScreenEffect_TurnOff:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L56
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L44	@cond_branch
	cmp	r1, #0x1
	bgt	.L55	@cond_branch
	cmp	r1, #0
	beq	.L43	@cond_branch
	b	.L53
.L57:
	.align	2, 0
.L56:
	.word	gTasks
.L55:
	cmp	r1, #0x2
	beq	.L45	@cond_branch
	cmp	r1, #0x3
	beq	.L49	@cond_branch
	b	.L53
.L43:
	ldr	r0, .L58
	strh	r1, [r0]
	b	.L42
.L59:
	.align	2, 0
.L58:
	.word	gPlttBufferFaded
.L44:
	mov	r1, #0x0
	strh	r1, [r4, #0xe]
	mov	r0, #0xf0
	strh	r0, [r4, #0x10]
	strh	r1, [r4, #0x12]
	mov	r0, #0xa0
	strh	r0, [r4, #0x14]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x10]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x40
	bl	SetGpuReg
	ldrh	r1, [r4, #0x12]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x14]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x44
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L42
.L45:
	ldrh	r0, [r4, #0xc]
	ldrh	r2, [r4, #0x12]
	add	r1, r0, r2
	strh	r1, [r4, #0x12]
	ldrh	r2, [r4, #0x14]
	sub	r0, r2, r0
	strh	r0, [r4, #0x14]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x4f
	bgt	.L47	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x51
	bgt	.L46	@cond_branch
.L47:
	mov	r0, #0x50
	strh	r0, [r4, #0x12]
	mov	r0, #0x51
	strh	r0, [r4, #0x14]
	mov	r0, #0x50
	mov	r1, #0xbf
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x10
	bl	SetGpuReg
.L46:
	ldrh	r1, [r4, #0x12]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x14]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x44
	bl	SetGpuReg
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	bne	.L41	@cond_branch
	b	.L42
.L49:
	ldrh	r0, [r4, #0xa]
	ldrh	r2, [r4, #0xe]
	add	r1, r0, r2
	strh	r1, [r4, #0xe]
	ldrh	r2, [r4, #0x10]
	sub	r0, r2, r0
	strh	r0, [r4, #0x10]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x77
	bgt	.L51	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x78
	bgt	.L50	@cond_branch
.L51:
	mov	r0, #0x78
	strh	r0, [r4, #0xe]
	strh	r0, [r4, #0x10]
	sub	r0, r0, #0x79
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldr	r1, .L60
	mov	r0, #0x0
	strh	r0, [r1]
.L50:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x10]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x40
	bl	SetGpuReg
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x78
	bne	.L41	@cond_branch
	b	.L42
.L61:
	.align	2, 0
.L60:
	.word	gPlttBufferFaded
.L53:
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	ClearGpuRegBits
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyTask
	b	.L41
.L42:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L41:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 Task_PCScreenEffect_TurnOff,.Lfe7-Task_PCScreenEffect_TurnOff
.text
	.align	2, 0 @ Don't pad with nop

