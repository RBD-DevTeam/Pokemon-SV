@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBackupMapData
	.section ewram_data,"aw"
	.align	1, 0
	.type	 gBackupMapData,object
	.size	 gBackupMapData,20480
gBackupMapData:
	.space	20480
	.globl	gMapHeader
	.align	2, 0
	.type	 gMapHeader,object
	.size	 gMapHeader,28
gMapHeader:
	.space	28
	.globl	gCamera
	.align	2, 0
	.type	 gCamera,object
	.size	 gCamera,12
gCamera:
	.space	12
	.align	2, 0
	.type	 gMapConnectionFlags,object
	.size	 gMapConnectionFlags,4
gMapConnectionFlags:
	.space	4
	.globl	gGlobalFieldTintMode
	.type	 gGlobalFieldTintMode,object
	.size	 gGlobalFieldTintMode,1
gGlobalFieldTintMode:
	.byte	0x0
	.section .rodata
	.align	2, 0
	.type	 sDummyConnectionFlags,object
	.size	 sDummyConnectionFlags,4
sDummyConnectionFlags:
	.space	4
	.align	2, 0
	.type	 sMetatileAttrMasks,object
	.size	 sMetatileAttrMasks,32
sMetatileAttrMasks:
	.word	0x1ff
	.word	0x3e00
	.word	0x3c000
	.word	0xfc0000
	.word	0x7000000
	.word	0x18000000
	.word	0x60000000
	.word	-0x80000000
	.type	 sMetatileAttrShifts,object
	.size	 sMetatileAttrShifts,8
sMetatileAttrShifts:
	.byte	0x0
	.byte	0x9
	.byte	0xe
	.byte	0x12
	.byte	0x18
	.byte	0x1b
	.byte	0x1d
	.byte	0x1f
.text
	.align	2, 0
	.globl	GetMapHeaderFromConnection
	.type	 GetMapHeaderFromConnection,function
	.thumb_func
GetMapHeaderFromConnection:
	push	{lr}
	ldrb	r2, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	add	r0, r2, #0
	bl	Overworld_GetMapHeaderByGroupAndId
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 GetMapHeaderFromConnection,.Lfe1-GetMapHeaderFromConnection
	.align	2, 0
	.globl	InitMap
	.type	 InitMap,function
	.thumb_func
InitMap:
	push	{lr}
	ldr	r0, .L4
	bl	InitMapLayoutData
	bl	RunOnLoadMapScript
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	gMapHeader
.Lfe2:
	.size	 InitMap,.Lfe2-InitMap
	.align	2, 0
	.globl	InitMapFromSavedGame
	.type	 InitMapFromSavedGame,function
	.thumb_func
InitMapFromSavedGame:
	push	{lr}
	ldr	r0, .L7
	bl	InitMapLayoutData
	bl	LoadSavedMapView
	bl	RunOnLoadMapScript
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gMapHeader
.Lfe3:
	.size	 InitMapFromSavedGame,.Lfe3-InitMapFromSavedGame
	.section .rodata
	.align	2, 0
.LC4:
	.ascii	"C:/WORK/POKeFRLG/src/pm_lgfr_ose/source/fieldmap.c\000"
	.align	2, 0
.LC6:
	.ascii	"VMap.Xsize * VMap.Ysize <= VIRTUAL_MAP_SIZE\000"
.text
	.align	2, 0
	.type	 InitMapLayoutData,function
	.thumb_func
InitMapLayoutData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r5, [r6]
	ldr	r0, .L12
	str	r0, [sp]
	ldr	r4, .L12+0x4
	ldr	r2, .L12+0x8
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuFastSet
	ldr	r2, .L12+0xc
	str	r4, [r2, #0x8]
	ldr	r1, [r5]
	add	r1, r1, #0xf
	str	r1, [r2]
	ldr	r0, [r5, #0x4]
	add	r0, r0, #0xe
	str	r0, [r2, #0x4]
	mul	r1, r1, r0
	mov	r0, #0xa0
	lsl	r0, r0, #0x6
	cmp	r1, r0
	ble	.L11	@cond_branch
	ldr	r0, .L12+0x10
	ldr	r2, .L12+0x14
	mov	r1, #0x9e
	mov	r3, #0x1
	bl	AGBAssert
.L11:
	ldr	r0, [r5, #0xc]
	ldrh	r1, [r5]
	ldrh	r2, [r5, #0x4]
	bl	InitBackupMapLayoutData
	add	r0, r6, #0
	bl	InitBackupMapLayoutConnections
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	0x3ff03ff
	.word	gBackupMapData
	.word	0x1001400
	.word	VMap
	.word	.LC4
	.word	.LC6
.Lfe4:
	.size	 InitMapLayoutData,.Lfe4-InitMapLayoutData
	.align	2, 0
	.type	 InitBackupMapLayoutData,function
	.thumb_func
InitBackupMapLayoutData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L20
	ldr	r4, [r0, #0x8]
	ldr	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, #0xe
	add	r4, r4, r0
	cmp	r2, #0
	beq	.L16	@cond_branch
	mov	r0, r8
	lsl	r6, r0, #0x1
	add	r5, r2, #0
	mov	r0, #0x1e
	add	r0, r0, r6
	mov	r9, r0
.L18:
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, r8
	bl	CpuSet
	add	r4, r4, r9
	add	r7, r7, r6
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L18	@cond_branch
.L16:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	VMap
.Lfe5:
	.size	 InitBackupMapLayoutData,.Lfe5-InitBackupMapLayoutData
	.align	2, 0
	.type	 InitBackupMapLayoutConnections,function
	.thumb_func
InitBackupMapLayoutConnections:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r2, .L38
	ldr	r0, .L38+0x4
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r6, #0xc]
	cmp	r0, #0
	beq	.L23	@cond_branch
	ldr	r1, [r0]
	ldr	r5, [r0, #0x4]
	cmp	r1, #0
	ble	.L23	@cond_branch
	add	r4, r2, #0
	add	r7, r1, #0
.L27:
	add	r0, r5, #0
	bl	GetMapHeaderFromConnection
	add	r1, r0, #0
	ldr	r2, [r5, #0x4]
	ldrb	r0, [r5]
	cmp	r0, #0x2
	beq	.L30	@cond_branch
	cmp	r0, #0x2
	bgt	.L35	@cond_branch
	cmp	r0, #0x1
	beq	.L29	@cond_branch
	b	.L26
.L39:
	.align	2, 0
.L38:
	.word	gMapConnectionFlags
	.word	sDummyConnectionFlags
.L35:
	cmp	r0, #0x3
	beq	.L31	@cond_branch
	cmp	r0, #0x4
	beq	.L32	@cond_branch
	b	.L26
.L29:
	add	r0, r6, #0
	bl	FillSouthConnection
	ldrb	r0, [r4]
	mov	r1, #0x1
	b	.L37
.L30:
	add	r0, r6, #0
	bl	FillNorthConnection
	ldrb	r0, [r4]
	mov	r1, #0x2
	b	.L37
.L31:
	add	r0, r6, #0
	bl	FillWestConnection
	ldrb	r0, [r4]
	mov	r1, #0x4
	b	.L37
.L32:
	add	r0, r6, #0
	bl	FillEastConnection
	ldrb	r0, [r4]
	mov	r1, #0x8
.L37:
	orr	r0, r0, r1
	strb	r0, [r4]
.L26:
	sub	r7, r7, #0x1
	add	r5, r5, #0xc
	cmp	r7, #0
	bne	.L27	@cond_branch
.L23:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 InitBackupMapLayoutConnections,.Lfe6-InitBackupMapLayoutConnections
	.align	2, 0
	.type	 FillConnection,function
	.thumb_func
FillConnection:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r5, [sp, #0x18]
	ldr	r4, [r2]
	ldr	r7, [r4]
	mov	r2, r7
	mul	r2, r2, r5
	add	r2, r2, r3
	lsl	r2, r2, #0x1
	ldr	r3, [r4, #0xc]
	add	r6, r3, r2
	ldr	r3, .L46
	ldr	r2, [r3]
	mul	r1, r1, r2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldr	r0, [r3, #0x8]
	add	r5, r0, r1
	ldr	r0, [sp, #0x20]
	cmp	r0, #0
	ble	.L42	@cond_branch
	add	r4, r0, #0
	ldr	r3, .L46+0x4
	mov	r8, r3
.L44:
	add	r0, r6, #0
	add	r1, r5, #0
	ldr	r2, [sp, #0x1c]
	mov	r3, r8
	and	r2, r2, r3
	bl	CpuSet
	ldr	r0, .L46
	ldr	r0, [r0]
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	lsl	r0, r7, #0x1
	add	r6, r6, r0
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L44	@cond_branch
.L42:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	VMap
	.word	0x1fffff
.Lfe7:
	.size	 FillConnection,.Lfe7-FillConnection
	.align	2, 0
	.type	 FillSouthConnection,function
	.thumb_func
FillSouthConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r3, r0, #0
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L49	@cond_branch
	ldr	r0, [r5]
	ldr	r4, [r0]
	add	r2, r2, #0x7
	ldr	r0, [r3]
	ldr	r0, [r0, #0x4]
	add	r7, r0, #0x7
	cmp	r2, #0
	bge	.L50	@cond_branch
	neg	r6, r2
	add	r2, r2, r4
	ldr	r0, .L56
	ldr	r3, [r0]
	cmp	r2, r3
	bge	.L51	@cond_branch
	add	r3, r2, #0
.L51:
	mov	r2, #0x0
	b	.L53
.L57:
	.align	2, 0
.L56:
	.word	VMap
.L50:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L58
	ldr	r1, [r1]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L53	@cond_branch
	add	r3, r4, #0
.L53:
	mov	r0, #0x0
	str	r0, [sp]
	str	r3, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	add	r0, r2, #0
	add	r1, r7, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	FillConnection
.L49:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	VMap
.Lfe8:
	.size	 FillSouthConnection,.Lfe8-FillSouthConnection
	.align	2, 0
	.type	 FillNorthConnection,function
	.thumb_func
FillNorthConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L61	@cond_branch
	ldr	r0, [r5]
	ldr	r4, [r0]
	ldr	r0, [r0, #0x4]
	add	r2, r2, #0x7
	sub	r7, r0, #0x7
	cmp	r2, #0
	bge	.L62	@cond_branch
	neg	r6, r2
	add	r2, r2, r4
	ldr	r0, .L68
	ldr	r3, [r0]
	cmp	r2, r3
	bge	.L63	@cond_branch
	add	r3, r2, #0
.L63:
	mov	r2, #0x0
	b	.L65
.L69:
	.align	2, 0
.L68:
	.word	VMap
.L62:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L70
	ldr	r1, [r1]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L65	@cond_branch
	add	r3, r4, #0
.L65:
	str	r7, [sp]
	str	r3, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	add	r0, r2, #0
	mov	r1, #0x0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	FillConnection
.L61:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	VMap
.Lfe9:
	.size	 FillNorthConnection,.Lfe9-FillNorthConnection
	.align	2, 0
	.type	 FillWestConnection,function
	.thumb_func
FillWestConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L73	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0]
	ldr	r4, [r0, #0x4]
	add	r2, r2, #0x7
	sub	r7, r1, #0x7
	cmp	r2, #0
	bge	.L74	@cond_branch
	neg	r6, r2
	add	r1, r2, r4
	ldr	r0, .L80
	ldr	r3, [r0, #0x4]
	cmp	r1, r3
	bge	.L75	@cond_branch
	add	r3, r1, #0
.L75:
	mov	r2, #0x0
	b	.L77
.L81:
	.align	2, 0
.L80:
	.word	VMap
.L74:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L82
	ldr	r1, [r1, #0x4]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L77	@cond_branch
	add	r3, r4, #0
.L77:
	str	r6, [sp]
	mov	r0, #0x7
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
	mov	r0, #0x0
	add	r1, r2, #0
	add	r2, r5, #0
	add	r3, r7, #0
	bl	FillConnection
.L73:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	VMap
.Lfe10:
	.size	 FillWestConnection,.Lfe10-FillWestConnection
	.align	2, 0
	.type	 FillEastConnection,function
	.thumb_func
FillEastConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r3, r0, #0
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L85	@cond_branch
	ldr	r0, [r5]
	ldr	r4, [r0, #0x4]
	ldr	r0, [r3]
	ldr	r0, [r0]
	add	r7, r0, #0x7
	add	r2, r2, #0x7
	cmp	r2, #0
	bge	.L86	@cond_branch
	neg	r6, r2
	add	r1, r2, r4
	ldr	r0, .L92
	ldr	r3, [r0, #0x4]
	cmp	r1, r3
	bge	.L87	@cond_branch
	add	r3, r1, #0
.L87:
	mov	r2, #0x0
	b	.L89
.L93:
	.align	2, 0
.L92:
	.word	VMap
.L86:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L94
	ldr	r1, [r1, #0x4]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L89	@cond_branch
	add	r3, r4, #0
.L89:
	str	r6, [sp]
	mov	r0, #0x8
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
	add	r0, r7, #0
	add	r1, r2, #0
	add	r2, r5, #0
	mov	r3, #0x0
	bl	FillConnection
.L85:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	VMap
.Lfe11:
	.size	 FillEastConnection,.Lfe11-FillEastConnection
	.align	2, 0
	.globl	MapGridGetElevationAt
	.type	 MapGridGetElevationAt,function
	.thumb_func
MapGridGetElevationAt:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	add	r7, r1, #0
	cmp	r2, #0
	blt	.L97	@cond_branch
	ldr	r1, .L101
	ldr	r3, [r1]
	cmp	r2, r3
	bge	.L97	@cond_branch
	cmp	r7, #0
	blt	.L97	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r7, r0
	bge	.L97	@cond_branch
	mov	r0, r3
	mul	r0, r0, r7
	add	r0, r2, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L98
.L102:
	.align	2, 0
.L101:
	.word	VMap
.L97:
	ldr	r0, .L103
	ldr	r6, [r0]
	sub	r0, r2, #0x7
	ldrb	r5, [r6, #0x18]
	lsl	r1, r5, #0x3
	add	r0, r0, r1
	add	r1, r5, #0
	bl	__modsi3
	add	r4, r0, #0
	sub	r0, r7, #0x7
	ldrb	r1, [r6, #0x19]
	lsl	r2, r1, #0x3
	add	r0, r0, r2
	bl	__modsi3
	mul	r0, r0, r5
	add	r4, r4, r0
	ldr	r0, [r6, #0x8]
	lsl	r4, r4, #0x1
	add	r4, r4, r0
	ldrh	r1, [r4]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r1, r1, r0
.L98:
	ldr	r0, .L103+0x4
	cmp	r1, r0
	beq	.L99	@cond_branch
	lsr	r0, r1, #0xc
	b	.L100
.L104:
	.align	2, 0
.L103:
	.word	gMapHeader
	.word	0x3ff
.L99:
	mov	r0, #0x0
.L100:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 MapGridGetElevationAt,.Lfe12-MapGridGetElevationAt
	.align	2, 0
	.globl	MapGridGetCollisionAt
	.type	 MapGridGetCollisionAt,function
	.thumb_func
MapGridGetCollisionAt:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	add	r7, r1, #0
	cmp	r2, #0
	blt	.L106	@cond_branch
	ldr	r1, .L110
	ldr	r3, [r1]
	cmp	r2, r3
	bge	.L106	@cond_branch
	cmp	r7, #0
	blt	.L106	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r7, r0
	bge	.L106	@cond_branch
	mov	r0, r3
	mul	r0, r0, r7
	add	r0, r2, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L107
.L111:
	.align	2, 0
.L110:
	.word	VMap
.L106:
	ldr	r0, .L112
	ldr	r6, [r0]
	sub	r0, r2, #0x7
	ldrb	r5, [r6, #0x18]
	lsl	r1, r5, #0x3
	add	r0, r0, r1
	add	r1, r5, #0
	bl	__modsi3
	add	r4, r0, #0
	sub	r0, r7, #0x7
	ldrb	r1, [r6, #0x19]
	lsl	r2, r1, #0x3
	add	r0, r0, r2
	bl	__modsi3
	mul	r0, r0, r5
	add	r4, r4, r0
	ldr	r0, [r6, #0x8]
	lsl	r4, r4, #0x1
	add	r4, r4, r0
	ldrh	r1, [r4]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r1, r1, r0
.L107:
	ldr	r0, .L112+0x4
	cmp	r1, r0
	beq	.L108	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	and	r1, r1, r0
	lsr	r0, r1, #0xa
	b	.L109
.L113:
	.align	2, 0
.L112:
	.word	gMapHeader
	.word	0x3ff
.L108:
	mov	r0, #0x1
.L109:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 MapGridGetCollisionAt,.Lfe13-MapGridGetCollisionAt
	.align	2, 0
	.globl	MapGridGetMetatileIdAt
	.type	 MapGridGetMetatileIdAt,function
	.thumb_func
MapGridGetMetatileIdAt:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r0
	mov	r9, r1
	cmp	r0, #0
	blt	.L115	@cond_branch
	ldr	r1, .L119
	ldr	r2, [r1]
	cmp	r8, r2
	bge	.L115	@cond_branch
	mov	r0, r9
	cmp	r0, #0
	blt	.L115	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r9, r0
	bge	.L115	@cond_branch
	mov	r0, r9
	mul	r0, r0, r2
	add	r0, r0, r8
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r7, [r0]
	b	.L116
.L120:
	.align	2, 0
.L119:
	.word	VMap
.L115:
	ldr	r0, .L121
	ldr	r6, [r0]
	mov	r0, r8
	sub	r0, r0, #0x7
	ldrb	r5, [r6, #0x18]
	lsl	r1, r5, #0x3
	add	r0, r0, r1
	add	r1, r5, #0
	bl	__modsi3
	add	r4, r0, #0
	mov	r0, r9
	sub	r0, r0, #0x7
	ldrb	r1, [r6, #0x19]
	lsl	r2, r1, #0x3
	add	r0, r0, r2
	bl	__modsi3
	mul	r0, r0, r5
	add	r4, r4, r0
	ldr	r0, [r6, #0x8]
	lsl	r4, r4, #0x1
	add	r4, r4, r0
	ldrh	r1, [r4]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	add	r7, r0, #0
	orr	r7, r7, r1
.L116:
	ldr	r0, .L121+0x4
	cmp	r7, r0
	beq	.L117	@cond_branch
	and	r7, r7, r0
	add	r0, r7, #0
	b	.L118
.L122:
	.align	2, 0
.L121:
	.word	gMapHeader
	.word	0x3ff
.L117:
	ldr	r0, .L123
	ldr	r6, [r0]
	mov	r0, r8
	sub	r0, r0, #0x7
	ldrb	r5, [r6, #0x18]
	lsl	r1, r5, #0x3
	add	r0, r0, r1
	add	r1, r5, #0
	bl	__modsi3
	add	r4, r0, #0
	mov	r0, r9
	sub	r0, r0, #0x7
	ldrb	r1, [r6, #0x19]
	lsl	r2, r1, #0x3
	add	r0, r0, r2
	bl	__modsi3
	mul	r0, r0, r5
	add	r4, r4, r0
	ldr	r0, [r6, #0x8]
	lsl	r4, r4, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r1, r2, #0
	orr	r0, r0, r1
	and	r0, r0, r7
.L118:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L124:
	.align	2, 0
.L123:
	.word	gMapHeader
.Lfe14:
	.size	 MapGridGetMetatileIdAt,.Lfe14-MapGridGetMetatileIdAt
	.align	2, 0
	.globl	ExtractMetatileAttribute
	.type	 ExtractMetatileAttribute,function
	.thumb_func
ExtractMetatileAttribute:
	push	{lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	cmp	r3, #0x7
	bhi	.L126	@cond_branch
	ldr	r1, .L128
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	ldr	r0, .L128+0x4
	add	r0, r3, r0
	ldrb	r0, [r0]
	lsr	r2, r2, r0
.L126:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L129:
	.align	2, 0
.L128:
	.word	sMetatileAttrMasks
	.word	sMetatileAttrShifts
.Lfe15:
	.size	 ExtractMetatileAttribute,.Lfe15-ExtractMetatileAttribute
	.align	2, 0
	.globl	MapGridGetMetatileAttributeAt
	.type	 MapGridGetMetatileAttributeAt,function
	.thumb_func
MapGridGetMetatileAttributeAt:
	push	{r4, lr}
	add	r4, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	MapGridGetMetatileIdAt
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L131
	ldr	r0, [r0]
	add	r2, r4, #0
	bl	GetAttributeByMetatileIdAndMapLayout
	pop	{r4}
	pop	{r1}
	bx	r1
.L132:
	.align	2, 0
.L131:
	.word	gMapHeader
.Lfe16:
	.size	 MapGridGetMetatileAttributeAt,.Lfe16-MapGridGetMetatileAttributeAt
	.align	2, 0
	.globl	MapGridGetMetatileBehaviorAt
	.type	 MapGridGetMetatileBehaviorAt,function
	.thumb_func
MapGridGetMetatileBehaviorAt:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x0
	bl	MapGridGetMetatileAttributeAt
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 MapGridGetMetatileBehaviorAt,.Lfe17-MapGridGetMetatileBehaviorAt
	.align	2, 0
	.globl	MapGridGetMetatileLayerTypeAt
	.type	 MapGridGetMetatileLayerTypeAt,function
	.thumb_func
MapGridGetMetatileLayerTypeAt:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x6
	bl	MapGridGetMetatileAttributeAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 MapGridGetMetatileLayerTypeAt,.Lfe18-MapGridGetMetatileLayerTypeAt
	.align	2, 0
	.globl	MapGridSetMetatileIdAt
	.type	 MapGridSetMetatileIdAt,function
	.thumb_func
MapGridSetMetatileIdAt:
	push	{r4, r5, lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	cmp	r3, #0
	blt	.L136	@cond_branch
	ldr	r2, .L137
	ldr	r4, [r2]
	cmp	r3, r4
	bge	.L136	@cond_branch
	cmp	r1, #0
	blt	.L136	@cond_branch
	ldr	r0, [r2, #0x4]
	cmp	r1, r0
	bge	.L136	@cond_branch
	mul	r1, r1, r4
	add	r1, r3, r1
	ldr	r0, [r2, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x8
	and	r2, r2, r0
	ldr	r0, .L137+0x4
	and	r0, r0, r5
	orr	r2, r2, r0
	strh	r2, [r1]
.L136:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L138:
	.align	2, 0
.L137:
	.word	VMap
	.word	0xfff
.Lfe19:
	.size	 MapGridSetMetatileIdAt,.Lfe19-MapGridSetMetatileIdAt
	.align	2, 0
	.globl	MapGridSetMetatileEntryAt
	.type	 MapGridSetMetatileEntryAt,function
	.thumb_func
MapGridSetMetatileEntryAt:
	push	{r4, r5, lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	cmp	r3, #0
	blt	.L140	@cond_branch
	ldr	r2, .L141
	ldr	r4, [r2]
	cmp	r3, r4
	bge	.L140	@cond_branch
	cmp	r1, #0
	blt	.L140	@cond_branch
	ldr	r0, [r2, #0x4]
	cmp	r1, r0
	bge	.L140	@cond_branch
	mov	r0, r4
	mul	r0, r0, r1
	add	r0, r3, r0
	ldr	r1, [r2, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r5, [r0]
.L140:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	VMap
.Lfe20:
	.size	 MapGridSetMetatileEntryAt,.Lfe20-MapGridSetMetatileEntryAt
	.align	2, 0
	.globl	MapGridSetMetatileImpassabilityAt
	.type	 MapGridSetMetatileImpassabilityAt,function
	.thumb_func
MapGridSetMetatileImpassabilityAt:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	add	r5, r2, #0
	cmp	r4, #0
	blt	.L144	@cond_branch
	ldr	r2, .L147
	ldr	r1, [r2]
	cmp	r4, r1
	bge	.L144	@cond_branch
	cmp	r3, #0
	blt	.L144	@cond_branch
	ldr	r0, [r2, #0x4]
	cmp	r3, r0
	bge	.L144	@cond_branch
	cmp	r5, #0
	beq	.L145	@cond_branch
	mov	r0, r1
	mul	r0, r0, r3
	add	r0, r4, r0
	ldr	r1, [r2, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r3, #0xc0
	lsl	r3, r3, #0x4
	add	r2, r3, #0
	orr	r1, r1, r2
	strh	r1, [r0]
	b	.L144
.L148:
	.align	2, 0
.L147:
	.word	VMap
.L145:
	mul	r1, r1, r3
	add	r1, r4, r1
	ldr	r0, [r2, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r2, [r1]
	ldr	r0, .L149
	and	r0, r0, r2
	strh	r0, [r1]
.L144:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	0xf3ff
.Lfe21:
	.size	 MapGridSetMetatileImpassabilityAt,.Lfe21-MapGridSetMetatileImpassabilityAt
	.align	2, 0
	.type	 GetAttributeByMetatileIdAndMapLayout,function
	.thumb_func
GetAttributeByMetatileIdAndMapLayout:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x10
	add	r5, r3, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r6, r2, #0
	ldr	r0, .L159
	cmp	r3, r0
	bhi	.L152	@cond_branch
	ldr	r0, [r4, #0x10]
	ldr	r1, [r0, #0x14]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r2, #0
	b	.L158
.L160:
	.align	2, 0
.L159:
	.word	0x27f
.L152:
	ldr	r0, .L161
	cmp	r3, r0
	bls	.L154	@cond_branch
	mov	r0, #0xff
	b	.L156
.L162:
	.align	2, 0
.L161:
	.word	0x3ff
.L154:
	ldr	r0, [r4, #0x14]
	ldr	r1, [r0, #0x14]
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r1, .L163
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r6, #0
.L158:
	bl	ExtractMetatileAttribute
.L156:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L164:
	.align	2, 0
.L163:
	.word	-0xa00
.Lfe22:
	.size	 GetAttributeByMetatileIdAndMapLayout,.Lfe22-GetAttributeByMetatileIdAndMapLayout
	.align	2, 0
	.globl	SaveMapView
	.type	 SaveMapView,function
	.thumb_func
SaveMapView:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L176
	ldr	r0, [r0]
	ldr	r1, .L176+0x4
	add	r4, r0, r1
	ldr	r0, .L176+0x8
	ldr	r0, [r0]
	mov	r8, r0
	ldr	r0, .L176+0xc
	ldr	r0, [r0]
	mov	r2, #0x0
	ldrsh	r6, [r0, r2]
	mov	r1, #0x2
	ldrsh	r0, [r0, r1]
	add	r1, r0, #0
	add	r1, r1, #0xe
	cmp	r0, r1
	bge	.L167	@cond_branch
	mov	ip, r1
	ldr	r2, .L176+0x10
	mov	r9, r2
	lsl	r7, r6, #0x1
.L169:
	add	r1, r6, #0
	add	r3, r1, #0
	add	r3, r3, #0xf
	add	r5, r0, #0x1
	cmp	r1, r3
	bge	.L168	@cond_branch
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	add	r2, r7, r0
	sub	r1, r3, r1
.L173:
	ldrh	r0, [r2]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L173	@cond_branch
.L168:
	add	r0, r5, #0
	cmp	r0, ip
	blt	.L169	@cond_branch
.L167:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	gSaveBlock2Ptr
	.word	0x898
	.word	VMap
	.word	gSaveBlock1Ptr
	.word	gBackupMapData
.Lfe23:
	.size	 SaveMapView,.Lfe23-SaveMapView
	.align	2, 0
	.type	 SavedMapViewIsEmpty,function
	.thumb_func
SavedMapViewIsEmpty:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r0, .L187
	ldr	r0, [r0]
	ldr	r4, .L187+0x4
	add	r3, r0, r4
	ldr	r4, .L187+0x8
.L182:
	lsl	r0, r1, #0x1
	add	r0, r3, r0
	ldrh	r0, [r0]
	orr	r2, r2, r0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, r4
	bls	.L182	@cond_branch
	cmp	r2, #0
	beq	.L184	@cond_branch
	mov	r0, #0x0
	b	.L186
.L188:
	.align	2, 0
.L187:
	.word	gSaveBlock2Ptr
	.word	0x898
	.word	0x1ff
.L184:
	mov	r0, #0x1
.L186:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 SavedMapViewIsEmpty,.Lfe24-SavedMapViewIsEmpty
	.align	2, 0
	.type	 ClearSavedMapView,function
	.thumb_func
ClearSavedMapView:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L190
	ldr	r1, [r0]
	ldr	r0, .L190+0x4
	add	r1, r1, r0
	ldr	r2, .L190+0x8
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L191:
	.align	2, 0
.L190:
	.word	gSaveBlock2Ptr
	.word	0x898
	.word	0x1000100
.Lfe25:
	.size	 ClearSavedMapView,.Lfe25-ClearSavedMapView
	.align	2, 0
	.type	 LoadSavedMapView,function
	.thumb_func
LoadSavedMapView:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L204
	ldr	r0, [r0]
	ldr	r1, .L204+0x4
	add	r4, r0, r1
	bl	SavedMapViewIsEmpty
	cmp	r0, #0
	bne	.L193	@cond_branch
	ldr	r0, .L204+0x8
	ldr	r0, [r0]
	mov	r8, r0
	ldr	r0, .L204+0xc
	ldr	r0, [r0]
	mov	r2, #0x0
	ldrsh	r6, [r0, r2]
	mov	r1, #0x2
	ldrsh	r0, [r0, r1]
	add	r1, r0, #0
	add	r1, r1, #0xe
	cmp	r0, r1
	bge	.L195	@cond_branch
	mov	ip, r1
	ldr	r2, .L204+0x10
	mov	r9, r2
	lsl	r7, r6, #0x1
.L197:
	add	r1, r6, #0
	add	r3, r1, #0
	add	r3, r3, #0xf
	add	r5, r0, #0x1
	cmp	r1, r3
	bge	.L196	@cond_branch
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	add	r2, r7, r0
	sub	r1, r3, r1
.L201:
	ldrh	r0, [r4]
	strh	r0, [r2]
	add	r4, r4, #0x2
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L201	@cond_branch
.L196:
	add	r0, r5, #0
	cmp	r0, ip
	blt	.L197	@cond_branch
.L195:
	bl	ClearSavedMapView
.L193:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L205:
	.align	2, 0
.L204:
	.word	gSaveBlock2Ptr
	.word	0x898
	.word	VMap
	.word	gSaveBlock1Ptr
	.word	gBackupMapData
.Lfe26:
	.size	 LoadSavedMapView,.Lfe26-LoadSavedMapView
	.align	2, 0
	.type	 MoveMapViewToBackup,function
	.thumb_func
MoveMapViewToBackup:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r2, r1, #0
	ldr	r0, .L226
	ldr	r0, [r0]
	ldr	r3, .L226+0x4
	add	r3, r0, r3
	str	r3, [sp, #0x4]
	ldr	r0, .L226+0x8
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r4, #0x0
	mov	r9, r4
	mov	r8, r4
	ldr	r0, .L226+0xc
	ldr	r0, [r0]
	mov	r3, #0x0
	ldrsh	r6, [r0, r3]
	str	r6, [sp, #0x8]
	mov	r4, #0x2
	ldrsh	r5, [r0, r4]
	mov	r7, #0xf
	mov	r6, #0xe
	mov	ip, r6
	cmp	r1, #0x2
	beq	.L208	@cond_branch
	cmp	r1, #0x2
	bgt	.L214	@cond_branch
	cmp	r1, #0x1
	beq	.L209	@cond_branch
	b	.L207
.L227:
	.align	2, 0
.L226:
	.word	gSaveBlock2Ptr
	.word	0x898
	.word	VMap
	.word	gSaveBlock1Ptr
.L214:
	cmp	r2, #0x3
	beq	.L210	@cond_branch
	cmp	r2, #0x4
	beq	.L211	@cond_branch
	b	.L207
.L208:
	add	r5, r5, #0x1
	mov	r0, #0xd
	mov	ip, r0
	b	.L207
.L209:
	mov	r1, #0x1
	mov	r8, r1
	mov	r3, #0xd
	mov	ip, r3
	b	.L207
.L210:
	ldr	r4, [sp, #0x8]
	add	r4, r4, #0x1
	str	r4, [sp, #0x8]
	b	.L225
.L211:
	mov	r6, #0x1
	mov	r9, r6
.L225:
	mov	r7, #0xe
.L207:
	mov	r1, #0x0
	cmp	r1, ip
	bge	.L216	@cond_branch
	ldr	r0, .L228
	mov	sl, r0
.L218:
	add	r4, r1, #0x1
	cmp	r7, #0
	beq	.L217	@cond_branch
	add	r0, r1, r5
	ldr	r3, [sp]
	mov	r2, r3
	mul	r2, r2, r0
	add	r1, r1, r8
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	add	r0, r0, r9
	ldr	r6, [sp, #0x8]
	add	r2, r6, r2
	add	r3, r7, #0
	lsl	r2, r2, #0x1
	add	r2, r2, sl
	lsl	r0, r0, #0x1
	ldr	r6, [sp, #0x4]
	add	r1, r0, r6
.L222:
	ldrh	r0, [r1]
	strh	r0, [r2]
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L222	@cond_branch
.L217:
	add	r1, r4, #0
	cmp	r1, ip
	blt	.L218	@cond_branch
.L216:
	bl	ClearSavedMapView
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L229:
	.align	2, 0
.L228:
	.word	gBackupMapData
.Lfe27:
	.size	 MoveMapViewToBackup,.Lfe27-MoveMapViewToBackup
	.align	2, 0
	.globl	GetMapBorderIdAt
	.type	 GetMapBorderIdAt,function
	.thumb_func
GetMapBorderIdAt:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	mov	r8, r1
	cmp	r7, #0
	blt	.L232	@cond_branch
	ldr	r1, .L244
	ldr	r2, [r1]
	cmp	r7, r2
	bge	.L232	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	blt	.L232	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r8, r0
	bge	.L232	@cond_branch
	mov	r0, r8
	mul	r0, r0, r2
	add	r0, r7, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L244+0x4
	cmp	r1, r0
	beq	.L243	@cond_branch
	b	.L231
.L245:
	.align	2, 0
.L244:
	.word	VMap
	.word	0x3ff
.L232:
	ldr	r0, .L246
	ldr	r6, [r0]
	sub	r0, r7, #0x7
	ldrb	r5, [r6, #0x18]
	lsl	r1, r5, #0x3
	add	r0, r0, r1
	add	r1, r5, #0
	bl	__modsi3
	add	r4, r0, #0
	mov	r0, r8
	sub	r0, r0, #0x7
	ldrb	r1, [r6, #0x19]
	lsl	r2, r1, #0x3
	add	r0, r0, r2
	bl	__modsi3
	mul	r0, r0, r5
	add	r4, r4, r0
	ldr	r0, [r6, #0x8]
	lsl	r4, r4, #0x1
	add	r4, r4, r0
	ldrh	r1, [r4]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r0, r0, r1
	ldr	r1, .L246+0x4
	cmp	r0, r1
	beq	.L243	@cond_branch
.L231:
	ldr	r1, .L246+0x8
	ldr	r0, [r1]
	sub	r0, r0, #0x8
	cmp	r7, r0
	blt	.L234	@cond_branch
	ldr	r0, .L246+0xc
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L243	@cond_branch
	mov	r0, #0x4
	b	.L242
.L247:
	.align	2, 0
.L246:
	.word	gMapHeader
	.word	0x3ff
	.word	VMap
	.word	gMapConnectionFlags
.L234:
	cmp	r7, #0x6
	bgt	.L236	@cond_branch
	ldr	r0, .L248
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L243	@cond_branch
	mov	r0, #0x3
	b	.L242
.L249:
	.align	2, 0
.L248:
	.word	gMapConnectionFlags
.L236:
	ldr	r0, [r1, #0x4]
	sub	r0, r0, #0x7
	cmp	r8, r0
	blt	.L238	@cond_branch
	ldr	r0, .L250
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L243	@cond_branch
	mov	r0, #0x1
	b	.L242
.L251:
	.align	2, 0
.L250:
	.word	gMapConnectionFlags
.L238:
	mov	r0, r8
	cmp	r0, #0x6
	bgt	.L240	@cond_branch
	ldr	r0, .L252
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L241	@cond_branch
.L243:
	mov	r0, #0x1
	neg	r0, r0
	b	.L242
.L253:
	.align	2, 0
.L252:
	.word	gMapConnectionFlags
.L241:
	mov	r0, #0x2
	b	.L242
.L240:
	mov	r0, #0x0
.L242:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 GetMapBorderIdAt,.Lfe28-GetMapBorderIdAt
	.align	2, 0
	.type	 GetPostCameraMoveMapBorderId,function
	.thumb_func
GetPostCameraMoveMapBorderId:
	push	{r4, lr}
	add	r3, r1, #0
	ldr	r1, .L255
	ldr	r1, [r1]
	mov	r4, #0x0
	ldrsh	r2, [r1, r4]
	add	r0, r0, #0x7
	add	r2, r2, r0
	mov	r0, #0x2
	ldrsh	r1, [r1, r0]
	add	r3, r3, #0x7
	add	r1, r1, r3
	add	r0, r2, #0
	bl	GetMapBorderIdAt
	pop	{r4}
	pop	{r1}
	bx	r1
.L256:
	.align	2, 0
.L255:
	.word	gSaveBlock1Ptr
.Lfe29:
	.size	 GetPostCameraMoveMapBorderId,.Lfe29-GetPostCameraMoveMapBorderId
	.align	2, 0
	.globl	CanCameraMoveInDirection
	.type	 CanCameraMoveInDirection,function
	.thumb_func
CanCameraMoveInDirection:
	push	{r4, r5, lr}
	ldr	r1, .L260
	ldr	r4, [r1]
	mov	r1, #0x0
	ldrsh	r3, [r4, r1]
	ldr	r2, .L260+0x4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldr	r1, [r1]
	add	r1, r1, #0x7
	add	r3, r3, r1
	mov	r5, #0x2
	ldrsh	r1, [r4, r5]
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r0, [r0]
	add	r0, r0, #0x7
	add	r1, r1, r0
	add	r0, r3, #0
	bl	GetMapBorderIdAt
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	beq	.L258	@cond_branch
	mov	r0, #0x1
	b	.L259
.L261:
	.align	2, 0
.L260:
	.word	gSaveBlock1Ptr
	.word	gDirectionToVectors
.L258:
	mov	r0, #0x0
.L259:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 CanCameraMoveInDirection,.Lfe30-CanCameraMoveInDirection
	.align	2, 0
	.type	 SetPositionFromConnection,function
	.thumb_func
SetPositionFromConnection:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	add	r6, r2, #0
	add	r7, r3, #0
	bl	GetMapHeaderFromConnection
	add	r3, r0, #0
	cmp	r4, #0x2
	beq	.L267	@cond_branch
	cmp	r4, #0x2
	bgt	.L270	@cond_branch
	cmp	r4, #0x1
	beq	.L266	@cond_branch
	b	.L263
.L270:
	cmp	r4, #0x3
	beq	.L265	@cond_branch
	cmp	r4, #0x4
	bne	.L263	@cond_branch
	ldr	r0, .L272
	ldr	r1, [r0]
	neg	r0, r6
	strh	r0, [r1]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1, #0x2]
	sub	r0, r0, r2
	b	.L271
.L273:
	.align	2, 0
.L272:
	.word	gSaveBlock1Ptr
.L265:
	ldr	r0, .L274
	ldr	r1, [r0]
	ldr	r0, [r3]
	ldr	r0, [r0]
	strh	r0, [r1]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1, #0x2]
	sub	r0, r0, r2
	b	.L271
.L275:
	.align	2, 0
.L274:
	.word	gSaveBlock1Ptr
.L266:
	ldr	r0, .L276
	ldr	r1, [r0]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1]
	sub	r0, r0, r2
	strh	r0, [r1]
	neg	r0, r7
	b	.L271
.L277:
	.align	2, 0
.L276:
	.word	gSaveBlock1Ptr
.L267:
	ldr	r0, .L278
	ldr	r1, [r0]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1]
	sub	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x4]
.L271:
	strh	r0, [r1, #0x2]
.L263:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	gSaveBlock1Ptr
.Lfe31:
	.size	 SetPositionFromConnection,.Lfe31-SetPositionFromConnection
	.align	2, 0
	.globl	CameraMove
	.type	 CameraMove,function
	.thumb_func
CameraMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	mov	r9, r1
	ldr	r1, .L283
	ldrb	r0, [r1]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r0
	ldr	r2, .L283
	strb	r1, [r2]
	mov	r0, sl
	mov	r1, r9
	bl	GetPostCameraMoveMapBorderId
	add	r7, r0, #0
	add	r0, r7, #0x1
	cmp	r0, #0x1
	bhi	.L281	@cond_branch
	ldr	r0, .L283+0x4
	ldr	r1, [r0]
	ldrh	r0, [r1]
	add	r0, r0, sl
	strh	r0, [r1]
	ldrh	r0, [r1, #0x2]
	add	r0, r0, r9
	strh	r0, [r1, #0x2]
	b	.L282
.L284:
	.align	2, 0
.L283:
	.word	gCamera
	.word	gSaveBlock1Ptr
.L281:
	bl	SaveMapView
	ldr	r1, .L285
	ldr	r0, [r1]
	mov	r2, #0x0
	ldrsh	r5, [r0, r2]
	mov	r1, #0x2
	ldrsh	r6, [r0, r1]
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r6, #0
	bl	GetIncomingConnection
	add	r4, r0, #0
	add	r1, r7, #0
	mov	r2, sl
	mov	r3, r9
	bl	SetPositionFromConnection
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x9]
	bl	LoadMapFromCameraTransition
	ldr	r1, .L285+0x4
	ldrb	r0, [r1]
	mov	r1, #0x1
	orr	r0, r0, r1
	ldr	r2, .L285+0x4
	strb	r0, [r2]
	ldr	r0, .L285
	ldr	r1, [r0]
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	sub	r5, r5, r0
	ldr	r0, .L285+0x4
	str	r5, [r0, #0x4]
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	sub	r6, r6, r0
	ldr	r0, .L285+0x4
	str	r6, [r0, #0x8]
	ldrh	r0, [r1]
	add	r0, r0, sl
	strh	r0, [r1]
	ldrh	r0, [r1, #0x2]
	add	r0, r0, r9
	strh	r0, [r1, #0x2]
	mov	r0, r8
	bl	MoveMapViewToBackup
.L282:
	ldr	r0, .L285+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L286:
	.align	2, 0
.L285:
	.word	gSaveBlock1Ptr
	.word	gCamera
.Lfe32:
	.size	 CameraMove,.Lfe32-CameraMove
	.align	2, 0
	.type	 GetIncomingConnection,function
	.thumb_func
GetIncomingConnection:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r1
	mov	r8, r2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L295
	ldr	r0, [r0, #0xc]
	ldr	r7, [r0]
	ldr	r4, [r0, #0x4]
	mov	r5, #0x0
	cmp	r5, r7
	bge	.L289	@cond_branch
.L291:
	ldrb	r0, [r4]
	cmp	r0, r6
	bne	.L290	@cond_branch
	add	r0, r6, #0
	mov	r1, r9
	mov	r2, r8
	add	r3, r4, #0
	bl	IsPosInIncomingConnectingMap
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L290	@cond_branch
	add	r0, r4, #0
	b	.L294
.L296:
	.align	2, 0
.L295:
	.word	gMapHeader
.L290:
	add	r5, r5, #0x1
	add	r4, r4, #0xc
	cmp	r5, r7
	blt	.L291	@cond_branch
.L289:
	mov	r0, #0x0
.L294:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 GetIncomingConnection,.Lfe33-GetIncomingConnection
	.align	2, 0
	.type	 IsPosInIncomingConnectingMap,function
	.thumb_func
IsPosInIncomingConnectingMap:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r1, #0
	mov	r8, r2
	add	r5, r3, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	add	r0, r5, #0
	bl	GetMapHeaderFromConnection
	add	r2, r0, #0
	cmp	r4, #0x1
	blt	.L298	@cond_branch
	cmp	r4, #0x2
	bgt	.L300	@cond_branch
	ldr	r0, .L307
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r0, [r2]
	ldr	r2, [r0]
	ldr	r3, [r5, #0x4]
	add	r0, r7, #0
	b	.L306
.L308:
	.align	2, 0
.L307:
	.word	gMapHeader
.L300:
	cmp	r6, #0x4
	bgt	.L298	@cond_branch
	ldr	r0, .L309
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	ldr	r0, [r2]
	ldr	r2, [r0, #0x4]
	ldr	r3, [r5, #0x4]
	mov	r0, r8
.L306:
	bl	IsCoordInIncomingConnectingMap
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L305
.L310:
	.align	2, 0
.L309:
	.word	gMapHeader
.L298:
	mov	r0, #0x0
.L305:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 IsPosInIncomingConnectingMap,.Lfe34-IsPosInIncomingConnectingMap
	.align	2, 0
	.type	 IsCoordInIncomingConnectingMap,function
	.thumb_func
IsCoordInIncomingConnectingMap:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r2, #0
	add	r2, r3, #0
	cmp	r3, #0
	bge	.L312	@cond_branch
	mov	r3, #0x0
.L312:
	add	r2, r0, r2
	cmp	r2, r1
	bge	.L313	@cond_branch
	add	r1, r2, #0
.L313:
	cmp	r3, r4
	bgt	.L314	@cond_branch
	cmp	r4, r1
	bgt	.L314	@cond_branch
	mov	r0, #0x1
	b	.L315
.L314:
	mov	r0, #0x0
.L315:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 IsCoordInIncomingConnectingMap,.Lfe35-IsCoordInIncomingConnectingMap
	.align	2, 0
	.type	 IsCoordInConnectingMap,function
	.thumb_func
IsCoordInConnectingMap:
	push	{lr}
	cmp	r0, #0
	blt	.L317	@cond_branch
	cmp	r0, r1
	bge	.L317	@cond_branch
	mov	r0, #0x1
	b	.L318
.L317:
	mov	r0, #0x0
.L318:
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 IsCoordInConnectingMap,.Lfe36-IsCoordInConnectingMap
	.align	2, 0
	.type	 IsPosInConnectingMap,function
	.thumb_func
IsPosInConnectingMap:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	bl	GetMapHeaderFromConnection
	add	r1, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0x1
	blt	.L320	@cond_branch
	cmp	r0, #0x2
	bgt	.L322	@cond_branch
	ldr	r0, [r4, #0x4]
	sub	r0, r5, r0
	ldr	r1, [r1]
	ldr	r1, [r1]
	bl	IsCoordInConnectingMap
	b	.L327
.L322:
	cmp	r0, #0x4
	bgt	.L320	@cond_branch
	ldr	r0, [r4, #0x4]
	sub	r0, r6, r0
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	bl	IsCoordInConnectingMap
	b	.L327
.L320:
	mov	r0, #0x0
.L327:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 IsPosInConnectingMap,.Lfe37-IsPosInConnectingMap
	.align	2, 0
	.globl	GetMapConnectionAtPos
	.type	 GetMapConnectionAtPos,function
	.thumb_func
GetMapConnectionAtPos:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L344
	ldr	r0, [r2, #0xc]
	cmp	r0, #0
	bne	.L329	@cond_branch
	b	.L330
.L345:
	.align	2, 0
.L344:
	.word	gMapHeader
.L343:
	add	r0, r4, #0
	b	.L342
.L329:
	ldr	r7, [r0]
	ldr	r4, [r0, #0x4]
	mov	r6, #0x0
	cmp	r6, r7
	bge	.L330	@cond_branch
	lsl	r0, r1, #0x10
	asr	r5, r0, #0x10
	mov	r9, r2
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	sl, r0
.L334:
	ldrb	r1, [r4]
	add	r3, r1, #0
	sub	r0, r1, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L333	@cond_branch
	cmp	r1, #0x2
	bne	.L337	@cond_branch
	cmp	r5, #0x6
	bgt	.L333	@cond_branch
.L337:
	cmp	r1, #0x1
	bne	.L338	@cond_branch
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	add	r0, r0, #0x7
	cmp	r5, r0
	blt	.L333	@cond_branch
.L338:
	mov	r0, r8
	lsl	r2, r0, #0x10
	cmp	r1, #0x3
	bne	.L339	@cond_branch
	mov	r1, sl
	cmp	r1, #0x6
	bgt	.L333	@cond_branch
.L339:
	cmp	r3, #0x4
	bne	.L335	@cond_branch
	asr	r1, r2, #0x10
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r0, [r0]
	add	r0, r0, #0x7
	cmp	r1, r0
	blt	.L333	@cond_branch
.L335:
	asr	r1, r2, #0x10
	sub	r1, r1, #0x7
	add	r0, r4, #0
	sub	r2, r5, #0x7
	bl	IsPosInConnectingMap
	cmp	r0, #0x1
	beq	.L343	@cond_branch
.L333:
	add	r6, r6, #0x1
	add	r4, r4, #0xc
	cmp	r6, r7
	blt	.L334	@cond_branch
.L330:
	mov	r0, #0x0
.L342:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 GetMapConnectionAtPos,.Lfe38-GetMapConnectionAtPos
	.align	2, 0
	.globl	SetCameraFocusCoords
	.type	 SetCameraFocusCoords,function
	.thumb_func
SetCameraFocusCoords:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L347
	ldr	r2, [r2]
	sub	r0, r0, #0x7
	strh	r0, [r2]
	sub	r1, r1, #0x7
	strh	r1, [r2, #0x2]
	bx	lr
.L348:
	.align	2, 0
.L347:
	.word	gSaveBlock1Ptr
.Lfe39:
	.size	 SetCameraFocusCoords,.Lfe39-SetCameraFocusCoords
	.align	2, 0
	.globl	GetCameraFocusCoords
	.type	 GetCameraFocusCoords,function
	.thumb_func
GetCameraFocusCoords:
	ldr	r2, .L350
	ldr	r3, [r2]
	ldrh	r2, [r3]
	add	r2, r2, #0x7
	strh	r2, [r0]
	ldrh	r0, [r3, #0x2]
	add	r0, r0, #0x7
	strh	r0, [r1]
	bx	lr
.L351:
	.align	2, 0
.L350:
	.word	gSaveBlock1Ptr
.Lfe40:
	.size	 GetCameraFocusCoords,.Lfe40-GetCameraFocusCoords
	.align	2, 0
	.type	 SetCameraCoords,function
	.thumb_func
SetCameraCoords:
	ldr	r2, .L353
	ldr	r2, [r2]
	strh	r0, [r2]
	strh	r1, [r2, #0x2]
	bx	lr
.L354:
	.align	2, 0
.L353:
	.word	gSaveBlock1Ptr
.Lfe41:
	.size	 SetCameraCoords,.Lfe41-SetCameraCoords
	.align	2, 0
	.globl	GetCameraCoords
	.type	 GetCameraCoords,function
	.thumb_func
GetCameraCoords:
	ldr	r2, .L356
	ldr	r3, [r2]
	ldrh	r2, [r3]
	strh	r2, [r0]
	ldrh	r0, [r3, #0x2]
	strh	r0, [r1]
	bx	lr
.L357:
	.align	2, 0
.L356:
	.word	gSaveBlock1Ptr
.Lfe42:
	.size	 GetCameraCoords,.Lfe42-GetCameraCoords
	.align	2, 0
	.type	 CopyTilesetToVram,function
	.thumb_func
CopyTilesetToVram:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r6, r4, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	add	r7, r5, #0
	cmp	r3, #0
	beq	.L359	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L360	@cond_branch
	ldr	r1, [r3, #0x4]
	lsl	r2, r4, #0x15
	lsr	r2, r2, #0x10
	mov	r0, #0x2
	add	r3, r5, #0
	bl	LoadBgTiles
	b	.L359
.L360:
	ldr	r1, [r3, #0x4]
	lsl	r2, r6, #0x5
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	add	r3, r7, #0
	bl	DecompressAndCopyTileDataToVram2
.L359:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 CopyTilesetToVram,.Lfe43-CopyTilesetToVram
	.align	2, 0
	.type	 CopyTilesetToVramUsingHeap,function
	.thumb_func
CopyTilesetToVramUsingHeap:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r6, r4, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	add	r7, r5, #0
	cmp	r3, #0
	beq	.L363	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L364	@cond_branch
	ldr	r1, [r3, #0x4]
	lsl	r2, r4, #0x15
	lsr	r2, r2, #0x10
	mov	r0, #0x2
	add	r3, r5, #0
	bl	LoadBgTiles
	b	.L363
.L364:
	ldr	r1, [r3, #0x4]
	lsl	r2, r6, #0x5
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	add	r3, r7, #0
	bl	DecompressAndLoadBgGfxUsingHeap2
.L363:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 CopyTilesetToVramUsingHeap,.Lfe44-CopyTilesetToVramUsingHeap
	.align	2, 0
	.type	 ApplyGlobalTintToPaletteEntries,function
	.thumb_func
ApplyGlobalTintToPaletteEntries:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r0, .L375
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L369	@cond_branch
	cmp	r0, #0x1
	ble	.L366	@cond_branch
	cmp	r0, #0x2
	beq	.L370	@cond_branch
	cmp	r0, #0x3
	beq	.L371	@cond_branch
	b	.L366
.L376:
	.align	2, 0
.L375:
	.word	gGlobalFieldTintMode
.L369:
	lsl	r4, r4, #0x1
	ldr	r0, .L377
	add	r0, r4, r0
	add	r1, r5, #0
	bl	TintPalette_GrayScale
	b	.L367
.L378:
	.align	2, 0
.L377:
	.word	gPlttBufferUnfaded
.L370:
	lsl	r4, r4, #0x1
	ldr	r0, .L379
	add	r0, r4, r0
	add	r1, r5, #0
	bl	TintPalette_SepiaTone
	b	.L367
.L380:
	.align	2, 0
.L379:
	.word	gPlttBufferUnfaded
.L371:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	QuestLog_BackUpPalette
	lsl	r4, r4, #0x1
	ldr	r0, .L381
	add	r0, r4, r0
	add	r1, r5, #0
	bl	TintPalette_GrayScale
.L367:
	ldr	r0, .L381
	add	r0, r4, r0
	ldr	r1, .L381+0x4
	add	r1, r4, r1
	add	r2, r5, #0
	bl	CpuSet
.L366:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe45:
	.size	 ApplyGlobalTintToPaletteEntries,.Lfe45-ApplyGlobalTintToPaletteEntries
	.align	2, 0
	.globl	ApplyGlobalTintToPaletteSlot
	.type	 ApplyGlobalTintToPaletteSlot,function
	.thumb_func
ApplyGlobalTintToPaletteSlot:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r0, .L392
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L386	@cond_branch
	cmp	r0, #0x1
	ble	.L383	@cond_branch
	cmp	r0, #0x2
	beq	.L387	@cond_branch
	cmp	r0, #0x3
	beq	.L388	@cond_branch
	b	.L383
.L393:
	.align	2, 0
.L392:
	.word	gGlobalFieldTintMode
.L386:
	lsl	r4, r4, #0x5
	ldr	r0, .L394
	add	r0, r4, r0
	lsl	r1, r6, #0x4
	bl	TintPalette_GrayScale
	b	.L384
.L395:
	.align	2, 0
.L394:
	.word	gPlttBufferUnfaded
.L387:
	lsl	r4, r4, #0x5
	ldr	r0, .L396
	add	r0, r4, r0
	lsl	r1, r6, #0x4
	bl	TintPalette_SepiaTone
	b	.L384
.L397:
	.align	2, 0
.L396:
	.word	gPlttBufferUnfaded
.L388:
	lsl	r0, r4, #0x4
	lsl	r5, r6, #0x4
	add	r1, r5, #0
	bl	QuestLog_BackUpPalette
	lsl	r4, r4, #0x5
	ldr	r0, .L398
	add	r0, r4, r0
	add	r1, r5, #0
	bl	TintPalette_GrayScale
.L384:
	ldr	r0, .L398
	add	r0, r4, r0
	ldr	r1, .L398+0x4
	add	r1, r4, r1
	lsl	r2, r6, #0x3
	bl	CpuFastSet
.L383:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L399:
	.align	2, 0
.L398:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe46:
	.size	 ApplyGlobalTintToPaletteSlot,.Lfe46-ApplyGlobalTintToPaletteSlot
	.align	2, 0
	.type	 LoadTilesetPalette,function
	.thumb_func
LoadTilesetPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r8, r5
	lsl	r6, r2, #0x10
	lsr	r7, r6, #0x10
	add	r2, r7, #0
	mov	r1, #0x0
	mov	r0, sp
	strh	r1, [r0]
	cmp	r4, #0
	beq	.L401	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L402	@cond_branch
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r0, [r4, #0x8]
	add	r0, r0, #0x2
	add	r5, r5, #0x1
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	sub	r4, r7, #0x2
	lsl	r2, r4, #0x10
	lsr	r2, r2, #0x10
	add	r1, r5, #0
	bl	LoadPalette
	lsl	r4, r4, #0xf
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	ApplyGlobalTintToPaletteEntries
	b	.L401
.L402:
	cmp	r0, #0x1
	bne	.L404	@cond_branch
	ldr	r0, [r4, #0x8]
	add	r0, r0, #0xe0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	LoadPalette
	lsr	r1, r6, #0x11
	add	r0, r5, #0
	bl	ApplyGlobalTintToPaletteEntries
	b	.L401
.L404:
	ldr	r0, [r4, #0x8]
	mov	r1, r8
	bl	LoadCompressedPalette
	lsr	r1, r6, #0x11
	mov	r0, r8
	bl	ApplyGlobalTintToPaletteEntries
.L401:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 LoadTilesetPalette,.Lfe47-LoadTilesetPalette
	.align	2, 0
	.globl	CopyPrimaryTilesetToVram
	.type	 CopyPrimaryTilesetToVram,function
	.thumb_func
CopyPrimaryTilesetToVram:
	push	{lr}
	ldr	r0, [r0, #0x10]
	mov	r1, #0xa0
	lsl	r1, r1, #0x2
	mov	r2, #0x0
	bl	CopyTilesetToVram
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 CopyPrimaryTilesetToVram,.Lfe48-CopyPrimaryTilesetToVram
	.align	2, 0
	.globl	CopySecondaryTilesetToVram
	.type	 CopySecondaryTilesetToVram,function
	.thumb_func
CopySecondaryTilesetToVram:
	push	{lr}
	ldr	r0, [r0, #0x14]
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	mov	r2, #0xa0
	lsl	r2, r2, #0x2
	bl	CopyTilesetToVram
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 CopySecondaryTilesetToVram,.Lfe49-CopySecondaryTilesetToVram
	.align	2, 0
	.globl	CopySecondaryTilesetToVramUsingHeap
	.type	 CopySecondaryTilesetToVramUsingHeap,function
	.thumb_func
CopySecondaryTilesetToVramUsingHeap:
	push	{lr}
	ldr	r0, [r0, #0x14]
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	mov	r2, #0xa0
	lsl	r2, r2, #0x2
	bl	CopyTilesetToVramUsingHeap
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 CopySecondaryTilesetToVramUsingHeap,.Lfe50-CopySecondaryTilesetToVramUsingHeap
	.align	2, 0
	.type	 LoadPrimaryTilesetPalette,function
	.thumb_func
LoadPrimaryTilesetPalette:
	push	{lr}
	ldr	r0, [r0, #0x10]
	mov	r1, #0x0
	mov	r2, #0xe0
	bl	LoadTilesetPalette
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 LoadPrimaryTilesetPalette,.Lfe51-LoadPrimaryTilesetPalette
	.align	2, 0
	.globl	LoadSecondaryTilesetPalette
	.type	 LoadSecondaryTilesetPalette,function
	.thumb_func
LoadSecondaryTilesetPalette:
	push	{lr}
	ldr	r0, [r0, #0x14]
	mov	r1, #0x70
	mov	r2, #0xc0
	bl	LoadTilesetPalette
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 LoadSecondaryTilesetPalette,.Lfe52-LoadSecondaryTilesetPalette
	.align	2, 0
	.globl	CopyMapTilesetsToVram
	.type	 CopyMapTilesetsToVram,function
	.thumb_func
CopyMapTilesetsToVram:
	push	{r4, r5, lr}
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L412	@cond_branch
	ldr	r0, [r5, #0x10]
	mov	r4, #0xa0
	lsl	r4, r4, #0x2
	add	r1, r4, #0
	mov	r2, #0x0
	bl	CopyTilesetToVramUsingHeap
	ldr	r0, [r5, #0x14]
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	add	r2, r4, #0
	bl	CopyTilesetToVramUsingHeap
.L412:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 CopyMapTilesetsToVram,.Lfe53-CopyMapTilesetsToVram
	.align	2, 0
	.globl	LoadMapTilesetPalettes
	.type	 LoadMapTilesetPalettes,function
	.thumb_func
LoadMapTilesetPalettes:
	push	{r4, lr}
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L414	@cond_branch
	bl	LoadPrimaryTilesetPalette
	add	r0, r4, #0
	bl	LoadSecondaryTilesetPalette
.L414:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 LoadMapTilesetPalettes,.Lfe54-LoadMapTilesetPalettes
	.comm	VMap, 12	@ 12
.text
	.align	2, 0 @ Don't pad with nop

