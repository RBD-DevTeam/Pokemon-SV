@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sFrenzyPlantRootData,object
	.size	 sFrenzyPlantRootData,8
sFrenzyPlantRootData:
	.short	0x0
	.space	6
	.section .rodata
	.type	 sUnused,object
sUnused:
	.byte	0x2
	.byte	0x4
	.byte	0x1
	.byte	0x3
	.size	 sUnused,4
	.align	2, 0
	.type	 sPowderParticlesAnimCmds,object
sPowderParticlesAnimCmds:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x6
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xa
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0xe
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sPowderParticlesAnimCmds,36
	.align	2, 0
	.type	 sPowderParticlesAnimTable,object
sPowderParticlesAnimTable:
	.word	sPowderParticlesAnimCmds
	.size	 sPowderParticlesAnimTable,4
	.globl	gSleepPowderParticleSpriteTemplate
	.align	2, 0
	.type	 gSleepPowderParticleSpriteTemplate,object
	.size	 gSleepPowderParticleSpriteTemplate,24
gSleepPowderParticleSpriteTemplate:
	.short	0x2753
	.short	0x2753
	.word	gOamData_AffineOff_ObjNormal_8x16
	.word	sPowderParticlesAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowderParticle
	.globl	gStunSporeParticleSpriteTemplate
	.align	2, 0
	.type	 gStunSporeParticleSpriteTemplate,object
	.size	 gStunSporeParticleSpriteTemplate,24
gStunSporeParticleSpriteTemplate:
	.short	0x2754
	.short	0x2754
	.word	gOamData_AffineOff_ObjNormal_8x16
	.word	sPowderParticlesAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowderParticle
	.globl	gPoisonPowderParticleSpriteTemplate
	.align	2, 0
	.type	 gPoisonPowderParticleSpriteTemplate,object
	.size	 gPoisonPowderParticleSpriteTemplate,24
gPoisonPowderParticleSpriteTemplate:
	.short	0x2751
	.short	0x2751
	.word	gOamData_AffineOff_ObjNormal_8x16
	.word	sPowderParticlesAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowderParticle
	.align	2, 0
	.type	 sSolarBeamBigOrbAnimCmds1,object
sSolarBeamBigOrbAnimCmds1:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSolarBeamBigOrbAnimCmds1,8
	.align	2, 0
	.type	 sSolarBeamBigOrbAnimCmds2,object
sSolarBeamBigOrbAnimCmds2:
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSolarBeamBigOrbAnimCmds2,8
	.align	2, 0
	.type	 sSolarBeamBigOrbAnimCmds3,object
sSolarBeamBigOrbAnimCmds3:
	.short	0x2
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSolarBeamBigOrbAnimCmds3,8
	.align	2, 0
	.type	 sSolarBeamBigOrbAnimCmds4,object
sSolarBeamBigOrbAnimCmds4:
	.short	0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSolarBeamBigOrbAnimCmds4,8
	.align	2, 0
	.type	 sSolarBeamBigOrbAnimCmds5,object
sSolarBeamBigOrbAnimCmds5:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSolarBeamBigOrbAnimCmds5,8
	.align	2, 0
	.type	 sSolarBeamBigOrbAnimCmds6,object
sSolarBeamBigOrbAnimCmds6:
	.short	0x5
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSolarBeamBigOrbAnimCmds6,8
	.align	2, 0
	.type	 sSolarBeamBigOrbAnimCmds7,object
sSolarBeamBigOrbAnimCmds7:
	.short	0x6
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSolarBeamBigOrbAnimCmds7,8
	.align	2, 0
	.type	 sSolarBeamSmallOrbAnimCms,object
sSolarBeamSmallOrbAnimCms:
	.short	0x7
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSolarBeamSmallOrbAnimCms,8
	.align	2, 0
	.type	 sPowerAbsorptionOrbAnimCmds,object
sPowerAbsorptionOrbAnimCmds:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sPowerAbsorptionOrbAnimCmds,8
	.align	2, 0
	.type	 sSolarBeamBigOrbAnimTable,object
sSolarBeamBigOrbAnimTable:
	.word	sSolarBeamBigOrbAnimCmds1
	.word	sSolarBeamBigOrbAnimCmds2
	.word	sSolarBeamBigOrbAnimCmds3
	.word	sSolarBeamBigOrbAnimCmds4
	.word	sSolarBeamBigOrbAnimCmds5
	.word	sSolarBeamBigOrbAnimCmds6
	.word	sSolarBeamBigOrbAnimCmds7
	.size	 sSolarBeamBigOrbAnimTable,28
	.align	2, 0
	.type	 sSolarBeamSmallOrbAnimTable,object
sSolarBeamSmallOrbAnimTable:
	.word	sSolarBeamSmallOrbAnimCms
	.size	 sSolarBeamSmallOrbAnimTable,4
	.align	2, 0
	.type	 sPowerAbsorptionOrbAnimTable,object
sPowerAbsorptionOrbAnimTable:
	.word	sPowerAbsorptionOrbAnimCmds
	.size	 sPowerAbsorptionOrbAnimTable,4
	.align	2, 0
	.type	 sPowerAbsorptionOrbAffineAnimCmds,object
sPowerAbsorptionOrbAffineAnimCmds:
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sPowerAbsorptionOrbAffineAnimCmds,16
	.align	2, 0
	.type	 sPowerAbsorptionOrbAffineAnimTable,object
sPowerAbsorptionOrbAffineAnimTable:
	.word	sPowerAbsorptionOrbAffineAnimCmds
	.size	 sPowerAbsorptionOrbAffineAnimTable,4
	.globl	gPowerAbsorptionOrbSpriteTemplate
	.align	2, 0
	.type	 gPowerAbsorptionOrbSpriteTemplate,object
	.size	 gPowerAbsorptionOrbSpriteTemplate,24
gPowerAbsorptionOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineNormal_ObjBlend_16x16
	.word	sPowerAbsorptionOrbAnimTable
	.word	0x0
	.word	sPowerAbsorptionOrbAffineAnimTable
	.word	AnimPowerAbsorptionOrb
	.globl	gSolarBeamBigOrbSpriteTemplate
	.align	2, 0
	.type	 gSolarBeamBigOrbSpriteTemplate,object
	.size	 gSolarBeamBigOrbSpriteTemplate,24
gSolarBeamBigOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sSolarBeamBigOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSolarBeamBigOrb
	.globl	gSolarBeamSmallOrbSpriteTemplate
	.align	2, 0
	.type	 gSolarBeamSmallOrbSpriteTemplate,object
	.size	 gSolarBeamSmallOrbSpriteTemplate,24
gSolarBeamSmallOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sSolarBeamSmallOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSolarBeamSmallOrb
	.align	2, 0
	.type	 sStockpileAbsorptionOrbAffineCmds,object
sStockpileAbsorptionOrbAffineCmds:
	.short	0x140
	.short	0x140
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0xe
	.short	-0xe
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sStockpileAbsorptionOrbAffineCmds,24
	.align	2, 0
	.type	 sStockpileAbsorptionOrbAffineAnimTable,object
sStockpileAbsorptionOrbAffineAnimTable:
	.word	sStockpileAbsorptionOrbAffineCmds
	.size	 sStockpileAbsorptionOrbAffineAnimTable,4
	.globl	gStockpileAbsorptionOrbSpriteTemplate
	.align	2, 0
	.type	 gStockpileAbsorptionOrbSpriteTemplate,object
	.size	 gStockpileAbsorptionOrbSpriteTemplate,24
gStockpileAbsorptionOrbSpriteTemplate:
	.short	0x27fb
	.short	0x27fb
	.word	gOamData_AffineDouble_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sStockpileAbsorptionOrbAffineAnimTable
	.word	AnimPowerAbsorptionOrb
	.align	2, 0
	.type	 sAbsorptionOrbAffineAnimCmds,object
sAbsorptionOrbAffineAnimCmds:
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAbsorptionOrbAffineAnimCmds,16
	.align	2, 0
	.type	 sAbsorptionOrbAffineAnimTable,object
sAbsorptionOrbAffineAnimTable:
	.word	sAbsorptionOrbAffineAnimCmds
	.size	 sAbsorptionOrbAffineAnimTable,4
	.globl	gAbsorptionOrbSpriteTemplate
	.align	2, 0
	.type	 gAbsorptionOrbSpriteTemplate,object
	.size	 gAbsorptionOrbSpriteTemplate,24
gAbsorptionOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineNormal_ObjBlend_16x16
	.word	sPowerAbsorptionOrbAnimTable
	.word	0x0
	.word	sAbsorptionOrbAffineAnimTable
	.word	AnimAbsorptionOrb
	.globl	gHyperBeamOrbSpriteTemplate
	.align	2, 0
	.type	 gHyperBeamOrbSpriteTemplate,object
	.size	 gHyperBeamOrbSpriteTemplate,24
gHyperBeamOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sSolarBeamBigOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimHyperBeamOrb
	.align	2, 0
	.type	 sLeechSeedAnimCmds1,object
sLeechSeedAnimCmds1:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sLeechSeedAnimCmds1,8
	.align	2, 0
	.type	 sLeechSeedAnimCmds2,object
sLeechSeedAnimCmds2:
	.short	0x4
	.byte	0x7
	.space	1
	.short	0x8
	.byte	0x7
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sLeechSeedAnimCmds2,12
	.align	2, 0
	.type	 sLeechSeedAnimTable,object
sLeechSeedAnimTable:
	.word	sLeechSeedAnimCmds1
	.word	sLeechSeedAnimCmds2
	.size	 sLeechSeedAnimTable,8
	.globl	gLeechSeedSpriteTemplate
	.align	2, 0
	.type	 gLeechSeedSpriteTemplate,object
	.size	 gLeechSeedSpriteTemplate,24
gLeechSeedSpriteTemplate:
	.short	0x2716
	.short	0x2716
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sLeechSeedAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLeechSeed
	.align	2, 0
	.type	 sSporeParticleAnimCmds1,object
sSporeParticleAnimCmds1:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSporeParticleAnimCmds1,8
	.align	2, 0
	.type	 sSporeParticleAnimCmds2,object
sSporeParticleAnimCmds2:
	.short	0x4
	.byte	0x7
	.space	1
	.short	-0x1
	.space	2
	.size	 sSporeParticleAnimCmds2,8
	.align	2, 0
	.type	 sSporeParticleAnimTable,object
sSporeParticleAnimTable:
	.word	sSporeParticleAnimCmds1
	.word	sSporeParticleAnimCmds2
	.size	 sSporeParticleAnimTable,8
	.globl	gSporeParticleSpriteTemplate
	.align	2, 0
	.type	 gSporeParticleSpriteTemplate,object
	.size	 gSporeParticleSpriteTemplate,24
gSporeParticleSpriteTemplate:
	.short	0x27ae
	.short	0x27ae
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sSporeParticleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSporeParticle
	.align	2, 0
	.type	 sPetalDanceBigFlowerAnimCmds,object
sPetalDanceBigFlowerAnimCmds:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sPetalDanceBigFlowerAnimCmds,8
	.align	2, 0
	.type	 sPetalDanceSmallFlowerAnimCmds,object
sPetalDanceSmallFlowerAnimCmds:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sPetalDanceSmallFlowerAnimCmds,8
	.align	2, 0
	.type	 sPetalDanceBigFlowerAnimTable,object
sPetalDanceBigFlowerAnimTable:
	.word	sPetalDanceBigFlowerAnimCmds
	.size	 sPetalDanceBigFlowerAnimTable,4
	.align	2, 0
	.type	 sPetalDanceSmallFlowerAnimTable,object
sPetalDanceSmallFlowerAnimTable:
	.word	sPetalDanceSmallFlowerAnimCmds
	.size	 sPetalDanceSmallFlowerAnimTable,4
	.globl	gPetalDanceBigFlowerSpriteTemplate
	.align	2, 0
	.type	 gPetalDanceBigFlowerSpriteTemplate,object
	.size	 gPetalDanceBigFlowerSpriteTemplate,24
gPetalDanceBigFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sPetalDanceBigFlowerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPetalDanceBigFlower
	.globl	gPetalDanceSmallFlowerSpriteTemplate
	.align	2, 0
	.type	 gPetalDanceSmallFlowerSpriteTemplate,object
	.size	 gPetalDanceSmallFlowerSpriteTemplate,24
gPetalDanceSmallFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sPetalDanceSmallFlowerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPetalDanceSmallFlower
	.align	2, 0
	.type	 sRazorLeafParticleAnimCmds1,object
sRazorLeafParticleAnimCmds1:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x14
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sRazorLeafParticleAnimCmds1,44
	.align	2, 0
	.type	 sRazorLeafParticleAnimCmds2,object
sRazorLeafParticleAnimCmds2:
	.short	0x18
	.byte	0x5
	.space	1
	.short	0x1c
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sRazorLeafParticleAnimCmds2,16
	.align	2, 0
	.type	 sRazorLeafParticleAnimTable,object
sRazorLeafParticleAnimTable:
	.word	sRazorLeafParticleAnimCmds1
	.word	sRazorLeafParticleAnimCmds2
	.size	 sRazorLeafParticleAnimTable,8
	.globl	gRazorLeafParticleSpriteTemplate
	.align	2, 0
	.type	 gRazorLeafParticleSpriteTemplate,object
	.size	 gRazorLeafParticleSpriteTemplate,24
gRazorLeafParticleSpriteTemplate:
	.short	0x274f
	.short	0x274f
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sRazorLeafParticleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRazorLeafParticle
	.globl	gTwisterLeafSpriteTemplate
	.align	2, 0
	.type	 gTwisterLeafSpriteTemplate,object
	.size	 gTwisterLeafSpriteTemplate,24
gTwisterLeafSpriteTemplate:
	.short	0x274f
	.short	0x274f
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sRazorLeafParticleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMoveTwisterParticle
	.align	2, 0
	.type	 sRazorLeafCutterAnimCmds,object
sRazorLeafCutterAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x43
	.space	1
	.short	0x0
	.byte	0xc3
	.space	1
	.short	0x0
	.byte	0x83
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sRazorLeafCutterAnimCmds,20
	.align	2, 0
	.type	 sRazorLeafCutterAnimTable,object
sRazorLeafCutterAnimTable:
	.word	sRazorLeafCutterAnimCmds
	.size	 sRazorLeafCutterAnimTable,4
	.globl	gRazorLeafCutterSpriteTemplate
	.align	2, 0
	.type	 gRazorLeafCutterSpriteTemplate,object
	.size	 gRazorLeafCutterSpriteTemplate,24
gRazorLeafCutterSpriteTemplate:
	.short	0x27b0
	.short	0x27b0
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	sRazorLeafCutterAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimTranslateLinearSingleSineWave
	.align	2, 0
	.type	 sSwiftStarAffineAnimCmds,object
sSwiftStarAffineAnimCmds:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSwiftStarAffineAnimCmds,16
	.align	2, 0
	.type	 sSwiftStarAffineAnimTable,object
sSwiftStarAffineAnimTable:
	.word	sSwiftStarAffineAnimCmds
	.size	 sSwiftStarAffineAnimTable,4
	.globl	gSwiftStarSpriteTemplate
	.align	2, 0
	.type	 gSwiftStarSpriteTemplate,object
	.size	 gSwiftStarSpriteTemplate,24
gSwiftStarSpriteTemplate:
	.short	0x27be
	.short	0x27be
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSwiftStarAffineAnimTable
	.word	AnimTranslateLinearSingleSineWave
	.align	2, 0
	.type	 sAnim_ConstrictBinding,object
sAnim_ConstrictBinding:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	0x60
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ConstrictBinding,20
	.align	2, 0
	.type	 sAnim_ConstrictBinding_Flipped,object
sAnim_ConstrictBinding_Flipped:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x40
	.byte	0x44
	.space	1
	.short	0x60
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_ConstrictBinding_Flipped,20
	.align	2, 0
	.type	 sAnims_ConstrictBinding,object
sAnims_ConstrictBinding:
	.word	sAnim_ConstrictBinding
	.word	sAnim_ConstrictBinding_Flipped
	.size	 sAnims_ConstrictBinding,8
	.align	2, 0
	.type	 sAffineAnim_ConstrictBinding,object
sAffineAnim_ConstrictBinding:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ConstrictBinding,32
	.align	2, 0
	.type	 sAffineAnim_ConstrictBinding_Flipped,object
sAffineAnim_ConstrictBinding_Flipped:
	.short	-0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	-0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ConstrictBinding_Flipped,32
	.align	2, 0
	.type	 sAffineAnims_ConstrictBinding,object
sAffineAnims_ConstrictBinding:
	.word	sAffineAnim_ConstrictBinding
	.word	sAffineAnim_ConstrictBinding_Flipped
	.size	 sAffineAnims_ConstrictBinding,8
	.globl	gConstrictBindingSpriteTemplate
	.align	2, 0
	.type	 gConstrictBindingSpriteTemplate,object
	.size	 gConstrictBindingSpriteTemplate,24
gConstrictBindingSpriteTemplate:
	.short	0x27ca
	.short	0x27ca
	.word	gOamData_AffineNormal_ObjNormal_64x32
	.word	sAnims_ConstrictBinding
	.word	0x0
	.word	sAffineAnims_ConstrictBinding
	.word	AnimConstrictBinding
	.align	2, 0
	.type	 sMimicOrbAffineAnimCmds1,object
sMimicOrbAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x30
	.short	0x30
	.byte	0x0
	.byte	0xe
	.space	2
	.short	0x7fff
	.space	6
	.size	 sMimicOrbAffineAnimCmds1,24
	.align	2, 0
	.type	 sMimicOrbAffineAnimCmds2,object
sMimicOrbAffineAnimCmds2:
	.short	-0x10
	.short	-0x10
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sMimicOrbAffineAnimCmds2,16
	.align	2, 0
	.type	 sMimicOrbAffineAnimTable,object
sMimicOrbAffineAnimTable:
	.word	sMimicOrbAffineAnimCmds1
	.word	sMimicOrbAffineAnimCmds2
	.size	 sMimicOrbAffineAnimTable,8
	.globl	gMimicOrbSpriteTemplate
	.align	2, 0
	.type	 gMimicOrbSpriteTemplate,object
	.size	 gMimicOrbSpriteTemplate,24
gMimicOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	sPowerAbsorptionOrbAnimTable
	.word	0x0
	.word	sMimicOrbAffineAnimTable
	.word	AnimMimicOrb
	.align	2, 0
	.type	 sIngrainRootAnimCmds1,object
sIngrainRootAnimCmds1:
	.short	0x0
	.byte	0x7
	.space	1
	.short	0x10
	.byte	0x7
	.space	1
	.short	0x20
	.byte	0x7
	.space	1
	.short	0x30
	.byte	0x7
	.space	1
	.short	-0x1
	.space	2
	.size	 sIngrainRootAnimCmds1,20
	.align	2, 0
	.type	 sIngrainRootAnimCmds2,object
sIngrainRootAnimCmds2:
	.short	0x0
	.byte	0x47
	.space	1
	.short	0x10
	.byte	0x47
	.space	1
	.short	0x20
	.byte	0x47
	.space	1
	.short	0x30
	.byte	0x47
	.space	1
	.short	-0x1
	.space	2
	.size	 sIngrainRootAnimCmds2,20
	.align	2, 0
	.type	 sIngrainRootAnimCmds3,object
sIngrainRootAnimCmds3:
	.short	0x0
	.byte	0x7
	.space	1
	.short	0x10
	.byte	0x7
	.space	1
	.short	0x20
	.byte	0x7
	.space	1
	.short	-0x1
	.space	2
	.size	 sIngrainRootAnimCmds3,16
	.align	2, 0
	.type	 sIngrainRootAnimCmds4,object
sIngrainRootAnimCmds4:
	.short	0x0
	.byte	0x47
	.space	1
	.short	0x10
	.byte	0x47
	.space	1
	.short	0x20
	.byte	0x47
	.space	1
	.short	-0x1
	.space	2
	.size	 sIngrainRootAnimCmds4,16
	.align	2, 0
	.type	 sIngrainRootAnimTable,object
sIngrainRootAnimTable:
	.word	sIngrainRootAnimCmds1
	.word	sIngrainRootAnimCmds2
	.word	sIngrainRootAnimCmds3
	.word	sIngrainRootAnimCmds4
	.size	 sIngrainRootAnimTable,16
	.globl	gIngrainRootSpriteTemplate
	.align	2, 0
	.type	 gIngrainRootSpriteTemplate,object
	.size	 gIngrainRootSpriteTemplate,24
gIngrainRootSpriteTemplate:
	.short	0x27ef
	.short	0x27ef
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sIngrainRootAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimIngrainRoot
	.globl	gFrenzyPlantRootSpriteTemplate
	.align	2, 0
	.type	 gFrenzyPlantRootSpriteTemplate,object
	.size	 gFrenzyPlantRootSpriteTemplate,24
gFrenzyPlantRootSpriteTemplate:
	.short	0x27ef
	.short	0x27ef
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sIngrainRootAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFrenzyPlantRoot
	.align	2, 0
	.type	 sIngrainOrbAnimCmds,object
sIngrainOrbAnimCmds:
	.short	0x3
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sIngrainOrbAnimCmds,12
	.align	2, 0
	.type	 sIngrainOrbAnimTable,object
sIngrainOrbAnimTable:
	.word	sIngrainOrbAnimCmds
	.size	 sIngrainOrbAnimTable,4
	.globl	gIngrainOrbSpriteTemplate
	.align	2, 0
	.type	 gIngrainOrbSpriteTemplate,object
	.size	 gIngrainOrbSpriteTemplate,24
gIngrainOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sIngrainOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimIngrainOrb
	.align	2, 0
	.type	 sFallingBagAnimCmds,object
sFallingBagAnimCmds:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 sFallingBagAnimCmds,8
	.align	2, 0
	.type	 sFallingBagAnimTable,object
sFallingBagAnimTable:
	.word	sFallingBagAnimCmds
	.size	 sFallingBagAnimTable,4
	.align	2, 0
	.type	 sFallingBagAffineAnimCmds1,object
sFallingBagAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xa
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 sFallingBagAffineAnimCmds1,32
	.align	2, 0
	.type	 sFallingBagAffineAnimCmds2,object
sFallingBagAffineAnimCmds2:
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x2
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x2
	.space	2
	.short	0x7fff
	.space	6
	.size	 sFallingBagAffineAnimCmds2,56
	.align	2, 0
	.type	 sFallingBagAffineAnimTable,object
sFallingBagAffineAnimTable:
	.word	sFallingBagAffineAnimCmds1
	.word	sFallingBagAffineAnimCmds2
	.size	 sFallingBagAffineAnimTable,8
	.globl	gPresentSpriteTemplate
	.align	2, 0
	.type	 gPresentSpriteTemplate,object
	.size	 gPresentSpriteTemplate,24
gPresentSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sFallingBagAnimTable
	.word	0x0
	.word	sFallingBagAffineAnimTable
	.word	AnimPresent
	.globl	gKnockOffItemSpriteTemplate
	.align	2, 0
	.type	 gKnockOffItemSpriteTemplate,object
	.size	 gKnockOffItemSpriteTemplate,24
gKnockOffItemSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sFallingBagAnimTable
	.word	0x0
	.word	sFallingBagAffineAnimTable
	.word	AnimKnockOffItem
	.align	2, 0
	.type	 sPresentHealParticleAnimCmds,object
sPresentHealParticleAnimCmds:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x4
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0xc
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sPresentHealParticleAnimCmds,20
	.align	2, 0
	.type	 sPresentHealParticleAnimTable,object
sPresentHealParticleAnimTable:
	.word	sPresentHealParticleAnimCmds
	.size	 sPresentHealParticleAnimTable,4
	.globl	gPresentHealParticleSpriteTemplate
	.align	2, 0
	.type	 gPresentHealParticleSpriteTemplate,object
	.size	 gPresentHealParticleSpriteTemplate,24
gPresentHealParticleSpriteTemplate:
	.short	0x27d3
	.short	0x27d3
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sPresentHealParticleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPresentHealParticle
	.globl	gItemStealSpriteTemplate
	.align	2, 0
	.type	 gItemStealSpriteTemplate,object
	.size	 gItemStealSpriteTemplate,24
gItemStealSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sFallingBagAnimTable
	.word	0x0
	.word	sFallingBagAffineAnimTable
	.word	AnimItemSteal
	.align	2, 0
	.type	 sTrickBagAffineAnimCmds1,object
sTrickBagAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x7fff
	.space	6
	.size	 sTrickBagAffineAnimCmds1,16
	.align	2, 0
	.type	 sTrickBagAffineAnimCmds2,object
sTrickBagAffineAnimCmds2:
	.short	0x0
	.short	-0xa
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	-0x6
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	-0x2
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x2
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x6
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0xa
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x7fff
	.space	6
	.size	 sTrickBagAffineAnimCmds2,64
	.align	2, 0
	.type	 sTrickBagAffineAnimTable,object
sTrickBagAffineAnimTable:
	.word	sTrickBagAffineAnimCmds1
	.word	sTrickBagAffineAnimCmds2
	.word	sFallingBagAffineAnimCmds1
	.word	sFallingBagAffineAnimCmds2
	.size	 sTrickBagAffineAnimTable,16
	.globl	gTrickBagSpriteTemplate
	.align	2, 0
	.type	 gTrickBagSpriteTemplate,object
	.size	 gTrickBagSpriteTemplate,24
gTrickBagSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sFallingBagAnimTable
	.word	0x0
	.word	sTrickBagAffineAnimTable
	.word	AnimTrickBag
	.type	 gTrickBagCoordinates,object
gTrickBagCoordinates:
	.byte	0x5
	.byte	0x18
	.byte	0x1
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	-0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x10
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x7f
	.size	 gTrickBagCoordinates,33
	.align	2, 0
	.type	 sLeafBladeAnimCmds1,object
sLeafBladeAnimCmds1:
	.short	0x1c
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sLeafBladeAnimCmds1,8
	.align	2, 0
	.type	 sLeafBladeAnimCmds2,object
sLeafBladeAnimCmds2:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sLeafBladeAnimCmds2,8
	.align	2, 0
	.type	 sLeafBladeAnimCmds3,object
sLeafBladeAnimCmds3:
	.short	0x14
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sLeafBladeAnimCmds3,8
	.align	2, 0
	.type	 sLeafBladeAnimCmds4,object
sLeafBladeAnimCmds4:
	.short	0x1c
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 sLeafBladeAnimCmds4,8
	.align	2, 0
	.type	 sLeafBladeAnimCmds5,object
sLeafBladeAnimCmds5:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sLeafBladeAnimCmds5,8
	.align	2, 0
	.type	 sLeafBladeAnimCmds6,object
sLeafBladeAnimCmds6:
	.short	0x10
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 sLeafBladeAnimCmds6,8
	.align	2, 0
	.type	 sLeafBladeAnimCmds7,object
sLeafBladeAnimCmds7:
	.short	0x1c
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sLeafBladeAnimCmds7,8
	.align	2, 0
	.type	 sLeafBladeAnimTable,object
sLeafBladeAnimTable:
	.word	sLeafBladeAnimCmds1
	.word	sLeafBladeAnimCmds2
	.word	sLeafBladeAnimCmds3
	.word	sLeafBladeAnimCmds4
	.word	sLeafBladeAnimCmds5
	.word	sLeafBladeAnimCmds6
	.word	sLeafBladeAnimCmds7
	.size	 sLeafBladeAnimTable,28
	.globl	gLeafBladeSpriteTemplate
	.align	2, 0
	.type	 gLeafBladeSpriteTemplate,object
	.size	 gLeafBladeSpriteTemplate,24
gLeafBladeSpriteTemplate:
	.short	0x274f
	.short	0x274f
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sLeafBladeAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sAromatherapyBigFlowerAffineAnimCmds,object
sAromatherapyBigFlowerAffineAnimCmds:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAromatherapyBigFlowerAffineAnimCmds,24
	.align	2, 0
	.type	 sAromatherapyBigFlowerAffineAnimTable,object
sAromatherapyBigFlowerAffineAnimTable:
	.word	sAromatherapyBigFlowerAffineAnimCmds
	.size	 sAromatherapyBigFlowerAffineAnimTable,4
	.globl	gAromatherapySmallFlowerSpriteTemplate
	.align	2, 0
	.type	 gAromatherapySmallFlowerSpriteTemplate,object
	.size	 gAromatherapySmallFlowerSpriteTemplate,24
gAromatherapySmallFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	sPetalDanceSmallFlowerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFlyingParticle
	.globl	gAromatherapyBigFlowerSpriteTemplate
	.align	2, 0
	.type	 gAromatherapyBigFlowerSpriteTemplate,object
	.size	 gAromatherapyBigFlowerSpriteTemplate,24
gAromatherapyBigFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	sPetalDanceBigFlowerAnimTable
	.word	0x0
	.word	sAromatherapyBigFlowerAffineAnimTable
	.word	AnimFlyingParticle
	.align	2, 0
	.type	 sSilverWindBigSparkAffineAnimCmds,object
sSilverWindBigSparkAffineAnimCmds:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf6
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sSilverWindBigSparkAffineAnimCmds,24
	.align	2, 0
	.type	 sSilverWindMediumSparkAffineAnimCmds,object
sSilverWindMediumSparkAffineAnimCmds:
	.short	0xc0
	.short	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf4
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sSilverWindMediumSparkAffineAnimCmds,24
	.align	2, 0
	.type	 sSilverWindSmallSparkAffineAnimCmds,object
sSilverWindSmallSparkAffineAnimCmds:
	.short	0x8f
	.short	0x8f
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf1
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sSilverWindSmallSparkAffineAnimCmds,24
	.align	2, 0
	.type	 sSilverWindBigSparkAffineAnimTable,object
sSilverWindBigSparkAffineAnimTable:
	.word	sSilverWindBigSparkAffineAnimCmds
	.size	 sSilverWindBigSparkAffineAnimTable,4
	.align	2, 0
	.type	 sSilverWindMediumSparkAffineAnimTable,object
sSilverWindMediumSparkAffineAnimTable:
	.word	sSilverWindMediumSparkAffineAnimCmds
	.size	 sSilverWindMediumSparkAffineAnimTable,4
	.align	2, 0
	.type	 sSilverWindSmallSparkAffineAnimTable,object
sSilverWindSmallSparkAffineAnimTable:
	.word	sSilverWindSmallSparkAffineAnimCmds
	.size	 sSilverWindSmallSparkAffineAnimTable,4
	.globl	gSilverWindBigSparkSpriteTemplate
	.align	2, 0
	.type	 gSilverWindBigSparkSpriteTemplate,object
	.size	 gSilverWindBigSparkSpriteTemplate,24
gSilverWindBigSparkSpriteTemplate:
	.short	0x281f
	.short	0x281f
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSilverWindBigSparkAffineAnimTable
	.word	AnimFlyingParticle
	.globl	gSilverWindMediumSparkSpriteTemplate
	.align	2, 0
	.type	 gSilverWindMediumSparkSpriteTemplate,object
	.size	 gSilverWindMediumSparkSpriteTemplate,24
gSilverWindMediumSparkSpriteTemplate:
	.short	0x281f
	.short	0x281f
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSilverWindMediumSparkAffineAnimTable
	.word	AnimFlyingParticle
	.globl	gSilverWindSmallSparkSpriteTemplate
	.align	2, 0
	.type	 gSilverWindSmallSparkSpriteTemplate,object
	.size	 gSilverWindSmallSparkSpriteTemplate,24
gSilverWindSmallSparkSpriteTemplate:
	.short	0x281f
	.short	0x281f
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sSilverWindSmallSparkAffineAnimTable
	.word	AnimFlyingParticle
	.align	1, 0
	.type	 sMagicalLeafBlendColors,object
sMagicalLeafBlendColors:
	.short	0x1f
	.short	0x27f
	.short	0x3ff
	.short	0x3e0
	.short	0x7dc5
	.short	0x7d56
	.short	0x7eb6
	.size	 sMagicalLeafBlendColors,14
	.globl	gNeedleArmSpikeSpriteTemplate
	.align	2, 0
	.type	 gNeedleArmSpikeSpriteTemplate,object
	.size	 gNeedleArmSpikeSpriteTemplate,24
gNeedleArmSpikeSpriteTemplate:
	.short	0x281a
	.short	0x281a
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimNeedleArmSpike
	.align	2, 0
	.type	 sAnim_Whip,object
sAnim_Whip:
	.short	0x40
	.byte	0x3
	.space	1
	.short	0x50
	.byte	0x3
	.space	1
	.short	0x60
	.byte	0x3
	.space	1
	.short	0x70
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Whip,20
	.align	2, 0
	.type	 sAnim_Whip_Flipped,object
sAnim_Whip_Flipped:
	.short	0x40
	.byte	0x43
	.space	1
	.short	0x50
	.byte	0x43
	.space	1
	.short	0x60
	.byte	0x43
	.space	1
	.short	0x70
	.byte	0x46
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Whip_Flipped,20
	.align	2, 0
	.type	 sAnims_Whip,object
sAnims_Whip:
	.word	sAnim_Whip
	.word	sAnim_Whip_Flipped
	.size	 sAnims_Whip,8
	.globl	gSlamHitSpriteTemplate
	.align	2, 0
	.type	 gSlamHitSpriteTemplate,object
	.size	 gSlamHitSpriteTemplate,24
gSlamHitSpriteTemplate:
	.short	0x2748
	.short	0x2748
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_Whip
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWhipHit
	.globl	gVineWhipSpriteTemplate
	.align	2, 0
	.type	 gVineWhipSpriteTemplate,object
	.size	 gVineWhipSpriteTemplate,24
gVineWhipSpriteTemplate:
	.short	0x282f
	.short	0x282f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_Whip
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWhipHit
	.align	2, 0
	.type	 sAnim_SlidingHit,object
sAnim_SlidingHit:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_SlidingHit,24
	.align	2, 0
	.type	 sAnims_SlidingHit,object
sAnims_SlidingHit:
	.word	sAnim_SlidingHit
	.size	 sAnims_SlidingHit,4
	.align	2, 0
	.type	 sSlidingHit1SpriteTemplate,object
	.size	 sSlidingHit1SpriteTemplate,24
sSlidingHit1SpriteTemplate:
	.short	0x2725
	.short	0x2725
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_SlidingHit
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSlidingHit
	.align	2, 0
	.type	 sSlidingHit2SpriteTemplate,object
	.size	 sSlidingHit2SpriteTemplate,24
sSlidingHit2SpriteTemplate:
	.short	0x2726
	.short	0x2726
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_SlidingHit
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSlidingHit
	.align	2, 0
	.type	 sAffineAnim_FlickeringPunch_Normal,object
sAffineAnim_FlickeringPunch_Normal:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlickeringPunch_Normal,16
	.align	2, 0
	.type	 sAffineAnim_FlickeringPunch_TurnedTopLeft,object
sAffineAnim_FlickeringPunch_TurnedTopLeft:
	.short	0x100
	.short	0x100
	.byte	0x20
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlickeringPunch_TurnedTopLeft,16
	.align	2, 0
	.type	 sAffineAnim_FlickeringPunch_TurnedLeft,object
sAffineAnim_FlickeringPunch_TurnedLeft:
	.short	0x100
	.short	0x100
	.byte	0x40
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlickeringPunch_TurnedLeft,16
	.align	2, 0
	.type	 sAffineAnim_FlickeringPunch_TurnedBottomLeft,object
sAffineAnim_FlickeringPunch_TurnedBottomLeft:
	.short	0x100
	.short	0x100
	.byte	0x60
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlickeringPunch_TurnedBottomLeft,16
	.align	2, 0
	.type	 sAffineAnim_FlickeringPunch_UpsideDown,object
sAffineAnim_FlickeringPunch_UpsideDown:
	.short	0x100
	.short	0x100
	.byte	0x80
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlickeringPunch_UpsideDown,16
	.align	2, 0
	.type	 sAffineAnim_FlickeringPunch_TurnedBottomRight,object
sAffineAnim_FlickeringPunch_TurnedBottomRight:
	.short	0x100
	.short	0x100
	.byte	0xa0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlickeringPunch_TurnedBottomRight,16
	.align	2, 0
	.type	 sAffineAnim_FlickeringPunch_TurnedRight,object
sAffineAnim_FlickeringPunch_TurnedRight:
	.short	0x100
	.short	0x100
	.byte	0xc0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlickeringPunch_TurnedRight,16
	.align	2, 0
	.type	 sAffineAnim_FlickeringPunch_TurnedTopRight,object
sAffineAnim_FlickeringPunch_TurnedTopRight:
	.short	0x100
	.short	0x100
	.byte	0xe0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_FlickeringPunch_TurnedTopRight,16
	.align	2, 0
	.type	 sAffineAnims_FlickeringPunch,object
sAffineAnims_FlickeringPunch:
	.word	sAffineAnim_FlickeringPunch_Normal
	.word	sAffineAnim_FlickeringPunch_TurnedTopLeft
	.word	sAffineAnim_FlickeringPunch_TurnedLeft
	.word	sAffineAnim_FlickeringPunch_TurnedBottomLeft
	.word	sAffineAnim_FlickeringPunch_UpsideDown
	.word	sAffineAnim_FlickeringPunch_TurnedBottomRight
	.word	sAffineAnim_FlickeringPunch_TurnedRight
	.word	sAffineAnim_FlickeringPunch_TurnedTopRight
	.size	 sAffineAnims_FlickeringPunch,32
	.align	2, 0
	.type	 sFlickeringPunchSpriteTemplate,object
	.size	 sFlickeringPunchSpriteTemplate,24
sFlickeringPunchSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_FlickeringPunch
	.word	AnimFlickeringPunch
	.align	2, 0
	.type	 sCuttingSliceAnimCmds,object
sCuttingSliceAnimCmds:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sCuttingSliceAnimCmds,20
	.align	2, 0
	.type	 sCuttingSliceAnimTable,object
sCuttingSliceAnimTable:
	.word	sCuttingSliceAnimCmds
	.size	 sCuttingSliceAnimTable,4
	.globl	gCuttingSliceSpriteTemplate
	.align	2, 0
	.type	 gCuttingSliceSpriteTemplate,object
	.size	 gCuttingSliceSpriteTemplate,24
gCuttingSliceSpriteTemplate:
	.short	0x279a
	.short	0x279a
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	sCuttingSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCuttingSlice
	.globl	gAirCutterSliceSpriteTemplate
	.align	2, 0
	.type	 gAirCutterSliceSpriteTemplate,object
	.size	 gAirCutterSliceSpriteTemplate,24
gAirCutterSliceSpriteTemplate:
	.short	0x279a
	.short	0x279a
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	sCuttingSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimAirCutterSlice
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_Eighth,object
sAnim_CirclingMusicNote_Eighth:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_Eighth,8
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_BeamedEighth,object
sAnim_CirclingMusicNote_BeamedEighth:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_BeamedEighth,8
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_SlantedBeamedEighth,object
sAnim_CirclingMusicNote_SlantedBeamedEighth:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_SlantedBeamedEighth,8
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_Quarter,object
sAnim_CirclingMusicNote_Quarter:
	.short	0xc
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_Quarter,8
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_QuarterRest,object
sAnim_CirclingMusicNote_QuarterRest:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_QuarterRest,8
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_EighthRest,object
sAnim_CirclingMusicNote_EighthRest:
	.short	0x14
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_EighthRest,8
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_Eighth_Flipped,object
sAnim_CirclingMusicNote_Eighth_Flipped:
	.short	0x0
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_Eighth_Flipped,8
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_BeamedEighth_Flipped,object
sAnim_CirclingMusicNote_BeamedEighth_Flipped:
	.short	0x4
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_BeamedEighth_Flipped,8
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_SlantedBeamedEighth_Flipped,object
sAnim_CirclingMusicNote_SlantedBeamedEighth_Flipped:
	.short	0x8
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_SlantedBeamedEighth_Flipped,8
	.align	2, 0
	.type	 sAnim_CirclingMusicNote_Quarter_Flipped,object
sAnim_CirclingMusicNote_Quarter_Flipped:
	.short	0xc
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_CirclingMusicNote_Quarter_Flipped,8
	.align	2, 0
	.type	 sAnims_CirclingMusicNote,object
sAnims_CirclingMusicNote:
	.word	sAnim_CirclingMusicNote_Eighth
	.word	sAnim_CirclingMusicNote_BeamedEighth
	.word	sAnim_CirclingMusicNote_SlantedBeamedEighth
	.word	sAnim_CirclingMusicNote_Quarter
	.word	sAnim_CirclingMusicNote_QuarterRest
	.word	sAnim_CirclingMusicNote_EighthRest
	.word	sAnim_CirclingMusicNote_Eighth_Flipped
	.word	sAnim_CirclingMusicNote_BeamedEighth_Flipped
	.word	sAnim_CirclingMusicNote_SlantedBeamedEighth_Flipped
	.word	sAnim_CirclingMusicNote_Quarter_Flipped
	.size	 sAnims_CirclingMusicNote,40
	.align	2, 0
	.type	 sCirclingMusicNoteSpriteTemplate,object
	.size	 sCirclingMusicNoteSpriteTemplate,24
sCirclingMusicNoteSpriteTemplate:
	.short	0x2758
	.short	0x2758
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sAnims_CirclingMusicNote
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCirclingMusicNote
	.globl	gProtectSpriteTemplate
	.align	2, 0
	.type	 gProtectSpriteTemplate,object
	.size	 gProtectSpriteTemplate,24
gProtectSpriteTemplate:
	.short	0x2828
	.short	0x2828
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimProtect
	.align	2, 0
	.type	 sMilkBottleAffineAnimCmds1,object
sMilkBottleAffineAnimCmds1:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sMilkBottleAffineAnimCmds1,16
	.align	2, 0
	.type	 sMilkBottleAffineAnimCmds2,object
sMilkBottleAffineAnimCmds2:
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0xc
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfe
	.byte	0x18
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0xc
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sMilkBottleAffineAnimCmds2,48
	.align	2, 0
	.type	 sMilkBottleAffineAnimTable,object
sMilkBottleAffineAnimTable:
	.word	sMilkBottleAffineAnimCmds1
	.word	sMilkBottleAffineAnimCmds2
	.size	 sMilkBottleAffineAnimTable,8
	.globl	gMilkBottleSpriteTemplate
	.align	2, 0
	.type	 gMilkBottleSpriteTemplate,object
	.size	 gMilkBottleSpriteTemplate,24
gMilkBottleSpriteTemplate:
	.short	0x2773
	.short	0x2773
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sMilkBottleAffineAnimTable
	.word	AnimMilkBottle
	.align	2, 0
	.type	 sGrantingStarsAnimCmds,object
sGrantingStarsAnimCmds:
	.short	0x0
	.byte	0x7
	.space	1
	.short	0x10
	.byte	0x7
	.space	1
	.short	0x20
	.byte	0x7
	.space	1
	.short	0x30
	.byte	0x7
	.space	1
	.short	0x40
	.byte	0x7
	.space	1
	.short	0x50
	.byte	0x7
	.space	1
	.short	0x60
	.byte	0x7
	.space	1
	.short	0x70
	.byte	0x7
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sGrantingStarsAnimCmds,36
	.align	2, 0
	.type	 sGrantingStarsAnimTable,object
sGrantingStarsAnimTable:
	.word	sGrantingStarsAnimCmds
	.size	 sGrantingStarsAnimTable,4
	.globl	gGrantingStarsSpriteTemplate
	.align	2, 0
	.type	 gGrantingStarsSpriteTemplate,object
	.size	 gGrantingStarsSpriteTemplate,24
gGrantingStarsSpriteTemplate:
	.short	0x2741
	.short	0x2741
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sGrantingStarsAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGrantingStars
	.globl	gSparklingStarsSpriteTemplate
	.align	2, 0
	.type	 gSparklingStarsSpriteTemplate,object
	.size	 gSparklingStarsSpriteTemplate,24
gSparklingStarsSpriteTemplate:
	.short	0x2741
	.short	0x2741
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sGrantingStarsAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSparklingStars
	.align	2, 0
	.type	 sAnim_BubbleBurst,object
sAnim_BubbleBurst:
	.short	0x0
	.byte	0xa
	.space	1
	.short	0x4
	.byte	0xa
	.space	1
	.short	0x8
	.byte	0xa
	.space	1
	.short	0xc
	.byte	0xa
	.space	1
	.short	0x10
	.byte	0x1a
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x14
	.byte	0x5
	.space	1
	.short	0x18
	.byte	0xf
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_BubbleBurst,36
	.align	2, 0
	.type	 sAnim_BubbleBurst_Flipped,object
sAnim_BubbleBurst_Flipped:
	.short	0x0
	.byte	0x4a
	.space	1
	.short	0x4
	.byte	0x4a
	.space	1
	.short	0x8
	.byte	0x4a
	.space	1
	.short	0xc
	.byte	0x4a
	.space	1
	.short	0x10
	.byte	0x5a
	.space	1
	.short	0x10
	.byte	0x45
	.space	1
	.short	0x14
	.byte	0x45
	.space	1
	.short	0x18
	.byte	0x4f
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_BubbleBurst_Flipped,36
	.align	2, 0
	.type	 sAnims_BubbleBurst,object
sAnims_BubbleBurst:
	.word	sAnim_BubbleBurst
	.word	sAnim_BubbleBurst_Flipped
	.size	 sAnims_BubbleBurst,8
	.align	2, 0
	.type	 sBubbleBurstSpriteTemplate,object
	.size	 sBubbleBurstSpriteTemplate,24
sBubbleBurstSpriteTemplate:
	.short	0x2730
	.short	0x2730
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sAnims_BubbleBurst
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBubbleBurst
	.align	2, 0
	.type	 sSleepLetterZAnimCmds,object
sSleepLetterZAnimCmds:
	.short	0x0
	.byte	0x28
	.space	1
	.short	-0x1
	.space	2
	.size	 sSleepLetterZAnimCmds,8
	.align	2, 0
	.type	 sSleepLetterZAnimTable,object
sSleepLetterZAnimTable:
	.word	sSleepLetterZAnimCmds
	.size	 sSleepLetterZAnimTable,4
	.align	2, 0
	.type	 sSleepLetterZAffineAnimCmds1,object
sSleepLetterZAffineAnimCmds1:
	.short	0x14
	.short	0x14
	.byte	0xe2
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x1
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSleepLetterZAffineAnimCmds1,24
	.align	2, 0
	.type	 sSleepLetterZAffineAnimCmds1_2,object
sSleepLetterZAffineAnimCmds1_2:
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x18
	.space	2
	.short	0x7ffd
	.short	0xa
	.space	4
	.size	 sSleepLetterZAffineAnimCmds1_2,24
	.align	2, 0
	.type	 sSleepLetterZAffineAnimCmds2,object
sSleepLetterZAffineAnimCmds2:
	.short	0x14
	.short	0x14
	.byte	0x1e
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0xff
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 sSleepLetterZAffineAnimCmds2,24
	.align	2, 0
	.type	 sSleepLetterZAffineAnimCmds2_2,object
sSleepLetterZAffineAnimCmds2_2:
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x18
	.space	2
	.short	0x7ffd
	.short	0xa
	.space	4
	.size	 sSleepLetterZAffineAnimCmds2_2,24
	.align	2, 0
	.type	 sSleepLetterZAffineAnimTable,object
sSleepLetterZAffineAnimTable:
	.word	sSleepLetterZAffineAnimCmds1
	.word	sSleepLetterZAffineAnimCmds2
	.size	 sSleepLetterZAffineAnimTable,8
	.globl	gSleepLetterZSpriteTemplate
	.align	2, 0
	.type	 gSleepLetterZSpriteTemplate,object
	.size	 gSleepLetterZSpriteTemplate,24
gSleepLetterZSpriteTemplate:
	.short	0x27f4
	.short	0x27f4
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sSleepLetterZAnimTable
	.word	0x0
	.word	sSleepLetterZAffineAnimTable
	.word	AnimSleepLetterZ
	.globl	gLockOnTargetSpriteTemplate
	.align	2, 0
	.type	 gLockOnTargetSpriteTemplate,object
	.size	 gLockOnTargetSpriteTemplate,24
gLockOnTargetSpriteTemplate:
	.short	0x271e
	.short	0x271e
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLockOnTarget
	.globl	gLockOnMoveTargetSpriteTemplate
	.align	2, 0
	.type	 gLockOnMoveTargetSpriteTemplate,object
	.size	 gLockOnMoveTargetSpriteTemplate,24
gLockOnMoveTargetSpriteTemplate:
	.short	0x271e
	.short	0x271e
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLockOnMoveTarget
	.type	 sInclineMonCoordTable,object
sInclineMonCoordTable:
	.byte	0x40
	.byte	0x40
	.byte	0x0
	.byte	-0x40
	.byte	-0x40
	.byte	0x40
	.byte	0x20
	.byte	-0x20
	.size	 sInclineMonCoordTable,8
	.globl	gBowMonSpriteTemplate
	.align	2, 0
	.type	 gBowMonSpriteTemplate,object
	.size	 gBowMonSpriteTemplate,24
gBowMonSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBowMon
	.align	2, 0
	.type	 sTipMonSpriteTemplate,object
	.size	 sTipMonSpriteTemplate,24
sTipMonSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimTipMon
	.align	2, 0
	.type	 sSlashSliceAnimCmds1,object
sSlashSliceAnimCmds1:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sSlashSliceAnimCmds1,20
	.align	2, 0
	.type	 sSlashSliceAnimCmds2,object
sSlashSliceAnimCmds2:
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sSlashSliceAnimCmds2,8
	.align	2, 0
	.type	 sSlashSliceAnimTable,object
sSlashSliceAnimTable:
	.word	sSlashSliceAnimCmds1
	.word	sSlashSliceAnimCmds2
	.size	 sSlashSliceAnimTable,8
	.globl	gSlashSliceSpriteTemplate
	.align	2, 0
	.type	 gSlashSliceSpriteTemplate,object
	.size	 gSlashSliceSpriteTemplate,24
gSlashSliceSpriteTemplate:
	.short	0x27c7
	.short	0x27c7
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sSlashSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSlashSlice
	.globl	gFalseSwipeSliceSpriteTemplate
	.align	2, 0
	.type	 gFalseSwipeSliceSpriteTemplate,object
	.size	 gFalseSwipeSliceSpriteTemplate,24
gFalseSwipeSliceSpriteTemplate:
	.short	0x282e
	.short	0x282e
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sSlashSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFalseSwipeSlice
	.globl	gFalseSwipePositionedSliceSpriteTemplate
	.align	2, 0
	.type	 gFalseSwipePositionedSliceSpriteTemplate,object
	.size	 gFalseSwipePositionedSliceSpriteTemplate,24
gFalseSwipePositionedSliceSpriteTemplate:
	.short	0x282e
	.short	0x282e
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sSlashSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFalseSwipePositionedSlice
	.align	2, 0
	.type	 sEndureEnergyAnimCmds,object
sEndureEnergyAnimCmds:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0xc
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x18
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sEndureEnergyAnimCmds,20
	.align	2, 0
	.type	 sEndureEnergyAnimTable,object
sEndureEnergyAnimTable:
	.word	sEndureEnergyAnimCmds
	.size	 sEndureEnergyAnimTable,4
	.globl	gEndureEnergySpriteTemplate
	.align	2, 0
	.type	 gEndureEnergySpriteTemplate,object
	.size	 gEndureEnergySpriteTemplate,24
gEndureEnergySpriteTemplate:
	.short	0x27c8
	.short	0x27c8
	.word	gOamData_AffineOff_ObjNormal_16x32
	.word	sEndureEnergyAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimEndureEnergy
	.align	2, 0
	.type	 sSharpenSphereAnimCmds,object
sSharpenSphereAnimCmds:
	.short	0x0
	.byte	0x12
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x12
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x12
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x12
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x12
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x36
	.space	1
	.short	-0x1
	.space	2
	.size	 sSharpenSphereAnimCmds,60
	.align	2, 0
	.type	 sSharpenSphereAnimTable,object
sSharpenSphereAnimTable:
	.word	sSharpenSphereAnimCmds
	.size	 sSharpenSphereAnimTable,4
	.globl	gSharpenSphereSpriteTemplate
	.align	2, 0
	.type	 gSharpenSphereSpriteTemplate,object
	.size	 gSharpenSphereSpriteTemplate,24
gSharpenSphereSpriteTemplate:
	.short	0x27c9
	.short	0x27c9
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sSharpenSphereAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSharpenSphere
	.globl	gOctazookaBallSpriteTemplate
	.align	2, 0
	.type	 gOctazookaBallSpriteTemplate,object
	.size	 gOctazookaBallSpriteTemplate,24
gOctazookaBallSpriteTemplate:
	.short	0x2721
	.short	0x2721
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.align	2, 0
	.type	 sOctazookaAnimCmds,object
sOctazookaAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 sOctazookaAnimCmds,24
	.align	2, 0
	.type	 sOctazookaAnimTable,object
sOctazookaAnimTable:
	.word	sOctazookaAnimCmds
	.size	 sOctazookaAnimTable,4
	.globl	gOctazookaSmokeSpriteTemplate
	.align	2, 0
	.type	 gOctazookaSmokeSpriteTemplate,object
	.size	 gOctazookaSmokeSpriteTemplate,24
gOctazookaSmokeSpriteTemplate:
	.short	0x272e
	.short	0x272e
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sOctazookaAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.align	2, 0
	.type	 sConversionAnimCmds,object
sConversionAnimCmds:
	.short	0x3
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x1
	.byte	0x5
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sConversionAnimCmds,20
	.align	2, 0
	.type	 sConversionAnimTable,object
sConversionAnimTable:
	.word	sConversionAnimCmds
	.size	 sConversionAnimTable,4
	.align	2, 0
	.type	 sConversionAffineAnimCmds,object
sConversionAffineAnimCmds:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sConversionAffineAnimCmds,16
	.align	2, 0
	.type	 sConversionAffineAnimTable,object
sConversionAffineAnimTable:
	.word	sConversionAffineAnimCmds
	.size	 sConversionAffineAnimTable,4
	.globl	gConversionSpriteTemplate
	.align	2, 0
	.type	 gConversionSpriteTemplate,object
	.size	 gConversionSpriteTemplate,24
gConversionSpriteTemplate:
	.short	0x2722
	.short	0x2722
	.word	gOamData_AffineDouble_ObjBlend_8x8
	.word	sConversionAnimTable
	.word	0x0
	.word	sConversionAffineAnimTable
	.word	AnimConversion
	.align	2, 0
	.type	 sConversion2AnimCmds,object
sConversion2AnimCmds:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x1
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x3
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sConversion2AnimCmds,20
	.align	2, 0
	.type	 sConversion2AnimTable,object
sConversion2AnimTable:
	.word	sConversion2AnimCmds
	.size	 sConversion2AnimTable,4
	.globl	gConversion2SpriteTemplate
	.align	2, 0
	.type	 gConversion2SpriteTemplate,object
	.size	 gConversion2SpriteTemplate,24
gConversion2SpriteTemplate:
	.short	0x2722
	.short	0x2722
	.word	gOamData_AffineDouble_ObjBlend_8x8
	.word	sConversion2AnimTable
	.word	0x0
	.word	sConversionAffineAnimTable
	.word	AnimConversion2
	.globl	gMoonSpriteTemplate
	.align	2, 0
	.type	 gMoonSpriteTemplate,object
	.size	 gMoonSpriteTemplate,24
gMoonSpriteTemplate:
	.short	0x27d2
	.short	0x27d2
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMoon
	.align	2, 0
	.type	 sMoonlightSparkleAnimCmds,object
sMoonlightSparkleAnimCmds:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x4
	.byte	0x8
	.space	1
	.short	0x8
	.byte	0x8
	.space	1
	.short	0xc
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sMoonlightSparkleAnimCmds,20
	.align	2, 0
	.type	 sMoonlightSparkleAnimTable,object
sMoonlightSparkleAnimTable:
	.word	sMoonlightSparkleAnimCmds
	.size	 sMoonlightSparkleAnimTable,4
	.globl	gMoonlightSparkleSpriteTemplate
	.align	2, 0
	.type	 gMoonlightSparkleSpriteTemplate,object
	.size	 gMoonlightSparkleSpriteTemplate,24
gMoonlightSparkleSpriteTemplate:
	.short	0x27d3
	.short	0x27d3
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	sMoonlightSparkleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMoonlightSparkle
	.align	2, 0
	.type	 sHealingBlueStarAnimCmds,object
sHealingBlueStarAnimCmds:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	0x50
	.byte	0x3
	.space	1
	.short	0x60
	.byte	0x2
	.space	1
	.short	0x0
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sHealingBlueStarAnimCmds,36
	.align	2, 0
	.type	 sHealingBlueStarAnimTable,object
sHealingBlueStarAnimTable:
	.word	sHealingBlueStarAnimCmds
	.size	 sHealingBlueStarAnimTable,4
	.globl	gHealingBlueStarSpriteTemplate
	.align	2, 0
	.type	 gHealingBlueStarSpriteTemplate,object
	.size	 gHealingBlueStarSpriteTemplate,24
gHealingBlueStarSpriteTemplate:
	.short	0x272f
	.short	0x272f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sHealingBlueStarAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gHornHitSpriteTemplate
	.align	2, 0
	.type	 gHornHitSpriteTemplate,object
	.size	 gHornHitSpriteTemplate,24
gHornHitSpriteTemplate:
	.short	0x2724
	.short	0x2724
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimHornHit
	.align	2, 0
	.type	 sSuperFangAnimCmds,object
sSuperFangAnimCmds:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x30
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sSuperFangAnimCmds,20
	.align	2, 0
	.type	 sSuperFangAnimTable,object
sSuperFangAnimTable:
	.word	sSuperFangAnimCmds
	.size	 sSuperFangAnimTable,4
	.globl	gSuperFangSpriteTemplate
	.align	2, 0
	.type	 gSuperFangSpriteTemplate,object
	.size	 gSuperFangSpriteTemplate,24
gSuperFangSpriteTemplate:
	.short	0x27d0
	.short	0x27d0
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sSuperFangAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSuperFang
	.align	2, 0
	.type	 sWavyMusicNotesAnimCmds1,object
sWavyMusicNotesAnimCmds1:
	.short	0x0
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 sWavyMusicNotesAnimCmds1,8
	.align	2, 0
	.type	 sWavyMusicNotesAnimCmds2,object
sWavyMusicNotesAnimCmds2:
	.short	0x4
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 sWavyMusicNotesAnimCmds2,8
	.align	2, 0
	.type	 sWavyMusicNotesAnimCmds3,object
sWavyMusicNotesAnimCmds3:
	.short	0x8
	.byte	0x29
	.space	1
	.short	-0x1
	.space	2
	.size	 sWavyMusicNotesAnimCmds3,8
	.align	2, 0
	.type	 sWavyMusicNotesAnimCmds4,object
sWavyMusicNotesAnimCmds4:
	.short	0xc
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 sWavyMusicNotesAnimCmds4,8
	.align	2, 0
	.type	 sWavyMusicNotesAnimCmds5,object
sWavyMusicNotesAnimCmds5:
	.short	0x10
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 sWavyMusicNotesAnimCmds5,8
	.align	2, 0
	.type	 sWavyMusicNotesAnimCmds6,object
sWavyMusicNotesAnimCmds6:
	.short	0x14
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 sWavyMusicNotesAnimCmds6,8
	.align	2, 0
	.type	 sWavyMusicNotesAnimCmds7,object
sWavyMusicNotesAnimCmds7:
	.short	0x0
	.byte	0x8a
	.space	1
	.short	-0x1
	.space	2
	.size	 sWavyMusicNotesAnimCmds7,8
	.align	2, 0
	.type	 sWavyMusicNotesAnimCmds8,object
sWavyMusicNotesAnimCmds8:
	.short	0x4
	.byte	0x8a
	.space	1
	.short	-0x1
	.space	2
	.size	 sWavyMusicNotesAnimCmds8,8
	.globl	gMusicNotesAnimTable
	.align	2, 0
	.type	 gMusicNotesAnimTable,object
gMusicNotesAnimTable:
	.word	sWavyMusicNotesAnimCmds1
	.word	sWavyMusicNotesAnimCmds2
	.word	sWavyMusicNotesAnimCmds3
	.word	sWavyMusicNotesAnimCmds4
	.word	sWavyMusicNotesAnimCmds5
	.word	sWavyMusicNotesAnimCmds6
	.word	sWavyMusicNotesAnimCmds7
	.word	sWavyMusicNotesAnimCmds8
	.size	 gMusicNotesAnimTable,32
	.align	2, 0
	.type	 sWavyMusicNotesAffineAnimCmds,object
sWavyMusicNotesAffineAnimCmds:
	.short	0xc
	.short	0xc
	.byte	0x0
	.byte	0x10
	.space	2
	.short	-0xc
	.short	-0xc
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sWavyMusicNotesAffineAnimCmds,24
	.align	2, 0
	.type	 sMusicNotesAffineAnimTable,object
sMusicNotesAffineAnimTable:
	.word	sWavyMusicNotesAffineAnimCmds
	.size	 sMusicNotesAffineAnimTable,4
	.globl	gWavyMusicNotesSpriteTemplate
	.align	2, 0
	.type	 gWavyMusicNotesSpriteTemplate,object
	.size	 gWavyMusicNotesSpriteTemplate,24
gWavyMusicNotesSpriteTemplate:
	.short	0x2758
	.short	0x2758
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gMusicNotesAnimTable
	.word	0x0
	.word	sMusicNotesAffineAnimTable
	.word	AnimWavyMusicNotes
	.align	1, 0
	.type	 sParticlesColorBlendTable,object
sParticlesColorBlendTable:
	.short	0x2758
	.short	0x7fff
	.short	0x735f
	.short	0x6adf
	.short	0x623f
	.short	0x59bf
	.short	0x2771
	.short	0x7fff
	.short	0x6bf9
	.short	0x57f4
	.short	0x43ef
	.short	0x33ea
	.short	0x27c9
	.short	0x7fff
	.short	0x63ff
	.short	0x47ff
	.short	0x2bff
	.short	0xfff
	.short	0x27bf
	.short	0x7fff
	.short	0x7f9a
	.short	0x7f55
	.short	0x7f10
	.short	0x7ecc
	.size	 sParticlesColorBlendTable,48
	.globl	gFastFlyingMusicNotesSpriteTemplate
	.align	2, 0
	.type	 gFastFlyingMusicNotesSpriteTemplate,object
	.size	 gFastFlyingMusicNotesSpriteTemplate,24
gFastFlyingMusicNotesSpriteTemplate:
	.short	0x2758
	.short	0x2758
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gMusicNotesAnimTable
	.word	0x0
	.word	sMusicNotesAffineAnimTable
	.word	AnimFlyingMusicNotes
	.globl	gBellyDrumHandSpriteTemplate
	.align	2, 0
	.type	 gBellyDrumHandSpriteTemplate,object
	.size	 gBellyDrumHandSpriteTemplate,24
gBellyDrumHandSpriteTemplate:
	.short	0x27d1
	.short	0x27d1
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBellyDrumHand
	.align	2, 0
	.type	 sSlowFlyingMusicNotesAffineAnimCmds,object
sSlowFlyingMusicNotesAffineAnimCmds:
	.short	0xa0
	.short	0xa0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sSlowFlyingMusicNotesAffineAnimCmds,24
	.align	2, 0
	.type	 sSlowFlyinsMusicNotesAffineAnimTable,object
sSlowFlyinsMusicNotesAffineAnimTable:
	.word	sSlowFlyingMusicNotesAffineAnimCmds
	.size	 sSlowFlyinsMusicNotesAffineAnimTable,4
	.globl	gSlowFlyingMusicNotesSpriteTemplate
	.align	2, 0
	.type	 gSlowFlyingMusicNotesSpriteTemplate,object
	.size	 gSlowFlyingMusicNotesSpriteTemplate,24
gSlowFlyingMusicNotesSpriteTemplate:
	.short	0x2758
	.short	0x2758
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gMusicNotesAnimTable
	.word	0x0
	.word	sSlowFlyinsMusicNotesAffineAnimTable
	.word	AnimSlowFlyingMusicNotes
	.align	2, 0
	.type	 sMetronomeThroughtBubbleAnimCmds1,object
sMetronomeThroughtBubbleAnimCmds1:
	.short	0x0
	.byte	0x42
	.space	1
	.short	0x10
	.byte	0x42
	.space	1
	.short	0x20
	.byte	0x42
	.space	1
	.short	0x30
	.byte	0x42
	.space	1
	.short	-0x1
	.space	2
	.size	 sMetronomeThroughtBubbleAnimCmds1,20
	.align	2, 0
	.type	 sMetronomeThroughtBubbleAnimCmds3,object
sMetronomeThroughtBubbleAnimCmds3:
	.short	0x30
	.byte	0x42
	.space	1
	.short	0x20
	.byte	0x42
	.space	1
	.short	0x10
	.byte	0x42
	.space	1
	.short	0x0
	.byte	0x42
	.space	1
	.short	-0x1
	.space	2
	.size	 sMetronomeThroughtBubbleAnimCmds3,20
	.align	2, 0
	.type	 sMetronomeThroughtBubbleAnimCmds2,object
sMetronomeThroughtBubbleAnimCmds2:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x30
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sMetronomeThroughtBubbleAnimCmds2,20
	.align	2, 0
	.type	 sMetronomeThroughtBubbleAnimCmds4,object
sMetronomeThroughtBubbleAnimCmds4:
	.short	0x30
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x0
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sMetronomeThroughtBubbleAnimCmds4,20
	.align	2, 0
	.type	 sMetronomeThroughtBubbleAnimTable,object
sMetronomeThroughtBubbleAnimTable:
	.word	sMetronomeThroughtBubbleAnimCmds1
	.word	sMetronomeThroughtBubbleAnimCmds2
	.word	sMetronomeThroughtBubbleAnimCmds3
	.word	sMetronomeThroughtBubbleAnimCmds4
	.size	 sMetronomeThroughtBubbleAnimTable,16
	.globl	gThoughtBubbleSpriteTemplate
	.align	2, 0
	.type	 gThoughtBubbleSpriteTemplate,object
	.size	 gThoughtBubbleSpriteTemplate,24
gThoughtBubbleSpriteTemplate:
	.short	0x27e1
	.short	0x27e1
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sMetronomeThroughtBubbleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimThoughtBubble
	.align	2, 0
	.type	 sMetronomeFingerAffineAnimCmds1,object
sMetronomeFingerAffineAnimCmds1:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x1e
	.short	0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sMetronomeFingerAffineAnimCmds1,24
	.align	2, 0
	.type	 sMetronomeFingerAffineAnimCmds2,object
sMetronomeFingerAffineAnimCmds2:
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0xb
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xb
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	-0x1e
	.short	-0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sMetronomeFingerAffineAnimCmds2,40
	.align	2, 0
	.type	 sMetronomeFingerAffineAnimCmds2_2,object
sMetronomeFingerAffineAnimCmds2_2:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x1e
	.short	0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0xb
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xb
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	-0x1e
	.short	-0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sMetronomeFingerAffineAnimCmds2_2,72
	.align	2, 0
	.type	 sMetronomeFingerAffineAnimTable,object
sMetronomeFingerAffineAnimTable:
	.word	sMetronomeFingerAffineAnimCmds1
	.word	sMetronomeFingerAffineAnimCmds2
	.size	 sMetronomeFingerAffineAnimTable,8
	.globl	gMetronomeFingerSpriteTemplate
	.align	2, 0
	.type	 gMetronomeFingerSpriteTemplate,object
	.size	 gMetronomeFingerSpriteTemplate,24
gMetronomeFingerSpriteTemplate:
	.short	0x2750
	.short	0x2750
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sMetronomeFingerAffineAnimTable
	.word	AnimMetronomeFinger
	.globl	gFollowMeFingerSpriteTemplate
	.align	2, 0
	.type	 gFollowMeFingerSpriteTemplate,object
	.size	 gFollowMeFingerSpriteTemplate,24
gFollowMeFingerSpriteTemplate:
	.short	0x2750
	.short	0x2750
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sMetronomeFingerAffineAnimTable
	.word	AnimFollowMeFinger
	.align	2, 0
	.type	 sTauntFingerAnimCmds1,object
sTauntFingerAnimCmds1:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sTauntFingerAnimCmds1,8
	.align	2, 0
	.type	 sTauntFingerAnimCmds2,object
sTauntFingerAnimCmds2:
	.short	0x0
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 sTauntFingerAnimCmds2,8
	.align	2, 0
	.type	 sTauntFingerAnimCmds3,object
sTauntFingerAnimCmds3:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 sTauntFingerAnimCmds3,32
	.align	2, 0
	.type	 sTauntFingerAnimCmds4,object
sTauntFingerAnimCmds4:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 sTauntFingerAnimCmds4,32
	.align	2, 0
	.type	 sTauntFingerAnimTable,object
sTauntFingerAnimTable:
	.word	sTauntFingerAnimCmds1
	.word	sTauntFingerAnimCmds2
	.word	sTauntFingerAnimCmds3
	.word	sTauntFingerAnimCmds4
	.size	 sTauntFingerAnimTable,16
	.globl	gTauntFingerSpriteTemplate
	.align	2, 0
	.type	 gTauntFingerSpriteTemplate,object
	.size	 gTauntFingerSpriteTemplate,24
gTauntFingerSpriteTemplate:
	.short	0x27e6
	.short	0x27e6
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sTauntFingerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimTauntFinger
.text
	.align	2, 0
	.type	 AnimMovePowderParticle,function
	.thumb_func
AnimMovePowderParticle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L6
	ldrh	r0, [r5]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldrh	r0, [r5, #0x8]
	neg	r0, r0
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L3:
	ldrh	r0, [r5, #0x8]
.L5:
	strh	r0, [r4, #0x34]
	ldr	r0, .L8
	ldrh	r0, [r0, #0xa]
	strh	r0, [r4, #0x36]
	ldr	r0, .L8+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gBattleAnimArgs
	.word	AnimMovePowderParticle_Step
.Lfe1:
	.size	 AnimMovePowderParticle,.Lfe1-AnimMovePowderParticle
	.align	2, 0
	.type	 AnimMovePowderParticle_Step,function
	.thumb_func
AnimMovePowderParticle_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L11	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r1, r1, r0
	strh	r1, [r4, #0x32]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L12
.L11:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L12:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimMovePowderParticle_Step,.Lfe2-AnimMovePowderParticle_Step
	.align	2, 0
	.type	 AnimPowerAbsorptionOrb,function
	.thumb_func
AnimPowerAbsorptionOrb:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L14
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L14+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L14+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L14+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	StartAnimLinearTranslation
	.word	DestroySpriteAndMatrix
.Lfe3:
	.size	 AnimPowerAbsorptionOrb,.Lfe3-AnimPowerAbsorptionOrb
	.align	2, 0
	.type	 AnimSolarBeamBigOrb,function
	.thumb_func
AnimSolarBeamBigOrb:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L17
	ldrb	r1, [r5, #0x6]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L17+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L17+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L17+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe4:
	.size	 AnimSolarBeamBigOrb,.Lfe4-AnimSolarBeamBigOrb
	.align	2, 0
	.type	 AnimSolarBeamSmallOrb,function
	.thumb_func
AnimSolarBeamSmallOrb:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r6, .L20
	ldrh	r0, [r6, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L20+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r6, #0x6]
	strh	r0, [r4, #0x38]
	ldr	r1, .L20+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimSolarBeamSmallOrb_Step
.Lfe5:
	.size	 AnimSolarBeamSmallOrb,.Lfe5-AnimSolarBeamSmallOrb
	.align	2, 0
	.type	 AnimSolarBeamSmallOrb_Step,function
	.thumb_func
AnimSolarBeamSmallOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L23	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
	b	.L24
.L23:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	ble	.L25	@cond_branch
	ldr	r0, .L28
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x1
	b	.L27
.L29:
	.align	2, 0
.L28:
	.word	gBattleAnimTarget
.L25:
	ldr	r0, .L30
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x6
.L27:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0xf
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
.L24:
	pop	{r4}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gBattleAnimTarget
.Lfe6:
	.size	 AnimSolarBeamSmallOrb_Step,.Lfe6-AnimSolarBeamSmallOrb_Step
	.align	2, 0
	.globl	AnimTask_CreateSmallSolarBeamOrbs
	.type	 AnimTask_CreateSmallSolarBeamOrbs,function
	.thumb_func
AnimTask_CreateSmallSolarBeamOrbs:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L35
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L33	@cond_branch
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	mov	r0, #0x6
	strh	r0, [r5, #0x8]
	ldr	r1, .L35+0x4
	mov	r0, #0xf
	strh	r0, [r1]
	strh	r2, [r1, #0x2]
	mov	r0, #0x50
	strh	r0, [r1, #0x4]
	strh	r2, [r1, #0x6]
	ldr	r4, .L35+0x8
	ldr	r0, .L35+0xc
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	CreateSpriteAndAnimate
.L33:
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xf
	bne	.L34	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L34:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gSolarBeamSmallOrbSpriteTemplate
	.word	gBattleAnimTarget
.Lfe7:
	.size	 AnimTask_CreateSmallSolarBeamOrbs,.Lfe7-AnimTask_CreateSmallSolarBeamOrbs
	.align	2, 0
	.type	 AnimAbsorptionOrb,function
	.thumb_func
AnimAbsorptionOrb:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r6, .L38
	ldrh	r0, [r6, #0x6]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L38+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L38+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	AnimAbsorptionOrb_Step
.Lfe8:
	.size	 AnimAbsorptionOrb,.Lfe8-AnimAbsorptionOrb
	.align	2, 0
	.type	 AnimAbsorptionOrb_Step,function
	.thumb_func
AnimAbsorptionOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L41:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimAbsorptionOrb_Step,.Lfe9-AnimAbsorptionOrb_Step
	.align	2, 0
	.type	 AnimHyperBeamOrb,function
	.thumb_func
AnimHyperBeamOrb:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	Random
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x7
	and	r1, r1, r0
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r4, .L46
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x14
	b	.L45
.L47:
	.align	2, 0
.L46:
	.word	gBattleAnimAttacker
.L43:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x14
.L45:
	strh	r0, [r5, #0x20]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1f
	and	r0, r0, r1
	add	r0, r0, #0x40
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldr	r4, .L48
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimFastLinearTranslationWithSpeed
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x38]
	add	r0, r5, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	strh	r0, [r5, #0x3a]
	ldr	r1, .L48+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gBattleAnimTarget
	.word	AnimHyperBeamOrb_Step
.Lfe10:
	.size	 AnimHyperBeamOrb,.Lfe10-AnimHyperBeamOrb
	.align	2, 0
	.type	 AnimHyperBeamOrb_Step,function
	.thumb_func
AnimHyperBeamOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimFastTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
	b	.L52
.L51:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xc
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7e
	bgt	.L53	@cond_branch
	ldrh	r0, [r4, #0x3a]
	b	.L55
.L53:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
.L55:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x18
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
.L52:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 AnimHyperBeamOrb_Step,.Lfe11-AnimHyperBeamOrb_Step
	.align	2, 0
	.type	 AnimLeechSeed,function
	.thumb_func
AnimLeechSeed:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L58
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldr	r1, .L58+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L57:
	ldr	r4, .L58+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r5, .L58+0x8
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	add	r0, r6, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L58+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimLeechSeed_Step
.Lfe12:
	.size	 AnimLeechSeed,.Lfe12-AnimLeechSeed
	.align	2, 0
	.type	 AnimLeechSeed_Step,function
	.thumb_func
AnimLeechSeed_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L61	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	ldr	r0, .L62
	str	r0, [r4, #0x1c]
	ldr	r1, .L62+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
.L61:
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	WaitAnimForDuration
	.word	AnimLeechSeedSprouts
.Lfe13:
	.size	 AnimLeechSeed_Step,.Lfe13-AnimLeechSeed_Step
	.align	2, 0
	.type	 AnimLeechSeedSprouts,function
	.thumb_func
AnimLeechSeedSprouts:
	push	{r4, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0x3c
	strh	r0, [r4, #0x2e]
	ldr	r0, .L65
	str	r0, [r4, #0x1c]
	ldr	r1, .L65+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe14:
	.size	 AnimLeechSeedSprouts,.Lfe14-AnimLeechSeedSprouts
	.align	2, 0
	.type	 AnimSporeParticle,function
	.thumb_func
AnimSporeParticle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r5, .L69
	ldrb	r1, [r5, #0x8]
	add	r0, r4, #0
	bl	StartSpriteAnim
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L68	@cond_branch
	ldrb	r0, [r4, #0x1]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
.L68:
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x30]
	ldr	r1, .L69+0x4
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gBattleAnimArgs
	.word	AnimSporeParticle_Step
.Lfe15:
	.size	 AnimSporeParticle,.Lfe15-AnimSporeParticle
	.align	2, 0
	.type	 AnimSporeParticle_Step,function
	.thumb_func
AnimSporeParticle_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	neg	r1, r1
	bl	Cos
	ldrh	r1, [r4, #0x32]
	add	r1, r1, #0x18
	strh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L72	@cond_branch
	ldr	r0, .L77
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	b	.L76
.L78:
	.align	2, 0
.L77:
	.word	gBattleAnimTarget
.L72:
	ldr	r0, .L79
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L74	@cond_branch
	mov	r2, #0x3
.L74:
	mov	r0, #0x3
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
.L76:
	strb	r0, [r4, #0x5]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L75	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L75:
	pop	{r4}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gBattleAnimTarget
.Lfe16:
	.size	 AnimSporeParticle_Step,.Lfe16-AnimSporeParticle_Step
	.align	2, 0
	.globl	AnimTask_SporeDoubleBattle
	.type	 AnimTask_SporeDoubleBattle,function
	.thumb_func
AnimTask_SporeDoubleBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L83	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L82	@cond_branch
.L83:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L84
.L82:
	ldr	r0, .L87
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L85	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x3
	bl	SetAnimBgAttribute
	b	.L86
.L88:
	.align	2, 0
.L87:
	.word	gBattleAnimTarget
.L85:
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L86:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L84:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 AnimTask_SporeDoubleBattle,.Lfe17-AnimTask_SporeDoubleBattle
	.align	2, 0
	.type	 AnimPetalDanceBigFlower,function
	.thumb_func
AnimPetalDanceBigFlower:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L90
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldr	r0, .L90+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x4]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	mov	r0, #0x40
	strh	r0, [r4, #0x38]
	ldr	r1, .L90+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	AnimPetalDanceBigFlower_Step
.Lfe18:
	.size	 AnimPetalDanceBigFlower,.Lfe18-AnimPetalDanceBigFlower
	.align	2, 0
	.type	 AnimPetalDanceBigFlower_Step,function
	.thumb_func
AnimPetalDanceBigFlower_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L93	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	neg	r1, r1
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L94	@cond_branch
	ldr	r0, .L98
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	sub	r0, r0, #0x1
	b	.L97
.L99:
	.align	2, 0
.L98:
	.word	gBattleAnimAttacker
.L94:
	ldr	r0, .L100
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x1
.L97:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L96
.L101:
	.align	2, 0
.L100:
	.word	gBattleAnimAttacker
.L93:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L96:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimPetalDanceBigFlower_Step,.Lfe19-AnimPetalDanceBigFlower_Step
	.align	2, 0
	.type	 AnimPetalDanceSmallFlower,function
	.thumb_func
AnimPetalDanceSmallFlower:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L103
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldr	r0, .L103+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x4]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	mov	r0, #0x40
	strh	r0, [r4, #0x38]
	ldr	r1, .L103+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	AnimPetalDanceSmallFlower_Step
.Lfe20:
	.size	 AnimPetalDanceSmallFlower,.Lfe20-AnimPetalDanceSmallFlower
	.align	2, 0
	.type	 AnimPetalDanceSmallFlower_Step,function
	.thumb_func
AnimPetalDanceSmallFlower_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L106	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x38]
	add	r0, r1, #0
	sub	r0, r0, #0x3b
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bls	.L108	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0xbb
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bhi	.L107	@cond_branch
.L108:
	ldrb	r2, [r4, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	eor	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
.L107:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L109
.L106:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L109:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimPetalDanceSmallFlower_Step,.Lfe21-AnimPetalDanceSmallFlower_Step
	.align	2, 0
	.type	 AnimRazorLeafParticle,function
	.thumb_func
AnimRazorLeafParticle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L111
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L111+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldr	r0, .L111+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L112:
	.align	2, 0
.L111:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimRazorLeafParticle_Step1
.Lfe22:
	.size	 AnimRazorLeafParticle,.Lfe22-AnimRazorLeafParticle
	.align	2, 0
	.type	 AnimRazorLeafParticle_Step1,function
	.thumb_func
AnimRazorLeafParticle_Step1:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x32]
	mov	r2, #0x32
	ldrsh	r3, [r1, r2]
	cmp	r3, #0
	bne	.L114	@cond_branch
	ldrh	r0, [r1, #0x30]
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L115	@cond_branch
	mov	r0, #0x80
	strh	r0, [r1, #0x2e]
	strh	r3, [r1, #0x30]
	strh	r3, [r1, #0x32]
	b	.L116
.L115:
	strh	r2, [r1, #0x2e]
	strh	r2, [r1, #0x30]
	strh	r2, [r1, #0x32]
.L116:
	ldr	r0, .L118
	str	r0, [r1, #0x1c]
	b	.L117
.L119:
	.align	2, 0
.L118:
	.word	AnimRazorLeafParticle_Step2
.L114:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x32]
	ldrh	r0, [r1, #0x2e]
	ldrh	r2, [r1, #0x20]
	add	r0, r0, r2
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x22]
	add	r0, r0, r2
	strh	r0, [r1, #0x22]
.L117:
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 AnimRazorLeafParticle_Step1,.Lfe23-AnimRazorLeafParticle_Step1
	.align	2, 0
	.type	 AnimRazorLeafParticle_Step2,function
	.thumb_func
AnimRazorLeafParticle_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L126
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L121	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x19
	bl	Sin
	neg	r0, r0
	b	.L125
.L127:
	.align	2, 0
.L126:
	.word	gBattleAnimAttacker
.L121:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x19
	bl	Sin
.L125:
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L123	@cond_branch
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
.L123:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	ble	.L124	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L124:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 AnimRazorLeafParticle_Step2,.Lfe24-AnimRazorLeafParticle_Step2
	.align	2, 0
	.type	 AnimTranslateLinearSingleSineWave,function
	.thumb_func
AnimTranslateLinearSingleSineWave:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L136
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L129	@cond_branch
	ldr	r1, .L136+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L129:
	ldr	r6, .L136+0x4
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r1, #0xc
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L130	@cond_branch
	ldr	r4, .L136+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	b	.L134
.L137:
	.align	2, 0
.L136:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L130:
	ldr	r0, .L138
	ldrb	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x32
	add	r3, r5, #0
	add	r3, r3, #0x36
	mov	r1, #0x1
	bl	SetAverageBattlerPositions
	ldrh	r0, [r6, #0x4]
	ldrh	r1, [r5, #0x32]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r6, #0x6]
	ldrh	r1, [r5, #0x36]
	add	r0, r0, r1
.L134:
	strh	r0, [r5, #0x36]
	ldr	r0, .L138+0x4
	ldrh	r0, [r0, #0xa]
	strh	r0, [r5, #0x38]
	add	r0, r5, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L138+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L138
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L132	@cond_branch
	mov	r0, #0x1
	b	.L135
.L139:
	.align	2, 0
.L138:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L132:
	mov	r0, #0x0
.L135:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L140
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	AnimTranslateLinearSingleSineWave_Step
.Lfe25:
	.size	 AnimTranslateLinearSingleSineWave,.Lfe25-AnimTranslateLinearSingleSineWave
	.align	2, 0
	.type	 AnimTranslateLinearSingleSineWave_Step,function
	.thumb_func
AnimTranslateLinearSingleSineWave_Step:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	mov	r7, #0x0
	ldrh	r5, [r6, #0x2e]
	ldrh	r4, [r6, #0x3c]
	mov	r0, #0x1
	strh	r0, [r6, #0x2e]
	add	r0, r6, #0
	bl	TranslateAnimHorizontalArc
	ldrh	r0, [r6, #0x3c]
	strh	r5, [r6, #0x2e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0xc8
	ble	.L143	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x37
	bgt	.L143	@cond_branch
	ldrh	r0, [r6, #0x6]
	cmp	r0, #0
	bne	.L149	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r6, #0x6]
.L143:
	ldrh	r0, [r6, #0x6]
	cmp	r0, #0
	beq	.L144	@cond_branch
.L149:
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r3, r6, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r6, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x6]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bne	.L144	@cond_branch
	mov	r7, #0x1
.L144:
	mov	r2, #0x20
	ldrsh	r0, [r6, r2]
	mov	r2, #0x24
	ldrsh	r1, [r6, r2]
	add	r0, r0, r1
	add	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L147	@cond_branch
	mov	r0, #0x22
	ldrsh	r1, [r6, r0]
	mov	r2, #0x26
	ldrsh	r0, [r6, r2]
	add	r1, r1, r0
	cmp	r1, #0xa0
	bgt	.L147	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L146	@cond_branch
.L147:
	mov	r7, #0x1
.L146:
	cmp	r7, #0
	beq	.L148	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
.L148:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 AnimTranslateLinearSingleSineWave_Step,.Lfe26-AnimTranslateLinearSingleSineWave_Step
	.align	2, 0
	.globl	AnimMoveTwisterParticle
	.type	 AnimMoveTwisterParticle,function
	.thumb_func
AnimMoveTwisterParticle:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L151	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L151	@cond_branch
	ldr	r0, .L152
	ldrb	r0, [r0]
	add	r2, r4, #0
	add	r2, r2, #0x20
	add	r3, r4, #0
	add	r3, r3, #0x22
	mov	r1, #0x1
	bl	SetAverageBattlerPositions
.L151:
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x20
	strh	r0, [r4, #0x22]
	ldr	r1, .L152+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x36]
	ldr	r0, .L152+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimMoveTwisterParticle_Step
.Lfe27:
	.size	 AnimMoveTwisterParticle,.Lfe27-AnimMoveTwisterParticle
	.align	2, 0
	.type	 AnimMoveTwisterParticle_Step,function
	.thumb_func
AnimMoveTwisterParticle_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xff
	bne	.L155	@cond_branch
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x22]
	b	.L156
.L155:
	cmp	r0, #0
	ble	.L156	@cond_branch
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x22]
	sub	r0, r1, #0x2
	strh	r0, [r4, #0x30]
.L156:
	ldrh	r3, [r4, #0x32]
	ldrh	r5, [r4, #0x38]
	add	r2, r3, r5
	strh	r2, [r4, #0x38]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r5, #0x36
	ldrsh	r0, [r4, r5]
	cmp	r1, r0
	bge	.L158	@cond_branch
	add	r0, r2, r3
	strh	r0, [r4, #0x38]
.L158:
	ldrh	r1, [r4, #0x38]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r5, #0x38
	ldrsh	r0, [r4, r5]
	mov	r1, #0x5
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	bgt	.L159	@cond_branch
	ldr	r0, .L163
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	b	.L162
.L164:
	.align	2, 0
.L163:
	.word	gBattleAnimTarget
.L159:
	ldr	r0, .L165
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
.L162:
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L161	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L161:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	gBattleAnimTarget
.Lfe28:
	.size	 AnimMoveTwisterParticle_Step,.Lfe28-AnimMoveTwisterParticle_Step
	.align	2, 0
	.type	 AnimConstrictBinding,function
	.thumb_func
AnimConstrictBinding:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r4, .L168
	ldrb	r1, [r4, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAffineAnim
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x3a]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x3c]
	ldr	r0, .L168+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gBattleAnimArgs
	.word	AnimConstrictBinding_Step1
.Lfe29:
	.size	 AnimConstrictBinding,.Lfe29-AnimConstrictBinding
	.align	2, 0
	.type	 AnimConstrictBinding_Step1,function
	.thumb_func
AnimConstrictBinding_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L172
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L172+0x4
	cmp	r1, r0
	bne	.L171	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldr	r0, .L172+0x8
	str	r0, [r4, #0x1c]
.L171:
	pop	{r4}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	AnimConstrictBinding_Step2
.Lfe30:
	.size	 AnimConstrictBinding_Step1,.Lfe30-AnimConstrictBinding_Step1
	.align	2, 0
	.type	 AnimConstrictBinding_Step2,function
	.thumb_func
AnimConstrictBinding_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L175	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0xb
	b	.L181
.L175:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0xb
.L181:
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L177	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x32]
.L177:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L178	@cond_branch
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L179	@cond_branch
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	b	.L178
.L179:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L178:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 AnimConstrictBinding_Step2,.Lfe31-AnimConstrictBinding_Step2
	.align	2, 0
	.globl	AnimTask_ShrinkTargetCopy
	.type	 AnimTask_ShrinkTargetCopy,function
	.thumb_func
AnimTask_ShrinkTargetCopy:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L185
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L183	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L184
.L186:
	.align	2, 0
.L185:
	.word	gSprites
.L183:
	add	r0, r2, #0
	mov	r1, #0x1
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L187
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L187+0x4
	ldrh	r1, [r2]
	strh	r1, [r0, #0x8]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0xa]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x1e]
	ldr	r1, .L187+0x8
	str	r1, [r0]
.L184:
	pop	{r4}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_DuplicateAndShrinkToPos_Step1
.Lfe32:
	.size	 AnimTask_ShrinkTargetCopy,.Lfe32-AnimTask_ShrinkTargetCopy
	.align	2, 0
	.type	 AnimTask_DuplicateAndShrinkToPos_Step1,function
	.thumb_func
AnimTask_DuplicateAndShrinkToPos_Step1:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L192
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x8]
	ldrh	r0, [r4, #0x1c]
	add	r1, r1, r0
	strh	r1, [r4, #0x1c]
	ldr	r2, .L192+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r5, #0x24]
	ldr	r0, .L192+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	ldrh	r0, [r5, #0x24]
	neg	r0, r0
	strh	r0, [r5, #0x24]
.L190:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x1e]
	mov	r0, #0x1e
	ldrsh	r2, [r4, r0]
	add	r0, r6, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	add	r0, r6, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L191	@cond_branch
	strh	r0, [r4, #0x8]
	ldr	r0, .L192+0xc
	str	r0, [r4]
.L191:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimTarget
	.word	AnimTask_DuplicateAndShrinkToPos_Step2
.Lfe33:
	.size	 AnimTask_DuplicateAndShrinkToPos_Step1,.Lfe33-AnimTask_DuplicateAndShrinkToPos_Step1
	.align	2, 0
	.type	 AnimTask_DuplicateAndShrinkToPos_Step2,function
	.thumb_func
AnimTask_DuplicateAndShrinkToPos_Step2:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L200
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L200+0x4
	cmp	r1, r0
	bne	.L195	@cond_branch
	ldr	r0, .L200+0x8
	lsl	r2, r3, #0x2
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r6, r1, r0
	mov	r1, #0x8
	ldrsh	r5, [r6, r1]
	add	r4, r0, #0
	cmp	r5, #0
	bne	.L197	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L200+0xc
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r5, [r0, #0x24]
	strh	r5, [r0, #0x26]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L194
.L201:
	.align	2, 0
.L200:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
	.word	gSprites
.L195:
	ldr	r1, .L202
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0x8
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	cmp	r0, #0
	beq	.L194	@cond_branch
.L197:
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L194	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
.L194:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	gTasks
.Lfe34:
	.size	 AnimTask_DuplicateAndShrinkToPos_Step2,.Lfe34-AnimTask_DuplicateAndShrinkToPos_Step2
	.align	2, 0
	.type	 AnimMimicOrb,function
	.thumb_func
AnimMimicOrb:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L206	@cond_branch
	cmp	r0, #0x1
	beq	.L208	@cond_branch
	b	.L205
.L206:
	ldr	r6, .L212
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L207	@cond_branch
	ldr	r1, .L212+0x4
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1]
.L207:
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L212+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L205
.L213:
	.align	2, 0
.L212:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L208:
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L205	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	mov	r0, #0x19
	strh	r0, [r5, #0x2e]
	ldr	r4, .L214
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L214+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L214+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L205:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L215:
	.align	2, 0
.L214:
	.word	gBattleAnimAttacker
	.word	InitAndRunAnimFastLinearTranslation
	.word	DestroyAnimSprite
.Lfe35:
	.size	 AnimMimicOrb,.Lfe35-AnimMimicOrb
	.align	2, 0
	.type	 AnimIngrainRoot,function
	.thumb_func
AnimIngrainRoot:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L217	@cond_branch
	ldr	r4, .L219
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L219+0x4
	ldrh	r0, [r4]
	strh	r0, [r5, #0x24]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4, #0x4]
	add	r0, r0, #0x1e
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r4, #0x6]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	mov	r2, #0x22
	ldrsh	r0, [r5, r2]
	mov	r2, #0x26
	ldrsh	r1, [r5, r2]
	add	r0, r0, r1
	cmp	r0, #0x78
	ble	.L217	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r1, r0, #0
	sub	r1, r1, #0x78
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	add	r1, r1, r0
	strh	r1, [r5, #0x22]
.L217:
	ldr	r0, .L219+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimRootFlickerOut
.Lfe36:
	.size	 AnimIngrainRoot,.Lfe36-AnimIngrainRoot
	.align	2, 0
	.type	 AnimFrenzyPlantRoot,function
	.thumb_func
AnimFrenzyPlantRoot:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	mov	r9, r0
	ldr	r4, .L222
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L222+0x4
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	sub	r4, r4, r5
	lsl	r4, r4, #0x10
	lsr	r2, r2, #0x18
	mov	r1, r8
	sub	r2, r2, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsr	r3, r4, #0x10
	mov	sl, r3
	asr	r4, r4, #0x10
	ldr	r6, .L222+0x8
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	mul	r0, r0, r4
	mov	r1, #0x64
	str	r2, [sp]
	bl	__divsi3
	add	r5, r5, r0
	mov	r3, r9
	strh	r5, [r3, #0x20]
	ldr	r2, [sp]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x0
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r8, r8, r0
	mov	r1, r8
	mov	r0, r9
	strh	r1, [r0, #0x22]
	ldrh	r0, [r6, #0x2]
	mov	r3, r9
	strh	r0, [r3, #0x24]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r3, #0x26]
	ldrb	r0, [r6, #0x6]
	add	r0, r0, #0x1e
	mov	r1, r9
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0x8]
	mov	r0, r9
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0xa]
	mov	r1, r9
	strh	r0, [r1, #0x32]
	ldr	r0, .L222+0xc
	str	r0, [r1, #0x1c]
	ldr	r1, .L222+0x10
	mov	r3, r9
	ldrh	r0, [r3, #0x20]
	strh	r0, [r1]
	ldrh	r0, [r3, #0x22]
	strh	r0, [r1, #0x2]
	mov	r0, sl
	strh	r0, [r1, #0x4]
	ldr	r2, [sp]
	strh	r2, [r1, #0x6]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimRootFlickerOut
	.word	sFrenzyPlantRootData
.Lfe37:
	.size	 AnimFrenzyPlantRoot,.Lfe37-AnimFrenzyPlantRoot
	.align	2, 0
	.type	 AnimRootFlickerOut,function
	.thumb_func
AnimRootFlickerOut:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	add	r1, r1, #0x1
	strh	r1, [r3, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	sub	r0, r0, #0xa
	cmp	r1, r0
	ble	.L225	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	mov	r2, #0x3e
	add	r2, r2, r3
	mov	ip, r2
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
.L225:
	mov	r2, #0x2e
	ldrsh	r1, [r3, r2]
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	ble	.L226	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L226:
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 AnimRootFlickerOut,.Lfe38-AnimRootFlickerOut
	.align	2, 0
	.type	 AnimIngrainOrb,function
	.thumb_func
AnimIngrainOrb:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L228	@cond_branch
	ldr	r5, .L230
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L230+0x4
	lsr	r0, r0, #0x18
	ldrh	r2, [r4]
	add	r0, r0, r2
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x22]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r6, #0x30]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x34]
.L228:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2e]
	ldrh	r1, [r6, #0x30]
	mul	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r2, #0x2e
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	mov	r2, #0x32
	ldrsh	r1, [r6, r2]
	bl	Sin
	strh	r0, [r6, #0x26]
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	mov	r2, #0x34
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	ble	.L229	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
.L229:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L231:
	.align	2, 0
.L230:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe39:
	.size	 AnimIngrainOrb,.Lfe39-AnimIngrainOrb
	.align	2, 0
	.type	 InitItemBagData,function
	.thumb_func
InitItemBagData:
	push	{r4, r5, lr}
	mov	r2, #0x20
	ldrsh	r4, [r0, r2]
	lsl	r4, r4, #0x8
	mov	r3, #0x22
	ldrsh	r2, [r0, r3]
	orr	r4, r4, r2
	mov	r5, #0x3a
	ldrsh	r2, [r0, r5]
	lsl	r2, r2, #0x8
	mov	r5, #0x3c
	ldrsh	r3, [r0, r5]
	orr	r2, r2, r3
	lsl	r1, r1, #0x8
	strh	r4, [r0, #0x38]
	strh	r2, [r0, #0x3a]
	strh	r1, [r0, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 InitItemBagData,.Lfe40-InitItemBagData
	.align	2, 0
	.globl	MoveAlongLinearPath
	.type	 MoveAlongLinearPath,function
	.thumb_func
MoveAlongLinearPath:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r0
	ldrh	r0, [r0, #0x38]
	lsr	r1, r0, #0x8
	mov	sl, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r1, r8
	ldrh	r0, [r1, #0x3a]
	lsr	r2, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrh	r1, [r1, #0x3c]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r3, #0xff
	and	r3, r3, r1
	cmp	r2, #0
	bne	.L234	@cond_branch
	mov	r2, #0x20
	neg	r2, r2
	b	.L235
.L234:
	cmp	r2, #0xff
	bne	.L235	@cond_branch
	mov	r2, #0x88
	lsl	r2, r2, #0x1
.L235:
	mov	r0, r9
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, sl
	sub	r0, r2, r1
	lsl	r5, r3, #0x10
	asr	r5, r5, #0x10
	mul	r0, r0, r5
	lsl	r1, r6, #0x10
	asr	r7, r1, #0x10
	add	r1, r7, #0
	bl	__divsi3
	add	r6, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, r4
	mul	r0, r0, r5
	add	r1, r7, #0
	bl	__divsi3
	add	r6, r6, sl
	mov	r1, r8
	strh	r6, [r1, #0x20]
	add	r0, r0, r9
	strh	r0, [r1, #0x22]
	add	r5, r5, #0x1
	lsl	r5, r5, #0x10
	lsr	r3, r5, #0x10
	asr	r5, r5, #0x10
	cmp	r5, r7
	beq	.L237	@cond_branch
	lsl	r1, r7, #0x8
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	orr	r0, r0, r1
	mov	r1, r8
	strh	r0, [r1, #0x3c]
	mov	r0, #0x0
	b	.L238
.L237:
	mov	r0, #0x1
.L238:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 MoveAlongLinearPath,.Lfe41-MoveAlongLinearPath
	.align	2, 0
	.type	 AnimItemSteal_Step2,function
	.thumb_func
AnimItemSteal_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xa
	bne	.L240	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L240:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	ble	.L241	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L241:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 AnimItemSteal_Step2,.Lfe42-AnimItemSteal_Step2
	.align	2, 0
	.type	 AnimItemSteal_Step1,function
	.thumb_func
AnimItemSteal_Step1:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L243	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L243:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	MoveAlongLinearPath
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L244	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L245
	str	r0, [r4, #0x1c]
.L244:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L246:
	.align	2, 0
.L245:
	.word	AnimItemSteal_Step2
.Lfe43:
	.size	 AnimItemSteal_Step1,.Lfe43-AnimItemSteal_Step1
	.align	2, 0
	.type	 AnimPresent,function
	.thumb_func
AnimPresent:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L251
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L251+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L248	@cond_branch
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	InitItemBagData
	mov	r0, #0x1
	b	.L250
.L252:
	.align	2, 0
.L251:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
.L248:
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	InitItemBagData
	mov	r0, #0x3
.L250:
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L253
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L254:
	.align	2, 0
.L253:
	.word	AnimItemSteal_Step1
.Lfe44:
	.size	 AnimPresent,.Lfe44-AnimPresent
	.align	2, 0
	.type	 AnimKnockOffOpponentsItem,function
	.thumb_func
AnimKnockOffOpponentsItem:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L256	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L256:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	MoveAlongLinearPath
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L257	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L257:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 AnimKnockOffOpponentsItem,.Lfe45-AnimKnockOffOpponentsItem
	.align	2, 0
	.type	 AnimKnockOffItem,function
	.thumb_func
AnimKnockOffItem:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L263
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L259	@cond_branch
	strh	r0, [r5, #0x3a]
	add	r0, r6, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x28
	bl	InitItemBagData
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L263+0x4
	b	.L262
.L264:
	.align	2, 0
.L263:
	.word	gBattleAnimTarget
	.word	AnimItemSteal_Step1
.L259:
	mov	r0, #0xff
	strh	r0, [r5, #0x3a]
	add	r0, r6, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L261	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x3a]
.L261:
	add	r0, r5, #0
	mov	r1, #0x28
	bl	InitItemBagData
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L265
.L262:
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	AnimKnockOffOpponentsItem
.Lfe46:
	.size	 AnimKnockOffItem,.Lfe46-AnimKnockOffItem
	.align	2, 0
	.type	 AnimPresentHealParticle,function
	.thumb_func
AnimPresentHealParticle:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L268	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L270
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x30]
.L268:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	mul	r0, r0, r1
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L269	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L269:
	pop	{r4}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gBattleAnimArgs
.Lfe47:
	.size	 AnimPresentHealParticle,.Lfe47-AnimPresentHealParticle
	.align	2, 0
	.type	 AnimItemSteal,function
	.thumb_func
AnimItemSteal:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldr	r4, .L276
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L276+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L273	@cond_branch
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	InitItemBagData
	mov	r0, #0x1
	b	.L275
.L277:
	.align	2, 0
.L276:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L273:
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	InitItemBagData
	mov	r0, #0x3
.L275:
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L278
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	AnimItemSteal_Step3
.Lfe48:
	.size	 AnimItemSteal,.Lfe48-AnimItemSteal
	.align	2, 0
	.type	 AnimItemSteal_Step3,function
	.thumb_func
AnimItemSteal_Step3:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L281	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L281:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L282	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x76
	bl	PlaySE12WithPanning
.L282:
	add	r0, r4, #0
	bl	MoveAlongLinearPath
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L283	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L284
	str	r0, [r4, #0x1c]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x76
	bl	PlaySE12WithPanning
.L283:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	AnimItemSteal_Step2
.Lfe49:
	.size	 AnimItemSteal_Step3,.Lfe49-AnimItemSteal_Step3
	.align	2, 0
	.type	 AnimTrickBag,function
	.thumb_func
AnimTrickBag:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L287	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L288	@cond_branch
	ldr	r0, .L295
	ldrh	r1, [r0, #0x2]
	strh	r1, [r4, #0x30]
	mov	r1, #0x78
	strh	r1, [r4, #0x20]
	add	r5, r0, #0
	b	.L289
.L296:
	.align	2, 0
.L295:
	.word	gBattleAnimArgs
.L288:
	ldr	r0, .L297
	mov	r1, #0x2
	ldrsh	r3, [r0, r1]
	add	r1, r3, #0
	sub	r1, r1, #0x20
	add	r2, r1, #0
	add	r5, r0, #0
	cmp	r1, #0
	bge	.L290	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0xdf
.L290:
	asr	r0, r2, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	strh	r0, [r4, #0x30]
	mov	r0, #0x46
	strh	r0, [r4, #0x20]
.L289:
	ldrh	r0, [r5]
	strh	r0, [r4, #0x22]
	strh	r0, [r4, #0x32]
	mov	r0, #0x14
	strh	r0, [r4, #0x36]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3c
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	ldr	r0, .L297+0x4
	str	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xbe
	bhi	.L292	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
	b	.L294
.L298:
	.align	2, 0
.L297:
	.word	gBattleAnimArgs
	.word	AnimTrickBag_Step1
.L292:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
.L294:
	strb	r0, [r1]
.L287:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 AnimTrickBag,.Lfe50-AnimTrickBag
	.align	2, 0
	.type	 AnimTrickBag_Step1,function
	.thumb_func
AnimTrickBag_Step1:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L301	@cond_branch
	cmp	r0, #0x1
	beq	.L304	@cond_branch
	b	.L300
.L301:
	ldrh	r5, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4e
	ble	.L302	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L300
.L302:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__divsi3
	add	r0, r5, r0
	strh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x36]
	add	r1, r1, #0x3
	strh	r1, [r4, #0x36]
	strh	r0, [r4, #0x22]
	b	.L300
.L304:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L300	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L300	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	strh	r0, [r4, #0x32]
	ldr	r0, .L308
	str	r0, [r4, #0x1c]
.L300:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	AnimTrickBag_Step2
.Lfe51:
	.size	 AnimTrickBag_Step1,.Lfe51-AnimTrickBag_Step1
	.align	2, 0
	.type	 AnimTrickBag_Step2,function
	.thumb_func
AnimTrickBag_Step2:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L318
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r3, r0, r1
	add	r0, r5, #0x1
	add	r0, r3, r0
	ldrh	r2, [r4, #0x32]
	mov	r6, #0x32
	ldrsh	r1, [r4, r6]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r1, r0
	bne	.L311	@cond_branch
	add	r0, r5, #0x2
	add	r0, r3, r0
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x7f
	bne	.L312	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L318+0x4
	str	r0, [r4, #0x1c]
.L312:
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L313
.L319:
	.align	2, 0
.L318:
	.word	gTrickBagCoordinates
	.word	AnimTrickBag_Step3
.L311:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x32]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r1, r0, r5
	mov	r2, #0x0
	ldrsb	r2, [r1, r2]
	add	r1, r5, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mul	r0, r0, r2
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L314	@cond_branch
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xbe
	bhi	.L315	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
	b	.L317
.L315:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
.L317:
	strb	r0, [r1]
.L314:
	mov	r6, #0x30
	ldrsh	r0, [r4, r6]
	mov	r1, #0x3c
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
.L313:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 AnimTrickBag_Step2,.Lfe52-AnimTrickBag_Step2
	.align	2, 0
	.type	 AnimTrickBag_Step3,function
	.thumb_func
AnimTrickBag_Step3:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x14
	ble	.L321	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L321:
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 AnimTrickBag_Step3,.Lfe53-AnimTrickBag_Step3
	.align	2, 0
	.globl	AnimTask_LeafBlade
	.type	 AnimTask_LeafBlade,function
	.thumb_func
AnimTask_LeafBlade:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L326
	add	r5, r0, r1
	ldr	r4, .L326+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x16]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x1c]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0x1
	bne	.L323	@cond_branch
	mov	r1, #0x1
.L323:
	strh	r1, [r5, #0x12]
	mov	r3, #0x12
	ldrsh	r0, [r5, r3]
	lsl	r0, r0, #0x6
	mov	r1, #0x38
	sub	r1, r1, r0
	strh	r1, [r5, #0x1a]
	ldrh	r0, [r5, #0x16]
	sub	r0, r0, r1
	ldrh	r1, [r5, #0x14]
	add	r0, r0, r1
	strh	r0, [r5, #0x18]
	ldr	r0, .L326+0x8
	mov	r2, #0x18
	ldrsh	r1, [r5, r2]
	mov	r3, #0x1a
	ldrsh	r2, [r5, r3]
	ldrb	r3, [r5, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xc]
	cmp	r0, #0x40
	bne	.L325	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L325:
	ldr	r4, .L326+0xc
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xa
	strh	r1, [r0, #0x2e]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r5, #0x18]
	strh	r1, [r0, #0x30]
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r5, r3]
	mul	r1, r1, r0
	ldrh	r0, [r5, #0x14]
	sub	r0, r0, r1
	strh	r0, [r2, #0x32]
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r5, #0x1a]
	strh	r1, [r0, #0x34]
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r2, [r5, r3]
	mul	r0, r0, r2
	ldrh	r2, [r5, #0x16]
	add	r0, r0, r2
	strh	r0, [r1, #0x36]
	mov	r3, #0xc
	ldrsh	r1, [r5, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	LeafBladeGetPosFactor
	mov	r1, #0xc
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x38]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	InitAnimArcTranslation
	ldr	r0, .L326+0x10
	str	r0, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L327:
	.align	2, 0
.L326:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gLeafBladeSpriteTemplate
	.word	gSprites
	.word	AnimTask_LeafBlade_Step
.Lfe54:
	.size	 AnimTask_LeafBlade,.Lfe54-AnimTask_LeafBlade
	.align	2, 0
	.type	 AnimTask_LeafBlade_Step,function
	.thumb_func
AnimTask_LeafBlade_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L362
	add	r6, r0, r1
	mov	r0, #0xc
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L362+0x4
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r5, [r6, r1]
	cmp	r5, #0x7
	bne	.LCB4015
	b	.L343	@long jump
.LCB4015:
	cmp	r5, #0x7
	bgt	.L356	@cond_branch
	cmp	r5, #0x3
	bne	.LCB4019
	b	.L339	@long jump
.LCB4019:
	cmp	r5, #0x3
	bgt	.L357	@cond_branch
	cmp	r5, #0x1
	beq	.L336	@cond_branch
	cmp	r5, #0x1
	bgt	.L337	@cond_branch
	cmp	r5, #0
	beq	.L334	@cond_branch
	b	.L329
.L363:
	.align	2, 0
.L362:
	.word	gTasks
	.word	gSprites
.L357:
	cmp	r5, #0x5
	bne	.LCB4039
	b	.L340	@long jump
.LCB4039:
	cmp	r5, #0x5
	ble	.LCB4041
	b	.L341	@long jump
.LCB4041:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4051
	b	.L329	@long jump
.LCB4051:
	mov	r0, #0x5
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L356:
	cmp	r5, #0xb
	bne	.LCB4059
	b	.L347	@long jump
.LCB4059:
	cmp	r5, #0xb
	bgt	.L358	@cond_branch
	cmp	r5, #0x9
	bne	.LCB4063
	b	.L344	@long jump
.LCB4063:
	cmp	r5, #0x9
	ble	.LCB4065
	b	.L345	@long jump
.LCB4065:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4075
	b	.L329	@long jump
.LCB4075:
	mov	r0, #0x9
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L358:
	cmp	r5, #0xd
	bne	.LCB4083
	b	.L350	@long jump
.LCB4083:
	cmp	r5, #0xd
	bge	.LCB4085
	b	.L348	@long jump
.LCB4085:
	cmp	r5, #0xff
	bne	.LCB4087
	b	.L352	@long jump
.LCB4087:
	b	.L329
.L334:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4104
	b	.L329	@long jump
.LCB4104:
	mov	r0, #0x1
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L336:
	ldrh	r2, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r2, r2, r3
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x14]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x2
	strh	r0, [r6, #0x10]
	strh	r5, [r6, #0xe]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L337:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4168
	b	.L329	@long jump
.LCB4168:
	mov	r0, #0x3
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L339:
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x14]
	sub	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x16]
	sub	r0, r0, r1
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	mov	r0, #0x2
	strh	r0, [r6, #0xe]
	ldrh	r0, [r6, #0x10]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L340:
	ldrh	r1, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r1, r1, r3
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	ldrh	r1, [r6, #0x14]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r2, #0x1e
	ldrsh	r0, [r6, r2]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	ldrh	r1, [r6, #0x16]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	sub	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x3
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L341:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4324
	b	.L329	@long jump
.LCB4324:
	mov	r0, #0x7
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L343:
	ldrh	r2, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r2, r2, r3
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x14]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	add	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x4
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L344:
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x14]
	sub	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	mul	r0, r0, r1
	ldrh	r3, [r6, #0x16]
	add	r0, r0, r3
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	mov	r0, #0x5
	strh	r0, [r6, #0xe]
	ldrh	r0, [r6, #0x10]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L345:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L329	@cond_branch
	mov	r0, #0xb
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L347:
	ldrh	r2, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r2, r2, r0
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x18]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x1a]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	sub	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x6
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L348:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L329	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L350:
	mov	r1, #0x20
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L329	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L329
.L352:
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L329	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0xa]
	ldrh	r0, [r6, #0x26]
.L361:
	strh	r0, [r6, #0x8]
.L329:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 AnimTask_LeafBlade_Step,.Lfe55-AnimTask_LeafBlade_Step
	.align	2, 0
	.type	 LeafBladeGetPosFactor,function
	.thumb_func
LeafBladeGetPosFactor:
	push	{lr}
	mov	r2, #0x8
	mov	r3, #0x36
	ldrsh	r1, [r0, r3]
	mov	r3, #0x22
	ldrsh	r0, [r0, r3]
	cmp	r1, r0
	bge	.L365	@cond_branch
	neg	r0, r2
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L365:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 LeafBladeGetPosFactor,.Lfe56-LeafBladeGetPosFactor
	.align	2, 0
	.type	 AnimTask_LeafBlade_Step2,function
	.thumb_func
AnimTask_LeafBlade_Step2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldrh	r0, [r6, #0x24]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L367	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0x24]
	ldr	r0, .L369
	mov	r8, r0
	mov	r2, #0xc
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	ldrh	r2, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r2, r2, r0
	ldr	r0, .L369+0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldrb	r3, [r6, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L367	@cond_branch
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	mov	r0, r8
	add	r4, r5, r0
	strh	r7, [r4, #0x3a]
	mov	r0, #0xc
	strh	r0, [r4, #0x3c]
	ldr	r0, .L369+0x8
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	ldrh	r2, [r6, #0x22]
	mov	r0, #0x1
	and	r0, r0, r2
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0x10]
	add	r4, r4, #0x43
	strb	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x1c
	add	r5, r5, r0
	ldr	r0, .L369+0xc
	str	r0, [r5]
.L367:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	gSprites
	.word	gLeafBladeSpriteTemplate
	.word	gTasks
	.word	AnimTask_LeafBlade_Step2_Callback
.Lfe57:
	.size	 AnimTask_LeafBlade_Step2,.Lfe57-AnimTask_LeafBlade_Step2
	.align	2, 0
	.type	 AnimTask_LeafBlade_Step2_Callback,function
	.thumb_func
AnimTask_LeafBlade_Step2_Callback:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L372	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L372	@cond_branch
	ldr	r3, .L374
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L372:
	pop	{r4}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	gTasks
.Lfe58:
	.size	 AnimTask_LeafBlade_Step2_Callback,.Lfe58-AnimTask_LeafBlade_Step2_Callback
	.align	2, 0
	.type	 AnimFlyingParticle,function
	.thumb_func
AnimFlyingParticle:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L393
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L377	@cond_branch
	ldr	r0, .L393+0x4
	b	.L389
.L394:
	.align	2, 0
.L393:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L377:
	ldr	r0, .L395
.L389:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L379	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x36]
	ldr	r1, .L395+0x4
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x32]
	ldr	r0, .L395+0x8
	b	.L390
.L396:
	.align	2, 0
.L395:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xfff0
.L379:
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	ldr	r1, .L397
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r4, #0x32]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L390:
	strh	r0, [r4, #0x20]
	add	r7, r1, #0
	add	r5, r7, #0
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x34]
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L383	@cond_branch
	cmp	r0, #0x1
	bgt	.L388	@cond_branch
	cmp	r0, #0
	beq	.L382	@cond_branch
	b	.L381
.L398:
	.align	2, 0
.L397:
	.word	gBattleAnimArgs
.L388:
	cmp	r0, #0x2
	beq	.L384	@cond_branch
	cmp	r0, #0x3
	beq	.L385	@cond_branch
	b	.L381
.L382:
	ldrh	r0, [r5]
	b	.L391
.L383:
	ldrh	r0, [r5]
	strh	r0, [r4, #0x22]
	b	.L392
.L384:
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5]
	add	r0, r0, r5
.L391:
	strh	r0, [r4, #0x22]
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	b	.L381
.L385:
	ldr	r0, .L399
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r7, [r7]
	add	r0, r0, r7
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
.L392:
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
.L381:
	ldr	r0, .L399+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	gBattleAnimTarget
	.word	AnimFlyingParticle_Step
.Lfe59:
	.size	 AnimFlyingParticle,.Lfe59-AnimFlyingParticle
	.align	2, 0
	.type	 AnimFlyingParticle_Step,function
	.thumb_func
AnimFlyingParticle_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x3c
	ldrsh	r3, [r4, r0]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	ldr	r1, .L406
	mov	r5, #0x2e
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mul	r0, r0, r2
	asr	r0, r0, #0x8
	strh	r0, [r4, #0x26]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mul	r0, r0, r3
	strh	r0, [r4, #0x24]
	mov	r5, #0x34
	ldrsh	r0, [r4, r5]
	mul	r0, r0, r3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L402	@cond_branch
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	mov	r5, #0x20
	ldrsh	r1, [r4, r5]
	add	r0, r0, r1
	cmp	r0, #0xf7
	ble	.L401	@cond_branch
	b	.L404
.L407:
	.align	2, 0
.L406:
	.word	gSineTable
.L402:
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r2, #0x20
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bgt	.L401	@cond_branch
.L404:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L401:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 AnimFlyingParticle_Step,.Lfe60-AnimFlyingParticle_Step
	.align	2, 0
	.globl	AnimTask_CycleMagicalLeafPal
	.type	 AnimTask_CycleMagicalLeafPal,function
	.thumb_func
AnimTask_CycleMagicalLeafPal:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L418
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L410	@cond_branch
	cmp	r0, #0x1
	beq	.L411	@cond_branch
	b	.L409
.L419:
	.align	2, 0
.L418:
	.word	gTasks
.L410:
	ldr	r0, .L420
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r4, r2, #0
	add	r0, r0, r4
	strh	r0, [r5, #0x18]
	ldr	r0, .L420+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	add	r0, r0, r4
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L409
.L421:
	.align	2, 0
.L420:
	.word	0x274f
	.word	0x27b0
.L411:
	ldrh	r0, [r5, #0x1a]
	add	r0, r0, #0x1
	mov	r7, #0x0
	strh	r0, [r5, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L409	@cond_branch
	strh	r7, [r5, #0x1a]
	ldrh	r0, [r5, #0x18]
	ldrb	r2, [r5, #0x1c]
	ldr	r4, .L422
	mov	r3, #0x1e
	ldrsh	r1, [r5, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r5, #0x20]
	ldrb	r2, [r5, #0x1c]
	mov	r3, #0x1e
	ldrsh	r1, [r5, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	bne	.L409	@cond_branch
	strh	r7, [r5, #0x1c]
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	bne	.L409	@cond_branch
	strh	r7, [r5, #0x1e]
.L409:
	ldr	r0, .L422+0x4
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L417	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L417:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	sMagicalLeafBlendColors
	.word	gBattleAnimArgs
.Lfe61:
	.size	 AnimTask_CycleMagicalLeafPal,.Lfe61-AnimTask_CycleMagicalLeafPal
	.align	2, 0
	.type	 AnimNeedleArmSpike,function
	.thumb_func
AnimNeedleArmSpike:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r1, .L433
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L425	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
	b	.L426
.L434:
	.align	2, 0
.L433:
	.word	gBattleAnimArgs
.L425:
	mov	r3, #0x0
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L427	@cond_branch
	ldr	r4, .L435
	b	.L432
.L436:
	.align	2, 0
.L435:
	.word	gBattleAnimAttacker
.L427:
	ldr	r4, .L437
.L432:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L437+0x4
	ldrh	r1, [r0, #0x8]
	strh	r1, [r6, #0x2e]
	mov	r3, #0x2
	ldrsh	r1, [r0, r3]
	add	r7, r0, #0
	cmp	r1, #0
	bne	.L429	@cond_branch
	ldrh	r0, [r7, #0x4]
	add	r0, r0, r5
	strh	r0, [r6, #0x20]
	ldrh	r0, [r7, #0x6]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	strh	r5, [r6, #0x38]
	strh	r2, [r6, #0x3a]
	b	.L430
.L438:
	.align	2, 0
.L437:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L429:
	strh	r5, [r6, #0x20]
	strh	r2, [r6, #0x22]
	ldrh	r0, [r7, #0x4]
	add	r0, r0, r5
	strh	r0, [r6, #0x38]
	ldrh	r0, [r7, #0x6]
	add	r0, r0, r2
	strh	r0, [r6, #0x3a]
.L430:
	ldrh	r4, [r6, #0x20]
	lsl	r0, r4, #0x4
	strh	r0, [r6, #0x30]
	ldrh	r5, [r6, #0x22]
	lsl	r0, r5, #0x4
	strh	r0, [r6, #0x32]
	mov	r1, #0x38
	ldrsh	r0, [r6, r1]
	mov	r2, #0x20
	ldrsh	r1, [r6, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r3, #0x8
	ldrsh	r1, [r7, r3]
	bl	__divsi3
	strh	r0, [r6, #0x34]
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	mov	r2, #0x22
	ldrsh	r1, [r6, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r3, #0x8
	ldrsh	r1, [r7, r3]
	bl	__divsi3
	strh	r0, [r6, #0x36]
	ldrh	r0, [r6, #0x38]
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r6, #0x3a]
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L431	@cond_branch
	ldr	r1, .L439
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L431:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldr	r0, .L439+0x4
	str	r0, [r6, #0x1c]
.L426:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L440:
	.align	2, 0
.L439:
	.word	-0x8000
	.word	AnimNeedleArmSpike_Step
.Lfe62:
	.size	 AnimNeedleArmSpike,.Lfe62-AnimNeedleArmSpike
	.align	2, 0
	.type	 AnimNeedleArmSpike_Step,function
	.thumb_func
AnimNeedleArmSpike_Step:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r3, [r2, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L442	@cond_branch
	ldrh	r0, [r2, #0x34]
	ldrh	r4, [r2, #0x30]
	add	r0, r0, r4
	strh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x36]
	ldrh	r4, [r2, #0x32]
	add	r1, r1, r4
	strh	r1, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r2, #0x22]
	sub	r0, r3, #0x1
	strh	r0, [r2, #0x2e]
	b	.L443
.L442:
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L443:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 AnimNeedleArmSpike_Step,.Lfe63-AnimNeedleArmSpike_Step
	.align	2, 0
	.type	 AnimWhipHit_WaitEnd,function
	.thumb_func
AnimWhipHit_WaitEnd:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L445	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L445:
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 AnimWhipHit_WaitEnd,.Lfe64-AnimWhipHit_WaitEnd
	.align	2, 0
	.type	 AnimSlidingHit,function
	.thumb_func
AnimSlidingHit:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L450
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L447	@cond_branch
	ldr	r2, .L450+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	b	.L449
.L451:
	.align	2, 0
.L450:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L447:
	ldr	r0, .L452
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
.L449:
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L452+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L452+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L453:
	.align	2, 0
.L452:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe65:
	.size	 AnimSlidingHit,.Lfe65-AnimSlidingHit
	.align	2, 0
	.type	 AnimWhipHit,function
	.thumb_func
AnimWhipHit:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L456
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L455	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L455:
	ldr	r0, .L456+0x4
	str	r0, [r5, #0x1c]
	ldr	r4, .L456+0x8
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L457:
	.align	2, 0
.L456:
	.word	gBattleAnimAttacker
	.word	AnimWhipHit_WaitEnd
	.word	gBattleAnimArgs
.Lfe66:
	.size	 AnimWhipHit,.Lfe66-AnimWhipHit
	.align	2, 0
	.type	 AnimFlickeringPunch,function
	.thumb_func
AnimFlickeringPunch:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L459
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r1, #0xc]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	ldr	r1, .L459+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L459+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteLinearAndFlicker
.Lfe67:
	.size	 AnimFlickeringPunch,.Lfe67-AnimFlickeringPunch
	.align	2, 0
	.type	 AnimCuttingSlice,function
	.thumb_func
AnimCuttingSlice:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L466
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L462	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
.L462:
	ldr	r0, .L466+0x4
	str	r0, [r5, #0x1c]
	ldr	r0, .L466+0x8
	mov	r2, #0x4
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L463	@cond_branch
	ldrh	r0, [r3]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	b	.L464
.L467:
	.align	2, 0
.L466:
	.word	gBattleAnimTarget
	.word	AnimSlice_Step
	.word	gBattleAnimArgs
.L463:
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r3]
	sub	r0, r0, r1
	strh	r0, [r5, #0x20]
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L464:
	ldrh	r0, [r3, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	ldr	r1, .L468
	add	r0, r1, #0
	ldrh	r2, [r5, #0x30]
	add	r1, r0, r2
	strh	r1, [r5, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r2, [r5, #0x32]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	ldrh	r0, [r3, #0x4]
	strh	r0, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L465	@cond_branch
	neg	r0, r1
	strh	r0, [r5, #0x30]
.L465:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L469:
	.align	2, 0
.L468:
	.word	-0x400
.Lfe68:
	.size	 AnimCuttingSlice,.Lfe68-AnimCuttingSlice
	.align	2, 0
	.type	 AnimAirCutterSlice,function
	.thumb_func
AnimAirCutterSlice:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldr	r0, .L484
	mov	r1, #0x6
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L472	@cond_branch
	cmp	r0, #0x1
	ble	.L476	@cond_branch
	cmp	r0, #0x2
	beq	.L473	@cond_branch
	b	.L476
.L485:
	.align	2, 0
.L484:
	.word	gBattleAnimArgs
.L472:
	ldr	r5, .L486
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r5]
	eor	r4, r4, r0
	add	r0, r4, #0
	b	.L483
.L487:
	.align	2, 0
.L486:
	.word	gBattleAnimTarget
.L473:
	ldr	r5, .L488
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5]
	mov	r2, #0x2
	mov	r8, r2
	mov	r1, r8
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L471	@cond_branch
	ldrb	r0, [r5]
	mov	r2, r8
	eor	r0, r0, r2
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	lsr	r7, r0, #0x1
	ldrb	r0, [r5]
	mov	r1, r8
	eor	r0, r0, r1
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	lsr	r4, r0, #0x1
	b	.L471
.L489:
	.align	2, 0
.L488:
	.word	gBattleAnimTarget
.L476:
	ldr	r4, .L490
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r4]
.L483:
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L471:
	strh	r7, [r6, #0x20]
	strh	r4, [r6, #0x22]
	ldr	r0, .L490
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L479	@cond_branch
	ldrh	r0, [r6, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r6, #0x22]
.L479:
	ldr	r0, .L490+0x4
	str	r0, [r6, #0x1c]
	ldr	r0, .L490+0x8
	mov	r2, #0x4
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L480	@cond_branch
	ldrh	r0, [r3]
	ldrh	r1, [r6, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	b	.L481
.L491:
	.align	2, 0
.L490:
	.word	gBattleAnimTarget
	.word	AnimSlice_Step
	.word	gBattleAnimArgs
.L480:
	ldrh	r0, [r6, #0x20]
	ldrh	r1, [r3]
	sub	r0, r0, r1
	strh	r0, [r6, #0x20]
	add	r2, r6, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L481:
	ldrh	r0, [r3, #0x2]
	ldrh	r2, [r6, #0x22]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	ldr	r1, .L492
	add	r0, r1, #0
	ldrh	r2, [r6, #0x30]
	add	r1, r0, r2
	strh	r1, [r6, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r2, [r6, #0x32]
	add	r0, r0, r2
	strh	r0, [r6, #0x32]
	ldrh	r0, [r3, #0x4]
	strh	r0, [r6, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L482	@cond_branch
	neg	r0, r1
	strh	r0, [r6, #0x30]
.L482:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	-0x400
.Lfe69:
	.size	 AnimAirCutterSlice,.Lfe69-AnimAirCutterSlice
	.align	2, 0
	.type	 AnimSlice_Step,function
	.thumb_func
AnimSlice_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r0, r1, r2
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L495	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x18
	b	.L498
.L495:
	add	r0, r1, #0
	sub	r0, r0, #0x18
.L498:
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bne	.L497	@cond_branch
	ldr	r1, .L499
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	mov	r0, #0x3
	strh	r0, [r4, #0x2e]
	ldr	r0, .L499+0x4
	str	r0, [r4, #0x1c]
.L497:
	pop	{r4}
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	DestroyAnimSprite
	.word	WaitAnimForDuration
.Lfe70:
	.size	 AnimSlice_Step,.Lfe70-AnimSlice_Step
	.align	2, 0
	.type	 UnusedFlickerAnim,function
	.thumb_func
UnusedFlickerAnim:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x1
	ble	.L502	@cond_branch
	ldrh	r1, [r5, #0x34]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L503	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x5
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r4, .L507
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r3, [r0]
	add	r1, r2, #0
	and	r1, r1, r3
	strb	r1, [r0]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r2, r2, r1
	strb	r2, [r0]
	b	.L504
.L508:
	.align	2, 0
.L507:
	.word	gSprites
.L503:
	add	r1, r5, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r3, .L509
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
.L504:
	mov	r0, #0x0
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	b	.L505
.L510:
	.align	2, 0
.L509:
	.word	gSprites
.L502:
	add	r0, r1, #0x1
	strh	r0, [r5, #0x32]
.L505:
	mov	r1, #0x34
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xa
	bne	.L506	@cond_branch
	mov	r2, #0x2e
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L511
	add	r0, r0, r4
	bl	DestroySprite
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L506:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	gSprites
.Lfe71:
	.size	 UnusedFlickerAnim,.Lfe71-UnusedFlickerAnim
	.align	2, 0
	.type	 AnimCirclingMusicNote,function
	.thumb_func
AnimCirclingMusicNote:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L517
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L517+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L514	@cond_branch
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r4]
	sub	r0, r0, r1
	b	.L516
.L518:
	.align	2, 0
.L517:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L514:
	ldrh	r0, [r4]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
.L516:
	strh	r0, [r5, #0x20]
	ldr	r4, .L519
	ldrb	r1, [r4, #0xa]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x6]
	neg	r0, r0
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x34]
	ldr	r1, .L519+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	gBattleAnimArgs
	.word	AnimCirclingMusicNote_Step
.Lfe72:
	.size	 AnimCirclingMusicNote,.Lfe72-AnimCirclingMusicNote
	.align	2, 0
	.type	 AnimCirclingMusicNote_Step,function
	.thumb_func
AnimCirclingMusicNote_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x64
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	bgt	.L522	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x0
	b	.L525
.L522:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0xe
.L525:
	strb	r0, [r1]
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x2e]
	add	r0, r0, r2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x82
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L524	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L524:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 AnimCirclingMusicNote_Step,.Lfe73-AnimCirclingMusicNote_Step
	.align	2, 0
	.type	 AnimProtect,function
	.thumb_func
AnimProtect:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L527	@cond_branch
	ldr	r1, .L531
	ldrh	r0, [r1, #0x2]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x2]
.L527:
	ldr	r6, .L531+0x4
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	ldr	r4, .L531
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L529	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L528	@cond_branch
.L529:
	ldrb	r0, [r6]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	b	.L530
.L532:
	.align	2, 0
.L531:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L528:
	ldrb	r0, [r6]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
.L530:
	ldr	r0, .L533
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L533+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	mov	r4, #0x10
	mov	r0, #0x10
	strh	r0, [r5, #0x3c]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r0, [r5, #0x3c]
	lsl	r1, r0, #0x8
	sub	r4, r4, r0
	orr	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L533+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gBattleAnimArgs
	.word	0x2828
	.word	AnimProtect_Step
.Lfe74:
	.size	 AnimProtect,.Lfe74-AnimProtect
	.align	2, 0
	.type	 AnimProtect_Step,function
	.thumb_func
AnimProtect_Step:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x60
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L536	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldr	r1, .L546
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r5, [r0]
	mov	r2, #0x0
	add	r6, r1, #0
	add	r3, r6, #0
.L539:
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	add	r2, r2, #0x1
	add	r0, r0, r2
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	cmp	r2, #0x5
	ble	.L539	@cond_branch
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r5, [r0]
.L536:
	ldrh	r2, [r4, #0x3c]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	ble	.L541	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	ble	.L542	@cond_branch
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L541	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
	sub	r2, r2, #0x1
	strh	r2, [r4, #0x3c]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
.L541:
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L542	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	b	.L543
.L547:
	.align	2, 0
.L546:
	.word	gPlttBufferFaded
.L542:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L543	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
	ldrh	r2, [r4, #0x3c]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x3c]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L543	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L548
	str	r0, [r4, #0x1c]
.L543:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L549:
	.align	2, 0
.L548:
	.word	DestroyAnimSpriteAndDisableBlend
.Lfe75:
	.size	 AnimProtect_Step,.Lfe75-AnimProtect_Step
	.align	2, 0
	.type	 AnimMilkBottle,function
	.thumb_func
AnimMilkBottle:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L551
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L551+0x4
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	strh	r5, [r4, #0x34]
	strh	r5, [r4, #0x36]
	strh	r5, [r4, #0x3a]
	mov	r0, #0x10
	strh	r0, [r4, #0x3c]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L551+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L552:
	.align	2, 0
.L551:
	.word	gBattleAnimTarget
	.word	0xffe8
	.word	AnimMilkBottle_Step1
.Lfe76:
	.size	 AnimMilkBottle,.Lfe76-AnimMilkBottle
	.align	2, 0
	.type	 AnimMilkBottle_Step1,function
	.thumb_func
AnimMilkBottle_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB6658
	b	.L554	@long jump
.LCB6658:
	lsl	r0, r0, #0x2
	ldr	r1, .L577
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L578:
	.align	2, 0
.L577:
	.word	.L574
	.align	2, 0
	.align	2, 0
.L574:
	.word	.L555
	.word	.L562
	.word	.L564
	.word	.L572
	.word	.L573
.L555:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB6684
	b	.L554	@long jump
.LCB6684:
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L557	@cond_branch
	ldrh	r1, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L559	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x3a]
	b	.L559
.L557:
	ldrh	r1, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L559	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x3c]
.L559:
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L554	@cond_branch
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L554	@cond_branch
	strh	r0, [r4, #0x30]
	b	.L576
.L562:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L554	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L576
.L564:
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x4
	bl	AnimMilkBottle_Step2
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L565	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
.L565:
	ldrh	r0, [r4, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L554	@cond_branch
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L567	@cond_branch
	ldrh	r1, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L569	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x3a]
	b	.L569
.L567:
	ldrh	r1, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L569	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x3c]
.L569:
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L554	@cond_branch
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x10
	bne	.L554	@cond_branch
	strh	r1, [r4, #0x30]
	strh	r1, [r4, #0x32]
	b	.L576
.L572:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L576:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L554
.L573:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L554:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 AnimMilkBottle_Step1,.Lfe77-AnimMilkBottle_Step1
	.align	2, 0
	.type	 AnimMilkBottle_Step2,function
	.thumb_func
AnimMilkBottle_Step2:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xb
	bgt	.L580	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L580:
	ldrh	r5, [r4, #0x34]
	add	r0, r5, #0
	sub	r0, r0, #0x12
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	cmp	r0, #0x17
	bhi	.L581	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L581:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2f
	ble	.L582	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L582:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0x9
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	__divsi3
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L583	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L583:
	add	r0, r5, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3b
	ble	.L584	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x34]
.L584:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 AnimMilkBottle_Step2,.Lfe78-AnimMilkBottle_Step2
	.align	2, 0
	.type	 AnimGrantingStars,function
	.thumb_func
AnimGrantingStars:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L587
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L586	@cond_branch
	add	r0, r4, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
.L586:
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x32]
	ldr	r1, .L587+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L587+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinearFixedPoint
.Lfe79:
	.size	 AnimGrantingStars,.Lfe79-AnimGrantingStars
	.align	2, 0
	.type	 AnimSparklingStars,function
	.thumb_func
AnimSparklingStars:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L598
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L590	@cond_branch
	ldr	r0, .L598+0x4
	b	.L596
.L599:
	.align	2, 0
.L598:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L590:
	ldr	r0, .L600
.L596:
	ldrb	r6, [r0]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L592	@cond_branch
	mov	r1, #0x2
	add	r0, r6, #0
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L592	@cond_branch
	ldr	r4, .L600+0x4
	ldrb	r1, [r4, #0xc]
	add	r2, r5, #0
	add	r2, r2, #0x20
	add	r3, r5, #0
	add	r3, r3, #0x22
	add	r0, r6, #0
	bl	SetAverageBattlerPositions
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	b	.L593
.L601:
	.align	2, 0
.L600:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L592:
	ldr	r4, .L602
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L594	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x1
	b	.L597
.L603:
	.align	2, 0
.L602:
	.word	gBattleAnimArgs
.L594:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x3
.L597:
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldr	r0, .L604
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
.L593:
	ldr	r1, .L604
	ldrh	r0, [r1, #0xa]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r5, #0x32]
	ldr	r1, .L604+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L604+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L605:
	.align	2, 0
.L604:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinearFixedPoint
.Lfe80:
	.size	 AnimSparklingStars,.Lfe80-AnimSparklingStars
	.align	2, 0
	.type	 AnimBubbleBurst,function
	.thumb_func
AnimBubbleBurst:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L609
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L607	@cond_branch
	ldr	r0, .L609+0x4
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	b	.L608
.L610:
	.align	2, 0
.L609:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L607:
	ldr	r2, .L611
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L608:
	ldr	r0, .L611+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L612:
	.align	2, 0
.L611:
	.word	gBattleAnimArgs
	.word	AnimBubbleBurst_Step
.Lfe81:
	.size	 AnimBubbleBurst,.Lfe81-AnimBubbleBurst
	.align	2, 0
	.type	 AnimBubbleBurst_Step,function
	.thumb_func
AnimBubbleBurst_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L614	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r0, #0x1e
	sub	r0, r0, r1
	mov	r1, #0x3
	bl	__divsi3
	strh	r0, [r4, #0x26]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x12
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L614:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L615	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L615:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 AnimBubbleBurst_Step,.Lfe82-AnimBubbleBurst_Step
	.align	2, 0
	.type	 AnimSleepLetterZ,function
	.thumb_func
AnimSleepLetterZ:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L619
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L617	@cond_branch
	ldr	r1, .L619+0x4
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L618
.L620:
	.align	2, 0
.L619:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L617:
	ldr	r2, .L621
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldr	r0, .L621+0x4
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L618:
	ldr	r0, .L621+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L622:
	.align	2, 0
.L621:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	AnimSleepLetterZ_Step
.Lfe83:
	.size	 AnimSleepLetterZ,.Lfe83-AnimSleepLetterZ
	.align	2, 0
	.type	 AnimSleepLetterZ_Step,function
	.thumb_func
AnimSleepLetterZ_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x28
	bl	__divsi3
	neg	r0, r0
	strh	r0, [r4, #0x26]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L624	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L624:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 AnimSleepLetterZ_Step,.Lfe84-AnimSleepLetterZ_Step
	.align	2, 0
	.type	 AnimLockOnTarget,function
	.thumb_func
AnimLockOnTarget:
	push	{lr}
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x20]
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x22]
	mov	r1, #0x14
	strh	r1, [r0, #0x2e]
	ldr	r1, .L626
	str	r1, [r0, #0x1c]
	ldr	r1, .L626+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L627:
	.align	2, 0
.L626:
	.word	WaitAnimForDuration
	.word	AnimLockOnTarget_Step1
.Lfe85:
	.size	 AnimLockOnTarget,.Lfe85-AnimLockOnTarget
	.align	2, 0
	.type	 AnimLockOnTarget_Step1,function
	.thumb_func
AnimLockOnTarget_Step1:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r6, [r5, #0x38]
	mov	r1, #0x1
	add	r0, r1, #0
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L630	@cond_branch
	cmp	r0, #0x1
	beq	.L631	@cond_branch
	b	.L629
.L630:
	strh	r1, [r5, #0x2e]
	ldr	r0, .L634
	str	r0, [r5, #0x1c]
	ldr	r1, .L634+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	b	.L629
.L635:
	.align	2, 0
.L634:
	.word	WaitAnimForDuration
	.word	AnimLockOnTarget_Step1
.L631:
	ldrh	r3, [r5, #0x24]
	ldrh	r0, [r5, #0x20]
	add	r3, r3, r0
	mov	r0, #0x0
	strh	r3, [r5, #0x20]
	ldrh	r4, [r5, #0x26]
	ldrh	r1, [r5, #0x22]
	add	r4, r4, r1
	strh	r4, [r5, #0x22]
	strh	r0, [r5, #0x26]
	strh	r0, [r5, #0x24]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	ldr	r2, .L636
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x1
	add	r1, r0, r2
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	add	r3, r3, r1
	strh	r3, [r5, #0x32]
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r4, r4, r0
	strh	r4, [r5, #0x36]
	ldr	r0, .L636+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L636+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xcb
	bl	PlaySE12WithPanning
.L629:
	ldrh	r0, [r5, #0x38]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r5, #0x38]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L637:
	.align	2, 0
.L636:
	.word	sInclineMonCoordTable
	.word	StartAnimLinearTranslation
	.word	AnimLockOnTarget_Step2
.Lfe86:
	.size	 AnimLockOnTarget_Step1,.Lfe86-AnimLockOnTarget_Step1
	.align	2, 0
	.type	 AnimLockOnTarget_Step2,function
	.thumb_func
AnimLockOnTarget_Step2:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L639	@cond_branch
	mov	r0, #0xa
	strh	r0, [r2, #0x2e]
	ldr	r0, .L641
	str	r0, [r2, #0x1c]
	ldr	r1, .L641+0x4
	add	r0, r2, #0
	bl	StoreSpriteCallbackInData6
	b	.L640
.L642:
	.align	2, 0
.L641:
	.word	WaitAnimForDuration
	.word	AnimLockOnTarget_Step3
.L639:
	ldr	r0, .L643
	str	r0, [r2, #0x1c]
.L640:
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	AnimLockOnTarget_Step1
.Lfe87:
	.size	 AnimLockOnTarget_Step2,.Lfe87-AnimLockOnTarget_Step2
	.align	2, 0
	.type	 AnimLockOnTarget_Step3,function
	.thumb_func
AnimLockOnTarget_Step3:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x6]
	cmp	r1, #0
	bne	.L646	@cond_branch
	mov	r0, #0x3
	strh	r0, [r5, #0x2e]
	strh	r1, [r5, #0x30]
	strh	r1, [r5, #0x32]
	ldr	r0, .L656
	str	r0, [r5, #0x1c]
	ldr	r1, .L656+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	b	.L647
.L657:
	.align	2, 0
.L656:
	.word	WaitAnimForDuration
	.word	AnimLockOnTarget_Step4
.L646:
	ldrh	r0, [r5, #0x6]
	cmp	r0, #0x2
	beq	.L650	@cond_branch
	cmp	r0, #0x2
	bgt	.L654	@cond_branch
	cmp	r0, #0x1
	beq	.L649	@cond_branch
	b	.L652
.L654:
	cmp	r0, #0x3
	beq	.L651	@cond_branch
	b	.L652
.L649:
	ldr	r6, .L658
	add	r7, r6, #0
	b	.L648
.L659:
	.align	2, 0
.L658:
	.word	0xfff8
.L650:
	ldr	r7, .L660
	b	.L655
.L661:
	.align	2, 0
.L660:
	.word	0xfff8
.L651:
	mov	r7, #0x8
	ldr	r6, .L662
	b	.L648
.L663:
	.align	2, 0
.L662:
	.word	0xfff8
.L652:
	mov	r7, #0x8
.L655:
	mov	r6, #0x8
.L648:
	ldrh	r0, [r5, #0x24]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r1, [r5, #0x26]
	strh	r1, [r5, #0x24]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	ldr	r4, .L664
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L664+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L664+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L647:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L665:
	.align	2, 0
.L664:
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	AnimLockOnTarget_Step5
.Lfe88:
	.size	 AnimLockOnTarget_Step3,.Lfe88-AnimLockOnTarget_Step3
	.align	2, 0
	.type	 AnimLockOnTarget_Step4,function
	.thumb_func
AnimLockOnTarget_Step4:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L667	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x3
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L669	@cond_branch
	mov	r0, #0x10
	b	.L674
.L667:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x3
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L669	@cond_branch
	mov	r0, #0x0
.L674:
	strh	r0, [r4, #0x30]
.L669:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	GetBattlePalettesMask
	ldrh	r1, [r4, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L675
	bl	BlendPalettes
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bne	.L671	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrb	r1, [r4, #0x5]
	lsr	r1, r1, #0x4
	lsl	r0, r1, #0x5
	ldr	r2, .L675+0x4
	add	r0, r0, r2
	lsl	r1, r1, #0x4
	ldr	r3, .L675+0x8
	add	r2, r3, #0
	orr	r1, r1, r2
	mov	r2, #0x4
	bl	LoadPalette
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xb9
	bl	PlaySE12WithPanning
	b	.L672
.L676:
	.align	2, 0
.L675:
	.word	0x7fff
	.word	gPlttBufferUnfaded+0x210
	.word	0x101
.L671:
	cmp	r0, #0
	bne	.L672	@cond_branch
	ldr	r0, .L677
	str	r0, [r4, #0x1c]
.L672:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	AnimLockOnTarget_Step5
.Lfe89:
	.size	 AnimLockOnTarget_Step4,.Lfe89-AnimLockOnTarget_Step4
	.align	2, 0
	.type	 AnimLockOnTarget_Step5,function
	.thumb_func
AnimLockOnTarget_Step5:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L681
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L681+0x4
	cmp	r1, r0
	bne	.L680	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	strh	r0, [r2, #0x2e]
	ldr	r0, .L681+0x8
	str	r0, [r2, #0x1c]
.L680:
	pop	{r0}
	bx	r0
.L682:
	.align	2, 0
.L681:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	AnimLockOnTarget_Step6
.Lfe90:
	.size	 AnimLockOnTarget_Step5,.Lfe90-AnimLockOnTarget_Step5
	.align	2, 0
	.type	 AnimLockOnTarget_Step6,function
	.thumb_func
AnimLockOnTarget_Step6:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L684	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L684:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8
	bne	.L685	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L685:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 AnimLockOnTarget_Step6,.Lfe91-AnimLockOnTarget_Step6
	.align	2, 0
	.type	 AnimLockOnMoveTarget,function
	.thumb_func
AnimLockOnMoveTarget:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, .L694
	ldrh	r0, [r0]
	strh	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L687	@cond_branch
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	b	.L688
.L695:
	.align	2, 0
.L694:
	.word	gBattleAnimArgs
.L687:
	cmp	r0, #0x2
	bne	.L689	@cond_branch
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x20
	b	.L693
.L689:
	cmp	r0, #0x3
	bne	.L691	@cond_branch
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	b	.L693
.L691:
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x30
.L693:
	orr	r0, r0, r1
	strb	r0, [r3, #0x3]
.L688:
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r4, .L696
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L696+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldr	r1, .L696+0x8
	str	r1, [r3, #0x1c]
	add	r0, r3, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L697:
	.align	2, 0
.L696:
	.word	0x3ff
	.word	-0x400
	.word	AnimLockOnTarget
.Lfe92:
	.size	 AnimLockOnMoveTarget,.Lfe92-AnimLockOnMoveTarget
	.align	2, 0
	.type	 AnimBowMon,function
	.thumb_func
AnimBowMon:
	push	{lr}
	add	r3, r0, #0
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	ldr	r0, .L707
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L701	@cond_branch
	cmp	r0, #0x1
	bgt	.L705	@cond_branch
	cmp	r0, #0
	beq	.L700	@cond_branch
	b	.L703
.L708:
	.align	2, 0
.L707:
	.word	gBattleAnimArgs
.L705:
	cmp	r0, #0x2
	beq	.L702	@cond_branch
	b	.L703
.L700:
	ldr	r0, .L709
	b	.L706
.L710:
	.align	2, 0
.L709:
	.word	AnimBowMon_Step1
.L701:
	ldr	r0, .L711
	b	.L706
.L712:
	.align	2, 0
.L711:
	.word	AnimBowMon_Step2
.L702:
	ldr	r0, .L713
	b	.L706
.L714:
	.align	2, 0
.L713:
	.word	AnimBowMon_Step3
.L703:
	ldr	r0, .L715
.L706:
	str	r0, [r3, #0x1c]
	pop	{r0}
	bx	r0
.L716:
	.align	2, 0
.L715:
	.word	AnimBowMon_Step4
.Lfe93:
	.size	 AnimBowMon,.Lfe93-AnimBowMon
	.align	2, 0
	.type	 AnimBowMon_Step1,function
	.thumb_func
AnimBowMon_Step1:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	strh	r0, [r4, #0x2e]
	ldr	r5, .L720
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r2, #0x2
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L718	@cond_branch
	mov	r1, #0x2
.L718:
	strh	r1, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L720+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	ldr	r1, .L720+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L720+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L721:
	.align	2, 0
.L720:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	AnimBowMon_Step1_Callback
	.word	TranslateSpriteLinearById
.Lfe94:
	.size	 AnimBowMon_Step1,.Lfe94-AnimBowMon_Step1
	.align	2, 0
	.type	 AnimBowMon_Step1_Callback,function
	.thumb_func
AnimBowMon_Step1_Callback:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x2e
	ldrsh	r6, [r5, r0]
	cmp	r6, #0
	bne	.L723	@cond_branch
	ldr	r1, .L727
	ldr	r4, .L727+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r5, #0x34]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	ldr	r2, .L727+0x8
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L724	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	add	r1, r0, #0
.L724:
	strh	r1, [r5, #0x36]
	strh	r6, [r5, #0x38]
.L723:
	ldrh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r5, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L726	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L727+0xc
	str	r0, [r5, #0x1c]
.L726:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L728:
	.align	2, 0
.L727:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	-0x300
	.word	AnimBowMon_Step4
.Lfe95:
	.size	 AnimBowMon_Step1_Callback,.Lfe95-AnimBowMon_Step1_Callback
	.align	2, 0
	.type	 AnimBowMon_Step2,function
	.thumb_func
AnimBowMon_Step2:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x4
	strh	r0, [r4, #0x2e]
	ldr	r5, .L732
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x3
	cmp	r0, #0
	beq	.L730	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	add	r1, r0, #0
.L730:
	strh	r1, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L732+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	ldr	r1, .L732+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L732+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L733:
	.align	2, 0
.L732:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	AnimBowMon_Step4
	.word	TranslateSpriteLinearById
.Lfe96:
	.size	 AnimBowMon_Step2,.Lfe96-AnimBowMon_Step2
	.align	2, 0
	.type	 AnimBowMon_Step3,function
	.thumb_func
AnimBowMon_Step3:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L735	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, .L736
	str	r0, [r1, #0x1c]
.L735:
	pop	{r0}
	bx	r0
.L737:
	.align	2, 0
.L736:
	.word	AnimBowMon_Step3_Callback
.Lfe97:
	.size	 AnimBowMon_Step3,.Lfe97-AnimBowMon_Step3
	.align	2, 0
	.type	 AnimBowMon_Step3_Callback,function
	.thumb_func
AnimBowMon_Step3_Callback:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L739	@cond_branch
	ldr	r1, .L744
	ldr	r4, .L744+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L740	@cond_branch
	mov	r0, #0xfc
	lsl	r0, r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	b	.L743
.L745:
	.align	2, 0
.L744:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L740:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x36]
	mov	r0, #0xf4
	lsl	r0, r0, #0x8
.L743:
	strh	r0, [r5, #0x38]
.L739:
	ldrh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r5, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L742	@cond_branch
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	ldr	r0, .L746
	str	r0, [r5, #0x1c]
.L742:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L747:
	.align	2, 0
.L746:
	.word	AnimBowMon_Step4
.Lfe98:
	.size	 AnimBowMon_Step3_Callback,.Lfe98-AnimBowMon_Step3_Callback
	.align	2, 0
	.type	 AnimBowMon_Step4,function
	.thumb_func
AnimBowMon_Step4:
	push	{lr}
	bl	DestroyAnimSprite
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 AnimBowMon_Step4,.Lfe99-AnimBowMon_Step4
	.align	2, 0
	.type	 AnimTipMon,function
	.thumb_func
AnimTipMon:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldr	r1, .L750
	str	r1, [r0, #0x1c]
	bx	lr
.L751:
	.align	2, 0
.L750:
	.word	AnimTipMon_Step
.Lfe100:
	.size	 AnimTipMon,.Lfe100-AnimTipMon
	.align	2, 0
	.type	 AnimTipMon_Step,function
	.thumb_func
AnimTipMon_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L757	@cond_branch
	cmp	r5, #0x1
	bgt	.L763	@cond_branch
	cmp	r5, #0
	beq	.L754	@cond_branch
	b	.L753
.L763:
	cmp	r5, #0x2
	beq	.L759	@cond_branch
	b	.L753
.L754:
	strh	r5, [r4, #0x30]
	ldr	r1, .L764
	ldr	r2, .L764+0x4
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x32]
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x34]
	ldr	r2, .L764+0x8
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L755	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r1, r0, #0
.L755:
	strh	r1, [r4, #0x36]
	strh	r5, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L757:
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L753	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L753
.L765:
	.align	2, 0
.L764:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	-0x200
.L759:
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L753	@cond_branch
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L753:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 AnimTipMon_Step,.Lfe101-AnimTipMon_Step
	.align	2, 0
	.globl	AnimTask_SkullBashPosition
	.type	 AnimTask_SkullBashPosition,function
	.thumb_func
AnimTask_SkullBashPosition:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L775
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r1, .L775+0x4
	ldr	r2, .L775+0x8
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x0
	strh	r0, [r5, #0x8]
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	strh	r2, [r5, #0xa]
	strh	r4, [r5, #0xc]
	ldr	r0, .L775+0xc
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	cmp	r1, #0
	beq	.L769	@cond_branch
	cmp	r1, #0x1
	beq	.L771	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L767
.L776:
	.align	2, 0
.L775:
	.word	gTasks
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L769:
	strh	r1, [r5, #0xc]
	mov	r0, #0x8
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
	mov	r0, #0x3
	strh	r0, [r5, #0x12]
	cmp	r2, #0
	bne	.L770	@cond_branch
	neg	r0, r0
	strh	r0, [r5, #0x12]
.L770:
	ldr	r0, .L777
	b	.L774
.L778:
	.align	2, 0
.L777:
	.word	AnimTask_SkullBashPositionSet
.L771:
	mov	r0, #0x8
	strh	r0, [r5, #0xe]
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x10]
	mov	r1, #0xc0
	strh	r1, [r5, #0x12]
	cmp	r2, #0
	bne	.L772	@cond_branch
	neg	r0, r0
	strh	r0, [r5, #0x10]
	neg	r0, r1
	strh	r0, [r5, #0x12]
.L772:
	ldr	r0, .L779
.L774:
	str	r0, [r5]
.L767:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L780:
	.align	2, 0
.L779:
	.word	AnimTask_SkullBashPositionReset
.Lfe102:
	.size	 AnimTask_SkullBashPosition,.Lfe102-AnimTask_SkullBashPosition
	.align	2, 0
	.type	 AnimTask_SkullBashPositionSet,function
	.thumb_func
AnimTask_SkullBashPositionSet:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L814
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB8747
	b	.L782	@long jump
.LCB8747:
	lsl	r0, r0, #0x2
	ldr	r1, .L814+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L815:
	.align	2, 0
.L814:
	.word	gTasks
	.word	.L808
	.align	2, 0
	.align	2, 0
.L808:
	.word	.L783
	.word	.L788
	.word	.L793
	.word	.L800
	.word	.L805
.L783:
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	beq	.L784	@cond_branch
	ldrh	r2, [r4, #0x12]
	ldrh	r3, [r4, #0x10]
	add	r2, r2, r3
	b	.L810
.L784:
	mov	r0, #0x8
	strh	r0, [r4, #0xe]
	strh	r1, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r1, #0xc0
	cmp	r0, #0
	bne	.L786	@cond_branch
	mov	r2, #0xc0
	neg	r2, r2
	add	r1, r2, #0
.L786:
	strh	r1, [r4, #0x12]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	b	.L811
.L788:
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L789	@cond_branch
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x10]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromRotation
	b	.L812
.L789:
	mov	r0, #0x8
	strh	r0, [r4, #0xe]
	ldr	r2, .L816
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L791	@cond_branch
	mov	r1, #0x2
.L791:
	strh	r1, [r4, #0x12]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L811
.L817:
	.align	2, 0
.L816:
	.word	gSprites
.L793:
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L794	@cond_branch
	ldrh	r1, [r4, #0x14]
	mov	r3, #0x14
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L795	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	b	.L782
.L795:
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L797	@cond_branch
	ldr	r2, .L818
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r2, [r4, #0x10]
	add	r1, r1, r2
	b	.L813
.L819:
	.align	2, 0
.L818:
	.word	gSprites
.L797:
	ldr	r2, .L820
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	ldrh	r2, [r4, #0x12]
	sub	r1, r1, r2
.L813:
	strh	r1, [r0, #0x24]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L812
.L821:
	.align	2, 0
.L820:
	.word	gSprites
.L794:
	ldr	r2, .L822
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	strh	r1, [r0, #0x24]
	mov	r0, #0xc
	strh	r0, [r4, #0xe]
	b	.L811
.L823:
	.align	2, 0
.L822:
	.word	gSprites
.L800:
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L801	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L782
.L801:
	mov	r0, #0x3
	strh	r0, [r4, #0xe]
	ldr	r2, .L824
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x8
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L803	@cond_branch
	mov	r1, #0x8
.L803:
	strh	r1, [r4, #0x12]
.L811:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L782
.L825:
	.align	2, 0
.L824:
	.word	gSprites
.L805:
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L806	@cond_branch
	ldrh	r2, [r4, #0x12]
	ldrh	r0, [r4, #0x10]
	add	r2, r2, r0
.L810:
	strh	r2, [r4, #0x10]
	ldr	r3, .L826
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r2, [r0, #0x24]
.L812:
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L782
.L827:
	.align	2, 0
.L826:
	.word	gSprites
.L806:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L782:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe103:
	.size	 AnimTask_SkullBashPositionSet,.Lfe103-AnimTask_SkullBashPositionSet
	.align	2, 0
	.type	 AnimTask_SkullBashPositionReset,function
	.thumb_func
AnimTask_SkullBashPositionReset:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L831
	add	r4, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L829	@cond_branch
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x10]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L830
.L832:
	.align	2, 0
.L831:
	.word	gTasks
.L829:
	ldrb	r0, [r4, #0x8]
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L830:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 AnimTask_SkullBashPositionReset,.Lfe104-AnimTask_SkullBashPositionReset
	.align	2, 0
	.type	 AnimSlashSlice,function
	.thumb_func
AnimSlashSlice:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L837
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L834	@cond_branch
	ldr	r4, .L837+0x4
	b	.L836
.L838:
	.align	2, 0
.L837:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L834:
	ldr	r4, .L839
.L836:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x30]
	ldr	r1, .L839+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L839+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L840:
	.align	2, 0
.L839:
	.word	gBattleAnimTarget
	.word	AnimFalseSwipeSlice_Step3
	.word	RunStoredCallbackWhenAnimEnds
.Lfe105:
	.size	 AnimSlashSlice,.Lfe105-AnimSlashSlice
	.align	2, 0
	.type	 AnimFalseSwipeSlice,function
	.thumb_func
AnimFalseSwipeSlice:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L842
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L842+0x4
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L842+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L842+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L843:
	.align	2, 0
.L842:
	.word	gBattleAnimTarget
	.word	0xffd0
	.word	AnimFalseSwipeSlice_Step1
	.word	RunStoredCallbackWhenAnimEnds
.Lfe106:
	.size	 AnimFalseSwipeSlice,.Lfe106-AnimFalseSwipeSlice
	.align	2, 0
	.type	 AnimFalseSwipePositionedSlice,function
	.thumb_func
AnimFalseSwipePositionedSlice:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L845
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L845+0x4
	ldr	r2, .L845+0x8
	add	r0, r0, r2
	ldrh	r1, [r1]
	add	r0, r0, r1
	mov	r6, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	strh	r6, [r4, #0x30]
	ldr	r0, .L845+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L846:
	.align	2, 0
.L845:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xffd0
	.word	AnimFalseSwipeSlice_Step3
.Lfe107:
	.size	 AnimFalseSwipePositionedSlice,.Lfe107-AnimFalseSwipePositionedSlice
	.align	2, 0
	.type	 AnimFalseSwipeSlice_Step1,function
	.thumb_func
AnimFalseSwipeSlice_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L848	@cond_branch
	mov	r0, #0xc
	strh	r0, [r4, #0x2e]
	mov	r0, #0x8
	strh	r0, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L849
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L849+0x4
	str	r0, [r4, #0x1c]
.L848:
	pop	{r4}
	pop	{r0}
	bx	r0
.L850:
	.align	2, 0
.L849:
	.word	AnimFalseSwipeSlice_Step2
	.word	TranslateSpriteLinear
.Lfe108:
	.size	 AnimFalseSwipeSlice_Step1,.Lfe108-AnimFalseSwipeSlice_Step1
	.align	2, 0
	.type	 AnimFalseSwipeSlice_Step2,function
	.thumb_func
AnimFalseSwipeSlice_Step2:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	strh	r1, [r0, #0x30]
	ldr	r1, .L852
	str	r1, [r0, #0x1c]
	bx	lr
.L853:
	.align	2, 0
.L852:
	.word	AnimFalseSwipeSlice_Step3
.Lfe109:
	.size	 AnimFalseSwipeSlice_Step2,.Lfe109-AnimFalseSwipeSlice_Step2
	.align	2, 0
	.type	 AnimFalseSwipeSlice_Step3,function
	.thumb_func
AnimFalseSwipeSlice_Step3:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L855	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L855	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L855:
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 AnimFalseSwipeSlice_Step3,.Lfe110-AnimFalseSwipeSlice_Step3
	.align	2, 0
	.type	 AnimEndureEnergy,function
	.thumb_func
AnimEndureEnergy:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L861
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L858	@cond_branch
	ldr	r4, .L861+0x4
	b	.L860
.L862:
	.align	2, 0
.L861:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L858:
	ldr	r4, .L863
.L860:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L863+0x4
	ldrh	r0, [r0, #0x6]
	strh	r0, [r5, #0x30]
	ldr	r0, .L863+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L864:
	.align	2, 0
.L863:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimEndureEnergy_Step
.Lfe111:
	.size	 AnimEndureEnergy,.Lfe111-AnimEndureEnergy
	.align	2, 0
	.type	 AnimEndureEnergy_Step,function
	.thumb_func
AnimEndureEnergy_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x30
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	ble	.L866	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x22]
.L866:
	ldrh	r0, [r2, #0x22]
	ldrh	r1, [r2, #0x2e]
	sub	r0, r0, r1
	strh	r0, [r2, #0x22]
	add	r0, r2, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L867	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L867:
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 AnimEndureEnergy_Step,.Lfe112-AnimEndureEnergy_Step
	.align	2, 0
	.type	 AnimSharpenSphere,function
	.thumb_func
AnimSharpenSphere:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L869
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0xc
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	mov	r0, #0x2
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x32]
	strh	r5, [r4, #0x34]
	strh	r5, [r4, #0x36]
	sub	r0, r0, #0x42
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x38]
	ldr	r0, .L869+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L870:
	.align	2, 0
.L869:
	.word	gBattleAnimAttacker
	.word	AnimSharpenSphere_Step
.Lfe113:
	.size	 AnimSharpenSphere,.Lfe113-AnimSharpenSphere
	.align	2, 0
	.type	 AnimSharpenSphere_Step,function
	.thumb_func
AnimSharpenSphere_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L872	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L873	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L873	@cond_branch
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xbb
	bl	PlaySE12WithPanning
.L873:
	mov	r1, #0x0
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L872	@cond_branch
	strh	r1, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L872:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L876	@cond_branch
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	ble	.L876	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L876	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L876:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 AnimSharpenSphere_Step,.Lfe114-AnimSharpenSphere_Step
	.align	2, 0
	.type	 AnimConversion,function
	.thumb_func
AnimConversion:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L878	@cond_branch
	ldr	r4, .L881
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r5, .L881+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r5]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x2]
	add	r0, r0, r5
	strh	r0, [r6, #0x22]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L879	@cond_branch
	ldrh	r0, [r6, #0x22]
	add	r0, r0, #0xa
	strh	r0, [r6, #0x22]
.L879:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2e]
.L878:
	ldr	r0, .L881+0x4
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L881+0x8
	cmp	r1, r0
	bne	.L880	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
.L880:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L882:
	.align	2, 0
.L881:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe115:
	.size	 AnimConversion,.Lfe115-AnimConversion
	.align	2, 0
	.globl	AnimTask_ConversionAlphaBlend
	.type	 AnimTask_ConversionAlphaBlend,function
	.thumb_func
AnimTask_ConversionAlphaBlend:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L891
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L884	@cond_branch
	ldr	r1, .L891+0x4
	ldr	r0, .L891+0x8
	strh	r0, [r1, #0xe]
	b	.L890
.L892:
	.align	2, 0
.L891:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	0xffff
.L884:
	cmp	r0, #0x2
	bne	.L886	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L885
.L886:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L885	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r2, [r4, #0xa]
	add	r2, r2, #0x1
	strh	r2, [r4, #0xa]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L885	@cond_branch
.L890:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
.L885:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe116:
	.size	 AnimTask_ConversionAlphaBlend,.Lfe116-AnimTask_ConversionAlphaBlend
	.align	2, 0
	.type	 AnimConversion2,function
	.thumb_func
AnimConversion2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L894
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L894+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L895:
	.align	2, 0
.L894:
	.word	gBattleAnimArgs
	.word	AnimConversion2_Step
.Lfe117:
	.size	 AnimConversion2,.Lfe117-AnimConversion2
	.align	2, 0
	.type	 AnimConversion2_Step,function
	.thumb_func
AnimConversion2_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L897	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x2e]
	b	.L898
.L897:
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1e
	strh	r0, [r5, #0x2e]
	ldr	r4, .L899
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L899+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L899+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L898:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L900:
	.align	2, 0
.L899:
	.word	gBattleAnimAttacker
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe118:
	.size	 AnimConversion2_Step,.Lfe118-AnimConversion2_Step
	.align	2, 0
	.globl	AnimTask_Conversion2AlphaBlend
	.type	 AnimTask_Conversion2AlphaBlend,function
	.thumb_func
AnimTask_Conversion2AlphaBlend:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L904
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L902	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L902	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L902:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L905:
	.align	2, 0
.L904:
	.word	gTasks
.Lfe119:
	.size	 AnimTask_Conversion2AlphaBlend,.Lfe119-AnimTask_Conversion2AlphaBlend
	.align	2, 0
	.type	 AnimTask_HideBattlersHealthbox,function
	.thumb_func
AnimTask_HideBattlersHealthbox:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L914
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L908	@cond_branch
	ldr	r6, .L914+0x4
	ldr	r5, .L914+0x8
.L910:
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L911	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L911	@cond_branch
	add	r0, r4, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
.L911:
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L909	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L909	@cond_branch
	add	r0, r4, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
.L909:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L914
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L910	@cond_branch
.L908:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L915:
	.align	2, 0
.L914:
	.word	gBattlersCount
	.word	gBattleAnimArgs
	.word	gHealthboxSpriteIds
.Lfe120:
	.size	 AnimTask_HideBattlersHealthbox,.Lfe120-AnimTask_HideBattlersHealthbox
	.align	2, 0
	.type	 AnimTask_ShowBattlersHealthbox,function
	.thumb_func
AnimTask_ShowBattlersHealthbox:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	b	.L922
.L920:
	ldr	r0, .L923
	add	r0, r4, r0
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L922:
	ldr	r0, .L923+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L920	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L924:
	.align	2, 0
.L923:
	.word	gHealthboxSpriteIds
	.word	gBattlersCount
.Lfe121:
	.size	 AnimTask_ShowBattlersHealthbox,.Lfe121-AnimTask_ShowBattlersHealthbox
	.align	2, 0
	.type	 AnimMoon,function
	.thumb_func
AnimMoon:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L926	@cond_branch
	mov	r0, #0x30
	strh	r0, [r4, #0x20]
	mov	r0, #0x28
	b	.L928
.L926:
	ldr	r0, .L929
	ldrh	r1, [r0]
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
.L928:
	strh	r0, [r4, #0x22]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldrb	r0, [r4, #0x3]
	mov	r1, #0xc0
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L929+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L930:
	.align	2, 0
.L929:
	.word	gBattleAnimArgs
	.word	AnimMoon_Step
.Lfe122:
	.size	 AnimMoon,.Lfe122-AnimMoon
	.align	2, 0
	.type	 AnimMoon_Step,function
	.thumb_func
AnimMoon_Step:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L932	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L932:
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 AnimMoon_Step,.Lfe123-AnimMoon_Step
	.align	2, 0
	.type	 AnimMoonlightSparkle,function
	.thumb_func
AnimMoonlightSparkle:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L934
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r2, .L934+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	strh	r1, [r4, #0x32]
	strh	r1, [r4, #0x34]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	ldr	r0, .L934+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L935:
	.align	2, 0
.L934:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimMoonlightSparkle_Step
.Lfe124:
	.size	 AnimMoonlightSparkle,.Lfe124-AnimMoonlightSparkle
	.align	2, 0
	.type	 AnimMoonlightSparkle_Step,function
	.thumb_func
AnimMoonlightSparkle_Step:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L937	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x32]
	mov	r3, #0x32
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x77
	bgt	.L937	@cond_branch
	ldrh	r0, [r1, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	add	r0, r2, #0x1
	strh	r0, [r1, #0x32]
.L937:
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L939	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L939:
	pop	{r0}
	bx	r0
.Lfe125:
	.size	 AnimMoonlightSparkle_Step,.Lfe125-AnimMoonlightSparkle_Step
	.align	2, 0
	.globl	AnimTask_MoonlightEndFade
	.type	 AnimTask_MoonlightEndFade,function
	.thumb_func
AnimTask_MoonlightEndFade:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	mov	r8, r0
	ldr	r0, .L941
	mov	r1, r8
	and	r1, r1, r0
	mov	r8, r1
	ldr	r0, .L941+0x4
	mov	r9, r0
	lsl	r5, r7, #0x2
	add	r5, r5, r7
	lsl	r5, r5, #0x3
	add	r6, r5, r0
	strh	r4, [r6, #0x8]
	strh	r4, [r6, #0xa]
	strh	r4, [r6, #0xc]
	strh	r1, [r6, #0xe]
	strh	r4, [r6, #0x10]
	strh	r4, [r6, #0x12]
	strh	r4, [r6, #0x14]
	mov	r0, #0xd
	strh	r0, [r6, #0x16]
	mov	r0, #0xe
	strh	r0, [r6, #0x18]
	mov	r0, #0xf
	strh	r0, [r6, #0x1a]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	GetBattleMonSpritePalettesMask
	mov	sl, r0
	mov	r1, r8
	orr	r1, r1, r0
	mov	r8, r1
	mov	r0, #0x8
	add	r9, r9, r0
	add	r5, r5, r9
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r5, r5, #0x1e
	add	r1, r5, #0
	mov	r2, r8
	bl	StorePointerInVars
	ldr	r0, .L941+0x8
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x80
	lsl	r4, r4, #0x9
	add	r1, r4, #0
	lsl	r1, r1, r0
	mov	r0, sl
	orr	r0, r0, r1
	mov	sl, r0
	ldr	r0, .L941+0xc
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, r0
	mov	r1, sl
	orr	r4, r4, r1
	ldr	r0, .L941+0x10
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L941+0x14
	str	r1, [r6]
	add	r0, r7, #0
	bl	_call_via_r1
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L942:
	.align	2, 0
.L941:
	.word	0xffff
	.word	gTasks
	.word	0x27d2
	.word	0x27d3
	.word	0x7fbb
	.word	AnimTask_MoonlightEndFade_Step
.Lfe126:
	.size	 AnimTask_MoonlightEndFade,.Lfe126-AnimTask_MoonlightEndFade
	.align	2, 0
	.globl	AnimTask_MoonlightEndFade_Step
	.type	 AnimTask_MoonlightEndFade_Step,function
	.thumb_func
AnimTask_MoonlightEndFade_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L977
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L960	@cond_branch
	cmp	r1, #0x1
	bgt	.L975	@cond_branch
	cmp	r1, #0
	beq	.L945	@cond_branch
	b	.L944
.L978:
	.align	2, 0
.L977:
	.word	gTasks
.L975:
	cmp	r1, #0x2
	bne	.LCB10410
	b	.L969	@long jump
.LCB10410:
	cmp	r1, #0x3
	bne	.LCB10412
	b	.L971	@long jump
.LCB10412:
	b	.L944
.L945:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB10424
	b	.L944	@long jump
.LCB10424:
	strh	r1, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L947	@cond_branch
	ldrh	r0, [r4, #0x16]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r2, [r4, #0x18]
	ldrh	r3, [r4, #0x12]
	add	r2, r2, r3
	strh	r2, [r4, #0x12]
	ldrh	r1, [r4, #0x1a]
	ldrh	r5, [r4, #0x14]
	add	r1, r1, r5
	strh	r1, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x13
	lsl	r2, r2, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	lsl	r1, r1, #0x10
	lsr	r2, r2, #0xb
	orr	r0, r0, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	ip, r0
	b	.L948
.L947:
	ldr	r7, .L979
	mov	ip, r7
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L948:
	mov	r2, #0x1
	mov	r3, #0x0
	mov	r1, #0x0
.L952:
	mov	r5, #0xe
	ldrsh	r0, [r4, r5]
	and	r0, r0, r2
	lsl	r5, r2, #0x11
	add	r6, r3, #0
	add	r6, r6, #0x10
	add	r1, r1, #0x1
	mov	r8, r1
	cmp	r0, #0
	beq	.L953	@cond_branch
	mov	r1, #0x1
	ldr	r2, .L979+0x4
.L957:
	add	r0, r3, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	mov	r7, ip
	strh	r7, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xf
	bls	.L957	@cond_branch
.L953:
	lsr	r2, r5, #0x10
	lsl	r0, r6, #0x10
	lsr	r3, r0, #0x10
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xf
	bls	.L952	@cond_branch
	b	.L944
.L980:
	.align	2, 0
.L979:
	.word	0x7fbb
	.word	gPlttBufferFaded
.L960:
	ldr	r0, .L981
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L944	@cond_branch
	mov	r2, #0x0
	ldr	r3, .L981+0x4
	mov	r5, #0x14
	add	r5, r5, r3
	mov	ip, r5
	ldr	r7, .L981+0x8
	mov	r8, r7
	ldr	r6, .L981+0xc
	mov	r5, #0x1
.L965:
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r1, r0, #0x2
	mov	r7, ip
	add	r0, r1, r7
	ldr	r0, [r0]
	cmp	r0, r8
	beq	.L967	@cond_branch
	cmp	r0, r6
	bne	.L964	@cond_branch
.L967:
	add	r0, r1, r3
	strh	r5, [r0, #0x2e]
.L964:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3f
	bls	.L965	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L976
.L982:
	.align	2, 0
.L981:
	.word	gPaletteFade
	.word	gSprites
	.word	gMoonSpriteTemplate
	.word	gMoonlightSparkleSpriteTemplate
.L969:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L944	@cond_branch
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	bl	LoadPointerFromVars
	ldr	r1, .L983
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L976:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L944
.L984:
	.align	2, 0
.L983:
	.word	0x7fbb
.L971:
	ldr	r0, .L985
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L944	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L944:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L986:
	.align	2, 0
.L985:
	.word	gPaletteFade
.Lfe127:
	.size	 AnimTask_MoonlightEndFade_Step,.Lfe127-AnimTask_MoonlightEndFade_Step
	.align	2, 0
	.type	 AnimHornHit,function
	.thumb_func
AnimHornHit:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L995
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bgt	.L988	@cond_branch
	mov	r0, #0x2
	strh	r0, [r6, #0x4]
.L988:
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x7f
	ble	.L989	@cond_branch
	mov	r0, #0x7f
	strh	r0, [r6, #0x4]
.L989:
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r5, #0x30]
	ldr	r4, .L995+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x2]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	ldrh	r1, [r5, #0x20]
	strh	r1, [r5, #0x3a]
	strh	r0, [r5, #0x3c]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L990	@cond_branch
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	add	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L995+0x8
	b	.L994
.L996:
	.align	2, 0
.L995:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	-0x1400
.L990:
	ldr	r0, .L997
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L992	@cond_branch
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	add	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x5
.L994:
	bl	__divsi3
	strh	r0, [r5, #0x34]
	lsl	r4, r4, #0x7
	strh	r4, [r5, #0x36]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L997+0x4
	bl	__divsi3
	strh	r0, [r5, #0x38]
	b	.L991
.L998:
	.align	2, 0
.L997:
	.word	gBattleAnimAttacker
	.word	-0xa00
.L992:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	sub	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L999
	bl	__divsi3
	strh	r0, [r5, #0x34]
	lsl	r4, r4, #0x7
	strh	r4, [r5, #0x36]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x4
	bl	__divsi3
	strh	r0, [r5, #0x38]
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x30
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
.L991:
	ldr	r0, .L999+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1000:
	.align	2, 0
.L999:
	.word	-0x1400
	.word	AnimHornHit_Step
.Lfe128:
	.size	 AnimHornHit,.Lfe128-AnimHornHit
	.align	2, 0
	.type	 AnimHornHit_Step,function
	.thumb_func
AnimHornHit_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x38]
	ldrh	r3, [r2, #0x36]
	add	r1, r1, r3
	strh	r1, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x17
	strh	r1, [r2, #0x22]
	ldrh	r0, [r2, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1002	@cond_branch
	ldrh	r0, [r2, #0x3a]
	strh	r0, [r2, #0x20]
	ldrh	r0, [r2, #0x3c]
	strh	r0, [r2, #0x22]
.L1002:
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L1003	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L1003:
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 AnimHornHit_Step,.Lfe129-AnimHornHit_Step
	.align	2, 0
	.globl	AnimTask_DoubleTeam
	.type	 AnimTask_DoubleTeam,function
	.thumb_func
AnimTask_DoubleTeam:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L1017
	add	r6, r0, r1
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x8]
	ldr	r0, .L1017+0x4
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	ldr	r2, .L1017+0x8
	mov	r0, #0x8
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r4, r0, #0x4
	mov	r5, #0x1
	ldr	r2, .L1017+0xc
.L1008:
	add	r1, r3, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	add	r0, r4, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xf
	bls	.L1008	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x10
	mov	r2, #0xb
	mov	r3, #0x0
	bl	BlendPalette
	mov	r0, #0x0
	strh	r0, [r6, #0xe]
	mov	r5, #0x0
	ldr	r7, .L1017+0x8
	mov	r1, #0x1c
	add	r1, r1, r7
	mov	r9, r1
	b	.L1010
.L1018:
	.align	2, 0
.L1017:
	.word	gTasks
	.word	0x2771
	.word	gSprites
	.word	gPlttBufferUnfaded
.L1012:
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r4, r2, r7
	ldrb	r1, [r6, #0xa]
	lsl	r1, r1, #0x4
	ldrb	r3, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	lsl	r0, r5, #0x7
	strh	r0, [r4, #0x30]
	mov	r0, r8
	strh	r0, [r4, #0x32]
	add	r2, r2, r9
	ldr	r0, .L1019
	str	r0, [r2]
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L1010:
	cmp	r5, #0x1
	bhi	.L1011	@cond_branch
	mov	r0, #0x0
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1012	@cond_branch
.L1011:
	ldr	r0, .L1019+0x4
	str	r0, [r6]
	ldr	r0, .L1019+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1015	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L1016
.L1020:
	.align	2, 0
.L1019:
	.word	AnimDoubleTeam
	.word	AnimTask_DoubleTeam_Step
	.word	gBattleAnimAttacker
.L1015:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	ClearGpuRegBits
.L1016:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe130:
	.size	 AnimTask_DoubleTeam,.Lfe130-AnimTask_DoubleTeam
	.align	2, 0
	.type	 AnimTask_DoubleTeam_Step,function
	.thumb_func
AnimTask_DoubleTeam_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1025
	add	r0, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1022	@cond_branch
	ldr	r0, .L1025+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1023	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L1024
.L1026:
	.align	2, 0
.L1025:
	.word	gTasks
	.word	gBattleAnimAttacker
.L1023:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L1024:
	ldr	r0, .L1027
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1022:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1028:
	.align	2, 0
.L1027:
	.word	0x2771
.Lfe131:
	.size	 AnimTask_DoubleTeam_Step,.Lfe131-AnimTask_DoubleTeam_Step
	.align	2, 0
	.type	 AnimDoubleTeam,function
	.thumb_func
AnimDoubleTeam:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1030	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
.L1030:
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x40
	ble	.L1031	@cond_branch
	ldr	r2, .L1033
	mov	r0, #0x32
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0xe]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xe]
	add	r0, r5, #0
	bl	DestroySpriteWithActiveSheet
	b	.L1032
.L1034:
	.align	2, 0
.L1033:
	.word	gTasks
.L1031:
	ldr	r4, .L1035
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r1, #0x6
	bl	__divsi3
	strh	r0, [r5, #0x36]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r1, #0xd
	bl	__divsi3
	strh	r0, [r5, #0x38]
	ldrh	r1, [r5, #0x30]
	add	r1, r1, r0
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	mov	r2, #0x36
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
.L1032:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1036:
	.align	2, 0
.L1035:
	.word	gSineTable
.Lfe132:
	.size	 AnimDoubleTeam,.Lfe132-AnimDoubleTeam
	.align	2, 0
	.type	 AnimSuperFang,function
	.thumb_func
AnimSuperFang:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L1038
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1038+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1039:
	.align	2, 0
.L1038:
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe133:
	.size	 AnimSuperFang,.Lfe133-AnimSuperFang
	.align	2, 0
	.globl	AnimTask_MusicNotesRainbowBlend
	.type	 AnimTask_MusicNotesRainbowBlend,function
	.thumb_func
AnimTask_MusicNotesRainbowBlend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r4, .L1058
	ldrh	r0, [r4]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	beq	.L1041	@cond_branch
	lsl	r0, r3, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	mov	r2, #0x1
	ldr	r5, .L1058+0x4
.L1045:
	add	r1, r3, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L1045	@cond_branch
.L1041:
	mov	r4, #0x1
	ldr	r0, .L1058
	mov	r8, r0
.L1050:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r5, r0, #0x2
	mov	r1, r8
	add	r0, r5, r1
	ldrh	r0, [r0]
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r4, #0x1
	mov	ip, r4
	cmp	r3, #0xff
	beq	.L1049	@cond_branch
	lsl	r0, r3, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	mov	r2, #0x1
	ldr	r7, .L1058+0x4
	ldr	r6, .L1058
	add	r4, r5, #0
.L1055:
	add	r1, r3, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L1055	@cond_branch
.L1049:
	mov	r1, ip
	lsl	r0, r1, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L1050	@cond_branch
	mov	r0, r9
	bl	DestroyAnimVisualTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1059:
	.align	2, 0
.L1058:
	.word	sParticlesColorBlendTable
	.word	gPlttBufferFaded
.Lfe134:
	.size	 AnimTask_MusicNotesRainbowBlend,.Lfe134-AnimTask_MusicNotesRainbowBlend
	.align	2, 0
	.globl	AnimTask_MusicNotesClearRainbowBlend
	.type	 AnimTask_MusicNotesClearRainbowBlend,function
	.thumb_func
AnimTask_MusicNotesClearRainbowBlend:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x1
	ldr	r6, .L1066
.L1064:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0]
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L1064	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1067:
	.align	2, 0
.L1066:
	.word	sParticlesColorBlendTable
.Lfe135:
	.size	 AnimTask_MusicNotesClearRainbowBlend,.Lfe135-AnimTask_MusicNotesClearRainbowBlend
	.align	2, 0
	.type	 AnimWavyMusicNotes,function
	.thumb_func
AnimWavyMusicNotes:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r4, .L1072
	ldrb	r1, [r4]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r2, .L1072+0x4
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1069	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r5, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
.L1069:
	ldrh	r0, [r4, #0x2]
	mov	r1, #0x0
	strh	r0, [r5, #0x30]
	strh	r1, [r5, #0x32]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x34]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1070	@cond_branch
	mov	r6, #0x30
	mov	r3, #0x28
	b	.L1071
.L1073:
	.align	2, 0
.L1072:
	.word	gBattleAnimArgs
	.word	sParticlesColorBlendTable
.L1070:
	ldr	r4, .L1074
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L1071:
	ldrh	r0, [r5, #0x20]
	lsl	r1, r0, #0x4
	strh	r1, [r5, #0x36]
	ldrh	r1, [r5, #0x22]
	lsl	r2, r1, #0x4
	strh	r2, [r5, #0x38]
	sub	r0, r6, r0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r1, r3, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r2, r5, #0
	add	r2, r2, #0x3a
	add	r3, r5, #0
	add	r3, r3, #0x3c
	mov	r4, #0x28
	str	r4, [sp]
	bl	AnimWavyMusicNotes_CalcVelocity
	ldr	r0, .L1074+0x4
	str	r0, [r5, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1075:
	.align	2, 0
.L1074:
	.word	gBattleAnimTarget
	.word	AnimWavyMusicNotes_Step
.Lfe136:
	.size	 AnimWavyMusicNotes,.Lfe136-AnimWavyMusicNotes
	.align	2, 0
	.type	 AnimWavyMusicNotes_CalcVelocity,function
	.thumb_func
AnimWavyMusicNotes_CalcVelocity:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r2, #0
	mov	r8, r3
	ldr	r2, [sp, #0x18]
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r1, r2, #0x18
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bge	.L1077	@cond_branch
	lsl	r0, r1, #0x18
	neg	r0, r0
	lsr	r1, r0, #0x18
.L1077:
	lsl	r5, r2, #0x8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	__divsi3
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L1078	@cond_branch
	mov	r4, #0x1
.L1078:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	strh	r0, [r7]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x8
	add	r1, r4, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe137:
	.size	 AnimWavyMusicNotes_CalcVelocity,.Lfe137-AnimWavyMusicNotes_CalcVelocity
	.align	2, 0
	.type	 AnimWavyMusicNotes_Step,function
	.thumb_func
AnimWavyMusicNotes_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x2e]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r1, r0, r1
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L1080	@cond_branch
	add	r0, r0, #0xff
.L1080:
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	ldrh	r1, [r4, #0x3a]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	ldrh	r2, [r4, #0x3c]
	ldrh	r3, [r4, #0x38]
	add	r2, r2, r3
	strh	r2, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x20]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x14
	strh	r2, [r4, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xf
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L1082	@cond_branch
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	blt	.L1082	@cond_branch
	cmp	r1, #0x80
	ble	.L1081	@cond_branch
.L1082:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
	b	.L1083
.L1081:
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L1083	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r1
	ble	.L1083	@cond_branch
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1085	@cond_branch
	strh	r5, [r4, #0x30]
.L1085:
	ldr	r2, .L1087
	mov	r3, #0x30
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1083	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
.L1083:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1088:
	.align	2, 0
.L1087:
	.word	sParticlesColorBlendTable
.Lfe138:
	.size	 AnimWavyMusicNotes_Step,.Lfe138-AnimWavyMusicNotes_Step
	.align	2, 0
	.type	 AnimFlyingMusicNotes,function
	.thumb_func
AnimFlyingMusicNotes:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r7, .L1091
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1090	@cond_branch
	ldr	r1, .L1091+0x4
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L1090:
	ldrb	r0, [r7]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L1091+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	mov	r5, #0x0
	strh	r0, [r6, #0x20]
	ldrb	r0, [r7]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	ldrb	r1, [r4]
	add	r0, r6, #0
	bl	StartSpriteAnim
	strh	r5, [r6, #0x32]
	strh	r5, [r6, #0x34]
	ldrh	r0, [r6, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x36]
	ldrh	r0, [r6, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x38]
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x4
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r6, #0x3a]
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x7
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r6, #0x3c]
	ldr	r0, .L1091+0x8
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1092:
	.align	2, 0
.L1091:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimFlyingMusicNotes_Step
.Lfe139:
	.size	 AnimFlyingMusicNotes,.Lfe139-AnimFlyingMusicNotes
	.align	2, 0
	.type	 AnimFlyingMusicNotes_Step,function
	.thumb_func
AnimFlyingMusicNotes_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x36]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x3c]
	ldrh	r2, [r4, #0x38]
	add	r1, r1, r2
	strh	r1, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r4, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x22]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	ble	.L1094	@cond_branch
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L1094	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x10
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0x12
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mov	r1, #0x12
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1094	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
.L1094:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x30
	bne	.L1096	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L1096:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe140:
	.size	 AnimFlyingMusicNotes_Step,.Lfe140-AnimFlyingMusicNotes_Step
	.align	2, 0
	.type	 AnimBellyDrumHand,function
	.thumb_func
AnimBellyDrumHand:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L1100
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L1098	@cond_branch
	ldrb	r0, [r5, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
	mov	r6, #0x10
	b	.L1099
.L1101:
	.align	2, 0
.L1100:
	.word	gBattleAnimArgs
.L1098:
	ldr	r6, .L1102
.L1099:
	ldr	r4, .L1102+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	ldr	r0, .L1102+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L1102+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1103:
	.align	2, 0
.L1102:
	.word	0xfff0
	.word	gBattleAnimAttacker
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe141:
	.size	 AnimBellyDrumHand,.Lfe141-AnimBellyDrumHand
	.align	2, 0
	.type	 AnimSlowFlyingMusicNotes,function
	.thumb_func
AnimSlowFlyingMusicNotes:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x22]
	ldr	r5, .L1108
	ldrb	r1, [r5, #0x2]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r2, .L1108+0x4
	mov	r0, #0x4
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1105	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
.L1105:
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	cmp	r0, #0
	bne	.L1106	@cond_branch
	ldr	r2, .L1108+0x8
.L1106:
	mov	r0, #0x28
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x20]
	strh	r1, [r4, #0x30]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	sub	r0, r0, #0x28
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x38]
	ldr	r0, .L1108+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1109:
	.align	2, 0
.L1108:
	.word	gBattleAnimArgs
	.word	sParticlesColorBlendTable
	.word	0xffe0
	.word	AnimSlowFlyingMusicNotes_Step
.Lfe142:
	.size	 AnimSlowFlyingMusicNotes,.Lfe142-AnimSlowFlyingMusicNotes
	.align	2, 0
	.type	 AnimSlowFlyingMusicNotes_Step,function
	.thumb_func
AnimSlowFlyingMusicNotes_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1111	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldrh	r2, [r4, #0x24]
	mov	r3, #0x24
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bge	.L1112	@cond_branch
	lsl	r0, r1, #0x10
	neg	r0, r0
	lsr	r1, r0, #0x10
.L1112:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r2
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x4
	bl	Sin
	ldrh	r3, [r4, #0x26]
	add	r0, r0, r3
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L1113
.L1111:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1113:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe143:
	.size	 AnimSlowFlyingMusicNotes_Step,.Lfe143-AnimSlowFlyingMusicNotes_Step
	.align	2, 0
	.globl	SetSpriteNextToMonHead
	.type	 SetSpriteNextToMonHead,function
	.thumb_func
SetSpriteNextToMonHead:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1115	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L1118
.L1115:
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
.L1118:
	strh	r0, [r6, #0x20]
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1117	@cond_branch
	add	r0, r0, #0x3
.L1117:
	asr	r0, r0, #0x2
	sub	r0, r4, r0
	strh	r0, [r6, #0x22]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe144:
	.size	 SetSpriteNextToMonHead,.Lfe144-SetSpriteNextToMonHead
	.align	2, 0
	.type	 AnimThoughtBubble,function
	.thumb_func
AnimThoughtBubble:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1124
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1120	@cond_branch
	ldr	r0, .L1124+0x4
	b	.L1123
.L1125:
	.align	2, 0
.L1124:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1120:
	ldr	r0, .L1126
.L1123:
	ldrb	r4, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetSpriteNextToMonHead
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r1, r1, #0x1f
	ldr	r0, .L1126+0x4
	ldrh	r0, [r0, #0x2]
	strh	r0, [r5, #0x2e]
	add	r0, r1, #0x2
	strh	r0, [r5, #0x30]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r1, .L1126+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1126+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1127:
	.align	2, 0
.L1126:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimThoughtBubble_Step
	.word	RunStoredCallbackWhenAnimEnds
.Lfe145:
	.size	 AnimThoughtBubble,.Lfe145-AnimThoughtBubble
	.align	2, 0
	.type	 AnimThoughtBubble_Step,function
	.thumb_func
AnimThoughtBubble_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1129	@cond_branch
	ldr	r1, .L1130
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldrh	r1, [r4, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L1130+0x4
	str	r0, [r4, #0x1c]
.L1129:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1131:
	.align	2, 0
.L1130:
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe146:
	.size	 AnimThoughtBubble_Step,.Lfe146-AnimThoughtBubble_Step
	.align	2, 0
	.type	 AnimMetronomeFinger,function
	.thumb_func
AnimMetronomeFinger:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1136
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1133	@cond_branch
	ldr	r0, .L1136+0x4
	b	.L1135
.L1137:
	.align	2, 0
.L1136:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1133:
	ldr	r0, .L1138
.L1135:
	ldrb	r0, [r0]
	add	r1, r4, #0
	bl	SetSpriteNextToMonHead
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r1, .L1138+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1138+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1139:
	.align	2, 0
.L1138:
	.word	gBattleAnimTarget
	.word	AnimMetronomeFinger_Step
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe147:
	.size	 AnimMetronomeFinger,.Lfe147-AnimMetronomeFinger
	.align	2, 0
	.type	 AnimMetronomeFinger_Step,function
	.thumb_func
AnimMetronomeFinger_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L1141	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r1, .L1142
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1142+0x4
	str	r0, [r4, #0x1c]
.L1141:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1143:
	.align	2, 0
.L1142:
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe148:
	.size	 AnimMetronomeFinger_Step,.Lfe148-AnimMetronomeFinger_Step
	.align	2, 0
	.type	 AnimFollowMeFinger,function
	.thumb_func
AnimFollowMeFinger:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r0, .L1149
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1145	@cond_branch
	ldr	r0, .L1149+0x4
	b	.L1148
.L1150:
	.align	2, 0
.L1149:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1145:
	ldr	r0, .L1151
.L1148:
	ldrb	r5, [r0]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r4, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bgt	.L1147	@cond_branch
	mov	r0, #0xa
	strh	r0, [r4, #0x22]
.L1147:
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	strh	r6, [r4, #0x30]
	add	r1, r4, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	strh	r0, [r4, #0x32]
	ldrb	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x34]
	strh	r6, [r4, #0x36]
	ldr	r1, .L1151+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1151+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1152:
	.align	2, 0
.L1151:
	.word	gBattleAnimTarget
	.word	AnimFollowMeFinger_Step1
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe149:
	.size	 AnimFollowMeFinger,.Lfe149-AnimFollowMeFinger
	.align	2, 0
	.type	 AnimFollowMeFinger_Step1,function
	.thumb_func
AnimFollowMeFinger_Step1:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L1154	@cond_branch
	ldr	r0, .L1155
	str	r0, [r1, #0x1c]
.L1154:
	pop	{r0}
	bx	r0
.L1156:
	.align	2, 0
.L1155:
	.word	AnimFollowMeFinger_Step2
.Lfe150:
	.size	 AnimFollowMeFinger_Step1,.Lfe150-AnimFollowMeFinger_Step1
	.align	2, 0
	.type	 AnimFollowMeFinger_Step2,function
	.thumb_func
AnimFollowMeFinger_Step2:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0x4
	strh	r1, [r2, #0x30]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xfe
	ble	.L1158	@cond_branch
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1159	@cond_branch
	strh	r0, [r2, #0x24]
	ldr	r0, .L1163
	str	r0, [r2, #0x1c]
	b	.L1157
.L1164:
	.align	2, 0
.L1163:
	.word	AnimMetronomeFinger_Step
.L1159:
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r2, #0x30]
.L1158:
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x4f
	ble	.L1161	@cond_branch
	ldrh	r0, [r2, #0x34]
	add	r1, r2, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
.L1161:
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	cmp	r0, #0x9f
	ble	.L1162	@cond_branch
	ldrh	r0, [r2, #0x32]
	add	r1, r2, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
.L1162:
	ldr	r1, .L1165
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	asr	r1, r0, #0x1
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
.L1157:
	pop	{r0}
	bx	r0
.L1166:
	.align	2, 0
.L1165:
	.word	gSineTable
.Lfe151:
	.size	 AnimFollowMeFinger_Step2,.Lfe151-AnimFollowMeFinger_Step2
	.align	2, 0
	.type	 AnimTauntFinger,function
	.thumb_func
AnimTauntFinger:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1174
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1168	@cond_branch
	ldr	r0, .L1174+0x4
	b	.L1172
.L1175:
	.align	2, 0
.L1174:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1168:
	ldr	r0, .L1176
.L1172:
	ldrb	r4, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetSpriteNextToMonHead
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1170	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	mov	r0, #0x2
	b	.L1173
.L1177:
	.align	2, 0
.L1176:
	.word	gBattleAnimTarget
.L1170:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0x3
.L1173:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L1178
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1179:
	.align	2, 0
.L1178:
	.word	AnimTauntFinger_Step1
.Lfe152:
	.size	 AnimTauntFinger,.Lfe152-AnimTauntFinger
	.align	2, 0
	.type	 AnimTauntFinger_Step1,function
	.thumb_func
AnimTauntFinger_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L1181	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r1, .L1182
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1182+0x4
	str	r0, [r4, #0x1c]
.L1181:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1183:
	.align	2, 0
.L1182:
	.word	AnimTauntFinger_Step2
	.word	RunStoredCallbackWhenAnimEnds
.Lfe153:
	.size	 AnimTauntFinger_Step1,.Lfe153-AnimTauntFinger_Step1
	.align	2, 0
	.type	 AnimTauntFinger_Step2,function
	.thumb_func
AnimTauntFinger_Step2:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L1185	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L1185:
	pop	{r0}
	bx	r0
.Lfe154:
	.size	 AnimTauntFinger_Step2,.Lfe154-AnimTauntFinger_Step2
.text
	.align	2, 0 @ Don't pad with nop

