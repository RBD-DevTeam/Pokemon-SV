@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sOptionMenuPtr,object
	.size	 sOptionMenuPtr,4
sOptionMenuPtr:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sOptionMenuWinTemplates,object
sOptionMenuWinTemplates:
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x1a
	.byte	0x2
	.byte	0x1
	.short	0x2
	.byte	0x0
	.byte	0x2
	.byte	0x7
	.byte	0x1a
	.byte	0xc
	.byte	0x1
	.short	0x36
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x1e
	.byte	0x2
	.byte	0xf
	.short	0x16e
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sOptionMenuWinTemplates,32
	.align	2, 0
	.type	 sOptionMenuBgTemplates,object
	.size	 sOptionMenuBgTemplates,12
sOptionMenuBgTemplates:
	.byte	0xe5
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xf4
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xd6
	.byte	0x21
	.byte	0x0
	.space	1
	.align	1, 0
	.type	 sOptionMenuPalette,object
sOptionMenuPalette:
	.short	0x7fff
	.short	0x7fff
	.short	0x318c
	.short	0x675a
	.short	0x43c
	.short	0x3aff
	.short	0x664
	.short	0x4bd2
	.short	0x6546
	.short	0x7b14
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sOptionMenuPalette,32
	.align	1, 0
	.type	 sOptionMenuItemCounts,object
	.size	 sOptionMenuItemCounts,14
sOptionMenuItemCounts:
	.short	0x3
	.short	0x2
	.short	0x2
	.short	0x2
	.short	0x3
	.short	0xa
	.short	0x0
	.align	2, 0
	.type	 sOptionMenuItemsNames,object
	.size	 sOptionMenuItemsNames,28
sOptionMenuItemsNames:
	.word	gText_TextSpeed
	.word	gText_BattleScene
	.word	gText_BattleStyle
	.word	gText_Sound
	.word	gText_ButtonMode
	.word	gText_Frame
	.word	gText_OptionMenuCancel
	.align	2, 0
	.type	 sTextSpeedOptions,object
sTextSpeedOptions:
	.word	gText_TextSpeedSlow
	.word	gText_TextSpeedMid
	.word	gText_TextSpeedFast
	.size	 sTextSpeedOptions,12
	.align	2, 0
	.type	 sBattleSceneOptions,object
sBattleSceneOptions:
	.word	gText_BattleSceneOn
	.word	gText_BattleSceneOff
	.size	 sBattleSceneOptions,8
	.align	2, 0
	.type	 sBattleStyleOptions,object
sBattleStyleOptions:
	.word	gText_BattleStyleShift
	.word	gText_BattleStyleSet
	.size	 sBattleStyleOptions,8
	.align	2, 0
	.type	 sSoundOptions,object
sSoundOptions:
	.word	gText_SoundMono
	.word	gText_SoundStereo
	.size	 sSoundOptions,8
	.align	2, 0
	.type	 sButtonTypeOptions,object
sButtonTypeOptions:
	.word	gText_ButtonTypeHelp
	.word	gText_ButtonTypeLR
	.word	gText_ButtonTypeLEqualsA
	.size	 sButtonTypeOptions,12
	.type	 sOptionMenuPickSwitchCancelTextColor,object
sOptionMenuPickSwitchCancelTextColor:
	.byte	0xf
	.byte	0x1
	.byte	0x2
	.size	 sOptionMenuPickSwitchCancelTextColor,3
	.type	 sOptionMenuTextColor,object
sOptionMenuTextColor:
	.byte	0x0
	.byte	0x5
	.byte	0x4
	.size	 sOptionMenuTextColor,3
.text
	.align	2, 0
	.type	 CB2_InitOptionMenu,function
	.thumb_func
CB2_InitOptionMenu:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 CB2_InitOptionMenu,.Lfe1-CB2_InitOptionMenu
	.align	2, 0
	.type	 VBlankCB_OptionMenu,function
	.thumb_func
VBlankCB_OptionMenu:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 VBlankCB_OptionMenu,.Lfe2-VBlankCB_OptionMenu
	.align	2, 0
	.globl	CB2_OptionsMenuFromStartMenu
	.type	 CB2_OptionsMenuFromStartMenu,function
	.thumb_func
CB2_OptionsMenuFromStartMenu:
	push	{r4, r5, r6, lr}
	ldr	r1, .L12
	ldr	r0, [r1, #0x8]
	cmp	r0, #0
	bne	.L5	@cond_branch
	ldr	r0, .L12+0x4
	str	r0, [r1, #0x8]
.L5:
	ldr	r4, .L12+0x8
	mov	r0, #0x14
	bl	AllocZeroed
	str	r0, [r4]
	mov	r1, #0x0
	strb	r1, [r0, #0x10]
	ldr	r0, [r4]
	strb	r1, [r0, #0x12]
	ldr	r0, [r4]
	strb	r1, [r0, #0x11]
	ldr	r2, [r4]
	strh	r1, [r2, #0xe]
	ldr	r0, .L12+0xc
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	strh	r0, [r2]
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1f
	strh	r0, [r2, #0x2]
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1f
	strh	r0, [r2, #0x4]
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	strh	r0, [r2, #0x6]
	ldrb	r0, [r1, #0x13]
	strh	r0, [r2, #0x8]
	ldrb	r0, [r1, #0x14]
	lsr	r0, r0, #0x3
	strh	r0, [r2, #0xa]
	mov	r3, #0x0
	add	r6, r4, #0
	ldr	r5, .L12+0x10
	mov	r4, #0x0
.L9:
	ldr	r1, [r6]
	lsl	r0, r3, #0x1
	add	r2, r1, r0
	ldrh	r1, [r2]
	add	r0, r0, r5
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	ble	.L8	@cond_branch
	strh	r4, [r2]
.L8:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x5
	bls	.L9	@cond_branch
	mov	r0, #0xd
	bl	SetHelpContext
	ldr	r0, .L12+0x14
	bl	SetMainCallback2
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	gMain
	.word	CB2_ReturnToFieldWithOpenMenu
	.word	sOptionMenuPtr
	.word	gSaveBlock2Ptr
	.word	sOptionMenuItemCounts
	.word	CB2_OptionMenu
.Lfe3:
	.size	 CB2_OptionsMenuFromStartMenu,.Lfe3-CB2_OptionsMenuFromStartMenu
	.align	2, 0
	.type	 OptionMenu_InitCallbacks,function
	.thumb_func
OptionMenu_InitCallbacks:
	push	{lr}
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 OptionMenu_InitCallbacks,.Lfe4-OptionMenu_InitCallbacks
	.align	2, 0
	.type	 OptionMenu_SetVBlankCallback,function
	.thumb_func
OptionMenu_SetVBlankCallback:
	push	{lr}
	ldr	r0, .L16
	bl	SetVBlankCallback
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	VBlankCB_OptionMenu
.Lfe5:
	.size	 OptionMenu_SetVBlankCallback,.Lfe5-OptionMenu_SetVBlankCallback
	.align	2, 0
	.type	 CB2_OptionMenu,function
	.thumb_func
CB2_OptionMenu:
	push	{r4, lr}
	ldr	r0, .L38
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	cmp	r0, #0x9
	bhi	.L36	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L38+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L39:
	.align	2, 0
.L38:
	.word	sOptionMenuPtr
	.word	.L37
	.align	2, 0
	.align	2, 0
.L37:
	.word	.L20
	.word	.L21
	.word	.L22
	.word	.L23
	.word	.L25
	.word	.L26
	.word	.L27
	.word	.L28
	.word	.L34
	.word	.L35
.L20:
	bl	OptionMenu_InitCallbacks
	b	.L19
.L21:
	bl	InitOptionMenuBg
	b	.L19
.L22:
	bl	OptionMenu_ResetSpriteData
	b	.L19
.L23:
	bl	LoadOptionMenuPalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L18	@cond_branch
	b	.L19
.L25:
	bl	PrintOptionMenuHeader
	b	.L19
.L26:
	bl	DrawOptionMenuBg
	b	.L19
.L27:
	bl	LoadOptionMenuItemNames
	b	.L19
.L28:
	mov	r4, #0x0
.L32:
	add	r0, r4, #0
	bl	BufferOptionMenuString
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bls	.L32	@cond_branch
	b	.L19
.L34:
	ldr	r0, .L40
	ldr	r0, [r0]
	ldrh	r0, [r0, #0xe]
	bl	UpdateSettingSelectionDisplay
	b	.L19
.L41:
	.align	2, 0
.L40:
	.word	sOptionMenuPtr
.L35:
	bl	OptionMenu_PickSwitchCancel
	b	.L19
.L36:
	bl	SetOptionMenuTask
.L19:
	ldr	r0, .L42
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
.L18:
	pop	{r4}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	sOptionMenuPtr
.Lfe6:
	.size	 CB2_OptionMenu,.Lfe6-CB2_OptionMenu
	.align	2, 0
	.type	 SetOptionMenuTask,function
	.thumb_func
SetOptionMenuTask:
	push	{lr}
	ldr	r0, .L45
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L45+0x4
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	Task_OptionMenu
	.word	CB2_InitOptionMenu
.Lfe7:
	.size	 SetOptionMenuTask,.Lfe7-SetOptionMenuTask
	.align	2, 0
	.type	 InitOptionMenuBg,function
	.thumb_func
InitOptionMenuBg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r3, #0xc0
	lsl	r3, r3, #0x13
	mov	r4, #0xc0
	lsl	r4, r4, #0x9
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r2, sp
	mov	r6, #0x0
	ldr	r1, .L53
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L53+0x4
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L50:
	strh	r6, [r2]
	mov	r0, sp
	str	r0, [r1]
	str	r3, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r3, r3, r5
	sub	r4, r4, r5
	cmp	r4, r5
	bhi	.L50	@cond_branch
	strh	r6, [r2]
	mov	r2, sp
	str	r2, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r4, #0x1
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r2, .L53
	mov	r1, r8
	str	r1, [r2]
	str	r0, [r2, #0x4]
	lsr	r0, r3, #0x2
	mov	r1, #0x85
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	mov	r0, sp
	strh	r4, [r0]
	str	r0, [r2]
	str	r1, [r2, #0x4]
	lsr	r3, r3, #0x1
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	str	r3, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L53+0x8
	mov	r0, #0x0
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r0, .L53+0xc
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r0, #0x50
	mov	r1, #0xc1
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x2
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x1
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x27
	bl	SetGpuReg
	mov	r1, #0xc1
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	0x40000d4
	.word	-0x7efff800
	.word	sOptionMenuBgTemplates
	.word	sOptionMenuWinTemplates
.Lfe8:
	.size	 InitOptionMenuBg,.Lfe8-InitOptionMenuBg
	.align	2, 0
	.type	 OptionMenu_PickSwitchCancel,function
	.thumb_func
OptionMenu_PickSwitchCancel:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	ldr	r5, .L56
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	mov	r4, #0xe4
	sub	r4, r4, r0
	mov	r0, #0x2
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L56+0x4
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized3
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x2
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	gText_PickSwitchCancel
	.word	sOptionMenuPickSwitchCancelTextColor
.Lfe9:
	.size	 OptionMenu_PickSwitchCancel,.Lfe9-OptionMenu_PickSwitchCancel
	.align	2, 0
	.type	 OptionMenu_ResetSpriteData,function
	.thumb_func
OptionMenu_ResetSpriteData:
	push	{lr}
	bl	ResetSpriteData
	bl	ResetPaletteFade
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	bl	ScanlineEffect_Stop
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 OptionMenu_ResetSpriteData,.Lfe10-OptionMenu_ResetSpriteData
	.align	2, 0
	.type	 LoadOptionMenuPalette,function
	.thumb_func
LoadOptionMenuPalette:
	push	{lr}
	ldr	r0, .L70
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x12]
	cmp	r1, #0x1
	beq	.L62	@cond_branch
	cmp	r1, #0x1
	bgt	.L67	@cond_branch
	cmp	r1, #0
	beq	.L61	@cond_branch
	b	.L65
.L71:
	.align	2, 0
.L70:
	.word	sOptionMenuPtr
.L67:
	cmp	r1, #0x2
	beq	.L63	@cond_branch
	cmp	r1, #0x3
	beq	.L64	@cond_branch
	b	.L65
.L61:
	ldrb	r0, [r0, #0xa]
	bl	GetUserWindowGraphics
	ldr	r1, [r0]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	mov	r3, #0xd5
	lsl	r3, r3, #0x1
	mov	r0, #0x1
	bl	LoadBgTiles
	b	.L60
.L62:
	ldrb	r0, [r0, #0xa]
	bl	GetUserWindowGraphics
	ldr	r0, [r0, #0x4]
	mov	r1, #0x20
	b	.L69
.L63:
	ldr	r0, .L72
	mov	r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x2
	bl	GetTextWindowPalette
	mov	r1, #0xf0
.L69:
	mov	r2, #0x20
	bl	LoadPalette
	b	.L60
.L73:
	.align	2, 0
.L72:
	.word	sOptionMenuPalette
.L64:
	ldr	r1, .L74
	mov	r0, #0x1
	mov	r2, #0x30
	bl	LoadStdWindowGfxOnBg
	b	.L60
.L75:
	.align	2, 0
.L74:
	.word	0x1b3
.L65:
	mov	r0, #0x1
	b	.L68
.L60:
	ldr	r0, .L76
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x12]
	mov	r0, #0x0
.L68:
	pop	{r1}
	bx	r1
.L77:
	.align	2, 0
.L76:
	.word	sOptionMenuPtr
.Lfe11:
	.size	 LoadOptionMenuPalette,.Lfe11-LoadOptionMenuPalette
	.align	2, 0
	.type	 Task_OptionMenu,function
	.thumb_func
Task_OptionMenu:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L101
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	add	r3, r1, #0
	cmp	r0, #0x5
	bls	.LCB680
	b	.L78	@long jump
.LCB680:
	lsl	r0, r0, #0x2
	ldr	r1, .L101+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L102:
	.align	2, 0
.L101:
	.word	sOptionMenuPtr
	.word	.L97
	.align	2, 0
	.align	2, 0
.L97:
	.word	.L80
	.word	.L94
	.word	.L83
	.word	.L93
	.word	.L94
	.word	.L96
.L80:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	bl	OptionMenu_SetVBlankCallback
	ldr	r0, .L103
	ldr	r1, [r0]
	b	.L99
.L104:
	.align	2, 0
.L103:
	.word	sOptionMenuPtr
.L83:
	bl	MenuHelpers_CallLinkSomething
	cmp	r0, #0x1
	beq	.L78	@cond_branch
	bl	OptionMenu_ProcessInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L78	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L105
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L106:
	.align	2, 0
.L105:
	.word	.L91
	.align	2, 0
	.align	2, 0
.L91:
	.word	.L78
	.word	.L87
	.word	.L88
	.word	.L89
	.word	.L90
.L87:
	ldr	r0, .L107
	ldr	r1, [r0]
	b	.L99
.L108:
	.align	2, 0
.L107:
	.word	sOptionMenuPtr
.L88:
	ldr	r4, .L109
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xa]
	bl	GetUserWindowGraphics
	ldr	r1, [r0]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	mov	r3, #0xd5
	lsl	r3, r3, #0x1
	mov	r0, #0x1
	bl	LoadBgTiles
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xa]
	bl	GetUserWindowGraphics
	ldr	r0, [r0, #0x4]
	mov	r1, #0x20
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, [r4]
	b	.L100
.L110:
	.align	2, 0
.L109:
	.word	sOptionMenuPtr
.L89:
	ldr	r0, .L111
	ldr	r0, [r0]
	ldrh	r0, [r0, #0xe]
	bl	UpdateSettingSelectionDisplay
	b	.L78
.L112:
	.align	2, 0
.L111:
	.word	sOptionMenuPtr
.L90:
	ldr	r0, .L113
	ldr	r0, [r0]
.L100:
	ldrb	r0, [r0, #0xe]
	bl	BufferOptionMenuString
	b	.L78
.L114:
	.align	2, 0
.L113:
	.word	sOptionMenuPtr
.L93:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L115
	ldr	r1, [r0]
	b	.L99
.L116:
	.align	2, 0
.L115:
	.word	sOptionMenuPtr
.L94:
	ldr	r0, .L117
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L78	@cond_branch
	ldr	r1, [r3]
.L99:
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	b	.L78
.L118:
	.align	2, 0
.L117:
	.word	gPaletteFade
.L96:
	add	r0, r2, #0
	bl	CloseAndSaveOptionMenu
.L78:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 Task_OptionMenu,.Lfe12-Task_OptionMenu
	.align	2, 0
	.type	 OptionMenu_ProcessInput,function
	.thumb_func
OptionMenu_ProcessInput:
	push	{r4, lr}
	ldr	r3, .L148
	ldrh	r1, [r3, #0x30]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L120	@cond_branch
	ldr	r2, .L148+0x4
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xe]
	lsl	r0, r0, #0x1
	add	r3, r1, r0
	ldrh	r4, [r3]
	ldr	r1, .L148+0x8
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r4, r0
	bne	.L121	@cond_branch
	mov	r0, #0x0
	b	.L144
.L149:
	.align	2, 0
.L148:
	.word	gMain
	.word	sOptionMenuPtr
	.word	sOptionMenuItemCounts
.L121:
	add	r0, r4, #0x1
.L144:
	strh	r0, [r3]
	ldr	r0, [r2]
	ldrh	r0, [r0, #0xe]
	cmp	r0, #0x5
	beq	.L145	@cond_branch
	b	.L129
.L120:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L126	@cond_branch
	ldr	r2, .L150
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xe]
	lsl	r3, r0, #0x1
	add	r1, r1, r3
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L127	@cond_branch
	ldr	r0, .L150+0x4
	add	r0, r3, r0
	ldrh	r0, [r0]
.L127:
	sub	r0, r0, #0x1
	strh	r0, [r1]
	ldr	r0, [r2]
	ldrh	r0, [r0, #0xe]
	cmp	r0, #0x5
	bne	.L129	@cond_branch
.L145:
	mov	r0, #0x2
	b	.L143
.L151:
	.align	2, 0
.L150:
	.word	sOptionMenuPtr
	.word	sOptionMenuItemCounts
.L129:
	mov	r0, #0x4
	b	.L143
.L126:
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0
	beq	.L132	@cond_branch
	ldr	r0, .L152
	ldr	r1, [r0]
	ldrh	r0, [r1, #0xe]
	cmp	r0, #0
	bne	.L133	@cond_branch
	mov	r0, #0x6
	b	.L147
.L153:
	.align	2, 0
.L152:
	.word	sOptionMenuPtr
.L133:
	sub	r0, r0, #0x1
	b	.L147
.L132:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L136	@cond_branch
	ldr	r0, .L154
	ldr	r1, [r0]
	ldrh	r0, [r1, #0xe]
	cmp	r0, #0x6
	bne	.L137	@cond_branch
	strh	r2, [r1, #0xe]
	b	.L138
.L155:
	.align	2, 0
.L154:
	.word	sOptionMenuPtr
.L137:
	add	r0, r0, #0x1
.L147:
	strh	r0, [r1, #0xe]
.L138:
	mov	r0, #0x3
	b	.L143
.L136:
	ldrh	r1, [r3, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L141	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L140	@cond_branch
.L141:
	mov	r0, #0x1
	b	.L143
.L140:
	mov	r0, #0x0
.L143:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 OptionMenu_ProcessInput,.Lfe13-OptionMenu_ProcessInput
	.align	2, 0
	.type	 BufferOptionMenuString,function
	.thumb_func
BufferOptionMenuString:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x30
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, sp, #0x2c
	ldr	r1, .L167
	add	r0, r4, #0
	mov	r2, #0x3
	bl	memcpy
	mov	r0, #0x82
	mov	r8, r0
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	mul	r0, r0, r5
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x46
	str	r1, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x82
	add	r3, r7, #0
	bl	FillWindowPixelRect
	add	r6, r4, #0
	cmp	r5, #0x5
	bhi	.L157	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L167+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L168:
	.align	2, 0
.L167:
	.word	sOptionMenuTextColor
	.word	.L165
	.align	2, 0
	.align	2, 0
.L165:
	.word	.L158
	.word	.L159
	.word	.L160
	.word	.L161
	.word	.L162
	.word	.L163
.L158:
	str	r6, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r2, .L169
	b	.L166
.L170:
	.align	2, 0
.L169:
	.word	sTextSpeedOptions
.L159:
	str	r6, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r2, .L171
	b	.L166
.L172:
	.align	2, 0
.L171:
	.word	sBattleSceneOptions
.L160:
	str	r6, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r2, .L173
	b	.L166
.L174:
	.align	2, 0
.L173:
	.word	sBattleStyleOptions
.L161:
	str	r6, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r2, .L175
	b	.L166
.L176:
	.align	2, 0
.L175:
	.word	sSoundOptions
.L162:
	str	r6, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r2, .L177
.L166:
	ldr	r0, .L177+0x4
	ldr	r0, [r0]
	lsl	r1, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, r8
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
	b	.L157
.L178:
	.align	2, 0
.L177:
	.word	sButtonTypeOptions
	.word	sOptionMenuPtr
.L163:
	ldr	r1, .L179
	add	r0, sp, #0xc
	bl	StringCopy
	add	r4, sp, #0x20
	ldr	r0, .L179+0x4
	ldr	r0, [r0]
	lsl	r1, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	add	r0, sp, #0xc
	add	r1, r4, #0
	mov	r2, #0x3
	bl	StringAppendN
	str	r6, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	add	r0, sp, #0xc
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, r8
	add	r3, r7, #0
	bl	AddTextPrinterParameterized3
.L157:
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x30
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L180:
	.align	2, 0
.L179:
	.word	gText_FrameType
	.word	sOptionMenuPtr
.Lfe14:
	.size	 BufferOptionMenuString,.Lfe14-BufferOptionMenuString
	.align	2, 0
	.type	 CloseAndSaveOptionMenu,function
	.thumb_func
CloseAndSaveOptionMenu:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L182
	ldr	r0, .L182+0x4
	str	r0, [r1]
	ldr	r0, .L182+0x8
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
	bl	FreeAllWindowBuffers
	ldr	r3, .L182+0xc
	ldr	r5, [r3]
	ldr	r4, .L182+0x10
	ldr	r0, [r4]
	mov	r2, #0x7
	ldrb	r1, [r0]
	and	r1, r1, r2
	ldrb	r2, [r5, #0x14]
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x14]
	ldr	r5, [r3]
	ldr	r0, [r4]
	mov	r6, #0x1
	ldrb	r1, [r0, #0x2]
	and	r1, r1, r6
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x15]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x15]
	ldr	r5, [r3]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x4]
	and	r1, r1, r6
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x15]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x15]
	ldr	r5, [r3]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x6]
	and	r1, r1, r6
	ldrb	r2, [r5, #0x15]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x15]
	ldr	r1, [r3]
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x8]
	mov	r6, #0x0
	strb	r0, [r1, #0x13]
	ldr	r5, [r3]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0xa]
	lsl	r1, r1, #0x3
	ldrb	r2, [r5, #0x14]
	mov	r0, #0x7
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x14]
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x15]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	bl	SetPokemonCryStereo
	ldr	r0, [r4]
	bl	Free
	str	r6, [r4]
	mov	r0, r8
	bl	DestroyTask
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	gFieldCallback
	.word	FieldCB_DefaultWarpExit
	.word	gMain
	.word	gSaveBlock2Ptr
	.word	sOptionMenuPtr
.Lfe15:
	.size	 CloseAndSaveOptionMenu,.Lfe15-CloseAndSaveOptionMenu
	.align	2, 0
	.type	 PrintOptionMenuHeader,function
	.thumb_func
PrintOptionMenuHeader:
	push	{lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r2, .L185
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r1, #0x2
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	gText_Option
.Lfe16:
	.size	 PrintOptionMenuHeader,.Lfe16-PrintOptionMenuHeader
	.align	2, 0
	.type	 DrawOptionMenuBg,function
	.thumb_func
DrawOptionMenuBg:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0xc
	mov	r6, #0x2
	ldr	r1, .L188
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r5, #0x3
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1
	mov	r3, #0x2
	bl	FillBgTilemapBufferRect
	mov	r1, #0xda
	lsl	r1, r1, #0x1
	mov	r0, #0x1b
	mov	r8, r0
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x2
	mov	r3, #0x2
	bl	FillBgTilemapBufferRect
	ldr	r1, .L188+0x4
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1c
	mov	r3, #0x2
	bl	FillBgTilemapBufferRect
	mov	r1, #0xdb
	lsl	r1, r1, #0x1
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect
	mov	r1, #0xdc
	lsl	r1, r1, #0x1
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1c
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect
	ldr	r1, .L188+0x8
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1
	mov	r3, #0x5
	bl	FillBgTilemapBufferRect
	mov	r1, #0xdd
	lsl	r1, r1, #0x1
	mov	r0, r8
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x2
	mov	r3, #0x5
	bl	FillBgTilemapBufferRect
	ldr	r1, .L188+0xc
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1c
	mov	r3, #0x5
	bl	FillBgTilemapBufferRect
	mov	r1, #0xd5
	lsl	r1, r1, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1
	mov	r3, #0x6
	bl	FillBgTilemapBufferRect
	ldr	r1, .L188+0x10
	mov	r0, #0x1a
	mov	r8, r0
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x2
	mov	r3, #0x6
	bl	FillBgTilemapBufferRect
	mov	r1, #0xd6
	lsl	r1, r1, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1c
	mov	r3, #0x6
	bl	FillBgTilemapBufferRect
	ldr	r1, .L188+0x14
	str	r4, [sp]
	mov	r5, #0x10
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1
	mov	r3, #0x7
	bl	FillBgTilemapBufferRect
	ldr	r1, .L188+0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1c
	mov	r3, #0x7
	bl	FillBgTilemapBufferRect
	mov	r1, #0xd8
	lsl	r1, r1, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	ldr	r1, .L188+0x1c
	mov	r0, r8
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x2
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	mov	r1, #0xd9
	lsl	r1, r1, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	FillBgTilemapBufferRect
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L189:
	.align	2, 0
.L188:
	.word	0x1b3
	.word	0x1b5
	.word	0x1b9
	.word	0x1bb
	.word	0x1ab
	.word	0x1ad
	.word	0x1af
	.word	0x1b1
.Lfe17:
	.size	 DrawOptionMenuBg,.Lfe17-DrawOptionMenuBg
	.align	2, 0
	.type	 LoadOptionMenuItemNames,function
	.thumb_func
LoadOptionMenuItemNames:
	push	{r4, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x1
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r4, #0x0
.L194:
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	mov	r1, r4
	mul	r1, r1, r0
	add	r1, r1, #0x2
	sub	r1, r1, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L196
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r2, [r0]
	str	r1, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bls	.L194	@cond_branch
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	sOptionMenuItemsNames
.Lfe18:
	.size	 LoadOptionMenuItemNames,.Lfe18-LoadOptionMenuItemNames
	.align	2, 0
	.type	 UpdateSettingSelectionDisplay,function
	.thumb_func
UpdateSettingSelectionDisplay:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x2
	mov	r1, #0x1
	bl	GetFontAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r1, r0, #0x1
	mov	r2, r4
	mul	r2, r2, r1
	add	r2, r2, #0x3a
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r1, r2, #0x8
	add	r2, r2, r0
	orr	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x44
	bl	SetGpuReg
	mov	r1, #0x87
	lsl	r1, r1, #0x5
	mov	r0, #0x40
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 UpdateSettingSelectionDisplay,.Lfe19-UpdateSettingSelectionDisplay
.text
	.align	2, 0 @ Don't pad with nop

