@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gGameVersion
	.section .rodata
	.type	 gGameVersion,object
	.size	 gGameVersion,1
gGameVersion:
	.byte	0x4
	.globl	gGameLanguage
	.type	 gGameLanguage,object
	.size	 gGameLanguage,1
gGameLanguage:
	.byte	0x2
	.globl	BuildDateTime
	.align	2, 0
	.type	 BuildDateTime,object
	.size	 BuildDateTime,17
BuildDateTime:
	.ascii	"2004 04 26 11:20\000"
	.globl	gIntrTableTemplate
	.align	2, 0
	.type	 gIntrTableTemplate,object
gIntrTableTemplate:
	.word	VCountIntr
	.word	SerialIntr
	.word	Timer3Intr
	.word	HBlankIntr
	.word	VBlankIntr
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.size	 gIntrTableTemplate,56
	.align	2, 0
	.type	 sTimerIntrFunc,object
	.size	 sTimerIntrFunc,4
sTimerIntrFunc:
	.word	gIntrTable+0x1c
	.globl	gDecompressionBuffer
	.section ewram_data,"aw"
	.type	 gDecompressionBuffer,object
	.size	 gDecompressionBuffer,16384
gDecompressionBuffer:
	.byte	0x0
	.space	16383
	.globl	gTrainerId
	.align	1, 0
	.type	 gTrainerId,object
	.size	 gTrainerId,2
gTrainerId:
	.short	0x0
.text
	.align	2, 0
	.globl	AgbMain
	.type	 AgbMain,function
	.thumb_func
AgbMain:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0xff
	bl	RegisterRamReset
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r2, .L10
	add	r0, r2, #0
	strh	r0, [r1]
	bl	InitGpuRegManager
	ldr	r1, .L10+0x4
	ldr	r2, .L10+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	bl	InitKeys
	bl	InitIntrHandlers
	bl	m4aSoundInit
	bl	EnableVCountIntrAtLine150
	bl	InitRFU
	bl	CheckForFlashMemory
	bl	InitMainCallbacks
	bl	InitMapMusic
	bl	ClearDma3Requests
	bl	ResetBgs
	ldr	r0, .L10+0xc
	mov	r1, #0xe0
	lsl	r1, r1, #0x9
	bl	InitHeap
	bl	SetDefaultFontsPointer
	ldr	r0, .L10+0x10
	mov	r4, #0x0
	strb	r4, [r0]
	ldr	r0, .L10+0x14
	strb	r4, [r0]
	bl	SetNotInSaveFailedScreen
	bl	AGBPrintInit
	ldr	r0, .L10+0x18
	strb	r4, [r0]
	ldr	r7, .L10+0x1c
	mov	r1, #0x0
	mov	r8, r1
	add	r6, r0, #0
.L3:
	bl	ReadKeys
	ldr	r0, .L10+0x10
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L6	@cond_branch
	ldrh	r1, [r7, #0x28]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L6	@cond_branch
	mov	r0, #0xe
	and	r0, r0, r1
	cmp	r0, #0xe
	bne	.L6	@cond_branch
	bl	rfu_REQ_stopMode
	bl	rfu_waitREQComplete
	bl	DoSoftReset
.L6:
	bl	Overworld_SendKeysToLinkIsRunning
	cmp	r0, #0x1
	bne	.L7	@cond_branch
	strb	r0, [r6]
	bl	UpdateLinkAndCallCallbacks
	mov	r0, #0x0
	strb	r0, [r6]
	b	.L8
.L11:
	.align	2, 0
.L10:
	.word	0x7fff
	.word	0x4000204
	.word	0x4014
	.word	gHeap
	.word	gSoftResetDisabled
	.word	gHelpSystemEnabled
	.word	gLinkTransferringData
	.word	gMain
.L7:
	ldr	r5, .L12
	mov	r0, #0x0
	strb	r0, [r5]
	bl	UpdateLinkAndCallCallbacks
	bl	Overworld_RecvKeysFromLinkIsRunning
	add	r4, r0, #0
	cmp	r4, #0x1
	bne	.L8	@cond_branch
	mov	r0, #0x0
	strh	r0, [r7, #0x2e]
	bl	ClearSpriteCopyRequests
	strb	r4, [r5]
	bl	UpdateLinkAndCallCallbacks
	mov	r2, r8
	strb	r2, [r5]
.L8:
	bl	PlayTimeCounter_Update
	bl	MapMusicMain
	bl	WaitForVBlank
	b	.L3
.L13:
	.align	2, 0
.L12:
	.word	gLinkTransferringData
.Lfe1:
	.size	 AgbMain,.Lfe1-AgbMain
	.align	2, 0
	.type	 UpdateLinkAndCallCallbacks,function
	.thumb_func
UpdateLinkAndCallCallbacks:
	push	{lr}
	bl	HandleLinkConnection
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L15	@cond_branch
	bl	CallCallbacks
.L15:
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 UpdateLinkAndCallCallbacks,.Lfe2-UpdateLinkAndCallCallbacks
	.align	2, 0
	.type	 InitMainCallbacks,function
	.thumb_func
InitMainCallbacks:
	push	{r4, lr}
	ldr	r0, .L17
	mov	r4, #0x0
	str	r4, [r0, #0x20]
	str	r4, [r0, #0x24]
	str	r4, [r0]
	ldr	r0, .L17+0x4
	bl	SetMainCallback2
	ldr	r0, .L17+0x8
	ldr	r1, .L17+0xc
	str	r1, [r0]
	ldr	r2, .L17+0x10
	ldr	r0, .L17+0x14
	str	r0, [r2]
	mov	r0, #0xf2
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	str	r4, [r1]
	ldr	r0, .L17+0x18
	strb	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	gMain
	.word	CB2_InitCopyrightScreenAfterBootup
	.word	gSaveBlock2Ptr
	.word	gSaveBlock2
	.word	gSaveBlock1Ptr
	.word	gSaveBlock1
	.word	gQuestLogPlaybackState
.Lfe3:
	.size	 InitMainCallbacks,.Lfe3-InitMainCallbacks
	.align	2, 0
	.type	 CallCallbacks,function
	.thumb_func
CallCallbacks:
	push	{r4, lr}
	bl	RunSaveFailedScreen
	cmp	r0, #0
	bne	.L20	@cond_branch
	bl	RunHelpSystemCallback
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldr	r4, .L23
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L21	@cond_branch
	bl	_call_via_r0
.L21:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L20	@cond_branch
	bl	_call_via_r0
.L20:
	pop	{r4}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	gMain
.Lfe4:
	.size	 CallCallbacks,.Lfe4-CallCallbacks
	.align	2, 0
	.globl	SetMainCallback2
	.type	 SetMainCallback2,function
	.thumb_func
SetMainCallback2:
	ldr	r1, .L26
	str	r0, [r1, #0x4]
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L27:
	.align	2, 0
.L26:
	.word	gMain
.Lfe5:
	.size	 SetMainCallback2,.Lfe5-SetMainCallback2
	.align	2, 0
	.globl	StartTimer1
	.type	 StartTimer1,function
	.thumb_func
StartTimer1:
	ldr	r1, .L29
	mov	r0, #0x80
	strh	r0, [r1]
	bx	lr
.L30:
	.align	2, 0
.L29:
	.word	0x4000106
.Lfe6:
	.size	 StartTimer1,.Lfe6-StartTimer1
	.align	2, 0
	.globl	SeedRngAndSetTrainerId
	.type	 SeedRngAndSetTrainerId,function
	.thumb_func
SeedRngAndSetTrainerId:
	push	{r4, lr}
	ldr	r0, .L32
	ldrh	r4, [r0]
	add	r0, r4, #0
	bl	SeedRng
	ldr	r1, .L32+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L32+0x8
	strh	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	0x4000104
	.word	0x4000106
	.word	gTrainerId
.Lfe7:
	.size	 SeedRngAndSetTrainerId,.Lfe7-SeedRngAndSetTrainerId
	.align	2, 0
	.globl	GetGeneratedTrainerIdLower
	.type	 GetGeneratedTrainerIdLower,function
	.thumb_func
GetGeneratedTrainerIdLower:
	ldr	r0, .L35
	ldrh	r0, [r0]
	bx	lr
.L36:
	.align	2, 0
.L35:
	.word	gTrainerId
.Lfe8:
	.size	 GetGeneratedTrainerIdLower,.Lfe8-GetGeneratedTrainerIdLower
	.align	2, 0
	.globl	EnableVCountIntrAtLine150
	.type	 EnableVCountIntrAtLine150,function
	.thumb_func
EnableVCountIntrAtLine150:
	push	{lr}
	mov	r0, #0x4
	bl	GetGpuReg
	mov	r1, #0xff
	and	r1, r1, r0
	mov	r2, #0x96
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	orr	r1, r1, r0
	mov	r0, #0x20
	orr	r1, r1, r0
	mov	r0, #0x4
	bl	SetGpuReg
	mov	r0, #0x4
	bl	EnableInterrupts
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 EnableVCountIntrAtLine150,.Lfe9-EnableVCountIntrAtLine150
	.align	2, 0
	.globl	InitKeys
	.type	 InitKeys,function
	.thumb_func
InitKeys:
	ldr	r1, .L39
	mov	r0, #0x5
	strh	r0, [r1]
	ldr	r1, .L39+0x4
	mov	r0, #0x28
	strh	r0, [r1]
	ldr	r1, .L39+0x8
	mov	r0, #0x0
	strh	r0, [r1, #0x2c]
	strh	r0, [r1, #0x2e]
	strh	r0, [r1, #0x30]
	strh	r0, [r1, #0x28]
	strh	r0, [r1, #0x2a]
	bx	lr
.L40:
	.align	2, 0
.L39:
	.word	gKeyRepeatContinueDelay
	.word	gKeyRepeatStartDelay
	.word	gMain
.Lfe10:
	.size	 InitKeys,.Lfe10-InitKeys
	.align	2, 0
	.type	 ReadKeys,function
	.thumb_func
ReadKeys:
	push	{lr}
	ldr	r0, .L50
	ldrh	r1, [r0]
	ldr	r2, .L50+0x4
	add	r0, r2, #0
	add	r3, r0, #0
	eor	r3, r3, r1
	ldr	r1, .L50+0x8
	ldrh	r2, [r1, #0x28]
	add	r0, r3, #0
	bic	r0, r0, r2
	strh	r0, [r1, #0x2a]
	strh	r0, [r1, #0x2e]
	strh	r0, [r1, #0x30]
	add	r2, r1, #0
	cmp	r3, #0
	beq	.L42	@cond_branch
	ldrh	r0, [r2, #0x2c]
	cmp	r0, r3
	bne	.L42	@cond_branch
	ldrh	r0, [r2, #0x32]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L44	@cond_branch
	strh	r3, [r2, #0x30]
	ldr	r0, .L50+0xc
	b	.L49
.L51:
	.align	2, 0
.L50:
	.word	0x4000130
	.word	0x3ff
	.word	gMain
	.word	gKeyRepeatContinueDelay
.L42:
	ldr	r0, .L52
.L49:
	ldrh	r0, [r0]
	strh	r0, [r2, #0x32]
.L44:
	strh	r3, [r2, #0x28]
	strh	r3, [r2, #0x2c]
	ldr	r0, .L52+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x2
	bne	.L45	@cond_branch
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L46	@cond_branch
	mov	r0, #0x1
	orr	r0, r0, r1
	strh	r0, [r2, #0x2e]
.L46:
	ldrh	r1, [r2, #0x2c]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L45	@cond_branch
	mov	r0, #0x1
	orr	r0, r0, r1
	strh	r0, [r2, #0x2c]
.L45:
	ldrh	r1, [r2, #0x2e]
	ldrh	r0, [r2, #0x36]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L48	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2, #0x34]
.L48:
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	gKeyRepeatStartDelay
	.word	gSaveBlock2Ptr
.Lfe11:
	.size	 ReadKeys,.Lfe11-ReadKeys
	.align	2, 0
	.globl	InitIntrHandlers
	.type	 InitIntrHandlers,function
	.thumb_func
InitIntrHandlers:
	push	{r4, r5, lr}
	ldr	r5, .L60
	ldr	r4, .L60+0x4
	ldr	r3, .L60+0x8
	ldr	r2, .L60+0xc
	mov	r1, #0xd
.L58:
	ldmia	r3!, {r0}
	stmia	r2!, {r0}
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L58	@cond_branch
	ldr	r0, .L60+0x10
	str	r5, [r0]
	str	r4, [r0, #0x4]
	ldr	r1, .L60+0x14
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	ldr	r0, .L60+0x18
	str	r4, [r0]
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetSerialCallback
	ldr	r1, .L60+0x1c
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x1
	bl	EnableInterrupts
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	intr_main
	.word	IntrMain_Buffer
	.word	gIntrTableTemplate
	.word	gIntrTable
	.word	0x40000d4
	.word	-0x7bfffe00
	.word	0x3007ffc
	.word	0x4000208
.Lfe12:
	.size	 InitIntrHandlers,.Lfe12-InitIntrHandlers
	.align	2, 0
	.globl	SetVBlankCallback
	.type	 SetVBlankCallback,function
	.thumb_func
SetVBlankCallback:
	ldr	r1, .L63
	str	r0, [r1, #0xc]
	bx	lr
.L64:
	.align	2, 0
.L63:
	.word	gMain
.Lfe13:
	.size	 SetVBlankCallback,.Lfe13-SetVBlankCallback
	.align	2, 0
	.globl	SetHBlankCallback
	.type	 SetHBlankCallback,function
	.thumb_func
SetHBlankCallback:
	ldr	r1, .L66
	str	r0, [r1, #0x10]
	bx	lr
.L67:
	.align	2, 0
.L66:
	.word	gMain
.Lfe14:
	.size	 SetHBlankCallback,.Lfe14-SetHBlankCallback
	.align	2, 0
	.globl	SetVCountCallback
	.type	 SetVCountCallback,function
	.thumb_func
SetVCountCallback:
	ldr	r1, .L69
	str	r0, [r1, #0x14]
	bx	lr
.L70:
	.align	2, 0
.L69:
	.word	gMain
.Lfe15:
	.size	 SetVCountCallback,.Lfe15-SetVCountCallback
	.align	2, 0
	.globl	SetSerialCallback
	.type	 SetSerialCallback,function
	.thumb_func
SetSerialCallback:
	ldr	r1, .L72
	str	r0, [r1, #0x18]
	bx	lr
.L73:
	.align	2, 0
.L72:
	.word	gMain
.Lfe16:
	.size	 SetSerialCallback,.Lfe16-SetSerialCallback
	.align	2, 0
	.type	 VBlankIntr,function
	.thumb_func
VBlankIntr:
	push	{r4, r5, lr}
	ldr	r0, .L80
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L75	@cond_branch
	bl	RFUVSync
	b	.L76
.L81:
	.align	2, 0
.L80:
	.word	gWirelessCommType
.L75:
	ldr	r0, .L82
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L76	@cond_branch
	bl	LinkVSync
.L76:
	ldr	r5, .L82+0x4
	ldr	r1, [r5, #0x20]
	cmp	r1, #0
	beq	.L78	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L78:
	ldr	r0, [r5, #0xc]
	cmp	r0, #0
	beq	.L79	@cond_branch
	bl	_call_via_r0
.L79:
	ldr	r0, [r5, #0x24]
	add	r0, r0, #0x1
	str	r0, [r5, #0x24]
	bl	CopyBufferedValuesToGpuRegs
	bl	ProcessDma3Requests
	ldr	r1, .L82+0x8
	ldr	r0, .L82+0xc
	ldrb	r0, [r0, #0x4]
	strb	r0, [r1]
	ldr	r1, .L82+0x10
	ldr	r4, .L82+0x14
	ldrh	r0, [r4]
	strb	r0, [r1]
	bl	m4aSoundMain
	ldr	r1, .L82+0x18
	ldrh	r0, [r4]
	strb	r0, [r1]
	bl	TryReceiveLinkBattleData
	bl	Random
	bl	UpdateWirelessStatusIndicatorSprite
	ldr	r2, .L82+0x1c
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r5, #0x1c]
	ldrh	r2, [r5, #0x1c]
	orr	r1, r1, r0
	strh	r1, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gLinkVSyncDisabled
	.word	gMain
	.word	gPcmDmaCounter
	.word	gSoundInfo
	.word	sVcountBeforeSound
	.word	0x4000006
	.word	sVcountAfterSound
	.word	0x3007ff8
.Lfe17:
	.size	 VBlankIntr,.Lfe17-VBlankIntr
	.align	2, 0
	.globl	InitFlashTimer
	.type	 InitFlashTimer,function
	.thumb_func
InitFlashTimer:
	push	{lr}
	ldr	r0, .L85
	ldr	r1, [r0]
	mov	r0, #0x2
	bl	SetFlashTimerIntr
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	sTimerIntrFunc
.Lfe18:
	.size	 InitFlashTimer,.Lfe18-InitFlashTimer
	.align	2, 0
	.type	 HBlankIntr,function
	.thumb_func
HBlankIntr:
	push	{r4, lr}
	ldr	r4, .L89
	ldr	r0, [r4, #0x10]
	cmp	r0, #0
	beq	.L88	@cond_branch
	bl	_call_via_r0
.L88:
	ldr	r2, .L89+0x4
	ldrh	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x1c]
	ldrh	r2, [r4, #0x1c]
	orr	r1, r1, r0
	strh	r1, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	gMain
	.word	0x3007ff8
.Lfe19:
	.size	 HBlankIntr,.Lfe19-HBlankIntr
	.align	2, 0
	.type	 VCountIntr,function
	.thumb_func
VCountIntr:
	push	{lr}
	ldr	r1, .L92
	ldr	r0, .L92+0x4
	ldrh	r0, [r0]
	strb	r0, [r1]
	bl	m4aSoundVSync
	ldr	r2, .L92+0x8
	ldrh	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L92+0xc
	ldrh	r2, [r0, #0x1c]
	ldrh	r3, [r0, #0x1c]
	orr	r1, r1, r2
	strh	r1, [r0, #0x1c]
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	sVcountAtIntr
	.word	0x4000006
	.word	0x3007ff8
	.word	gMain
.Lfe20:
	.size	 VCountIntr,.Lfe20-VCountIntr
	.align	2, 0
	.type	 SerialIntr,function
	.thumb_func
SerialIntr:
	push	{r4, lr}
	ldr	r4, .L96
	ldr	r0, [r4, #0x18]
	cmp	r0, #0
	beq	.L95	@cond_branch
	bl	_call_via_r0
.L95:
	ldr	r2, .L96+0x4
	ldrh	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x1c]
	ldrh	r2, [r4, #0x1c]
	orr	r1, r1, r0
	strh	r1, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	gMain
	.word	0x3007ff8
.Lfe21:
	.size	 SerialIntr,.Lfe21-SerialIntr
	.align	2, 0
	.globl	RestoreSerialTimer3IntrHandlers
	.type	 RestoreSerialTimer3IntrHandlers,function
	.thumb_func
RestoreSerialTimer3IntrHandlers:
	ldr	r0, .L99
	ldr	r1, .L99+0x4
	str	r1, [r0, #0x4]
	ldr	r1, .L99+0x8
	str	r1, [r0, #0x8]
	bx	lr
.L100:
	.align	2, 0
.L99:
	.word	gIntrTable
	.word	SerialIntr
	.word	Timer3Intr
.Lfe22:
	.size	 RestoreSerialTimer3IntrHandlers,.Lfe22-RestoreSerialTimer3IntrHandlers
	.align	2, 0
	.type	 IntrDummy,function
	.thumb_func
IntrDummy:
	bx	lr
.Lfe23:
	.size	 IntrDummy,.Lfe23-IntrDummy
	.align	2, 0
	.type	 WaitForVBlank,function
	.thumb_func
WaitForVBlank:
	push	{lr}
	ldr	r2, .L107
	ldrh	r1, [r2, #0x1c]
	ldr	r0, .L107+0x4
	and	r0, r0, r1
	ldrh	r1, [r2, #0x1c]
	strh	r0, [r2, #0x1c]
	ldrh	r1, [r2, #0x1c]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L104	@cond_branch
	mov	r3, #0x1
.L103:
	ldrh	r1, [r2, #0x1c]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L103	@cond_branch
.L104:
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gMain
	.word	0xfffe
.Lfe24:
	.size	 WaitForVBlank,.Lfe24-WaitForVBlank
	.align	2, 0
	.globl	SetVBlankCounter1Ptr
	.type	 SetVBlankCounter1Ptr,function
	.thumb_func
SetVBlankCounter1Ptr:
	ldr	r1, .L110
	str	r0, [r1, #0x20]
	bx	lr
.L111:
	.align	2, 0
.L110:
	.word	gMain
.Lfe25:
	.size	 SetVBlankCounter1Ptr,.Lfe25-SetVBlankCounter1Ptr
	.align	2, 0
	.globl	DisableVBlankCounter1
	.type	 DisableVBlankCounter1,function
	.thumb_func
DisableVBlankCounter1:
	ldr	r1, .L113
	mov	r0, #0x0
	str	r0, [r1, #0x20]
	bx	lr
.L114:
	.align	2, 0
.L113:
	.word	gMain
.Lfe26:
	.size	 DisableVBlankCounter1,.Lfe26-DisableVBlankCounter1
	.align	2, 0
	.globl	DoSoftReset
	.type	 DoSoftReset,function
	.thumb_func
DoSoftReset:
	push	{r4, lr}
	ldr	r1, .L116
	mov	r0, #0x0
	strh	r0, [r1]
	bl	m4aSoundVSyncOff
	bl	ScanlineEffect_Stop
	ldr	r1, .L116+0x4
	ldrh	r2, [r1, #0xa]
	ldr	r3, .L116+0x8
	add	r0, r3, #0
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r4, [r1, #0xa]
	ldr	r2, .L116+0xc
	add	r0, r2, #0
	and	r0, r0, r4
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	add	r1, r1, #0xc
	ldrh	r4, [r1, #0xa]
	add	r0, r3, #0
	and	r0, r0, r4
	strh	r0, [r1, #0xa]
	ldrh	r4, [r1, #0xa]
	add	r0, r2, #0
	and	r0, r0, r4
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	ldr	r0, .L116+0x10
	ldrh	r1, [r0, #0xa]
	and	r3, r3, r1
	strh	r3, [r0, #0xa]
	ldrh	r1, [r0, #0xa]
	and	r2, r2, r1
	strh	r2, [r0, #0xa]
	ldrh	r0, [r0, #0xa]
	mov	r0, #0xdf
	bl	SoftReset
	pop	{r4}
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	0x4000208
	.word	0x40000bc
	.word	0xc5ff
	.word	0x7fff
	.word	0x40000d4
.Lfe27:
	.size	 DoSoftReset,.Lfe27-DoSoftReset
	.align	2, 0
	.globl	ClearPokemonCrySongs
	.type	 ClearPokemonCrySongs,function
	.thumb_func
ClearPokemonCrySongs:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L119
	ldr	r2, .L119+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	gPokemonCrySongs
	.word	0x1000034
.Lfe28:
	.size	 ClearPokemonCrySongs,.Lfe28-ClearPokemonCrySongs
	.comm	gIntrTable, 56	@ 56
	.comm	gMain, 1084	@ 1084
	.comm	gSoftResetDisabled, 4	@ 1
	.comm	gLinkVSyncDisabled, 4	@ 1
	.comm	gLinkTransferringData, 4	@ 1
	.comm	gKeyRepeatStartDelay, 4	@ 2
	.comm	gKeyRepeatContinueDelay, 4	@ 2
	.comm	IntrMain_Buffer, 2048	@ 2048
	.comm	gPcmDmaCounter, 4	@ 1
	.comm	sVcountAfterSound, 4	@ 1
	.comm	sVcountAtIntr, 4	@ 1
	.comm	sVcountBeforeSound, 4	@ 1
.text
	.align	2, 0 @ Don't pad with nop

