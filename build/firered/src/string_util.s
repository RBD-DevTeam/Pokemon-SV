@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gStringVar1
	.section ewram_data,"aw"
	.type	 gStringVar1,object
	.size	 gStringVar1,32
gStringVar1:
	.space	32
	.globl	gStringVar2
	.type	 gStringVar2,object
	.size	 gStringVar2,20
gStringVar2:
	.space	20
	.globl	gStringVar3
	.type	 gStringVar3,object
	.size	 gStringVar3,20
gStringVar3:
	.space	20
	.globl	gStringVar4
	.type	 gStringVar4,object
	.size	 gStringVar4,1000
gStringVar4:
	.space	1000
	.globl	gUnknownStringVar
	.type	 gUnknownStringVar,object
	.size	 gUnknownStringVar,16
gUnknownStringVar:
	.byte	0x0
	.space	15
	.section .rodata
	.type	 sDigits,object
sDigits:
	.byte	0xa1
	.byte	0xa2
	.byte	0xa3
	.byte	0xa4
	.byte	0xa5
	.byte	0xa6
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.size	 sDigits,16
	.align	2, 0
	.type	 sPowersOfTen,object
sPowersOfTen:
	.word	0x1
	.word	0xa
	.word	0x64
	.word	0x3e8
	.word	0x2710
	.word	0x186a0
	.word	0xf4240
	.word	0x989680
	.word	0x5f5e100
	.word	0x3b9aca00
	.size	 sPowersOfTen,40
.text
	.align	2, 0
	.globl	StringCopy_Nickname
	.type	 StringCopy_Nickname,function
	.thumb_func
StringCopy_Nickname:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0xa
	mov	r3, #0x0
.L6:
	add	r2, r4, r3
	add	r0, r1, r3
	ldrb	r0, [r0]
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L5	@cond_branch
	add	r0, r2, #0
	b	.L9
.L5:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r5
	bcc	.L6	@cond_branch
	add	r0, r4, r3
	mov	r1, #0xff
	strb	r1, [r0]
.L9:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 StringCopy_Nickname,.Lfe1-StringCopy_Nickname
	.align	2, 0
	.globl	StringGet_Nickname
	.type	 StringGet_Nickname,function
	.thumb_func
StringGet_Nickname:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r4, #0xa
	mov	r2, #0x0
.L14:
	add	r1, r3, r2
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L13	@cond_branch
	add	r0, r1, #0
	b	.L17
.L13:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L14	@cond_branch
	add	r0, r3, r2
	mov	r1, #0xff
	strb	r1, [r0]
.L17:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 StringGet_Nickname,.Lfe2-StringGet_Nickname
	.align	2, 0
	.globl	StringCopy_PlayerName
	.type	 StringCopy_PlayerName,function
	.thumb_func
StringCopy_PlayerName:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x7
	mov	r3, #0x0
.L22:
	add	r2, r4, r3
	add	r0, r1, r3
	ldrb	r0, [r0]
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L21	@cond_branch
	add	r0, r2, #0
	b	.L25
.L21:
	add	r3, r3, #0x1
	cmp	r3, r5
	blt	.L22	@cond_branch
	add	r0, r4, r3
	mov	r1, #0xff
	strb	r1, [r0]
.L25:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 StringCopy_PlayerName,.Lfe3-StringCopy_PlayerName
	.align	2, 0
	.globl	StringCopy
	.type	 StringCopy,function
	.thumb_func
StringCopy:
	push	{lr}
	add	r3, r0, #0
	b	.L31
.L29:
	strb	r2, [r3]
	add	r3, r3, #0x1
	add	r1, r1, #0x1
.L31:
	ldrb	r2, [r1]
	add	r0, r2, #0
	cmp	r0, #0xff
	bne	.L29	@cond_branch
	mov	r0, #0xff
	strb	r0, [r3]
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 StringCopy,.Lfe4-StringCopy
	.align	2, 0
	.globl	StringAppend
	.type	 StringAppend,function
	.thumb_func
StringAppend:
	push	{lr}
	add	r2, r0, #0
	b	.L37
.L35:
	add	r2, r2, #0x1
.L37:
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L35	@cond_branch
	add	r0, r2, #0
	bl	StringCopy
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 StringAppend,.Lfe5-StringAppend
	.align	2, 0
	.globl	StringCopyN
	.type	 StringCopyN,function
	.thumb_func
StringCopyN:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r3, #0x0
	add	r0, r5, #0
	cmp	r3, r0
	bcs	.L40	@cond_branch
	add	r2, r0, #0
.L42:
	add	r1, r4, r3
	add	r0, r6, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r2
	bcc	.L42	@cond_branch
.L40:
	add	r0, r4, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 StringCopyN,.Lfe6-StringCopyN
	.align	2, 0
	.globl	StringAppendN
	.type	 StringAppendN,function
	.thumb_func
StringAppendN:
	push	{lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	b	.L49
.L47:
	add	r3, r3, #0x1
.L49:
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L47	@cond_branch
	add	r0, r3, #0
	bl	StringCopyN
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 StringAppendN,.Lfe7-StringAppendN
	.align	2, 0
	.globl	StringLength
	.type	 StringLength,function
	.thumb_func
StringLength:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x0
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L52	@cond_branch
.L53:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L53	@cond_branch
.L52:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 StringLength,.Lfe8-StringLength
	.align	2, 0
	.globl	StringCompare
	.type	 StringCompare,function
	.thumb_func
StringCompare:
	push	{lr}
	add	r2, r0, #0
	b	.L62
.L58:
	cmp	r0, #0xff
	bne	.L59	@cond_branch
	mov	r0, #0x0
	b	.L61
.L59:
	add	r2, r2, #0x1
	add	r1, r1, #0x1
.L62:
	ldrb	r0, [r2]
	ldrb	r3, [r1]
	cmp	r0, r3
	beq	.L58	@cond_branch
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	sub	r0, r0, r1
.L61:
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 StringCompare,.Lfe9-StringCompare
	.align	2, 0
	.globl	StringCompareN
	.type	 StringCompareN,function
	.thumb_func
StringCompareN:
	push	{r4, lr}
	add	r3, r0, #0
	b	.L64
.L66:
	cmp	r0, #0xff
	beq	.L71	@cond_branch
	add	r3, r3, #0x1
	add	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L64	@cond_branch
.L71:
	mov	r0, #0x0
	b	.L70
.L64:
	ldrb	r0, [r3]
	ldrb	r4, [r1]
	cmp	r0, r4
	beq	.L66	@cond_branch
	ldrb	r0, [r3]
	ldrb	r1, [r1]
	sub	r0, r0, r1
.L70:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 StringCompareN,.Lfe10-StringCompareN
	.align	2, 0
	.globl	ConvertIntToDecimalStringN
	.type	 ConvertIntToDecimalStringN,function
	.thumb_func
ConvertIntToDecimalStringN:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r3, r3, #0x18
	ldr	r0, .L91
	lsr	r3, r3, #0x16
	sub	r3, r3, #0x4
	add	r3, r3, r0
	ldr	r0, [r3]
	mov	r7, #0x0
	cmp	r2, #0x1
	bne	.L73	@cond_branch
	mov	r7, #0x2
.L73:
	cmp	r2, #0x2
	bne	.L74	@cond_branch
	mov	r7, #0x1
.L74:
	add	r5, r0, #0
	cmp	r5, #0
	ble	.L76	@cond_branch
	ldr	r0, .L91+0x4
	mov	r8, r0
.L78:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r0, r5
	mul	r0, r0, r2
	sub	r1, r6, r0
	cmp	r7, #0x1
	bne	.L79	@cond_branch
	add	r3, r4, #0
	add	r4, r4, #0x1
	cmp	r2, #0x9
	bls	.L90	@cond_branch
	b	.L85
.L92:
	.align	2, 0
.L91:
	.word	sPowersOfTen
	.word	sDigits
.L79:
	cmp	r2, #0
	bne	.L84	@cond_branch
	cmp	r5, #0x1
	bne	.L83	@cond_branch
.L84:
	mov	r7, #0x1
	add	r3, r4, #0
	add	r4, r4, #0x1
	cmp	r2, #0x9
	bhi	.L85	@cond_branch
.L90:
	mov	r6, r8
	add	r0, r2, r6
	ldrb	r0, [r0]
	b	.L86
.L85:
	mov	r0, #0xac
.L86:
	strb	r0, [r3]
	b	.L82
.L83:
	cmp	r7, #0x2
	bne	.L82	@cond_branch
	strb	r2, [r4]
	add	r4, r4, #0x1
.L82:
	add	r6, r1, #0
	add	r0, r5, #0
	mov	r1, #0xa
	bl	__divsi3
	add	r5, r0, #0
	cmp	r5, #0
	bgt	.L78	@cond_branch
.L76:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 ConvertIntToDecimalStringN,.Lfe11-ConvertIntToDecimalStringN
	.align	2, 0
	.globl	ConvertIntToHexStringN
	.type	 ConvertIntToHexStringN,function
	.thumb_func
ConvertIntToHexStringN:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	add	r7, r1, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0x1
	mov	r0, #0x1
	cmp	r1, r3
	bcs	.L95	@cond_branch
.L97:
	lsl	r1, r1, #0x4
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r3
	bcc	.L97	@cond_branch
.L95:
	mov	r3, #0x0
	cmp	r2, #0x1
	bne	.L99	@cond_branch
	mov	r3, #0x2
.L99:
	cmp	r2, #0x2
	bne	.L100	@cond_branch
	mov	r3, #0x1
.L100:
	add	r5, r1, #0
	cmp	r5, #0
	ble	.L102	@cond_branch
	ldr	r0, .L118
	mov	r8, r0
.L104:
	add	r0, r7, #0
	add	r1, r5, #0
	str	r3, [sp]
	bl	__divsi3
	add	r4, r0, #0
	add	r0, r7, #0
	add	r1, r5, #0
	bl	__modsi3
	add	r1, r0, #0
	ldr	r3, [sp]
	cmp	r3, #0x1
	bne	.L105	@cond_branch
	add	r2, r6, #0
	add	r6, r6, #0x1
	cmp	r4, #0xf
	bls	.L117	@cond_branch
	b	.L111
.L119:
	.align	2, 0
.L118:
	.word	sDigits
.L105:
	cmp	r4, #0
	bne	.L110	@cond_branch
	cmp	r5, #0x1
	bne	.L109	@cond_branch
.L110:
	mov	r3, #0x1
	add	r2, r6, #0
	add	r6, r6, #0x1
	cmp	r4, #0xf
	bhi	.L111	@cond_branch
.L117:
	mov	r7, r8
	add	r0, r4, r7
	ldrb	r0, [r0]
	b	.L112
.L111:
	mov	r0, #0xac
.L112:
	strb	r0, [r2]
	b	.L108
.L109:
	cmp	r3, #0x2
	bne	.L108	@cond_branch
	strb	r4, [r6]
	add	r6, r6, #0x1
.L108:
	add	r7, r1, #0
	add	r0, r5, #0
	cmp	r5, #0
	bge	.L115	@cond_branch
	add	r0, r0, #0xf
.L115:
	asr	r5, r0, #0x4
	cmp	r5, #0
	bgt	.L104	@cond_branch
.L102:
	mov	r0, #0xff
	strb	r0, [r6]
	add	r0, r6, #0
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 ConvertIntToHexStringN,.Lfe12-ConvertIntToHexStringN
	.align	2, 0
	.globl	StringExpandPlaceholders
	.type	 StringExpandPlaceholders,function
	.thumb_func
StringExpandPlaceholders:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
.L121:
	ldrb	r2, [r5]
	add	r5, r5, #0x1
	add	r0, r2, #0
	sub	r0, r0, #0xfa
	cmp	r0, #0x5
	bhi	.L143	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L146
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L147:
	.align	2, 0
.L146:
	.word	.L144
	.align	2, 0
	.align	2, 0
.L144:
	.word	.L143
	.word	.L143
	.word	.L126
	.word	.L125
	.word	.L143
	.word	.L145
.L125:
	ldrb	r0, [r5]
	add	r5, r5, #0x1
	bl	GetExpandedPlaceholder
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r4, r0, #0
	b	.L121
.L126:
	strb	r2, [r4]
	add	r4, r4, #0x1
	ldrb	r2, [r5]
	add	r5, r5, #0x1
	strb	r2, [r4]
	add	r4, r4, #0x1
	sub	r0, r2, #0x4
	cmp	r0, #0x14
	bhi	.L137	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L148
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L149:
	.align	2, 0
.L148:
	.word	.L138
	.align	2, 0
	.align	2, 0
.L138:
	.word	.L135
	.word	.L137
	.word	.L137
	.word	.L121
	.word	.L137
	.word	.L121
	.word	.L137
	.word	.L136
	.word	.L137
	.word	.L137
	.word	.L137
	.word	.L121
	.word	.L137
	.word	.L137
	.word	.L137
	.word	.L137
	.word	.L137
	.word	.L121
	.word	.L121
	.word	.L121
	.word	.L121
.L135:
	ldrb	r0, [r5]
	strb	r0, [r4]
	add	r5, r5, #0x1
	add	r4, r4, #0x1
.L136:
	ldrb	r0, [r5]
	strb	r0, [r4]
	add	r5, r5, #0x1
	add	r4, r4, #0x1
.L137:
	ldrb	r0, [r5]
	strb	r0, [r4]
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	b	.L121
.L143:
	strb	r2, [r4]
	add	r4, r4, #0x1
	b	.L121
.L145:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 StringExpandPlaceholders,.Lfe13-StringExpandPlaceholders
	.section .rodata
.LC5:
	.byte	0xfc
	.byte	0x6
	.byte	0x6
	.byte	0xff
.LC7:
	.byte	0xfe
	.byte	0xfc
	.byte	0xe
	.byte	0x2
	.byte	0xff
.text
	.align	2, 0
	.globl	StringBraille
	.type	 StringBraille,function
	.thumb_func
StringBraille:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	add	r6, r1, #0
	ldr	r1, .L161
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	add	r4, sp, #0x4
	ldr	r1, .L161+0x4
	add	r0, r4, #0
	mov	r2, #0x5
	bl	memcpy
	add	r0, r5, #0
	mov	r1, sp
.L160:
	bl	StringCopy
	add	r5, r0, #0
.L151:
	ldrb	r0, [r6]
	add	r6, r6, #0x1
	cmp	r0, #0xfe
	beq	.L156	@cond_branch
	cmp	r0, #0xff
	bne	.L157	@cond_branch
	b	.L159
.L162:
	.align	2, 0
.L161:
	.word	.LC5
	.word	.LC7
.L156:
	add	r0, r5, #0
	add	r1, r4, #0
	b	.L160
.L157:
	strb	r0, [r5]
	add	r5, r5, #0x1
	add	r0, r0, #0x40
	strb	r0, [r5]
	add	r5, r5, #0x1
	b	.L151
.L159:
	strb	r0, [r5]
	add	r0, r5, #0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 StringBraille,.Lfe14-StringBraille
	.align	2, 0
	.type	 ExpandPlaceholder_UnknownStringVar,function
	.thumb_func
ExpandPlaceholder_UnknownStringVar:
	ldr	r0, .L164
	bx	lr
.L165:
	.align	2, 0
.L164:
	.word	gUnknownStringVar
.Lfe15:
	.size	 ExpandPlaceholder_UnknownStringVar,.Lfe15-ExpandPlaceholder_UnknownStringVar
	.align	2, 0
	.type	 ExpandPlaceholder_PlayerName,function
	.thumb_func
ExpandPlaceholder_PlayerName:
	ldr	r0, .L167
	ldr	r0, [r0]
	bx	lr
.L168:
	.align	2, 0
.L167:
	.word	gSaveBlock2Ptr
.Lfe16:
	.size	 ExpandPlaceholder_PlayerName,.Lfe16-ExpandPlaceholder_PlayerName
	.align	2, 0
	.type	 ExpandPlaceholder_StringVar1,function
	.thumb_func
ExpandPlaceholder_StringVar1:
	ldr	r0, .L170
	bx	lr
.L171:
	.align	2, 0
.L170:
	.word	gStringVar1
.Lfe17:
	.size	 ExpandPlaceholder_StringVar1,.Lfe17-ExpandPlaceholder_StringVar1
	.align	2, 0
	.type	 ExpandPlaceholder_StringVar2,function
	.thumb_func
ExpandPlaceholder_StringVar2:
	ldr	r0, .L173
	bx	lr
.L174:
	.align	2, 0
.L173:
	.word	gStringVar2
.Lfe18:
	.size	 ExpandPlaceholder_StringVar2,.Lfe18-ExpandPlaceholder_StringVar2
	.align	2, 0
	.type	 ExpandPlaceholder_StringVar3,function
	.thumb_func
ExpandPlaceholder_StringVar3:
	ldr	r0, .L176
	bx	lr
.L177:
	.align	2, 0
.L176:
	.word	gStringVar3
.Lfe19:
	.size	 ExpandPlaceholder_StringVar3,.Lfe19-ExpandPlaceholder_StringVar3
	.align	2, 0
	.type	 ExpandPlaceholder_KunChan,function
	.thumb_func
ExpandPlaceholder_KunChan:
	push	{lr}
	ldr	r0, .L182
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L179	@cond_branch
	ldr	r0, .L182+0x4
	b	.L181
.L183:
	.align	2, 0
.L182:
	.word	gSaveBlock2Ptr
	.word	gExpandedPlaceholder_Chan
.L179:
	ldr	r0, .L184
.L181:
	pop	{r1}
	bx	r1
.L185:
	.align	2, 0
.L184:
	.word	gExpandedPlaceholder_Kun
.Lfe20:
	.size	 ExpandPlaceholder_KunChan,.Lfe20-ExpandPlaceholder_KunChan
	.align	2, 0
	.type	 ExpandPlaceholder_RivalName,function
	.thumb_func
ExpandPlaceholder_RivalName:
	push	{lr}
	ldr	r0, .L192
	ldr	r0, [r0]
	ldr	r2, .L192+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L187	@cond_branch
	ldr	r0, .L192+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L188	@cond_branch
	ldr	r0, .L192+0xc
	b	.L191
.L193:
	.align	2, 0
.L192:
	.word	gSaveBlock1Ptr
	.word	0x3a4c
	.word	gSaveBlock2Ptr
	.word	gExpandedPlaceholder_Green
.L188:
	ldr	r0, .L194
	b	.L191
.L195:
	.align	2, 0
.L194:
	.word	gExpandedPlaceholder_Red
.L187:
	add	r0, r1, #0
.L191:
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 ExpandPlaceholder_RivalName,.Lfe21-ExpandPlaceholder_RivalName
	.align	2, 0
	.type	 ExpandPlaceholder_Version,function
	.thumb_func
ExpandPlaceholder_Version:
	ldr	r0, .L197
	bx	lr
.L198:
	.align	2, 0
.L197:
	.word	gExpandedPlaceholder_Ruby
.Lfe22:
	.size	 ExpandPlaceholder_Version,.Lfe22-ExpandPlaceholder_Version
	.align	2, 0
	.type	 ExpandPlaceholder_Magma,function
	.thumb_func
ExpandPlaceholder_Magma:
	ldr	r0, .L200
	bx	lr
.L201:
	.align	2, 0
.L200:
	.word	gExpandedPlaceholder_Magma
.Lfe23:
	.size	 ExpandPlaceholder_Magma,.Lfe23-ExpandPlaceholder_Magma
	.align	2, 0
	.type	 ExpandPlaceholder_Aqua,function
	.thumb_func
ExpandPlaceholder_Aqua:
	ldr	r0, .L203
	bx	lr
.L204:
	.align	2, 0
.L203:
	.word	gExpandedPlaceholder_Aqua
.Lfe24:
	.size	 ExpandPlaceholder_Aqua,.Lfe24-ExpandPlaceholder_Aqua
	.align	2, 0
	.type	 ExpandPlaceholder_Maxie,function
	.thumb_func
ExpandPlaceholder_Maxie:
	ldr	r0, .L206
	bx	lr
.L207:
	.align	2, 0
.L206:
	.word	gExpandedPlaceholder_Maxie
.Lfe25:
	.size	 ExpandPlaceholder_Maxie,.Lfe25-ExpandPlaceholder_Maxie
	.align	2, 0
	.type	 ExpandPlaceholder_Archie,function
	.thumb_func
ExpandPlaceholder_Archie:
	ldr	r0, .L209
	bx	lr
.L210:
	.align	2, 0
.L209:
	.word	gExpandedPlaceholder_Archie
.Lfe26:
	.size	 ExpandPlaceholder_Archie,.Lfe26-ExpandPlaceholder_Archie
	.align	2, 0
	.type	 ExpandPlaceholder_Groudon,function
	.thumb_func
ExpandPlaceholder_Groudon:
	ldr	r0, .L212
	bx	lr
.L213:
	.align	2, 0
.L212:
	.word	gExpandedPlaceholder_Groudon
.Lfe27:
	.size	 ExpandPlaceholder_Groudon,.Lfe27-ExpandPlaceholder_Groudon
	.align	2, 0
	.type	 ExpandPlaceholder_Kyogre,function
	.thumb_func
ExpandPlaceholder_Kyogre:
	ldr	r0, .L215
	bx	lr
.L216:
	.align	2, 0
.L215:
	.word	gExpandedPlaceholder_Kyogre
.Lfe28:
	.size	 ExpandPlaceholder_Kyogre,.Lfe28-ExpandPlaceholder_Kyogre
	.section .rodata
	.align	2, 0
	.type	 funcs.87,object
funcs.87:
	.word	ExpandPlaceholder_UnknownStringVar
	.word	ExpandPlaceholder_PlayerName
	.word	ExpandPlaceholder_StringVar1
	.word	ExpandPlaceholder_StringVar2
	.word	ExpandPlaceholder_StringVar3
	.word	ExpandPlaceholder_KunChan
	.word	ExpandPlaceholder_RivalName
	.word	ExpandPlaceholder_Version
	.word	ExpandPlaceholder_Magma
	.word	ExpandPlaceholder_Aqua
	.word	ExpandPlaceholder_Maxie
	.word	ExpandPlaceholder_Archie
	.word	ExpandPlaceholder_Groudon
	.word	ExpandPlaceholder_Kyogre
.text
	.align	2, 0
	.globl	GetExpandedPlaceholder
	.type	 GetExpandedPlaceholder,function
	.thumb_func
GetExpandedPlaceholder:
	push	{lr}
	cmp	r0, #0xd
	bhi	.L218	@cond_branch
	ldr	r1, .L221
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	b	.L220
.L222:
	.align	2, 0
.L221:
	.word	funcs.87
.L218:
	ldr	r0, .L223
.L220:
	pop	{r1}
	bx	r1
.L224:
	.align	2, 0
.L223:
	.word	gExpandedPlaceholder_Empty
.Lfe29:
	.size	 GetExpandedPlaceholder,.Lfe29-GetExpandedPlaceholder
	.align	2, 0
	.globl	StringFill
	.type	 StringFill,function
	.thumb_func
StringFill:
	push	{lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x0
	cmp	r0, r2
	bcs	.L227	@cond_branch
.L229:
	strb	r1, [r3]
	add	r3, r3, #0x1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r2
	bcc	.L229	@cond_branch
.L227:
	mov	r0, #0xff
	strb	r0, [r3]
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 StringFill,.Lfe30-StringFill
	.align	2, 0
	.globl	StringCopyPadded
	.type	 StringCopyPadded,function
	.thumb_func
StringCopyPadded:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	b	.L232
.L234:
	strb	r1, [r4]
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r3, #0
	beq	.L232	@cond_branch
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
.L232:
	ldrb	r1, [r5]
	add	r0, r1, #0
	cmp	r0, #0xff
	bne	.L234	@cond_branch
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r0, .L241
	cmp	r3, r0
	beq	.L238	@cond_branch
	add	r1, r0, #0
.L239:
	strb	r2, [r4]
	add	r4, r4, #0x1
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bne	.L239	@cond_branch
.L238:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L242:
	.align	2, 0
.L241:
	.word	0xffff
.Lfe31:
	.size	 StringCopyPadded,.Lfe31-StringCopyPadded
	.align	2, 0
	.globl	StringFillWithTerminator
	.type	 StringFillWithTerminator,function
	.thumb_func
StringFillWithTerminator:
	push	{lr}
	lsl	r2, r1, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0xff
	bl	StringFill
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 StringFillWithTerminator,.Lfe32-StringFillWithTerminator
	.align	2, 0
	.globl	StringCopyN_Multibyte
	.type	 StringCopyN_Multibyte,function
	.thumb_func
StringCopyN_Multibyte:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	sub	r2, r2, #0x1
	mov	r5, #0x1
	neg	r5, r5
	b	.L253
.L249:
	strb	r0, [r4]
	add	r3, r3, #0x1
	add	r4, r4, #0x1
	sub	r0, r3, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0xf9
	bne	.L247	@cond_branch
	ldrb	r0, [r3]
	strb	r0, [r4]
	add	r3, r3, #0x1
	add	r4, r4, #0x1
.L247:
	sub	r2, r2, #0x1
.L253:
	cmp	r2, r5
	beq	.L246	@cond_branch
	ldrb	r0, [r3]
	add	r1, r0, #0
	cmp	r1, #0xff
	bne	.L249	@cond_branch
.L246:
	mov	r0, #0xff
	strb	r0, [r4]
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 StringCopyN_Multibyte,.Lfe33-StringCopyN_Multibyte
	.align	2, 0
	.globl	StringLength_Multibyte
	.type	 StringLength_Multibyte,function
	.thumb_func
StringLength_Multibyte:
	push	{lr}
	add	r2, r0, #0
	mov	r3, #0x0
	b	.L260
.L257:
	cmp	r1, #0xf9
	bne	.L258	@cond_branch
	add	r2, r2, #0x1
.L258:
	add	r2, r2, #0x1
	add	r3, r3, #0x1
.L260:
	ldrb	r1, [r2]
	add	r0, r1, #0
	cmp	r0, #0xff
	bne	.L257	@cond_branch
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 StringLength_Multibyte,.Lfe34-StringLength_Multibyte
	.align	2, 0
	.globl	WriteColorChangeControlCode
	.type	 WriteColorChangeControlCode,function
	.thumb_func
WriteColorChangeControlCode:
	push	{lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0xfc
	strb	r0, [r3]
	add	r3, r3, #0x1
	cmp	r1, #0x1
	beq	.L264	@cond_branch
	cmp	r1, #0x1
	bcc	.L263	@cond_branch
	cmp	r1, #0x2
	beq	.L265	@cond_branch
	b	.L262
.L263:
	mov	r0, #0x1
	strb	r0, [r3]
	b	.L268
.L264:
	mov	r0, #0x3
	strb	r0, [r3]
	b	.L268
.L265:
	strb	r1, [r3]
.L268:
	add	r3, r3, #0x1
.L262:
	strb	r2, [r3]
	add	r3, r3, #0x1
	mov	r0, #0xff
	strb	r0, [r3]
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 WriteColorChangeControlCode,.Lfe35-WriteColorChangeControlCode
	.section .rodata
	.type	 lengths.109,object
lengths.109:
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x4
	.byte	0x2
	.byte	0x2
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
.text
	.align	2, 0
	.globl	GetExtCtrlCodeLength
	.type	 GetExtCtrlCodeLength,function
	.thumb_func
GetExtCtrlCodeLength:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x0
	cmp	r1, #0x18
	bhi	.L270	@cond_branch
	ldr	r0, .L271
	add	r0, r1, r0
	ldrb	r0, [r0]
.L270:
	pop	{r1}
	bx	r1
.L272:
	.align	2, 0
.L271:
	.word	lengths.109
.Lfe36:
	.size	 GetExtCtrlCodeLength,.Lfe36-GetExtCtrlCodeLength
	.align	2, 0
	.type	 SkipExtCtrlCode,function
	.thumb_func
SkipExtCtrlCode:
	push	{r4, lr}
	add	r4, r0, #0
	b	.L278
.L276:
	add	r4, r4, #0x1
	ldrb	r0, [r4]
	bl	GetExtCtrlCodeLength
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r4, r0
.L278:
	ldrb	r0, [r4]
	cmp	r0, #0xfc
	beq	.L276	@cond_branch
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 SkipExtCtrlCode,.Lfe37-SkipExtCtrlCode
	.align	2, 0
	.globl	StringCompareWithoutExtCtrlCodes
	.type	 StringCompareWithoutExtCtrlCodes,function
	.thumb_func
StringCompareWithoutExtCtrlCodes:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r6, #0x0
	b	.L282
.L283:
	cmp	r1, r0
	bcs	.L284	@cond_branch
	mov	r6, #0x1
	neg	r6, r6
	cmp	r0, #0xff
	bne	.L284	@cond_branch
	mov	r6, #0x1
.L284:
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L288	@cond_branch
	add	r4, r4, #0x1
	add	r5, r5, #0x1
.L282:
	add	r0, r4, #0
	bl	SkipExtCtrlCode
	add	r4, r0, #0
	add	r0, r5, #0
	bl	SkipExtCtrlCode
	add	r5, r0, #0
	ldrb	r1, [r4]
	ldrb	r0, [r5]
	cmp	r1, r0
	bls	.L283	@cond_branch
	mov	r6, #0x1
	cmp	r1, #0xff
	bne	.L288	@cond_branch
	sub	r6, r6, #0x2
.L288:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 StringCompareWithoutExtCtrlCodes,.Lfe38-StringCompareWithoutExtCtrlCodes
	.align	2, 0
	.globl	ConvertInternationalString
	.type	 ConvertInternationalString,function
	.thumb_func
ConvertInternationalString:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	bne	.L291	@cond_branch
	bl	StripExtCtrlCodes
	add	r0, r4, #0
	bl	StringLength
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r1, r2, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	add	r1, r4, r1
	mov	r0, #0xfc
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r4, r3
	mov	r0, #0x16
	strb	r0, [r3]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	add	r2, r4, r2
	mov	r1, #0xff
	strb	r1, [r2]
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	b	.L296
.L294:
	add	r1, r2, r4
	ldrb	r0, [r1]
	strb	r0, [r1, #0x2]
	sub	r0, r2, #0x1
	lsl	r0, r0, #0x18
.L296:
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L294	@cond_branch
	mov	r0, #0xfc
	strb	r0, [r4]
	mov	r0, #0x15
	strb	r0, [r4, #0x1]
.L291:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 ConvertInternationalString,.Lfe39-ConvertInternationalString
	.align	2, 0
	.globl	StripExtCtrlCodes
	.type	 StripExtCtrlCodes,function
	.thumb_func
StripExtCtrlCodes:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	mov	r6, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0xff
	beq	.L299	@cond_branch
.L300:
	add	r0, r5, r4
	ldrb	r0, [r0]
	cmp	r0, #0xfc
	bne	.L301	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r5, r4
	ldrb	r0, [r0]
	bl	GetExtCtrlCodeLength
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L298
.L301:
	add	r2, r6, #0
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r2, r5, r2
	add	r1, r4, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r1, r5, r1
	ldrb	r0, [r1]
	strb	r0, [r2]
.L298:
	add	r0, r5, r4
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L300	@cond_branch
.L299:
	add	r1, r5, r6
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 StripExtCtrlCodes,.Lfe40-StripExtCtrlCodes
.text
	.align	2, 0 @ Don't pad with nop

