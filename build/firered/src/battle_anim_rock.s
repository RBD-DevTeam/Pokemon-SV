@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sAnim_FlyingRock_0,object
sAnim_FlyingRock_0:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_FlyingRock_0,8
	.align	2, 0
	.type	 sAnim_FlyingRock_1,object
sAnim_FlyingRock_1:
	.short	0x30
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_FlyingRock_1,8
	.align	2, 0
	.type	 sAnim_FlyingRock_2,object
sAnim_FlyingRock_2:
	.short	0x40
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_FlyingRock_2,8
	.align	2, 0
	.type	 sAnims_FlyingRock,object
sAnims_FlyingRock:
	.word	sAnim_FlyingRock_0
	.word	sAnim_FlyingRock_1
	.word	sAnim_FlyingRock_2
	.size	 sAnims_FlyingRock,12
	.globl	gFallingRockSpriteTemplate
	.align	2, 0
	.type	 gFallingRockSpriteTemplate,object
	.size	 gFallingRockSpriteTemplate,24
gFallingRockSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_FlyingRock
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFallingRock
	.globl	gRockFragmentSpriteTemplate
	.align	2, 0
	.type	 gRockFragmentSpriteTemplate,object
	.size	 gRockFragmentSpriteTemplate,24
gRockFragmentSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_FlyingRock
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRockFragment
	.globl	gSwirlingDirtSpriteTemplate
	.align	2, 0
	.type	 gSwirlingDirtSpriteTemplate,object
	.size	 gSwirlingDirtSpriteTemplate,24
gSwirlingDirtSpriteTemplate:
	.short	0x275a
	.short	0x275a
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimParticleInVortex
	.align	2, 0
	.type	 sAffineAnim_Whirlpool,object
sAffineAnim_Whirlpool:
	.short	0xc0
	.short	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x2
	.short	-0x3
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x2
	.short	0x3
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 sAffineAnim_Whirlpool,32
	.align	2, 0
	.type	 sAffineAnims_Whirlpool,object
sAffineAnims_Whirlpool:
	.word	sAffineAnim_Whirlpool
	.size	 sAffineAnims_Whirlpool,4
	.globl	gWhirlpoolSpriteTemplate
	.align	2, 0
	.type	 gWhirlpoolSpriteTemplate,object
	.size	 gWhirlpoolSpriteTemplate,24
gWhirlpoolSpriteTemplate:
	.short	0x27a5
	.short	0x27a5
	.word	gOamData_AffineNormal_ObjBlend_16x16
	.word	gAnims_WaterMudOrb
	.word	0x0
	.word	sAffineAnims_Whirlpool
	.word	AnimParticleInVortex
	.globl	gFireSpinSpriteTemplate
	.align	2, 0
	.type	 gFireSpinSpriteTemplate,object
	.size	 gFireSpinSpriteTemplate,24
gFireSpinSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gAnims_BasicFire
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimParticleInVortex
	.globl	gFlyingSandCrescentSpriteTemplate
	.align	2, 0
	.type	 gFlyingSandCrescentSpriteTemplate,object
	.size	 gFlyingSandCrescentSpriteTemplate,24
gFlyingSandCrescentSpriteTemplate:
	.short	0x2815
	.short	0x2815
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFlyingSandCrescent
	.align	2, 0
	.type	 sFlyingSandSubsprites,object
	.size	 sFlyingSandSubsprites,8
sFlyingSandSubsprites:
	.byte	-0x10
	.byte	0x0
	.byte	0x9
	.byte	0x40
	.byte	0x10
	.byte	0x0
	.byte	0x89
	.byte	0x40
	.align	2, 0
	.type	 sFlyingSandSubspriteTable,object
sFlyingSandSubspriteTable:
	.byte	0x2
	.space	3
	.word	sFlyingSandSubsprites
	.size	 sFlyingSandSubspriteTable,8
	.align	2, 0
	.type	 sAnim_Rock_Biggest,object
sAnim_Rock_Biggest:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Rock_Biggest,8
	.align	2, 0
	.type	 sAnim_Rock_Bigger,object
sAnim_Rock_Bigger:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Rock_Bigger,8
	.align	2, 0
	.type	 sAnim_Rock_Big,object
sAnim_Rock_Big:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Rock_Big,8
	.align	2, 0
	.type	 sAnim_Rock_Small,object
sAnim_Rock_Small:
	.short	0x30
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Rock_Small,8
	.align	2, 0
	.type	 sAnim_Rock_Smaller,object
sAnim_Rock_Smaller:
	.short	0x40
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Rock_Smaller,8
	.align	2, 0
	.type	 sAnim_Rock_Smallest,object
sAnim_Rock_Smallest:
	.short	0x50
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Rock_Smallest,8
	.align	2, 0
	.type	 sAnims_BasicRock,object
sAnims_BasicRock:
	.word	sAnim_Rock_Biggest
	.word	sAnim_Rock_Bigger
	.word	sAnim_Rock_Big
	.word	sAnim_Rock_Small
	.word	sAnim_Rock_Smaller
	.word	sAnim_Rock_Smallest
	.size	 sAnims_BasicRock,24
	.globl	gAncientPowerRockSpriteTemplate
	.align	2, 0
	.type	 gAncientPowerRockSpriteTemplate,object
	.size	 gAncientPowerRockSpriteTemplate,24
gAncientPowerRockSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_BasicRock
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRaiseSprite
	.globl	gRolloutMudSpriteTemplate
	.align	2, 0
	.type	 gRolloutMudSpriteTemplate,object
	.size	 gRolloutMudSpriteTemplate,24
gRolloutMudSpriteTemplate:
	.short	0x275a
	.short	0x275a
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRolloutParticle
	.globl	gRolloutRockSpriteTemplate
	.align	2, 0
	.type	 gRolloutRockSpriteTemplate,object
	.size	 gRolloutRockSpriteTemplate,24
gRolloutRockSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRolloutParticle
	.globl	gRockTombRockSpriteTemplate
	.align	2, 0
	.type	 gRockTombRockSpriteTemplate,object
	.size	 gRockTombRockSpriteTemplate,24
gRockTombRockSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_BasicRock
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRockTomb
	.align	2, 0
	.type	 sAffineAnim_BasicRock_0,object
sAffineAnim_BasicRock_0:
	.short	0x0
	.short	0x0
	.byte	0xfb
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_BasicRock_0,16
	.align	2, 0
	.type	 sAffineAnim_BasicRock_1,object
sAffineAnim_BasicRock_1:
	.short	0x0
	.short	0x0
	.byte	0x5
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_BasicRock_1,16
	.align	2, 0
	.type	 sAffineAnims_BasicRock,object
sAffineAnims_BasicRock:
	.word	sAffineAnim_BasicRock_0
	.word	sAffineAnim_BasicRock_1
	.size	 sAffineAnims_BasicRock,8
	.globl	gRockBlastRockSpriteTemplate
	.align	2, 0
	.type	 gRockBlastRockSpriteTemplate,object
	.size	 gRockBlastRockSpriteTemplate,24
gRockBlastRockSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sAnims_BasicRock
	.word	0x0
	.word	sAffineAnims_BasicRock
	.word	AnimRockBlastRock
	.globl	gRockScatterSpriteTemplate
	.align	2, 0
	.type	 gRockScatterSpriteTemplate,object
	.size	 gRockScatterSpriteTemplate,24
gRockScatterSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sAnims_BasicRock
	.word	0x0
	.word	sAffineAnims_BasicRock
	.word	AnimRockScatter
	.globl	gTwisterRockSpriteTemplate
	.align	2, 0
	.type	 gTwisterRockSpriteTemplate,object
	.size	 gTwisterRockSpriteTemplate,24
gTwisterRockSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	sAnims_BasicRock+0x10
	.word	0x0
	.word	sAffineAnims_BasicRock
	.word	AnimMoveTwisterParticle
	.globl	gWeatherBallRockDownSpriteTemplate
	.align	2, 0
	.type	 gWeatherBallRockDownSpriteTemplate,object
	.size	 gWeatherBallRockDownSpriteTemplate,24
gWeatherBallRockDownSpriteTemplate:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	sAnims_BasicRock+0x8
	.word	0x0
	.word	sAffineAnims_BasicRock
	.word	AnimWeatherBallDown
.text
	.align	2, 0
	.type	 AnimFallingRock,function
	.thumb_func
AnimFallingRock:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L4
	mov	r1, #0x6
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x20
	add	r3, r5, #0
	add	r3, r3, #0x22
	mov	r1, #0x0
	bl	SetAverageBattlerPositions
.L3:
	ldrh	r0, [r6]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	mov	r4, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0xe
	strh	r0, [r5, #0x22]
	ldrb	r1, [r6, #0x2]
	add	r0, r5, #0
	bl	StartSpriteAnim
	add	r0, r5, #0
	bl	AnimateSprite
	strh	r4, [r5, #0x2e]
	strh	r4, [r5, #0x30]
	mov	r0, #0x4
	strh	r0, [r5, #0x32]
	mov	r0, #0x10
	strh	r0, [r5, #0x34]
	ldr	r0, .L4+0x8
	strh	r0, [r5, #0x36]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r5, #0x38]
	ldr	r1, .L4+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L4+0x10
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0xffba
	.word	AnimFallingRock_Step
	.word	TranslateSpriteInEllipse
.Lfe1:
	.size	 AnimFallingRock,.Lfe1-AnimFallingRock
	.align	2, 0
	.type	 AnimFallingRock_Step,function
	.thumb_func
AnimFallingRock_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x38]
	ldrh	r2, [r4, #0x20]
	add	r0, r1, r2
	strh	r0, [r4, #0x20]
	mov	r0, #0xc0
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r0, #0x4
	strh	r0, [r4, #0x32]
	mov	r0, #0x20
	strh	r0, [r4, #0x34]
	ldr	r0, .L7
	strh	r0, [r4, #0x36]
	ldr	r1, .L7+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L7+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	0xffe8
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteInEllipse
.Lfe2:
	.size	 AnimFallingRock_Step,.Lfe2-AnimFallingRock_Step
	.align	2, 0
	.type	 AnimRockFragment,function
	.thumb_func
AnimRockFragment:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L13
	ldrb	r1, [r4, #0xa]
	bl	StartSpriteAnim
	add	r0, r5, #0
	bl	AnimateSprite
	ldr	r0, .L13+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L10	@cond_branch
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r4]
	sub	r0, r0, r1
	b	.L12
.L14:
	.align	2, 0
.L13:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L10:
	ldrh	r0, [r4]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
.L12:
	strh	r0, [r5, #0x20]
	ldr	r3, .L15
	ldrh	r2, [r3, #0x2]
	ldrh	r0, [r5, #0x22]
	add	r2, r2, r0
	mov	r4, #0x0
	strh	r2, [r5, #0x22]
	ldrh	r0, [r3, #0x8]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldrh	r1, [r3, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	strh	r2, [r5, #0x34]
	ldrh	r0, [r3, #0x6]
	add	r2, r2, r0
	strh	r2, [r5, #0x36]
	add	r0, r5, #0
	bl	InitSpriteDataForLinearTranslation
	strh	r4, [r5, #0x34]
	strh	r4, [r5, #0x36]
	ldr	r0, .L15+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L15+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gBattleAnimArgs
	.word	TranslateSpriteLinearFixedPoint
	.word	DestroySpriteAndMatrix
.Lfe3:
	.size	 AnimRockFragment,.Lfe3-AnimRockFragment
	.align	2, 0
	.type	 AnimParticleInVortex,function
	.thumb_func
AnimParticleInVortex:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L20
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L18	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	b	.L19
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimArgs
.L18:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
.L19:
	ldr	r1, .L22
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x34]
	ldr	r0, .L22+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gBattleAnimArgs
	.word	AnimParticleInVortex_Step
.Lfe4:
	.size	 AnimParticleInVortex,.Lfe4-AnimParticleInVortex
	.align	2, 0
	.type	 AnimParticleInVortex_Step,function
	.thumb_func
AnimParticleInVortex_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x36]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r4, #0x26]
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L25	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L25:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 AnimParticleInVortex_Step,.Lfe5-AnimParticleInVortex_Step
	.align	2, 0
	.globl	AnimTask_LoadSandstormBackground
	.type	 AnimTask_LoadSandstormBackground,function
	.thumb_func
AnimTask_LoadSandstormBackground:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r1, .L30
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L27	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L27:
	ldr	r0, .L30+0x4
	strh	r5, [r0]
	ldr	r4, .L30+0x8
	strh	r5, [r4]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L30+0xc
	bl	AnimLoadCompressedBgTilemap
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L30+0x10
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L30+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L28	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
.L28:
	ldr	r0, .L30+0x18
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L29	@cond_branch
	ldr	r0, .L30+0x1c
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L29	@cond_branch
	mov	r5, #0x1
.L29:
	ldr	r0, .L30+0x20
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r5, [r1, #0x8]
	ldr	r0, .L30+0x24
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	0x3f42
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gFile_graphics_battle_anims_backgrounds_sandstorm_brew_tilemap
	.word	gFile_graphics_battle_anims_backgrounds_sandstorm_brew_sheet
	.word	gBattleAnimSpritePal_FlyingDirt
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	AnimTask_LoadSandstormBackground_Step
.Lfe6:
	.size	 AnimTask_LoadSandstormBackground,.Lfe6-AnimTask_LoadSandstormBackground
	.align	2, 0
	.type	 AnimTask_LoadSandstormBackground_Step,function
	.thumb_func
AnimTask_LoadSandstormBackground_Step:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L51
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0
	bne	.L33	@cond_branch
	ldr	r1, .L51+0x4
	ldr	r3, .L51+0x8
	add	r0, r3, #0
	ldrh	r3, [r1]
	add	r0, r0, r3
	b	.L49
.L52:
	.align	2, 0
.L51:
	.word	gTasks
	.word	gBattle_BG1_X
	.word	0xfffa
.L33:
	ldr	r1, .L53
	ldrh	r0, [r1]
	add	r0, r0, #0x6
.L49:
	strh	r0, [r1]
	ldr	r1, .L53+0x4
	ldr	r3, .L53+0x8
	add	r0, r3, #0
	ldrh	r3, [r1]
	add	r0, r0, r3
	strh	r0, [r1]
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r3, #0x20
	ldrsh	r0, [r0, r3]
	add	r4, r1, #0
	cmp	r0, #0x4
	bls	.LCB502
	b	.L35	@long jump
.LCB502:
	lsl	r0, r0, #0x2
	ldr	r1, .L53+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L54:
	.align	2, 0
.L53:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	0xffff
	.word	.L47
	.align	2, 0
	.align	2, 0
.L47:
	.word	.L36
	.word	.L39
	.word	.L41
	.word	.L44
	.word	.L45
.L36:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L35	@cond_branch
	strh	r5, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7
	bne	.L35	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r5, [r4, #0x1e]
	b	.L35
.L39:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x65
	bne	.L35	@cond_branch
	mov	r0, #0x7
	strh	r0, [r1, #0x1e]
	b	.L50
.L41:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L35	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	sub	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x1e
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	bne	.L35	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r1, [r4, #0x1e]
	b	.L35
.L44:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	InitBattleAnimBg
	ldr	r0, .L55
	add	r1, r4, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L50:
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	b	.L35
.L56:
	.align	2, 0
.L55:
	.word	gTasks
.L45:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L46	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L46:
	ldr	r0, .L57
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L57+0x4
	strh	r1, [r0]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L35:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.Lfe7:
	.size	 AnimTask_LoadSandstormBackground_Step,.Lfe7-AnimTask_LoadSandstormBackground_Step
	.align	2, 0
	.type	 AnimFlyingSandCrescent,function
	.thumb_func
AnimFlyingSandCrescent:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L60	@cond_branch
	ldr	r4, .L69
	mov	r2, #0x6
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L61	@cond_branch
	ldr	r0, .L69+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L61	@cond_branch
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	ldrb	r1, [r5, #0x3]
	sub	r0, r0, #0x40
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	b	.L62
.L70:
	.align	2, 0
.L69:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L61:
	ldr	r0, .L71
	strh	r0, [r5, #0x20]
.L62:
	ldr	r4, .L71+0x4
	ldrh	r0, [r4]
	strh	r0, [r5, #0x22]
	ldr	r1, .L71+0x8
	add	r0, r5, #0
	bl	SetSubspriteTables
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L63
.L72:
	.align	2, 0
.L71:
	.word	0xffc0
	.word	gBattleAnimArgs
	.word	sFlyingSandSubspriteTable
.L60:
	ldrh	r1, [r5, #0x30]
	ldrh	r3, [r5, #0x34]
	add	r1, r1, r3
	ldrh	r2, [r5, #0x32]
	ldrh	r0, [r5, #0x36]
	add	r2, r2, r0
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	ldrh	r3, [r5, #0x24]
	add	r0, r0, r3
	strh	r0, [r5, #0x24]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r3, [r5, #0x26]
	add	r0, r0, r3
	strh	r0, [r5, #0x26]
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x34]
	and	r2, r2, r0
	strh	r2, [r5, #0x36]
	mov	r1, #0x38
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L64	@cond_branch
	mov	r2, #0x20
	ldrsh	r0, [r5, r2]
	mov	r3, #0x24
	ldrsh	r1, [r5, r3]
	add	r0, r0, r1
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	ble	.L63	@cond_branch
	b	.L68
.L64:
	mov	r1, #0x20
	ldrsh	r0, [r5, r1]
	mov	r2, #0x24
	ldrsh	r1, [r5, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L63	@cond_branch
.L68:
	ldr	r0, .L73
	str	r0, [r5, #0x1c]
.L63:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	DestroyAnimSprite
.Lfe8:
	.size	 AnimFlyingSandCrescent,.Lfe8-AnimFlyingSandCrescent
	.align	2, 0
	.type	 AnimRaiseSprite,function
	.thumb_func
AnimRaiseSprite:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L76
	ldrb	r1, [r5, #0x8]
	bl	StartSpriteAnim
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0x4]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldr	r0, .L76+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L76+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe9:
	.size	 AnimRaiseSprite,.Lfe9-AnimRaiseSprite
	.align	2, 0
	.globl	AnimTask_Rollout
	.type	 AnimTask_Rollout,function
	.thumb_func
AnimTask_Rollout:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L84
	add	r6, r1, r0
	ldr	r5, .L84+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0xc0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	ldr	r4, .L84+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r2, #0xc0
	lsl	r2, r2, #0xd
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r1, [r5]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L79	@cond_branch
	mov	r8, r7
.L79:
	bl	GetRolloutCounter
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1
	bne	.L80	@cond_branch
	mov	r0, #0x20
	b	.L83
.L85:
	.align	2, 0
.L84:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L80:
	lsl	r1, r5, #0x3
	mov	r0, #0x30
	sub	r0, r0, r1
.L83:
	strh	r0, [r6, #0x18]
	mov	r4, #0x0
	strh	r4, [r6, #0x8]
	strh	r4, [r6, #0x1e]
	strh	r4, [r6, #0x1a]
	mov	r0, #0x1
	strh	r0, [r6, #0x20]
	mov	r1, #0x18
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bge	.L82	@cond_branch
	add	r0, r0, #0x7
.L82:
	asr	r0, r0, #0x3
	sub	r0, r0, #0x1
	strh	r0, [r6, #0x1c]
	mov	r2, r9
	lsl	r0, r2, #0x3
	strh	r0, [r6, #0xc]
	lsl	r0, r7, #0x3
	strh	r0, [r6, #0xe]
	mov	r1, sl
	sub	r0, r1, r2
	lsl	r0, r0, #0x3
	mov	r2, #0x18
	ldrsh	r1, [r6, r2]
	bl	__divsi3
	strh	r0, [r6, #0x10]
	mov	r1, r8
	sub	r0, r1, r7
	lsl	r0, r0, #0x3
	mov	r2, #0x18
	ldrsh	r1, [r6, r2]
	bl	__divsi3
	strh	r0, [r6, #0x12]
	strh	r4, [r6, #0x14]
	strh	r4, [r6, #0x16]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x8
	lsr	r4, r4, #0x10
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	strh	r4, [r6, #0x22]
	asr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	sub	r0, r0, r4
	mov	r2, #0x18
	ldrsh	r1, [r6, r2]
	bl	__divsi3
	strh	r0, [r6, #0x24]
	strh	r5, [r6, #0xa]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x26]
	ldr	r0, .L86
	str	r0, [r6]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L87:
	.align	2, 0
.L86:
	.word	AnimTask_Rollout_Step
.Lfe10:
	.size	 AnimTask_Rollout,.Lfe10-AnimTask_Rollout
	.align	2, 0
	.type	 AnimTask_Rollout_Step,function
	.thumb_func
AnimTask_Rollout_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L105
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB1083
	b	.L89	@long jump
.LCB1083:
	lsl	r0, r0, #0x2
	ldr	r1, .L105+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L106:
	.align	2, 0
.L105:
	.word	gTasks
	.word	.L102
	.align	2, 0
	.align	2, 0
.L102:
	.word	.L90
	.word	.L92
	.word	.L94
	.word	.L97
	.word	.L100
.L90:
	ldrh	r2, [r4, #0x14]
	ldrh	r0, [r4, #0x10]
	sub	r2, r2, r0
	strh	r2, [r4, #0x14]
	ldrh	r0, [r4, #0x16]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x16]
	ldr	r3, .L107
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x13
	strh	r2, [r0, #0x24]
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r1, #0x26]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L91	@cond_branch
	mov	r0, #0x14
	strh	r0, [r4, #0x1e]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L91:
	ldrh	r1, [r4, #0x22]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x9b
	bl	PlaySE12WithPanning
	b	.L89
.L108:
	.align	2, 0
.L107:
	.word	gSprites
.L92:
	ldrh	r0, [r4, #0x1e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	b	.L104
.L94:
	ldrh	r0, [r4, #0x1a]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L95	@cond_branch
	ldrh	r0, [r4, #0x10]
	ldrh	r2, [r4, #0x14]
	add	r0, r0, r2
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x16]
	add	r0, r0, r1
	strh	r0, [r4, #0x16]
	b	.L96
.L95:
	strh	r0, [r4, #0x14]
	strh	r0, [r4, #0x16]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L96:
	ldr	r2, .L109
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r1, #0x24]
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r1, #0x26]
	b	.L89
.L110:
	.align	2, 0
.L109:
	.word	gSprites
.L97:
	ldrh	r0, [r4, #0x10]
	ldrh	r2, [r4, #0xc]
	add	r0, r0, r2
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0xe]
	add	r0, r0, r1
	strh	r0, [r4, #0xe]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x1c
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L98	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1a]
	add	r0, r4, #0
	bl	CreateRolloutDirtSprite
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x22]
	add	r1, r1, r0
	strh	r1, [r4, #0x22]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xa8
	bl	PlaySE12WithPanning
.L98:
	ldrh	r0, [r4, #0x18]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x18]
.L104:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L89	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L89
.L100:
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L89	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L89:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 AnimTask_Rollout_Step,.Lfe11-AnimTask_Rollout_Step
	.align	2, 0
	.type	 CreateRolloutDirtSprite,function
	.thumb_func
CreateRolloutDirtSprite:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bhi	.L111	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L121
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L122:
	.align	2, 0
.L121:
	.word	.L119
	.align	2, 0
	.align	2, 0
.L119:
	.word	.L113
	.word	.L115
	.word	.L115
	.word	.L116
	.word	.L117
.L113:
	ldr	r3, .L123
	mov	r5, #0x0
	b	.L112
.L124:
	.align	2, 0
.L123:
	.word	gRolloutMudSpriteTemplate
.L115:
	ldr	r3, .L125
	mov	r5, #0x50
	b	.L112
.L126:
	.align	2, 0
.L125:
	.word	gRolloutRockSpriteTemplate
.L116:
	ldr	r3, .L127
	mov	r5, #0x40
	b	.L112
.L128:
	.align	2, 0
.L127:
	.word	gRolloutRockSpriteTemplate
.L117:
	ldr	r3, .L129
	mov	r5, #0x30
.L112:
	ldrh	r1, [r4, #0xc]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldrh	r2, [r4, #0xe]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x13
	lsl	r2, r2, #0x10
	mov	r6, #0x20
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	asr	r1, r1, #0x10
	lsr	r7, r2, #0x10
	asr	r2, r2, #0x10
	add	r0, r3, #0
	mov	r3, #0x23
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L120	@cond_branch
	ldr	r1, .L129+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x12
	strh	r1, [r0, #0x2e]
	mov	r2, #0x20
	ldrsh	r1, [r4, r2]
	lsl	r2, r1, #0x2
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r6, r2
	mov	r6, #0xa
	ldrsh	r3, [r4, r6]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	add	r2, r2, r1
	strh	r2, [r0, #0x32]
	strh	r7, [r0, #0x36]
	mov	r1, #0xa
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x1
	mov	r3, #0x10
	neg	r3, r3
	add	r1, r3, #0
	sub	r1, r1, r2
	strh	r1, [r0, #0x38]
	ldrh	r3, [r0, #0x4]
	lsl	r2, r3, #0x16
	lsr	r2, r2, #0x16
	add	r2, r2, r5
	ldr	r5, .L129+0x8
	add	r1, r5, #0
	and	r2, r2, r1
	ldr	r1, .L129+0xc
	and	r1, r1, r3
	orr	r1, r1, r2
	strh	r1, [r0, #0x4]
	bl	InitAnimArcTranslation
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
.L120:
	mov	r6, #0x20
	ldrsh	r0, [r4, r6]
	neg	r0, r0
	strh	r0, [r4, #0x20]
.L111:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	gRolloutRockSpriteTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.Lfe12:
	.size	 CreateRolloutDirtSprite,.Lfe12-CreateRolloutDirtSprite
	.align	2, 0
	.type	 AnimRolloutParticle,function
	.thumb_func
AnimRolloutParticle:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L132	@cond_branch
	ldr	r0, .L134
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L133	@cond_branch
	ldr	r0, .L134+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1e]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
.L133:
	add	r0, r4, #0
	bl	DestroySprite
.L132:
	pop	{r4}
	pop	{r0}
	bx	r0
.L135:
	.align	2, 0
.L134:
	.word	AnimTask_Rollout_Step
	.word	gTasks
.Lfe13:
	.size	 AnimRolloutParticle,.Lfe13-AnimRolloutParticle
	.align	2, 0
	.type	 GetRolloutCounter,function
	.thumb_func
GetRolloutCounter:
	push	{lr}
	ldr	r0, .L138
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x11]
	lsr	r0, r1, #0x4
	lsl	r1, r1, #0x1c
	lsr	r1, r1, #0x1c
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L137	@cond_branch
	mov	r1, #0x1
.L137:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L139:
	.align	2, 0
.L138:
	.word	gAnimDisableStructPtr
.Lfe14:
	.size	 GetRolloutCounter,.Lfe14-GetRolloutCounter
	.align	2, 0
	.type	 AnimRockTomb,function
	.thumb_func
AnimRockTomb:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L141
	ldrb	r1, [r5, #0x8]
	bl	StartSpriteAnim
	ldrh	r0, [r5]
	strh	r0, [r4, #0x24]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	ldrh	r1, [r5, #0x4]
	sub	r0, r0, r1
	strh	r0, [r4, #0x34]
	mov	r0, #0x3
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L141+0x4
	str	r0, [r4, #0x1c]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gBattleAnimArgs
	.word	AnimRockTomb_Step
.Lfe15:
	.size	 AnimRockTomb,.Lfe15-AnimRockTomb
	.align	2, 0
	.type	 AnimRockTomb_Step,function
	.thumb_func
AnimRockTomb_Step:
	push	{lr}
	add	r2, r0, #0
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r3]
	ldrh	r1, [r2, #0x34]
	mov	r3, #0x34
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L144	@cond_branch
	ldrh	r3, [r2, #0x32]
	add	r0, r1, r3
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x2e]
	add	r1, r1, r0
	strh	r1, [r2, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	ble	.L146	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x34]
	b	.L146
.L144:
	ldrh	r0, [r2, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L146	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L146:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 AnimRockTomb_Step,.Lfe16-AnimRockTomb_Step
	.align	2, 0
	.type	 AnimRockBlastRock,function
	.thumb_func
AnimRockBlastRock:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L150
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L149	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L149:
	add	r0, r4, #0
	bl	TranslateAnimSpriteToTargetMonLocation
	pop	{r4}
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	gBattleAnimAttacker
.Lfe17:
	.size	 AnimRockBlastRock,.Lfe17-AnimRockBlastRock
	.align	2, 0
	.type	 AnimRockScatter,function
	.thumb_func
AnimRockScatter:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L153
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L153+0x4
	ldrh	r3, [r2]
	ldrh	r5, [r4, #0x20]
	add	r1, r3, r5
	strh	r1, [r4, #0x20]
	ldrh	r1, [r2, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r3, [r4, #0x30]
	strh	r1, [r4, #0x32]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r2, #0x6]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L153+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L154:
	.align	2, 0
.L153:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimRockScatter_Step
.Lfe18:
	.size	 AnimRockScatter,.Lfe18-AnimRockScatter
	.align	2, 0
	.type	 AnimRockScatter_Step,function
	.thumb_func
AnimRockScatter_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r1, #0x28
	bl	__divsi3
	ldrh	r1, [r4, #0x24]
	add	r1, r1, r0
	strh	r1, [r4, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x26]
	sub	r1, r1, r0
	strh	r1, [r4, #0x26]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8c
	ble	.L156	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L156:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimRockScatter_Step,.Lfe19-AnimRockScatter_Step
	.align	2, 0
	.globl	AnimTask_GetSeismicTossDamageLevel
	.type	 AnimTask_GetSeismicTossDamageLevel,function
	.thumb_func
AnimTask_GetSeismicTossDamageLevel:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L161
	ldr	r0, [r2]
	cmp	r0, #0x20
	bgt	.L158	@cond_branch
	ldr	r1, .L161+0x4
	mov	r0, #0x0
	strh	r0, [r1, #0xe]
.L158:
	ldr	r2, [r2]
	add	r0, r2, #0
	sub	r0, r0, #0x21
	cmp	r0, #0x20
	bhi	.L159	@cond_branch
	ldr	r1, .L161+0x4
	mov	r0, #0x1
	strh	r0, [r1, #0xe]
.L159:
	cmp	r2, #0x41
	ble	.L160	@cond_branch
	ldr	r1, .L161+0x4
	mov	r0, #0x2
	strh	r0, [r1, #0xe]
.L160:
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	gAnimMoveDmg
	.word	gBattleAnimArgs
.Lfe20:
	.size	 AnimTask_GetSeismicTossDamageLevel,.Lfe20-AnimTask_GetSeismicTossDamageLevel
	.align	2, 0
	.globl	AnimTask_MoveSeismicTossBg
	.type	 AnimTask_MoveSeismicTossBg,function
	.thumb_func
AnimTask_MoveSeismicTossBg:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L166
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L164	@cond_branch
	mov	r0, #0x0
	bl	ToggleBg3Mode
	mov	r0, #0xc8
	strh	r0, [r5, #0xa]
.L164:
	ldr	r4, .L166+0x4
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	mov	r1, #0xa
	bl	__divsi3
	ldrh	r1, [r4]
	add	r1, r1, r0
	strh	r1, [r4]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x3
	strh	r0, [r5, #0xa]
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x78
	bne	.L165	@cond_branch
	mov	r0, #0x1
	bl	ToggleBg3Mode
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L165:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L167:
	.align	2, 0
.L166:
	.word	gTasks
	.word	gBattle_BG3_Y
.Lfe21:
	.size	 AnimTask_MoveSeismicTossBg,.Lfe21-AnimTask_MoveSeismicTossBg
	.align	2, 0
	.globl	AnimTask_SeismicTossBgAccelerateDownAtEnd
	.type	 AnimTask_SeismicTossBgAccelerateDownAtEnd,function
	.thumb_func
AnimTask_SeismicTossBgAccelerateDownAtEnd:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L171
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L169	@cond_branch
	mov	r0, #0x0
	bl	ToggleBg3Mode
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldr	r0, .L171+0x4
	ldrh	r0, [r0]
	strh	r0, [r4, #0xc]
.L169:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x50
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldr	r6, .L171+0x4
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	mov	r0, #0x4
	bl	Cos
	ldrh	r4, [r4, #0xc]
	add	r0, r0, r4
	strh	r0, [r6]
	ldr	r0, .L171+0x8
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	ldr	r0, .L171+0xc
	cmp	r1, r0
	bne	.L170	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6]
	mov	r0, #0x1
	bl	ToggleBg3Mode
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L170:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	gTasks
	.word	gBattle_BG3_Y
	.word	gBattleAnimArgs
	.word	0xfff
.Lfe22:
	.size	 AnimTask_SeismicTossBgAccelerateDownAtEnd,.Lfe22-AnimTask_SeismicTossBgAccelerateDownAtEnd
.text
	.align	2, 0 @ Don't pad with nop

