@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sMoveRelearner,object
	.size	 sMoveRelearner,4
sMoveRelearner:
	.word	0x0
	.section .rodata
	.align	1, 0
	.type	 sLearnMoveInterfaceSpritesPalette,object
sLearnMoveInterfaceSpritesPalette:
	.short	0x3e0
	.short	0x1f
	.short	0x1c
	.short	0x1a
	.short	0x18
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x6318
	.short	0x0
	.short	0x7fff
	.size	 sLearnMoveInterfaceSpritesPalette,32
	.align	1, 0
	.type	 sLearnMoveInterfaceSpritesTiles,object
sLearnMoveInterfaceSpritesTiles:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xee0
	.short	0x0
	.short	0xe2e0
	.short	0x0
	.short	0x22e0
	.short	0xe
	.short	0x22e0
	.short	0xe2
	.short	0x22e0
	.short	0xe22
	.short	0x22e0
	.short	0xde22
	.short	0x22e0
	.short	0xde2
	.short	0x22e0
	.short	0xde
	.short	0xe2e0
	.short	0xd
	.short	0xdee0
	.short	0x0
	.short	0xd00
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xee
	.short	0xe000
	.short	0xde2
	.short	0x2e00
	.short	0xde2
	.short	0x22e0
	.short	0xde2
	.short	0x222e
	.short	0xde2
	.short	0x222e
	.short	0xde2
	.short	0x22e0
	.short	0xde2
	.short	0x2e00
	.short	0xde2
	.short	0xe000
	.short	0xde2
	.short	0x0
	.short	0xdee
	.short	0x0
	.short	0xdd0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xe000
	.short	0xeeee
	.short	0xe000
	.short	0x2222
	.short	0x0
	.short	0x222e
	.short	0x0
	.short	0x22e0
	.short	0x0
	.short	0x2e00
	.short	0x0
	.short	0xe000
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xeeee
	.short	0xe
	.short	0x2222
	.short	0xde
	.short	0xe222
	.short	0xd
	.short	0xde22
	.short	0x0
	.short	0xde2
	.short	0x0
	.short	0xde
	.short	0x0
	.short	0xd
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xe000
	.short	0x0
	.short	0x2e00
	.short	0x0
	.short	0x22e0
	.short	0x0
	.short	0x222e
	.short	0xe000
	.short	0x2222
	.short	0xe000
	.short	0xeeee
	.short	0x0
	.short	0xdddd
	.short	0x0
	.short	0x0
	.short	0xe
	.short	0x0
	.short	0xe2
	.short	0x0
	.short	0xe22
	.short	0x0
	.short	0xe222
	.short	0x0
	.short	0x2222
	.short	0xe
	.short	0xeeee
	.short	0xde
	.short	0xdddd
	.short	0xdd
	.short	0x0
	.short	0x0
	.short	0x220
	.short	0x22
	.short	0x2dd2
	.short	0x20d
	.short	0xd2
	.short	0x200
	.short	0xd2
	.short	0x200
	.short	0x20
	.short	0xd20
	.short	0x200
	.short	0xd2
	.short	0x2000
	.short	0xd
	.short	0x0
	.short	0x0
	.short	0x220
	.short	0x22
	.short	0x2222
	.short	0x222
	.short	0x2222
	.short	0x222
	.short	0x2222
	.short	0x222
	.short	0x2220
	.short	0xd22
	.short	0x2200
	.short	0xd2
	.short	0x2000
	.short	0xd
	.short	0x0
	.short	0x0
	.short	0xcc0
	.short	0xcc
	.short	0xcddc
	.short	0xc0d
	.short	0xdc
	.short	0xc00
	.short	0xdc
	.short	0xc00
	.short	0xc0
	.short	0xdc0
	.short	0xc00
	.short	0xdc
	.short	0xc000
	.short	0xd
	.short	0x0
	.short	0x0
	.short	0xcc0
	.short	0xcc
	.short	0xcccc
	.short	0xccc
	.short	0xcccc
	.short	0xccc
	.short	0xcccc
	.short	0xccc
	.short	0xccc0
	.short	0xdcc
	.short	0xcc00
	.short	0xdc
	.short	0xc000
	.short	0xd
	.size	 sLearnMoveInterfaceSpritesTiles,384
	.type	 sMoveTutorMenuWindowFrameDimensions,object
sMoveTutorMenuWindowFrameDimensions:
	.byte	0x0
	.byte	0x0
	.byte	0x13
	.byte	0xd
	.byte	0x14
	.byte	0x0
	.byte	0x1d
	.byte	0xd
	.byte	0x2
	.byte	0xe
	.byte	0x1b
	.byte	0x13
	.size	 sMoveTutorMenuWindowFrameDimensions,12
	.type	 sJPText_TatakauWaza,object
sJPText_TatakauWaza:
	.byte	0x10
	.byte	0x10
	.byte	0x6
	.byte	0x3
	.byte	0x2c
	.byte	0x3c
	.byte	0xff
	.size	 sJPText_TatakauWaza,7
	.type	 sJPText_Taipu,object
sJPText_Taipu:
	.byte	0x60
	.byte	0x52
	.byte	0x9d
	.byte	0xba
	.byte	0xff
	.size	 sJPText_Taipu,5
	.type	 sJPText_PP,object
sJPText_PP:
	.byte	0xca
	.byte	0xca
	.byte	0xba
	.byte	0xff
	.size	 sJPText_PP,4
	.type	 sJPText_Iryoku,object
sJPText_Iryoku:
	.byte	0x2
	.byte	0x28
	.byte	0x36
	.byte	0x8
	.byte	0xba
	.byte	0xff
	.size	 sJPText_Iryoku,6
	.type	 sJPText_Meichuu,object
sJPText_Meichuu:
	.byte	0x22
	.byte	0x2
	.byte	0x11
	.byte	0x35
	.byte	0x3
	.byte	0xba
	.byte	0xff
	.size	 sJPText_Meichuu,7
	.align	2, 0
	.type	 sMoveTutorMoveInfoHeaders,object
sMoveTutorMoveInfoHeaders:
	.word	sJPText_TatakauWaza
	.byte	0x7
	.byte	0x1
	.byte	0x0
	.space	1
	.word	sJPText_Taipu
	.byte	0x1
	.byte	0x4
	.byte	0x1
	.space	1
	.word	sJPText_Iryoku
	.byte	0xb
	.byte	0x4
	.byte	0x2
	.space	1
	.word	sJPText_PP
	.byte	0x2
	.byte	0x6
	.byte	0x3
	.space	1
	.word	sJPText_Meichuu
	.byte	0xa
	.byte	0x6
	.byte	0x4
	.space	1
	.word	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.size	 sMoveTutorMoveInfoHeaders,80
	.align	2, 0
	.type	 sSpriteSheet_ListMenuScrollIndicators,object
	.size	 sSpriteSheet_ListMenuScrollIndicators,8
sSpriteSheet_ListMenuScrollIndicators:
	.word	sLearnMoveInterfaceSpritesTiles
	.short	0x180
	.short	0x1595
	.align	2, 0
	.type	 sSpritePalette_ListMenuScrollIndicators,object
	.size	 sSpritePalette_ListMenuScrollIndicators,8
sSpritePalette_ListMenuScrollIndicators:
	.word	sLearnMoveInterfaceSpritesPalette
	.short	0x1596
	.space	2
	.align	2, 0
	.type	 sOamdata_MoveRelearnerListMenuScrollIndicators,object
	.size	 sOamdata_MoveRelearnerListMenuScrollIndicators,8
sOamdata_MoveRelearnerListMenuScrollIndicators:
	.space	1
	.byte	0x40
	.space	1
	.byte	0x0
	.space	4
	.align	2, 0
	.type	 sAnimCmd_ScrollIndicatorDown,object
sAnimCmd_ScrollIndicatorDown:
	.short	0x4
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_ScrollIndicatorDown,8
	.align	2, 0
	.type	 sAnimCmd_ScrollIndicatorUp,object
sAnimCmd_ScrollIndicatorUp:
	.short	0x6
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnimCmd_ScrollIndicatorUp,8
	.align	2, 0
	.type	 sSpriteAnimTable_MoveRelearnerListMenuScrollIndicators,object
sSpriteAnimTable_MoveRelearnerListMenuScrollIndicators:
	.word	sAnimCmd_ScrollIndicatorDown
	.word	sAnimCmd_ScrollIndicatorUp
	.size	 sSpriteAnimTable_MoveRelearnerListMenuScrollIndicators,8
	.align	2, 0
	.type	 sSpriteTemplate_MoveRelearnerListMenuScrollIndicators,object
	.size	 sSpriteTemplate_MoveRelearnerListMenuScrollIndicators,24
sSpriteTemplate_MoveRelearnerListMenuScrollIndicators:
	.short	0x1595
	.short	0x1596
	.word	sOamdata_MoveRelearnerListMenuScrollIndicators
	.word	sSpriteAnimTable_MoveRelearnerListMenuScrollIndicators
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_ListMenuScrollIndicators
	.align	2, 0
	.type	 sBgTemplates,object
	.size	 sBgTemplates,8
sBgTemplates:
	.byte	0xf8
	.byte	0x1
	.space	2
	.byte	0x81
	.byte	0x10
	.space	2
	.align	2, 0
	.type	 sWindowTemplates,object
	.size	 sWindowTemplates,72
sWindowTemplates:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x7
	.byte	0xd
	.short	0x14
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x5
	.byte	0x5
	.byte	0xd
	.short	0x3e
	.byte	0x0
	.byte	0x5
	.byte	0x0
	.byte	0x5
	.byte	0x2
	.byte	0xd
	.short	0x57
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x3
	.byte	0x5
	.byte	0xf
	.short	0x61
	.byte	0x0
	.byte	0x5
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0xf
	.short	0x70
	.byte	0x0
	.byte	0x2
	.byte	0x6
	.byte	0xf
	.byte	0x8
	.byte	0xf
	.short	0x79
	.byte	0x0
	.byte	0x13
	.byte	0x1
	.byte	0xa
	.byte	0xc
	.byte	0xf
	.short	0xf1
	.byte	0x0
	.byte	0x2
	.byte	0xf
	.byte	0x1a
	.byte	0x4
	.byte	0xf
	.short	0x169
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sMoveRelearnerYesNoMenuTemplate,object
	.size	 sMoveRelearnerYesNoMenuTemplate,8
sMoveRelearnerYesNoMenuTemplate:
	.byte	0x0
	.byte	0x15
	.byte	0x8
	.byte	0x6
	.byte	0x4
	.byte	0xf
	.short	0x1d1
	.align	2, 0
	.type	 sMoveRelearnerListMenuTemplate,object
	.size	 sMoveRelearnerListMenuTemplate,24
sMoveRelearnerListMenuTemplate:
	.word	0x0
	.word	MoveRelearnerMenu_MoveCursorFunc
	.word	0x0
	.short	0x0
	.short	0x7
	.byte	0x6
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x20
	.byte	0x31
	.byte	0x1
	.byte	0x2
.text
	.align	2, 0
	.type	 VBlankCB_MoveRelearner,function
	.thumb_func
VBlankCB_MoveRelearner:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 VBlankCB_MoveRelearner,.Lfe1-VBlankCB_MoveRelearner
	.align	2, 0
	.globl	DisplayMoveTutorMenu
	.type	 DisplayMoveTutorMenu,function
	.thumb_func
DisplayMoveTutorMenu:
	push	{lr}
	add	sp, sp, #-0x4
	bl	LockPlayerFieldControls
	ldr	r0, .L4
	mov	r1, #0xa
	bl	CreateTask
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	Task_InitMoveRelearnerMenu
.Lfe2:
	.size	 DisplayMoveTutorMenu,.Lfe2-DisplayMoveTutorMenu
	.align	2, 0
	.type	 Task_InitMoveRelearnerMenu,function
	.thumb_func
Task_InitMoveRelearnerMenu:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r0, .L8+0x4
	bl	SetMainCallback2
	ldr	r1, .L8+0x8
	ldr	r0, .L8+0xc
	str	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L7:
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gPaletteFade
	.word	CB2_MoveRelearner_Init
	.word	gFieldCallback
	.word	FieldCB_ContinueScriptHandleMusic
.Lfe3:
	.size	 Task_InitMoveRelearnerMenu,.Lfe3-Task_InitMoveRelearnerMenu
	.align	2, 0
	.type	 MoveRelearnerLoadBgGfx,function
	.thumb_func
MoveRelearnerLoadBgGfx:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L17
	mov	r0, #0x0
	mov	r2, #0x2
	bl	InitBgsFromTemplates
	bl	ResetTempTileDataBuffers
	ldr	r0, .L17+0x4
	bl	InitWindows
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L11	@cond_branch
	bl	DeactivateAllTextPrinters
	mov	r5, #0x0
.L15:
	lsl	r4, r5, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	ClearWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r5, r5, #0x1
	cmp	r5, #0x8
	bls	.L15	@cond_branch
	mov	r0, #0x7
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x1e
	str	r0, [sp]
	mov	r0, #0x14
	str	r0, [sp, #0x4]
	mov	r0, #0xf
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	ldr	r0, .L17+0x8
	ldr	r1, [r0]
	mov	r0, #0x99
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0xe0
	bl	LoadUserWindowGfx
	mov	r0, #0xd0
	mov	r1, #0x1
	bl	ListMenuLoadStdPalAt
	ldr	r0, .L17+0xc
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L17+0x10
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L17+0x14
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
.L11:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	sBgTemplates
	.word	sWindowTemplates
	.word	sMoveRelearner
	.word	gUnknown_8E97DDC
	.word	gUnknown_8E97DFC
	.word	gUnknown_8E97EC4
.Lfe4:
	.size	 MoveRelearnerLoadBgGfx,.Lfe4-MoveRelearnerLoadBgGfx
	.align	2, 0
	.type	 CB2_MoveRelearner_Init,function
	.thumb_func
CB2_MoveRelearner_Init:
	push	{r4, lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	ldr	r4, .L20
	ldr	r0, .L20+0x4
	bl	AllocZeroed
	str	r0, [r4]
	bl	InitMoveRelearnerStateVariables
	ldr	r0, [r4]
	ldr	r1, .L20+0x8
	ldrh	r1, [r1]
	mov	r2, #0x98
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	strb	r1, [r0]
	bl	MoveRelearnerInitListMenuBuffersEtc
	ldr	r0, .L20+0xc
	bl	SetVBlankCallback
	bl	MoveRelearnerLoadBgGfx
	bl	SpawnListMenuScrollIndicatorSprites
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	ldr	r0, .L20+0x10
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	sMoveRelearner
	.word	0xa6c
	.word	gSpecialVar_0x8004
	.word	VBlankCB_MoveRelearner
	.word	CB2_MoveRelearner
.Lfe5:
	.size	 CB2_MoveRelearner_Init,.Lfe5-CB2_MoveRelearner_Init
	.align	2, 0
	.type	 CB2_MoveRelearner_Resume,function
	.thumb_func
CB2_MoveRelearner_Resume:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	bl	MoveRelearnerInitListMenuBuffersEtc
	ldr	r0, .L23
	ldr	r0, [r0]
	ldr	r1, .L23+0x4
	ldrh	r1, [r1]
	ldr	r2, .L23+0x8
	add	r0, r0, r2
	strb	r1, [r0]
	ldr	r0, .L23+0xc
	bl	SetVBlankCallback
	bl	MoveRelearnerLoadBgGfx
	bl	SpawnListMenuScrollIndicatorSprites
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	bl	FillPalette
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	ldr	r0, .L23+0x10
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	sMoveRelearner
	.word	gSpecialVar_0x8005
	.word	0x261
	.word	VBlankCB_MoveRelearner
	.word	CB2_MoveRelearner
.Lfe6:
	.size	 CB2_MoveRelearner_Resume,.Lfe6-CB2_MoveRelearner_Resume
	.align	2, 0
	.type	 CB2_MoveRelearner,function
	.thumb_func
CB2_MoveRelearner:
	push	{r4, lr}
	mov	r0, #0x7
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L26	@cond_branch
	bl	MoveRelearnerStateMachine
.L26:
	ldr	r4, .L28
	ldr	r0, [r4]
	ldr	r1, .L28+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L27	@cond_branch
	bl	PrintMoveInfoHandleCancel_CopyToVram
	ldr	r0, [r4]
	ldr	r1, .L28+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
.L27:
	bl	RunTasks
	bl	RunTextPrinters
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r4}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	sMoveRelearner
	.word	0x25f
.Lfe7:
	.size	 CB2_MoveRelearner,.Lfe7-CB2_MoveRelearner
	.align	2, 0
	.type	 StringExpandPlaceholdersAndPrintTextOnWindow7Color2,function
	.thumb_func
StringExpandPlaceholdersAndPrintTextOnWindow7Color2:
	push	{r4, lr}
	add	sp, sp, #-0x8
	add	r1, r0, #0
	ldr	r4, .L31
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	bl	GetTextSpeedSetting
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x0
	mov	r3, #0x2
	bl	PrintTextOnWindow
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gStringVar4
.Lfe8:
	.size	 StringExpandPlaceholdersAndPrintTextOnWindow7Color2,.Lfe8-StringExpandPlaceholdersAndPrintTextOnWindow7Color2
	.align	2, 0
	.type	 MoveRelearnerStateMachine,function
	.thumb_func
MoveRelearnerStateMachine:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xc
	ldr	r1, .L106
	ldr	r0, [r1]
	ldrb	r0, [r0]
	add	r7, r1, #0
	cmp	r0, #0x21
	bls	.LCB409
	b	.L34	@long jump
.LCB409:
	lsl	r0, r0, #0x2
	ldr	r1, .L106+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L107:
	.align	2, 0
.L106:
	.word	sMoveRelearner
	.word	.L101
	.align	2, 0
	.align	2, 0
.L101:
	.word	.L35
	.word	.L36
	.word	.L38
	.word	.L39
	.word	.L40
	.word	.L34
	.word	.L34
	.word	.L34
	.word	.L41
	.word	.L42
	.word	.L34
	.word	.L34
	.word	.L52
	.word	.L53
	.word	.L87
	.word	.L88
	.word	.L61
	.word	.L62
	.word	.L63
	.word	.L82
	.word	.L83
	.word	.L85
	.word	.L86
	.word	.L34
	.word	.L71
	.word	.L72
	.word	.L73
	.word	.L81
	.word	.L90
	.word	.L91
	.word	.L95
	.word	.L96
	.word	.L97
	.word	.L99
.L35:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	bl	LoadMoveInfoUI
	ldr	r4, .L108
	ldr	r1, [r4]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	bl	DrawTextBorderOnWindows6and7
	mov	r0, #0x0
	bl	PrintTeachWhichMoveToStrVar1
	bl	MoveLearnerInitListMenu
	ldr	r0, [r4]
	ldr	r1, .L108+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L34
.L109:
	.align	2, 0
.L108:
	.word	sMoveRelearner
	.word	0x25f
.L36:
	ldr	r0, .L110
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB475
	b	.L34	@long jump
.LCB475:
	ldr	r1, [r7]
	mov	r0, #0x4
	b	.L103
.L111:
	.align	2, 0
.L110:
	.word	gPaletteFade
.L38:
	ldr	r1, [r7]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L103
.L39:
	mov	r0, #0x0
	bl	PrintTeachWhichMoveToStrVar1
	ldr	r2, .L112
	ldr	r0, [r2]
	ldr	r3, .L112+0x4
	add	r0, r0, r3
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r1, [r2]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L103
.L113:
	.align	2, 0
.L112:
	.word	sMoveRelearner
	.word	0x25f
.L40:
	bl	MoveRelearnerMenuHandleInput
	b	.L34
.L41:
	ldr	r0, .L114
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0xe
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0x2
	bl	CreateYesNoMenu
	ldr	r0, .L114+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L103
.L115:
	.align	2, 0
.L114:
	.word	sMoveRelearnerYesNoMenuTemplate
	.word	sMoveRelearner
.L42:
	bl	YesNoMenuProcessInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L44	@cond_branch
	cmp	r1, #0
	bgt	.L51	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L48	@cond_branch
	b	.L34
.L51:
	cmp	r1, #0x1
	beq	.L48	@cond_branch
	b	.L34
.L44:
	ldr	r4, .L116
	ldr	r2, [r4]
	mov	r6, #0x98
	lsl	r6, r6, #0x2
	add	r0, r2, r6
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L116+0x4
	add	r0, r0, r1
	ldr	r3, .L116+0x8
	add	r1, r2, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1
	add	r2, r2, #0xe8
	add	r2, r2, r1
	ldrh	r1, [r2]
	bl	GiveMoveToMon
	lsl	r0, r0, #0x10
	ldr	r1, .L116+0xc
	cmp	r0, r1
	beq	.L45	@cond_branch
	ldr	r0, .L116+0x10
	bl	StringExpandPlaceholdersAndPrintTextOnWindow7Color2
	ldr	r1, .L116+0x14
	mov	r0, #0x1
	strh	r0, [r1]
	ldr	r1, [r4]
	mov	r0, #0x1f
	b	.L103
.L117:
	.align	2, 0
.L116:
	.word	sMoveRelearner
	.word	gPlayerParty
	.word	0xa67
	.word	-0x10000
	.word	gText_MonLearnedMove
	.word	gSpecialVar_0x8004
.L45:
	ldr	r1, [r4]
	mov	r0, #0x10
	b	.L103
.L48:
	ldr	r0, .L118
	ldr	r1, [r0]
	mov	r0, #0x3
	b	.L103
.L119:
	.align	2, 0
.L118:
	.word	sMoveRelearner
.L52:
	ldr	r0, .L120
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0xe
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0x2
	bl	CreateYesNoMenu
	ldr	r0, .L120+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L103
.L121:
	.align	2, 0
.L120:
	.word	sMoveRelearnerYesNoMenuTemplate
	.word	sMoveRelearner
.L53:
	bl	YesNoMenuProcessInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L55	@cond_branch
	cmp	r1, #0
	bgt	.L60	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L57	@cond_branch
	b	.L34
.L60:
	cmp	r1, #0x1
	beq	.L57	@cond_branch
	b	.L34
.L55:
	ldr	r0, .L122
	strh	r1, [r0]
	b	.L104
.L123:
	.align	2, 0
.L122:
	.word	gSpecialVar_0x8004
.L57:
	ldr	r0, .L124
	ldr	r1, [r0]
	mov	r0, #0x3
	b	.L103
.L125:
	.align	2, 0
.L124:
	.word	sMoveRelearner
.L61:
	ldr	r0, .L126
	bl	StringExpandPlaceholdersAndPrintTextOnWindow7Color2
	ldr	r0, .L126+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L103
.L127:
	.align	2, 0
.L126:
	.word	gText_MonIsTryingToLearnMove
	.word	sMoveRelearner
.L62:
	ldr	r0, .L128
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0xe
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0x2
	bl	CreateYesNoMenu
	ldr	r0, .L128+0x4
	ldr	r1, [r0]
	mov	r0, #0x12
	b	.L103
.L129:
	.align	2, 0
.L128:
	.word	sMoveRelearnerYesNoMenuTemplate
	.word	sMoveRelearner
.L63:
	bl	YesNoMenuProcessInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L65	@cond_branch
	cmp	r1, #0
	bgt	.L70	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L67	@cond_branch
	b	.L34
.L70:
	cmp	r1, #0x1
	beq	.L67	@cond_branch
	b	.L34
.L65:
	ldr	r0, .L130
	bl	StringExpandPlaceholdersAndPrintTextOnWindow7Color2
	ldr	r0, .L130+0x4
	ldr	r1, [r0]
	mov	r0, #0x13
	b	.L103
.L131:
	.align	2, 0
.L130:
	.word	gText_WhichMoveShouldBeForgotten
	.word	sMoveRelearner
.L67:
	ldr	r0, .L132
	ldr	r1, [r0]
	mov	r0, #0x18
	b	.L103
.L133:
	.align	2, 0
.L132:
	.word	sMoveRelearner
.L71:
	ldr	r0, .L134
	bl	StringExpandPlaceholdersAndPrintTextOnWindow7Color2
	ldr	r0, .L134+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L103
.L135:
	.align	2, 0
.L134:
	.word	gText_StopLearningMove
	.word	sMoveRelearner
.L72:
	ldr	r0, .L136
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0xe
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0x2
	bl	CreateYesNoMenu
	ldr	r0, .L136+0x4
	ldr	r1, [r0]
	mov	r0, #0x1a
	b	.L103
.L137:
	.align	2, 0
.L136:
	.word	sMoveRelearnerYesNoMenuTemplate
	.word	sMoveRelearner
.L73:
	bl	YesNoMenuProcessInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L75	@cond_branch
	cmp	r1, #0
	bgt	.L80	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L77	@cond_branch
	b	.L34
.L80:
	cmp	r1, #0x1
	beq	.L77	@cond_branch
	b	.L34
.L75:
	ldr	r0, .L138
	ldr	r1, [r0]
	mov	r0, #0x1b
	b	.L103
.L139:
	.align	2, 0
.L138:
	.word	sMoveRelearner
.L77:
	ldr	r0, .L140
	ldr	r1, [r0]
	mov	r0, #0x10
	b	.L103
.L141:
	.align	2, 0
.L140:
	.word	sMoveRelearner
.L81:
	ldr	r1, [r7]
	mov	r0, #0x3
	b	.L103
.L82:
	ldr	r1, [r7]
	mov	r2, #0x0
	mov	r0, #0x14
	strb	r0, [r1]
	sub	r0, r0, #0x15
	str	r2, [sp]
	mov	r1, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L34
.L83:
	ldr	r0, .L142
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB923
	b	.L34	@long jump
.LCB923:
	ldr	r2, [r7]
	ldr	r6, .L142+0x4
	add	r0, r2, r6
	ldrb	r0, [r0]
	ldr	r3, .L142+0x8
	add	r1, r2, r3
	ldr	r6, .L142+0xc
	add	r2, r2, r6
	bl	ListMenuGetScrollAndRow
	bl	FreeAllWindowBuffers
	ldr	r0, .L142+0x10
	ldr	r5, [r7]
	mov	r2, #0x98
	lsl	r2, r2, #0x2
	add	r1, r5, r2
	ldrb	r1, [r1]
	ldr	r2, .L142+0x14
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L142+0x18
	sub	r6, r6, #0x3
	add	r4, r5, r6
	ldrb	r4, [r4]
	lsl	r4, r4, #0x1
	add	r5, r5, #0xe8
	add	r5, r5, r4
	ldrh	r4, [r5]
	str	r4, [sp]
	bl	ShowSelectMovePokemonSummaryScreen
	ldr	r1, [r7]
	mov	r0, #0x1c
	b	.L103
.L143:
	.align	2, 0
.L142:
	.word	gPaletteFade
	.word	0x263
	.word	0xa68
	.word	0xa6a
	.word	gPlayerParty
	.word	gPlayerPartyCount
	.word	CB2_MoveRelearner_Resume
.L85:
	ldr	r1, [r7]
	b	.L105
.L86:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L34
.L87:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L144
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L103
.L145:
	.align	2, 0
.L144:
	.word	sMoveRelearner
.L88:
	ldr	r0, .L146
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1032
	b	.L34	@long jump
.LCB1032:
	bl	FreeAllWindowBuffers
	ldr	r0, .L146+0x4
	ldr	r0, [r0]
	bl	Free
	ldr	r0, .L146+0x8
	bl	SetMainCallback2
	b	.L34
.L147:
	.align	2, 0
.L146:
	.word	gPaletteFade
	.word	sMoveRelearner
	.word	CB2_ReturnToField
.L90:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	ldr	r0, .L148
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	bl	LoadMoveInfoUI
	bl	DrawTextBorderOnWindows6and7
	bl	MoveLearnerInitListMenu
	mov	r0, #0x1
	bl	PrintTeachWhichMoveToStrVar1
	bl	PrintMoveInfoHandleCancel_CopyToVram
	b	.L34
.L149:
	.align	2, 0
.L148:
	.word	sMoveRelearner
.L91:
	ldr	r0, .L150
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1093
	b	.L34	@long jump
.LCB1093:
	ldr	r1, [r7]
	ldr	r0, .L150+0x4
	add	r2, r1, r0
	ldrb	r0, [r2]
	cmp	r0, #0x4
	bne	.L93	@cond_branch
	mov	r0, #0x18
	b	.L103
.L151:
	.align	2, 0
.L150:
	.word	gPaletteFade
	.word	0x261
.L93:
	mov	r4, #0x98
	lsl	r4, r4, #0x2
	add	r0, r1, r4
	ldrb	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L152
	add	r0, r0, r5
	ldrb	r1, [r2]
	add	r1, r1, #0xd
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L152+0x4
	mov	r1, #0xd
	mov	r9, r1
	mov	r1, r9
	mul	r1, r1, r0
	ldr	r3, .L152+0x8
	mov	r8, r3
	add	r1, r1, r8
	add	r0, r2, #0
	bl	StringCopy
	ldr	r1, [r7]
	add	r0, r1, r4
	ldrb	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	ldr	r2, .L152+0xc
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	RemoveMonPPBonus
	ldr	r3, [r7]
	add	r4, r3, r4
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	ldr	r4, .L152+0x10
	add	r1, r3, r4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0xe8
	add	r1, r1, r2
	ldrh	r1, [r1]
	ldr	r6, .L152+0xc
	add	r3, r3, r6
	ldrb	r2, [r3]
	bl	SetMonMoveSlot
	ldr	r0, .L152+0x14
	ldr	r2, [r7]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	add	r2, r2, #0xe8
	add	r2, r2, r1
	ldrh	r1, [r2]
	mov	r2, r9
	mul	r2, r2, r1
	add	r1, r2, #0
	add	r1, r1, r8
	bl	StringCopy
	ldr	r0, .L152+0x18
	bl	StringExpandPlaceholdersAndPrintTextOnWindow7Color2
	ldr	r1, [r7]
	mov	r0, #0x1e
	strb	r0, [r1]
	ldr	r1, .L152+0x1c
	mov	r0, #0x1
	strh	r0, [r1]
	b	.L34
.L153:
	.align	2, 0
.L152:
	.word	gPlayerParty
	.word	gStringVar3
	.word	gMoveNames
	.word	0x261
	.word	0xa67
	.word	gStringVar2
	.word	gText_1_2_and_Poof
	.word	gSpecialVar_0x8004
.L95:
	ldr	r0, .L154
	bl	StringExpandPlaceholdersAndPrintTextOnWindow7Color2
	ldr	r0, .L154+0x4
	ldr	r1, [r0]
	mov	r0, #0x1f
	strb	r0, [r1]
	add	r0, r0, #0xe2
	bl	PlayFanfare
	b	.L34
.L155:
	.align	2, 0
.L154:
	.word	gText_MonForgotOldMoveAndMonLearnedNewMove
	.word	sMoveRelearner
.L96:
	ldr	r0, .L156
	bl	PlayFanfare
	ldr	r0, .L156+0x4
	ldr	r1, [r0]
	mov	r0, #0x20
	b	.L103
.L157:
	.align	2, 0
.L156:
	.word	0x101
	.word	sMoveRelearner
.L97:
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L34	@cond_branch
	ldr	r0, .L158
	ldr	r1, [r0]
	mov	r0, #0x21
	b	.L103
.L159:
	.align	2, 0
.L158:
	.word	sMoveRelearner
.L99:
	ldr	r0, .L160
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L34	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L104:
	ldr	r0, .L160+0x4
	ldr	r1, [r0]
.L105:
	mov	r0, #0xe
.L103:
	strb	r0, [r1]
.L34:
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L161:
	.align	2, 0
.L160:
	.word	gMain
	.word	sMoveRelearner
.Lfe9:
	.size	 MoveRelearnerStateMachine,.Lfe9-MoveRelearnerStateMachine
	.align	2, 0
	.type	 DrawTextBorderOnWindows6and7,function
	.thumb_func
DrawTextBorderOnWindows6and7:
	push	{r4, lr}
	mov	r4, #0x6
.L166:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	mov	r2, #0xe
	bl	DrawTextBorderOuter
	add	r4, r4, #0x1
	cmp	r4, #0x7
	ble	.L166	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 DrawTextBorderOnWindows6and7,.Lfe10-DrawTextBorderOnWindows6and7
	.align	2, 0
	.type	 PrintTeachWhichMoveToStrVar1,function
	.thumb_func
PrintTeachWhichMoveToStrVar1:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L169	@cond_branch
	ldr	r4, .L170
	ldr	r1, .L170+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	str	r5, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x0
	mov	r3, #0x2
	bl	PrintTextOnWindow
	mov	r0, #0x7
	bl	PutWindowTilemap
	mov	r0, #0x7
	mov	r1, #0x3
	bl	CopyWindowToVram
.L169:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	gStringVar4
	.word	gText_TeachWhichMoveToMon
.Lfe11:
	.size	 PrintTeachWhichMoveToStrVar1,.Lfe11-PrintTeachWhichMoveToStrVar1
	.align	2, 0
	.type	 InitMoveRelearnerStateVariables,function
	.thumb_func
InitMoveRelearnerStateVariables:
	push	{r4, lr}
	ldr	r2, .L178
	ldr	r0, [r2]
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	strb	r1, [r0, #0x2]
	ldr	r0, [r2]
	strb	r1, [r0, #0x19]
	ldr	r0, [r2]
	strb	r1, [r0, #0x18]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1c]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1a]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1b]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1d]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1e]
	ldr	r0, [r2]
	ldr	r3, .L178+0x4
	add	r0, r0, r3
	strb	r1, [r0]
	mov	r3, #0x0
	add	r4, r2, #0
	mov	r2, #0x0
.L176:
	ldr	r0, [r4]
	lsl	r1, r3, #0x1
	add	r0, r0, #0xe8
	add	r0, r0, r1
	strh	r2, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x13
	ble	.L176	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L179:
	.align	2, 0
.L178:
	.word	sMoveRelearner
	.word	0x25f
.Lfe12:
	.size	 InitMoveRelearnerStateVariables,.Lfe12-InitMoveRelearnerStateVariables
	.align	2, 0
	.type	 SpriteCB_ListMenuScrollIndicators,function
	.thumb_func
SpriteCB_ListMenuScrollIndicators:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	mov	r0, #0xff
	and	r1, r1, r0
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	beq	.L183	@cond_branch
	cmp	r0, #0x1
	ble	.L181	@cond_branch
	cmp	r0, #0x2
	beq	.L184	@cond_branch
	b	.L181
.L183:
	add	r0, r1, #0
	mov	r1, #0x3
	bl	Sin
	ldrh	r1, [r4, #0x32]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r2, #0
	strh	r0, [r4, #0x24]
	b	.L181
.L184:
	add	r0, r1, #0
	mov	r1, #0x1
	bl	Sin
	ldrh	r1, [r4, #0x32]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r2, #0
	strh	r0, [r4, #0x26]
.L181:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 SpriteCB_ListMenuScrollIndicators,.Lfe13-SpriteCB_ListMenuScrollIndicators
	.align	2, 0
	.type	 SpawnListMenuScrollIndicatorSprites,function
	.thumb_func
SpawnListMenuScrollIndicatorSprites:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r0, .L194
	bl	LoadSpriteSheet
	ldr	r0, .L194+0x4
	bl	LoadSpritePalette
	ldr	r0, .L194+0x8
	mov	r8, r0
	mov	r1, #0xc8
	mov	r2, #0x4
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r5, .L194+0xc
	ldr	r1, [r5]
	strb	r0, [r1, #0x3]
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L194+0x10
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r6, #0x2
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r2, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L194+0x14
	strh	r1, [r0, #0x32]
	mov	r0, r8
	mov	r1, #0xc8
	mov	r2, #0x6c
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r5]
	strb	r0, [r1, #0x3]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r2, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	strh	r1, [r0, #0x32]
	mov	r2, #0x0
	mov	r3, #0x4
.L192:
	ldr	r0, [r5]
	add	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x1
	ble	.L192	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	sSpriteSheet_ListMenuScrollIndicators
	.word	sSpritePalette_ListMenuScrollIndicators
	.word	sSpriteTemplate_MoveRelearnerListMenuScrollIndicators
	.word	sMoveRelearner
	.word	gSprites
	.word	0xffff
.Lfe14:
	.size	 SpawnListMenuScrollIndicatorSprites,.Lfe14-SpawnListMenuScrollIndicatorSprites
	.align	2, 0
	.type	 MoveRelearnerInitListMenuBuffersEtc,function
	.thumb_func
MoveRelearnerInitListMenuBuffersEtc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	ldr	r7, .L207
	ldr	r1, [r7]
	mov	r4, #0x98
	lsl	r4, r4, #0x2
	add	r0, r1, r4
	ldrb	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L207+0x4
	add	r0, r0, r5
	add	r1, r1, #0xe8
	bl	GetMoveRelearnerMoves
	ldr	r1, [r7]
	strb	r0, [r1, #0x1a]
	ldr	r1, [r7]
	add	r4, r1, r4
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	add	r1, r1, #0xe8
	bl	GetMoveRelearnerMoves
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x1a]
	cmp	r5, r0
	bge	.L198	@cond_branch
	add	r6, r7, #0
	mov	r7, #0xd
	mov	r4, #0x8d
	lsl	r4, r4, #0x1
.L200:
	ldr	r1, [r6]
	add	r0, r1, r4
	lsl	r2, r5, #0x1
	add	r1, r1, #0xe8
	add	r1, r1, r2
	ldrh	r1, [r1]
	mul	r1, r1, r7
	ldr	r2, .L207+0x8
	add	r1, r1, r2
	bl	StringCopy
	add	r4, r4, #0xd
	add	r5, r5, #0x1
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1a]
	cmp	r5, r0
	blt	.L200	@cond_branch
.L198:
	ldr	r4, .L207
	ldr	r0, [r4]
	mov	r1, #0x98
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L207+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	ldr	r0, .L207+0xc
	mov	r1, sp
	bl	StringCopy_Nickname
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x1a]
	mov	r1, #0xd
	mul	r1, r1, r2
	mov	r7, #0x8d
	lsl	r7, r7, #0x1
	add	r1, r1, r7
	add	r0, r0, r1
	ldr	r1, .L207+0x10
	bl	StringCopy
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1a]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1a]
	mov	r5, #0x0
	mov	r3, #0x1
	add	r3, r3, r8
	mov	ip, r3
	cmp	r5, r8
	bge	.L203	@cond_branch
	add	r6, r4, #0
	add	r4, r7, #0
.L205:
	ldr	r0, [r6]
	lsl	r3, r5, #0x3
	add	r1, r0, #0
	add	r1, r1, #0x20
	add	r1, r1, r3
	add	r2, r0, r4
	str	r2, [r1]
	add	r0, r0, #0x24
	add	r0, r0, r3
	str	r5, [r0]
	add	r4, r4, #0xd
	add	r5, r5, #0x1
	cmp	r5, r8
	blt	.L205	@cond_branch
.L203:
	ldr	r4, .L207
	ldr	r2, [r4]
	lsl	r3, r5, #0x3
	add	r0, r2, #0
	add	r0, r0, #0x20
	add	r0, r0, r3
	ldr	r1, .L207+0x10
	str	r1, [r0]
	add	r2, r2, #0x24
	add	r2, r2, r3
	mov	r0, #0xfe
	str	r0, [r2]
	ldr	r2, .L207+0x14
	add	r1, r2, #0
	ldr	r0, .L207+0x18
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldr	r0, [r4]
	add	r0, r0, #0x20
	str	r0, [r2]
	mov	r5, ip
	strh	r5, [r2, #0xc]
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L208:
	.align	2, 0
.L207:
	.word	sMoveRelearner
	.word	gPlayerParty
	.word	gMoveNames
	.word	gStringVar1
	.word	gFameCheckerText_Cancel
	.word	gMultiuseListMenuTemplate
	.word	sMoveRelearnerListMenuTemplate
.Lfe15:
	.size	 MoveRelearnerInitListMenuBuffersEtc,.Lfe15-MoveRelearnerInitListMenuBuffersEtc
	.align	2, 0
	.type	 MoveRelearnerMenuHandleInput,function
	.thumb_func
MoveRelearnerMenuHandleInput:
	push	{r4, r5, lr}
	ldr	r4, .L219
	ldr	r0, [r4]
	ldr	r1, .L219+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	ListMenu_ProcessInput
	ldr	r0, .L219+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L210	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, [r4]
	ldr	r2, .L219+0xc
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0xfe
	beq	.L211	@cond_branch
	mov	r0, #0x8
	strb	r0, [r1]
	ldr	r0, .L219+0x10
	ldr	r1, [r4]
	add	r2, r1, r2
	ldrb	r3, [r2]
	mov	r2, #0xd
	mul	r2, r2, r3
	mov	r3, #0x8d
	lsl	r3, r3, #0x1
	add	r2, r2, r3
	add	r1, r1, r2
	bl	StringCopy
	ldr	r0, .L219+0x14
	bl	StringExpandPlaceholdersAndPrintTextOnWindow7Color2
	b	.L213
.L220:
	.align	2, 0
.L219:
	.word	sMoveRelearner
	.word	0x263
	.word	gMain
	.word	0xa67
	.word	gStringVar2
	.word	gText_TeachMoveQues
.L211:
	ldr	r0, .L221
	bl	StringExpandPlaceholdersAndPrintTextOnWindow7Color2
	ldr	r1, [r4]
	mov	r0, #0xc
	strb	r0, [r1]
	b	.L213
.L222:
	.align	2, 0
.L221:
	.word	gText_GiveUpTryingToTeachNewMove
.L210:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L213	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, [r4]
	mov	r1, #0xc
	strb	r1, [r0]
	ldr	r0, .L223
	bl	StringExpandPlaceholdersAndPrintTextOnWindow7Color2
.L213:
	ldr	r0, .L223+0x4
	ldr	r4, [r0]
	ldrb	r0, [r4, #0x1a]
	cmp	r0, #0x6
	bls	.L215	@cond_branch
	ldr	r2, .L223+0x8
	mov	r0, #0x3e
	add	r0, r0, r2
	mov	ip, r0
	ldrb	r0, [r0]
	mov	r1, #0x5
	neg	r1, r1
	add	r3, r1, #0
	and	r3, r3, r0
	mov	r0, ip
	strb	r3, [r0]
	add	r5, r2, #0
	add	r5, r5, #0x82
	ldrb	r0, [r5]
	add	r2, r1, #0
	and	r2, r2, r0
	strb	r2, [r5]
	ldrb	r0, [r4, #0x19]
	cmp	r0, #0
	bne	.L216	@cond_branch
	mov	r1, #0x4
	add	r0, r3, #0
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	b	.L215
.L224:
	.align	2, 0
.L223:
	.word	gText_GiveUpTryingToTeachNewMove
	.word	sMoveRelearner
	.word	gSprites
.L216:
	ldrb	r1, [r4, #0x19]
	ldrb	r0, [r4, #0x1a]
	sub	r0, r0, #0x6
	cmp	r1, r0
	bne	.L215	@cond_branch
	mov	r1, #0x4
	add	r0, r2, #0
	orr	r0, r0, r1
	strb	r0, [r5]
.L215:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 MoveRelearnerMenuHandleInput,.Lfe16-MoveRelearnerMenuHandleInput
	.align	2, 0
	.type	 MoveLearnerInitListMenu,function
	.thumb_func
MoveLearnerInitListMenu:
	push	{r4, lr}
	ldr	r0, .L226
	ldr	r4, .L226+0x4
	ldr	r2, [r4]
	ldr	r3, .L226+0x8
	add	r1, r2, r3
	ldrh	r1, [r1]
	add	r3, r3, #0x2
	add	r2, r2, r3
	ldrh	r2, [r2]
	bl	ListMenuInit
	ldr	r1, [r4]
	ldr	r2, .L226+0xc
	add	r1, r1, r2
	strb	r0, [r1]
	mov	r0, #0x6
	mov	r1, #0x1
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L227:
	.align	2, 0
.L226:
	.word	gMultiuseListMenuTemplate
	.word	sMoveRelearner
	.word	0xa68
	.word	0x263
.Lfe17:
	.size	 MoveLearnerInitListMenu,.Lfe17-MoveLearnerInitListMenu
	.align	2, 0
	.type	 PrintMoveInfo,function
	.thumb_func
PrintMoveInfo:
	push	{r4, r5, lr}
	add	sp, sp, #-0x3c
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r1, .L233
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r1, [r4, #0x2]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x2
	mov	r2, #0x1
	mov	r3, #0x4
	bl	BlitMoveInfoIcon
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	bhi	.L229	@cond_branch
	ldr	r1, .L233+0x4
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x3
	mov	r2, #0x1
	mov	r3, #0x4
	bl	PrintTextOnWindow
	b	.L230
.L234:
	.align	2, 0
.L233:
	.word	gBattleMoves
	.word	gText_ThreeHyphens
.L229:
	ldrb	r1, [r4, #0x1]
	add	r0, sp, #0x8
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x3
	add	r1, sp, #0x8
	mov	r2, #0x1
	mov	r3, #0x4
	bl	PrintTextOnWindow
.L230:
	ldr	r2, .L235
	lsl	r1, r5, #0x1
	add	r0, r1, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x3]
	add	r4, r1, #0
	cmp	r2, #0
	bne	.L231	@cond_branch
	ldr	r1, .L235+0x4
	str	r2, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r0, #0x3
	mov	r2, #0x1
	mov	r3, #0x12
	bl	PrintTextOnWindow
	b	.L232
.L236:
	.align	2, 0
.L235:
	.word	gBattleMoves
	.word	gText_ThreeHyphens
.L231:
	ldrb	r1, [r0, #0x3]
	add	r0, sp, #0x8
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r0, #0x3
	add	r1, sp, #0x8
	mov	r2, #0x1
	mov	r3, #0x12
	bl	PrintTextOnWindow
.L232:
	ldr	r1, .L237
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x4]
	add	r0, sp, #0x8
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x4
	add	r1, sp, #0x8
	mov	r2, #0x2
	mov	r3, #0x2
	bl	PrintTextOnWindow
	ldr	r1, .L237+0x4
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x5
	mov	r2, #0x1
	mov	r3, #0x0
	bl	PrintTextOnWindow
	add	sp, sp, #0x3c
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L238:
	.align	2, 0
.L237:
	.word	gBattleMoves
	.word	gMoveDescriptionPointers
.Lfe18:
	.size	 PrintMoveInfo,.Lfe18-PrintMoveInfo
	.align	2, 0
	.type	 LoadMoveInfoUI,function
	.thumb_func
LoadMoveInfoUI:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x13
	mov	r2, #0x1
	mov	r3, #0x4
	bl	BlitMoveInfoIcon
	mov	r0, #0x1
	mov	r1, #0x14
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BlitMoveInfoIcon
	mov	r0, #0x1
	mov	r1, #0x15
	mov	r2, #0x0
	mov	r3, #0x13
	bl	BlitMoveInfoIcon
	mov	r0, #0x0
	mov	r1, #0x16
	mov	r2, #0x1
	mov	r3, #0x13
	bl	BlitMoveInfoIcon
	mov	r0, #0x0
	mov	r1, #0x17
	mov	r2, #0x1
	mov	r3, #0x22
	bl	BlitMoveInfoIcon
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x3
	bl	PutWindowTilemap
	mov	r0, #0x5
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x7
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 LoadMoveInfoUI,.Lfe19-LoadMoveInfoUI
	.align	2, 0
	.type	 PrintMoveInfoHandleCancel_CopyToVram,function
	.thumb_func
PrintMoveInfoHandleCancel_CopyToVram:
	push	{r4, r5, lr}
	ldr	r0, .L248
	ldr	r1, [r0]
	ldr	r0, .L248+0x4
	add	r2, r1, r0
	ldrb	r0, [r2]
	cmp	r0, #0xfe
	beq	.L241	@cond_branch
	lsl	r0, r0, #0x1
	add	r1, r1, #0xe8
	add	r1, r1, r0
	ldrh	r0, [r1]
	bl	PrintMoveInfo
	b	.L242
.L249:
	.align	2, 0
.L248:
	.word	sMoveRelearner
	.word	0xa67
.L241:
	mov	r5, #0x2
.L246:
	lsl	r4, r5, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r4, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L246	@cond_branch
.L242:
	mov	r0, #0x3
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x4
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x5
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x7
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 PrintMoveInfoHandleCancel_CopyToVram,.Lfe20-PrintMoveInfoHandleCancel_CopyToVram
	.align	2, 0
	.type	 MoveRelearnerMenu_MoveCursorFunc,function
	.thumb_func
MoveRelearnerMenu_MoveCursorFunc:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L251	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L252
	ldr	r0, [r2]
	ldr	r1, .L252+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r1, .L252+0x8
	add	r0, r0, r1
	strb	r4, [r0]
.L251:
	pop	{r4}
	pop	{r0}
	bx	r0
.L253:
	.align	2, 0
.L252:
	.word	sMoveRelearner
	.word	0x25f
	.word	0xa67
.Lfe21:
	.size	 MoveRelearnerMenu_MoveCursorFunc,.Lfe21-MoveRelearnerMenu_MoveCursorFunc
	.align	2, 0
	.type	 YesNoMenuProcessInput,function
	.thumb_func
YesNoMenuProcessInput:
	push	{r4, lr}
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L255	@cond_branch
	mov	r0, #0x6
	bl	PutWindowTilemap
	mov	r0, #0x6
	mov	r1, #0x1
	bl	CopyWindowToVram
.L255:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 YesNoMenuProcessInput,.Lfe22-YesNoMenuProcessInput
	.align	2, 0
	.type	 PrintTextOnWindow,function
	.thumb_func
PrintTextOnWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	sl, r1
	ldr	r4, [sp, #0x38]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	mov	r0, #0x1
	mov	r8, r0
	mov	r9, r0
	cmp	r4, #0x1
	bhi	.L257	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
	mov	r9, r1
.L257:
	cmp	r4, #0
	blt	.L258	@cond_branch
	cmp	r4, #0x1
	ble	.L260	@cond_branch
	cmp	r4, #0x2
	beq	.L261	@cond_branch
	b	.L258
.L260:
	ldr	r2, .L266
	ldr	r0, [r2]
	ldr	r1, .L266+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r1, .L266+0x8
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r1, .L266+0xc
	b	.L265
.L267:
	.align	2, 0
.L266:
	.word	sMoveRelearner
	.word	0xa64
	.word	0xa65
	.word	0xa66
.L261:
	ldr	r2, .L268
	ldr	r0, [r2]
	ldr	r1, .L268+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r1, .L268+0x8
	add	r0, r0, r1
	strb	r4, [r0]
	ldr	r0, [r2]
	add	r1, r1, #0x1
.L265:
	add	r0, r0, r1
	mov	r1, #0x3
	strb	r1, [r0]
.L258:
	cmp	r4, #0x1
	beq	.L264	@cond_branch
	ldr	r0, .L268
	ldr	r0, [r0]
	ldr	r1, .L268+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	orr	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	FillWindowPixelBuffer
.L264:
	mov	r0, r8
	str	r0, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	ldr	r0, .L268
	ldr	r0, [r0]
	ldr	r1, .L268+0x4
	add	r0, r0, r1
	str	r0, [sp, #0x8]
	ldr	r0, [sp, #0x34]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	mov	r0, sl
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x3
	add	r2, r7, #0
	add	r3, r6, #0
	bl	AddTextPrinterParameterized4
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L269:
	.align	2, 0
.L268:
	.word	sMoveRelearner
	.word	0xa64
	.word	0xa65
.Lfe23:
	.size	 PrintTextOnWindow,.Lfe23-PrintTextOnWindow
.text
	.align	2, 0 @ Don't pad with nop

