@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	LZDecompressWram
	.type	 LZDecompressWram,function
	.thumb_func
LZDecompressWram:
	push	{lr}
	bl	LZ77UnCompWram
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 LZDecompressWram,.Lfe1-LZDecompressWram
	.align	2, 0
	.globl	LZDecompressVram
	.type	 LZDecompressVram,function
	.thumb_func
LZDecompressVram:
	push	{lr}
	bl	LZ77UnCompVram
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 LZDecompressVram,.Lfe2-LZDecompressVram
	.align	2, 0
	.globl	LoadCompressedSpriteSheet
	.type	 LoadCompressedSpriteSheet,function
	.thumb_func
LoadCompressedSpriteSheet:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldr	r0, [r4]
	ldr	r5, .L5
	add	r1, r5, #0
	bl	LZ77UnCompWram
	str	r5, [sp]
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x10
	ldrh	r0, [r4, #0x4]
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L6:
	.align	2, 0
.L5:
	.word	gDecompressionBuffer
.Lfe3:
	.size	 LoadCompressedSpriteSheet,.Lfe3-LoadCompressedSpriteSheet
	.align	2, 0
	.globl	LoadCompressedSpriteSheetOverrideBuffer
	.type	 LoadCompressedSpriteSheetOverrideBuffer,function
	.thumb_func
LoadCompressedSpriteSheetOverrideBuffer:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, [r4]
	bl	LZ77UnCompWram
	str	r5, [sp]
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x10
	ldrh	r0, [r4, #0x4]
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 LoadCompressedSpriteSheetOverrideBuffer,.Lfe4-LoadCompressedSpriteSheetOverrideBuffer
	.align	2, 0
	.globl	LoadCompressedSpritePalette
	.type	 LoadCompressedSpritePalette,function
	.thumb_func
LoadCompressedSpritePalette:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	ldr	r0, [r5]
	ldr	r4, .L9
	add	r1, r4, #0
	bl	LZ77UnCompWram
	str	r4, [sp]
	ldrh	r2, [r5, #0x4]
	ldr	r1, .L9+0x4
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpritePalette
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	gDecompressionBuffer
	.word	-0x10000
.Lfe5:
	.size	 LoadCompressedSpritePalette,.Lfe5-LoadCompressedSpritePalette
	.align	2, 0
	.globl	LoadCompressedSpritePaletteOverrideBuffer
	.type	 LoadCompressedSpritePaletteOverrideBuffer,function
	.thumb_func
LoadCompressedSpritePaletteOverrideBuffer:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	add	r4, r1, #0
	ldr	r0, [r5]
	bl	LZ77UnCompWram
	str	r4, [sp]
	ldrh	r2, [r5, #0x4]
	ldr	r1, .L12
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpritePalette
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	-0x10000
.Lfe6:
	.size	 LoadCompressedSpritePaletteOverrideBuffer,.Lfe6-LoadCompressedSpritePaletteOverrideBuffer
	.align	2, 0
	.globl	DecompressPicFromTable
	.type	 DecompressPicFromTable,function
	.thumb_func
DecompressPicFromTable:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	ble	.L15	@cond_branch
	ldr	r0, .L17
	ldr	r0, [r0]
	bl	LZ77UnCompWram
	b	.L16
.L18:
	.align	2, 0
.L17:
	.word	gMonFrontPicTable
.L15:
	ldr	r0, [r3]
	add	r1, r4, #0
	bl	LZ77UnCompWram
.L16:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	DuplicateDeoxysTiles
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 DecompressPicFromTable,.Lfe7-DecompressPicFromTable
	.align	2, 0
	.globl	HandleLoadSpecialPokePic
	.type	 HandleLoadSpecialPokePic,function
	.thumb_func
HandleLoadSpecialPokePic:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r0, r2, #0x3
	ldr	r1, .L22
	add	r0, r0, r1
	mov	r1, #0x0
	cmp	r4, r0
	bne	.L20	@cond_branch
	mov	r1, #0x1
.L20:
	str	r1, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	LoadSpecialPokePic
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gMonFrontPicTable
.Lfe8:
	.size	 HandleLoadSpecialPokePic,.Lfe8-HandleLoadSpecialPokePic
	.align	2, 0
	.globl	LoadSpecialPokePic
	.type	 LoadSpecialPokePic,function
	.thumb_func
LoadSpecialPokePic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	add	r4, r1, #0
	add	r7, r2, #0
	add	r5, r3, #0
	ldr	r0, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r7, #0xc9
	bne	.L25	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r5
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r5
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r5
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r5
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L26	@cond_branch
	mov	r1, #0xc9
	b	.L27
.L26:
	mov	r2, #0xce
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L27:
	mov	r0, r8
	cmp	r0, #0
	bne	.L28	@cond_branch
	ldr	r0, .L34
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L33
.L35:
	.align	2, 0
.L34:
	.word	gMonBackPicTable
.L28:
	ldr	r0, .L36
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L33
.L37:
	.align	2, 0
.L36:
	.word	gMonFrontPicTable
.L25:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	ble	.L31	@cond_branch
	ldr	r0, .L38
	ldr	r0, [r0]
.L33:
	add	r1, r4, #0
	bl	LZ77UnCompWram
	b	.L30
.L39:
	.align	2, 0
.L38:
	.word	gMonFrontPicTable
.L31:
	ldr	r0, [r6]
	add	r1, r4, #0
	bl	LZ77UnCompWram
.L30:
	add	r0, r4, #0
	add	r1, r7, #0
	bl	DuplicateDeoxysTiles
	lsl	r0, r7, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	add	r2, r4, #0
	mov	r3, r8
	bl	DrawSpindaSpots
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 LoadSpecialPokePic,.Lfe9-LoadSpecialPokePic
	.align	2, 0
	.type	 DuplicateDeoxysTiles,function
	.thumb_func
DuplicateDeoxysTiles:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0xcd
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L41	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	add	r0, r3, r1
	ldr	r2, .L42
	add	r1, r3, #0
	bl	CpuSet
.L41:
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	0x4000200
.Lfe10:
	.size	 DuplicateDeoxysTiles,.Lfe10-DuplicateDeoxysTiles
	.align	2, 0
	.type	 Unused_LZDecompressWramIndirect,function
	.thumb_func
Unused_LZDecompressWramIndirect:
	push	{lr}
	ldr	r0, [r0]
	bl	LZ77UnCompWram
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 Unused_LZDecompressWramIndirect,.Lfe11-Unused_LZDecompressWramIndirect
	.align	2, 0
	.type	 StitchObjectsOn8x8Canvas,function
	.thumb_func
StitchObjectsOn8x8Canvas:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	mov	r9, r0
	str	r1, [sp]
	str	r2, [sp, #0x4]
	add	r5, r3, #0
	mov	r0, #0x1
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB458
	b	.L46	@long jump
.LCB458:
	asr	r0, r1, #0x1
	add	r0, r0, #0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	ldr	r2, [sp]
	cmp	r0, r2
	blt	.LCB468
	b	.L106	@long jump
.LCB468:
	mov	r4, #0x8
	sub	r1, r4, r1
	str	r1, [sp, #0x10]
.L50:
	mov	r7, #0x0
	add	r0, r0, #0x1
	str	r0, [sp, #0x14]
	ldr	r0, [sp, #0x10]
	cmp	r7, r0
	bge	.L52	@cond_branch
	ldr	r1, [sp, #0x8]
	lsl	r1, r1, #0x8
	str	r1, [sp, #0x18]
	mov	r2, #0x0
	mov	sl, r2
	mov	r0, r9
	mov	r4, #0x8
	sub	r0, r4, r0
	str	r0, [sp, #0xc]
.L54:
	mov	r3, #0x0
	asr	r0, r7, #0x1
	add	r1, r7, #0
	mov	r2, #0x1
	and	r1, r1, r2
	str	r1, [sp, #0x20]
	lsl	r0, r0, #0x8
	mov	r8, r0
	mov	ip, r5
.L58:
	lsl	r1, r3, #0x5
	ldr	r4, [sp, #0x18]
	add	r0, r5, r4
	add	r0, r0, r1
	mov	r1, r8
	add	r2, r0, r1
	mov	r1, ip
	add	r1, r1, r8
	mov	r6, #0xf
.L62:
	ldr	r4, [sp, #0x20]
	cmp	r4, #0
	bne	.L63	@cond_branch
	strb	r4, [r1]
	add	r4, sp, #0x20
	ldrb	r4, [r4]
	strb	r4, [r2, #0x10]
	b	.L61
.L63:
	mov	r0, sl
	strb	r0, [r1, #0x10]
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r4, r2, r4
	str	r4, [sp, #0x1c]
	strb	r0, [r4]
.L61:
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L62	@cond_branch
	mov	r0, #0x20
	add	ip, ip, r0
	add	r3, r3, #0x1
	cmp	r3, #0x7
	ble	.L58	@cond_branch
	add	r7, r7, #0x1
	ldr	r1, [sp, #0xc]
	cmp	r7, r1
	blt	.L54	@cond_branch
.L52:
	mov	r7, #0x0
	mov	r2, #0x0
.L71:
	mov	r6, #0x0
	add	r4, r7, #0x1
	mov	r8, r4
	lsl	r4, r7, #0x5
.L75:
	add	r0, r6, #0x1
	mov	sl, r0
	lsl	r1, r6, #0x8
	add	r0, r1, #0
	add	r0, r0, #0xc0
	add	r0, r5, r0
	add	r0, r0, r4
	add	r1, r5, r1
	add	r1, r1, r4
	mov	r3, #0x1f
.L79:
	strb	r2, [r1]
	strb	r2, [r0]
	add	r0, r0, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L79	@cond_branch
	mov	r6, sl
	cmp	r6, #0x7
	ble	.L75	@cond_branch
	mov	r7, r8
	cmp	r7, #0x1
	ble	.L71	@cond_branch
	mov	r1, r9
	cmp	r1, #0x5
	bne	.L83	@cond_branch
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r5, r5, r2
.L83:
	mov	r7, #0x0
	cmp	r7, r9
	bge	.L85	@cond_branch
.L87:
	mov	r3, #0x0
	add	r7, r7, #0x1
	mov	r8, r7
	cmp	r3, r9
	bge	.L89	@cond_branch
.L91:
	add	r3, r3, #0x1
	mov	sl, r3
	ldr	r4, [sp, #0x4]
	add	r4, r4, #0x20
	add	r7, r5, #0
	add	r7, r7, #0x20
	mov	r0, #0x12
	add	r0, r0, r5
	mov	ip, r0
	ldr	r2, [sp, #0x4]
	add	r3, r5, #0
	mov	r6, #0x3
.L95:
	ldrb	r0, [r2]
	mov	r1, ip
	strb	r0, [r1]
	ldrb	r0, [r2, #0x1]
	strb	r0, [r1, #0x1]
	ldrb	r0, [r2, #0x2]
	strb	r0, [r1, #0x1e]
	ldrb	r0, [r2, #0x3]
	strb	r0, [r1, #0x1f]
	mov	r0, #0x81
	lsl	r0, r0, #0x1
	add	r1, r3, r0
	ldrb	r0, [r2, #0x10]
	strb	r0, [r1]
	ldr	r0, .L146
	add	r1, r3, r0
	ldrb	r0, [r2, #0x11]
	strb	r0, [r1]
	mov	r0, #0x90
	lsl	r0, r0, #0x1
	add	r1, r3, r0
	ldrb	r0, [r2, #0x12]
	strb	r0, [r1]
	ldr	r0, .L146+0x4
	add	r1, r3, r0
	ldrb	r0, [r2, #0x13]
	strb	r0, [r1]
	mov	r1, #0x4
	add	ip, ip, r1
	add	r2, r2, #0x4
	add	r3, r3, #0x4
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L95	@cond_branch
	str	r4, [sp, #0x4]
	add	r5, r7, #0
	mov	r3, sl
	cmp	r3, r9
	blt	.L91	@cond_branch
.L89:
	mov	r2, r9
	cmp	r2, #0x7
	bne	.L98	@cond_branch
	add	r5, r5, #0x20
	b	.L86
.L147:
	.align	2, 0
.L146:
	.word	0x103
	.word	0x121
.L98:
	mov	r4, r9
	cmp	r4, #0x5
	bne	.L86	@cond_branch
	add	r5, r5, #0x60
.L86:
	mov	r7, r8
	cmp	r7, r9
	blt	.L87	@cond_branch
.L85:
	mov	r0, r9
	cmp	r0, #0x7
	bne	.L102	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r5, r5, r1
	b	.L49
.L102:
	mov	r2, r9
	cmp	r2, #0x5
	bne	.L49	@cond_branch
	mov	r4, #0xf0
	lsl	r4, r4, #0x1
	add	r5, r5, r4
.L49:
	ldr	r0, [sp, #0x14]
	ldr	r1, [sp]
	cmp	r0, r1
	bge	.LCB779
	b	.L50	@long jump
.LCB779:
	b	.L106
.L46:
	mov	r6, #0x0
	ldr	r2, [sp]
	cmp	r6, r2
	bge	.L106	@cond_branch
.L110:
	add	r6, r6, #0x1
	mov	sl, r6
	mov	r4, r9
	cmp	r4, #0x6
	bne	.L111	@cond_branch
	mov	r0, #0x0
	mov	r3, #0xff
.L115:
	strb	r0, [r5]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L115	@cond_branch
.L111:
	mov	r7, #0x0
	cmp	r7, r9
	bge	.L118	@cond_branch
.L120:
	add	r7, r7, #0x1
	mov	r8, r7
	mov	r1, r9
	lsl	r0, r1, #0x5
	cmp	r1, #0x6
	bne	.L121	@cond_branch
	mov	r1, #0x0
	mov	r3, #0x1f
.L125:
	strb	r1, [r5]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L125	@cond_branch
.L121:
	add	r1, r0, #0
	cmp	r1, #0
	ble	.L128	@cond_branch
	add	r3, r1, #0
.L130:
	ldr	r2, [sp, #0x4]
	ldrb	r0, [r2]
	strb	r0, [r5]
	add	r2, r2, #0x1
	str	r2, [sp, #0x4]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L130	@cond_branch
.L128:
	mov	r4, r9
	cmp	r4, #0x6
	bne	.L119	@cond_branch
	mov	r0, #0x0
	mov	r3, #0x1f
.L136:
	strb	r0, [r5]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L136	@cond_branch
.L119:
	mov	r7, r8
	cmp	r7, r9
	blt	.L120	@cond_branch
.L118:
	mov	r0, r9
	cmp	r0, #0x6
	bne	.L109	@cond_branch
	mov	r0, #0x0
	mov	r3, #0xff
.L143:
	strb	r0, [r5]
	add	r5, r5, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L143	@cond_branch
.L109:
	mov	r6, sl
	ldr	r1, [sp]
	cmp	r6, r1
	blt	.L110	@cond_branch
.L106:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 StitchObjectsOn8x8Canvas,.Lfe12-StitchObjectsOn8x8Canvas
	.align	2, 0
	.globl	LoadCompressedSpriteSheetUsingHeap
	.type	 LoadCompressedSpriteSheetUsingHeap,function
	.thumb_func
LoadCompressedSpriteSheetUsingHeap:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldr	r0, [r4]
	ldr	r0, [r0]
	lsr	r0, r0, #0x8
	bl	AllocZeroed
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L149	@cond_branch
	ldr	r0, [r4]
	add	r1, r5, #0
	bl	LZ77UnCompWram
	str	r5, [sp]
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x10
	ldrh	r0, [r4, #0x4]
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	add	r0, r5, #0
	bl	Free
	mov	r0, #0x0
	b	.L150
.L149:
	mov	r0, #0x1
.L150:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 LoadCompressedSpriteSheetUsingHeap,.Lfe13-LoadCompressedSpriteSheetUsingHeap
	.align	2, 0
	.globl	LoadCompressedSpritePaletteUsingHeap
	.type	 LoadCompressedSpritePaletteUsingHeap,function
	.thumb_func
LoadCompressedSpritePaletteUsingHeap:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldr	r0, [r4]
	ldr	r0, [r0]
	lsr	r0, r0, #0x8
	bl	AllocZeroed
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L152	@cond_branch
	ldr	r0, [r4]
	add	r1, r5, #0
	bl	LZ77UnCompWram
	str	r5, [sp]
	ldrh	r2, [r4, #0x4]
	ldr	r1, .L154
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpritePalette
	add	r0, r5, #0
	bl	Free
	mov	r0, #0x0
	b	.L153
.L155:
	.align	2, 0
.L154:
	.word	-0x10000
.L152:
	mov	r0, #0x1
.L153:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 LoadCompressedSpritePaletteUsingHeap,.Lfe14-LoadCompressedSpritePaletteUsingHeap
	.align	2, 0
	.globl	GetDecompressedDataSize
	.type	 GetDecompressedDataSize,function
	.thumb_func
GetDecompressedDataSize:
	add	sp, sp, #-0x4
	mov	r3, sp
	ldrb	r2, [r0, #0x1]
	mov	r1, sp
	strb	r2, [r1]
	ldrb	r1, [r0, #0x2]
	strb	r1, [r3, #0x1]
	ldrb	r0, [r0, #0x3]
	strb	r0, [r3, #0x2]
	mov	r0, #0x0
	strb	r0, [r3, #0x3]
	ldr	r0, [sp]
	add	sp, sp, #0x4
	bx	lr
.Lfe15:
	.size	 GetDecompressedDataSize,.Lfe15-GetDecompressedDataSize
	.align	2, 0
	.globl	DecompressPicFromTable_DontHandleDeoxys
	.type	 DecompressPicFromTable_DontHandleDeoxys,function
	.thumb_func
DecompressPicFromTable_DontHandleDeoxys:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r2, r0
	ble	.L158	@cond_branch
	ldr	r0, .L160
	ldr	r0, [r0]
	bl	LZ77UnCompWram
	b	.L159
.L161:
	.align	2, 0
.L160:
	.word	gMonFrontPicTable
.L158:
	ldr	r0, [r3]
	bl	LZ77UnCompWram
.L159:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 DecompressPicFromTable_DontHandleDeoxys,.Lfe16-DecompressPicFromTable_DontHandleDeoxys
	.align	2, 0
	.globl	HandleLoadSpecialPokePic_DontHandleDeoxys
	.type	 HandleLoadSpecialPokePic_DontHandleDeoxys,function
	.thumb_func
HandleLoadSpecialPokePic_DontHandleDeoxys:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r0, r2, #0x3
	ldr	r1, .L165
	add	r0, r0, r1
	mov	r1, #0x0
	cmp	r4, r0
	bne	.L163	@cond_branch
	mov	r1, #0x1
.L163:
	str	r1, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	LoadSpecialPokePic_DontHandleDeoxys
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	gMonFrontPicTable
.Lfe17:
	.size	 HandleLoadSpecialPokePic_DontHandleDeoxys,.Lfe17-HandleLoadSpecialPokePic_DontHandleDeoxys
	.align	2, 0
	.globl	LoadSpecialPokePic_DontHandleDeoxys
	.type	 LoadSpecialPokePic_DontHandleDeoxys,function
	.thumb_func
LoadSpecialPokePic_DontHandleDeoxys:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	add	r5, r1, #0
	add	r7, r2, #0
	add	r4, r3, #0
	ldr	r0, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r7, #0xc9
	bne	.L168	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r4
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r4
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r4
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r4
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L169	@cond_branch
	mov	r1, #0xc9
	b	.L170
.L169:
	mov	r2, #0xce
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L170:
	mov	r0, r8
	cmp	r0, #0
	bne	.L171	@cond_branch
	ldr	r0, .L177
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L176
.L178:
	.align	2, 0
.L177:
	.word	gMonBackPicTable
.L171:
	ldr	r0, .L179
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L176
.L180:
	.align	2, 0
.L179:
	.word	gMonFrontPicTable
.L168:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	ble	.L174	@cond_branch
	ldr	r0, .L181
	ldr	r0, [r0]
.L176:
	add	r1, r5, #0
	bl	LZ77UnCompWram
	b	.L173
.L182:
	.align	2, 0
.L181:
	.word	gMonFrontPicTable
.L174:
	ldr	r0, [r6]
	add	r1, r5, #0
	bl	LZ77UnCompWram
.L173:
	lsl	r0, r7, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, r8
	bl	DrawSpindaSpots
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 LoadSpecialPokePic_DontHandleDeoxys,.Lfe18-LoadSpecialPokePic_DontHandleDeoxys
.text
	.align	2, 0 @ Don't pad with nop

