@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sMultiMove,object
	.size	 sMultiMove,4
sMultiMove:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sWindowTemplate_MultiMove,object
	.size	 sWindowTemplate_MultiMove,8
sWindowTemplate_MultiMove:
	.byte	0x0
	.byte	0xa
	.byte	0x3
	.byte	0x14
	.byte	0x12
	.byte	0x9
	.short	0xa
.text
	.align	2, 0
	.globl	MultiMove_Init
	.type	 MultiMove_Init,function
	.thumb_func
MultiMove_Init:
	push	{r4, lr}
	ldr	r4, .L6
	ldr	r0, .L6+0x4
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L6+0x8
	bl	AddWindow8Bit
	add	r1, r0, #0
	ldr	r0, .L6+0xc
	ldr	r0, [r0]
	ldr	r2, .L6+0x10
	add	r0, r0, r2
	strh	r1, [r0]
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xff
	beq	.L3	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	sMultiMove
	.word	0x974
	.word	sWindowTemplate_MultiMove
	.word	gStorage
	.word	0x21f0
.L3:
	mov	r0, #0x0
.L5:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 MultiMove_Init,.Lfe1-MultiMove_Init
	.align	2, 0
	.globl	MultiMove_Free
	.type	 MultiMove_Free,function
	.thumb_func
MultiMove_Free:
	push	{lr}
	ldr	r0, .L10
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L9	@cond_branch
	bl	Free
.L9:
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	sMultiMove
.Lfe2:
	.size	 MultiMove_Free,.Lfe2-MultiMove_Free
	.align	2, 0
	.globl	MultiMove_SetFunction
	.type	 MultiMove_SetFunction,function
	.thumb_func
MultiMove_SetFunction:
	ldr	r2, .L13
	ldr	r1, [r2]
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r0, [r2]
	strb	r3, [r0, #0x1]
	bx	lr
.L14:
	.align	2, 0
.L13:
	.word	sMultiMove
.Lfe3:
	.size	 MultiMove_SetFunction,.Lfe3-MultiMove_SetFunction
	.align	2, 0
	.globl	MultiMove_RunFunction
	.type	 MultiMove_RunFunction,function
	.thumb_func
MultiMove_RunFunction:
	push	{lr}
	ldr	r0, .L27
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bhi	.L16	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L27+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L28:
	.align	2, 0
.L27:
	.word	sMultiMove
	.word	.L23
	.align	2, 0
	.align	2, 0
.L23:
	.word	.L17
	.word	.L18
	.word	.L19
	.word	.L20
	.word	.L21
	.word	.L22
.L17:
	bl	MultiMove_Function_Start
	b	.L26
.L18:
	bl	MultiMove_Function_Single
	b	.L26
.L19:
	bl	MultiMove_Function_ChangeSelection
	b	.L26
.L20:
	bl	MultiMove_Function_GrabSelection
	b	.L26
.L21:
	bl	MultiMove_Function_MoveMons
	b	.L26
.L22:
	bl	MultiMove_Function_PlaceMons
.L26:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L25
.L16:
	mov	r0, #0x0
.L25:
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 MultiMove_RunFunction,.Lfe4-MultiMove_RunFunction
	.align	2, 0
	.type	 MultiMove_Function_Start,function
	.thumb_func
MultiMove_Function_Start:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	ldr	r6, .L40
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x1
	beq	.L32	@cond_branch
	cmp	r0, #0x1
	bgt	.L37	@cond_branch
	cmp	r0, #0
	beq	.L31	@cond_branch
	b	.L30
.L41:
	.align	2, 0
.L40:
	.word	sMultiMove
.L37:
	cmp	r0, #0x2
	beq	.L33	@cond_branch
	b	.L30
.L31:
	mov	r0, #0x0
	bl	HideBg
	mov	r0, #0x80
	bl	LoadMonIconPalettesAt
	b	.L39
.L32:
	add	r0, r1, #0x2
	add	r1, r1, #0x3
	bl	GetCursorBoxColumnAndRow
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x2]
	strb	r0, [r1, #0x4]
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x3]
	strb	r0, [r1, #0x5]
	ldr	r4, .L42
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	ldr	r5, .L42+0x4
	ldr	r0, [r5]
	ldr	r4, .L42+0x8
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	FillWindowPixelBuffer8Bit
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x2]
	ldrb	r1, [r1, #0x3]
	bl	MultiMove_SetIconToBg
	mov	r0, #0x0
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetBgAttribute
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	PutWindowTilemap
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	CopyWindowToVram8Bit
	mov	r0, #0xfc
	lsl	r0, r0, #0x6
	ldr	r2, .L42+0xc
	mov	r1, #0x8
	bl	BlendPalettes
	mov	r0, #0x2
	bl	StartCursorAnim
	mov	r0, #0x8
	mov	r1, #0x80
	bl	SetGpuRegBits
.L39:
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	b	.L30
.L43:
	.align	2, 0
.L42:
	.word	-0x400
	.word	gStorage
	.word	0x21f0
	.word	0x7fff
.L33:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L30	@cond_branch
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x0
	b	.L38
.L30:
	mov	r0, #0x1
.L38:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 MultiMove_Function_Start,.Lfe5-MultiMove_Function_Start
	.align	2, 0
	.type	 MultiMove_Function_Single,function
	.thumb_func
MultiMove_Function_Single:
	push	{r4, lr}
	ldr	r4, .L55
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	beq	.L47	@cond_branch
	cmp	r0, #0x1
	bgt	.L52	@cond_branch
	cmp	r0, #0
	beq	.L46	@cond_branch
	b	.L45
.L56:
	.align	2, 0
.L55:
	.word	sMultiMove
.L52:
	cmp	r0, #0x2
	beq	.L48	@cond_branch
	b	.L45
.L46:
	mov	r0, #0x0
	bl	HideBg
	b	.L54
.L47:
	bl	MultiMove_ResetBg
	mov	r0, #0x0
	bl	StartCursorAnim
.L54:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	b	.L45
.L48:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L45	@cond_branch
	bl	SetCursorPriorityTo1
	mov	r0, #0x3
	bl	GetTextWindowPalette
	mov	r1, #0xd0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x0
	b	.L53
.L45:
	mov	r0, #0x1
.L53:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 MultiMove_Function_Single,.Lfe6-MultiMove_Function_Single
	.align	2, 0
	.type	 MultiMove_Function_ChangeSelection,function
	.thumb_func
MultiMove_Function_ChangeSelection:
	push	{r4, lr}
	ldr	r4, .L65
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L59	@cond_branch
	cmp	r0, #0x1
	beq	.L61	@cond_branch
	b	.L58
.L66:
	.align	2, 0
.L65:
	.word	sMultiMove
.L59:
	bl	UpdateCursorPos
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L58	@cond_branch
	ldr	r1, [r4]
	add	r0, r1, #0x6
	add	r1, r1, #0x7
	bl	GetCursorBoxColumnAndRow
	bl	MultiMove_UpdateSelectedIcons
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x6]
	strb	r0, [r1, #0x4]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x7]
	strb	r0, [r1, #0x5]
	ldr	r0, .L67
	ldr	r0, [r0]
	ldr	r1, .L67+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	CopyWindowToVram8Bit
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	b	.L58
.L68:
	.align	2, 0
.L67:
	.word	gStorage
	.word	0x21f0
.L61:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L64
.L58:
	mov	r0, #0x1
.L64:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 MultiMove_Function_ChangeSelection,.Lfe7-MultiMove_Function_ChangeSelection
	.align	2, 0
	.type	 MultiMove_Function_GrabSelection,function
	.thumb_func
MultiMove_Function_GrabSelection:
	push	{r4, lr}
	ldr	r4, .L81
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	beq	.L72	@cond_branch
	cmp	r0, #0x1
	bgt	.L78	@cond_branch
	cmp	r0, #0
	beq	.L71	@cond_branch
	b	.L70
.L82:
	.align	2, 0
.L81:
	.word	sMultiMove
.L78:
	cmp	r0, #0x2
	beq	.L74	@cond_branch
	b	.L70
.L71:
	bl	MultiMove_GetMonsFromSelection
	bl	MultiMove_RemoveMonsFromBox
	mov	r0, #0x0
	b	.L80
.L72:
	bl	DoMonPlaceChange
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L70	@cond_branch
	mov	r0, #0x3
	bl	StartCursorAnim
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	mov	r0, #0x0
	mov	r2, #0x8
	bl	MultiMove_InitBg
	mov	r0, #0x1
.L80:
	bl	InitMultiMonPlaceChange
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	b	.L70
.L74:
	bl	MultiMove_UpdateBg
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	DoMonPlaceChange
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0
	bne	.L70	@cond_branch
	cmp	r0, #0
	bne	.L70	@cond_branch
	mov	r0, #0x0
	b	.L79
.L70:
	mov	r0, #0x1
.L79:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 MultiMove_Function_GrabSelection,.Lfe8-MultiMove_Function_GrabSelection
	.align	2, 0
	.type	 MultiMove_Function_MoveMons,function
	.thumb_func
MultiMove_Function_MoveMons:
	push	{r4, lr}
	bl	UpdateCursorPos
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	MultiMove_UpdateBg
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0
	bne	.L84	@cond_branch
	cmp	r0, #0
	bne	.L84	@cond_branch
	mov	r0, #0x0
	b	.L86
.L84:
	mov	r0, #0x1
.L86:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 MultiMove_Function_MoveMons,.Lfe9-MultiMove_Function_MoveMons
	.align	2, 0
	.type	 MultiMove_Function_PlaceMons,function
	.thumb_func
MultiMove_Function_PlaceMons:
	push	{r4, lr}
	ldr	r4, .L101
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	beq	.L90	@cond_branch
	cmp	r0, #0x1
	bgt	.L98	@cond_branch
	cmp	r0, #0
	beq	.L89	@cond_branch
	b	.L88
.L102:
	.align	2, 0
.L101:
	.word	sMultiMove
.L98:
	cmp	r0, #0x2
	beq	.L92	@cond_branch
	cmp	r0, #0x3
	beq	.L94	@cond_branch
	b	.L88
.L89:
	bl	MultiMove_SetPlacedMonData
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	mov	r2, #0x8
	bl	MultiMove_InitBg
	mov	r0, #0x0
	bl	InitMultiMonPlaceChange
	b	.L100
.L90:
	bl	DoMonPlaceChange
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L88	@cond_branch
	bl	MultiMove_UpdateBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L88	@cond_branch
	bl	MultiMove_CreatePlacedMonIcons
	mov	r0, #0x2
	bl	StartCursorAnim
	mov	r0, #0x1
	bl	InitMultiMonPlaceChange
	mov	r0, #0x0
	bl	HideBg
	b	.L100
.L92:
	bl	DoMonPlaceChange
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L88	@cond_branch
	mov	r0, #0x0
	bl	StartCursorAnim
	bl	MultiMove_ResetBg
.L100:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	b	.L88
.L94:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L88	@cond_branch
	mov	r0, #0x3
	bl	GetTextWindowPalette
	mov	r1, #0xd0
	mov	r2, #0x20
	bl	LoadPalette
	bl	SetCursorPriorityTo1
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x0
	b	.L99
.L88:
	mov	r0, #0x1
.L99:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 MultiMove_Function_PlaceMons,.Lfe10-MultiMove_Function_PlaceMons
	.align	2, 0
	.globl	MultiMove_TryMoveGroup
	.type	 MultiMove_TryMoveGroup,function
	.thumb_func
MultiMove_TryMoveGroup:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x1
	beq	.L107	@cond_branch
	cmp	r0, #0x1
	bgt	.L115	@cond_branch
	cmp	r0, #0
	beq	.L105	@cond_branch
	b	.L104
.L115:
	cmp	r1, #0x2
	beq	.L109	@cond_branch
	cmp	r1, #0x3
	beq	.L111	@cond_branch
	b	.L104
.L105:
	ldr	r0, .L119
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x9]
	cmp	r0, #0
	beq	.L117	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	b	.L118
.L120:
	.align	2, 0
.L119:
	.word	sMultiMove
.L107:
	ldr	r0, .L121
	ldr	r1, [r0]
	ldrb	r2, [r1, #0x9]
	ldrb	r0, [r1, #0xb]
	add	r0, r2, r0
	cmp	r0, #0x4
	bgt	.L117	@cond_branch
	add	r0, r2, #0x1
	strb	r0, [r1, #0x9]
	mov	r1, #0xfc
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	b	.L118
.L122:
	.align	2, 0
.L121:
	.word	sMultiMove
.L109:
	ldr	r0, .L123
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L117	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	mov	r1, #0x0
.L118:
	mov	r2, #0x6
	bl	MultiMove_InitBg
	b	.L104
.L124:
	.align	2, 0
.L123:
	.word	sMultiMove
.L111:
	ldr	r0, .L125
	ldr	r1, [r0]
	ldrb	r2, [r1, #0x8]
	ldrb	r0, [r1, #0xa]
	add	r0, r2, r0
	cmp	r0, #0x5
	ble	.L112	@cond_branch
.L117:
	mov	r0, #0x0
	b	.L116
.L126:
	.align	2, 0
.L125:
	.word	sMultiMove
.L112:
	add	r0, r2, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, #0xfc
	lsl	r0, r0, #0x8
	mov	r1, #0x0
	mov	r2, #0x6
	bl	MultiMove_InitBg
.L104:
	mov	r0, #0x1
.L116:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 MultiMove_TryMoveGroup,.Lfe11-MultiMove_TryMoveGroup
	.align	2, 0
	.type	 MultiMove_UpdateSelectedIcons,function
	.thumb_func
MultiMove_UpdateSelectedIcons:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L136
	ldr	r2, [r6]
	ldrb	r3, [r2, #0x2]
	ldrb	r5, [r2, #0x6]
	sub	r1, r3, r5
	cmp	r1, #0
	bge	.L128	@cond_branch
	neg	r1, r1
.L128:
	ldrb	r0, [r2, #0x4]
	sub	r0, r3, r0
	cmp	r0, #0
	bge	.L129	@cond_branch
	neg	r0, r0
.L129:
	sub	r0, r1, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x7]
	sub	r3, r1, r0
	cmp	r3, #0
	bge	.L130	@cond_branch
	neg	r3, r3
.L130:
	ldrb	r2, [r2, #0x5]
	sub	r0, r1, r2
	cmp	r0, #0
	bge	.L131	@cond_branch
	neg	r0, r0
.L131:
	sub	r0, r3, r0
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	lsl	r0, r4, #0x10
	asr	r4, r0, #0x10
	cmp	r4, #0
	ble	.L132	@cond_branch
	add	r0, r5, #0
	bl	MultiMove_SelectColumn
.L132:
	cmp	r4, #0
	bge	.L133	@cond_branch
	ldr	r2, [r6]
	ldrb	r0, [r2, #0x4]
	ldrb	r1, [r2, #0x3]
	ldrb	r2, [r2, #0x5]
	bl	MultiMove_DeselectColumn
	ldr	r2, [r6]
	ldrb	r0, [r2, #0x6]
	ldrb	r1, [r2, #0x3]
	ldrb	r2, [r2, #0x5]
	bl	MultiMove_SelectColumn
.L133:
	lsl	r0, r7, #0x10
	asr	r4, r0, #0x10
	cmp	r4, #0
	ble	.L134	@cond_branch
	ldr	r2, [r6]
	ldrb	r0, [r2, #0x7]
	ldrb	r1, [r2, #0x2]
	ldrb	r2, [r2, #0x4]
	bl	MultiMove_SelectRow
.L134:
	cmp	r4, #0
	bge	.L135	@cond_branch
	ldr	r2, [r6]
	ldrb	r0, [r2, #0x5]
	ldrb	r1, [r2, #0x2]
	ldrb	r2, [r2, #0x4]
	bl	MultiMove_DeselectRow
	ldr	r2, [r6]
	ldrb	r0, [r2, #0x7]
	ldrb	r1, [r2, #0x2]
	ldrb	r2, [r2, #0x4]
	bl	MultiMove_SelectRow
.L135:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L137:
	.align	2, 0
.L136:
	.word	sMultiMove
.Lfe12:
	.size	 MultiMove_UpdateSelectedIcons,.Lfe12-MultiMove_UpdateSelectedIcons
	.align	2, 0
	.type	 MultiMove_SelectColumn,function
	.thumb_func
MultiMove_SelectColumn:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r1, r4, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r0, r5, #0
	cmp	r4, r5
	bls	.L142	@cond_branch
	add	r4, r5, #0
	add	r5, r1, #0
	cmp	r0, r5
	bhi	.L141	@cond_branch
.L142:
	add	r1, r4, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	bl	MultiMove_SetIconToBg
	cmp	r4, r5
	bls	.L142	@cond_branch
.L141:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 MultiMove_SelectColumn,.Lfe13-MultiMove_SelectColumn
	.align	2, 0
	.type	 MultiMove_SelectRow,function
	.thumb_func
MultiMove_SelectRow:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r1, r4, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r0, r5, #0
	cmp	r4, r5
	bls	.L149	@cond_branch
	add	r4, r5, #0
	add	r5, r1, #0
	cmp	r0, r5
	bhi	.L148	@cond_branch
.L149:
	add	r0, r4, #0
	add	r1, r0, #0x1
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r1, r6, #0
	bl	MultiMove_SetIconToBg
	cmp	r4, r5
	bls	.L149	@cond_branch
.L148:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 MultiMove_SelectRow,.Lfe14-MultiMove_SelectRow
	.align	2, 0
	.type	 MultiMove_DeselectColumn,function
	.thumb_func
MultiMove_DeselectColumn:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r1, r4, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r0, r5, #0
	cmp	r4, r5
	bls	.L156	@cond_branch
	add	r4, r5, #0
	add	r5, r1, #0
	cmp	r0, r5
	bhi	.L155	@cond_branch
.L156:
	add	r1, r4, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	bl	MultiMove_ClearIconFromBg
	cmp	r4, r5
	bls	.L156	@cond_branch
.L155:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 MultiMove_DeselectColumn,.Lfe15-MultiMove_DeselectColumn
	.align	2, 0
	.type	 MultiMove_DeselectRow,function
	.thumb_func
MultiMove_DeselectRow:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r1, r4, #0
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	add	r0, r5, #0
	cmp	r4, r5
	bls	.L163	@cond_branch
	add	r4, r5, #0
	add	r5, r1, #0
	cmp	r0, r5
	bhi	.L162	@cond_branch
.L163:
	add	r0, r4, #0
	add	r1, r0, #0x1
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	add	r1, r6, #0
	bl	MultiMove_ClearIconFromBg
	cmp	r4, r5
	bls	.L163	@cond_branch
.L162:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 MultiMove_DeselectRow,.Lfe16-MultiMove_DeselectRow
	.align	2, 0
	.type	 MultiMove_SetIconToBg,function
	.thumb_func
MultiMove_SetIconToBg:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r7, r0, r1
	lsl	r4, r7, #0x1
	add	r4, r6, r4
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetCurrentBoxMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetCurrentBoxMonData
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L167	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x1
	bl	GetMonIconPtr
	add	r4, r0, #0
	add	r0, r5, #0
	bl	GetValidMonIconPalIndex
	add	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L168
	ldr	r1, [r1]
	ldr	r2, .L168+0x4
	add	r1, r1, r2
	ldrb	r3, [r1]
	mov	r2, #0x20
	str	r2, [sp]
	str	r2, [sp, #0x4]
	lsl	r1, r6, #0x1
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	str	r1, [sp, #0x8]
	lsl	r1, r7, #0x3
	str	r1, [sp, #0xc]
	str	r2, [sp, #0x10]
	str	r2, [sp, #0x14]
	str	r0, [sp, #0x18]
	add	r0, r3, #0
	add	r1, r4, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlitBitmapRectToWindow4BitTo8Bit
.L167:
	add	sp, sp, #0x1c
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gStorage
	.word	0x21f0
.Lfe17:
	.size	 MultiMove_SetIconToBg,.Lfe17-MultiMove_SetIconToBg
	.align	2, 0
	.type	 MultiMove_ClearIconFromBg,function
	.thumb_func
MultiMove_ClearIconFromBg:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r5, r0, r1
	lsl	r0, r5, #0x1
	add	r0, r4, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x41
	bl	GetCurrentBoxMonData
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L171	@cond_branch
	ldr	r0, .L172
	ldr	r0, [r0]
	ldr	r1, .L172+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r2, r4, #0x1
	add	r2, r2, r4
	lsl	r2, r2, #0x3
	lsl	r3, r5, #0x3
	mov	r1, #0x20
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	bl	FillWindowPixelRect8Bit
.L171:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gStorage
	.word	0x21f0
.Lfe18:
	.size	 MultiMove_ClearIconFromBg,.Lfe18-MultiMove_ClearIconFromBg
	.align	2, 0
	.type	 MultiMove_InitBg,function
	.thumb_func
MultiMove_InitBg:
	ldr	r3, .L175
	ldr	r3, [r3]
	strh	r0, [r3, #0xc]
	strh	r1, [r3, #0xe]
	strh	r2, [r3, #0x10]
	bx	lr
.L176:
	.align	2, 0
.L175:
	.word	sMultiMove
.Lfe19:
	.size	 MultiMove_InitBg,.Lfe19-MultiMove_InitBg
	.align	2, 0
	.type	 MultiMove_UpdateBg,function
	.thumb_func
MultiMove_UpdateBg:
	push	{r4, lr}
	ldr	r4, .L179
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L178	@cond_branch
	ldrh	r1, [r1, #0xc]
	mov	r0, #0x0
	mov	r2, #0x1
	bl	ChangeBgX
	ldr	r0, [r4]
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x0
	mov	r2, #0x1
	bl	ChangeBgY
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x10]
.L178:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x10]
	pop	{r4}
	pop	{r1}
	bx	r1
.L180:
	.align	2, 0
.L179:
	.word	sMultiMove
.Lfe20:
	.size	 MultiMove_UpdateBg,.Lfe20-MultiMove_UpdateBg
	.align	2, 0
	.type	 MultiMove_GetMonsFromSelection,function
	.thumb_func
MultiMove_GetMonsFromSelection:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L196
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x4]
	ldrb	r2, [r1, #0x2]
	cmp	r0, r2
	bls	.L182	@cond_branch
	add	r0, r2, #0
.L182:
	strb	r0, [r1, #0x8]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x5]
	ldrb	r2, [r1, #0x3]
	cmp	r0, r2
	bls	.L183	@cond_branch
	add	r0, r2, #0
.L183:
	strb	r0, [r1, #0x9]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x4]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L184	@cond_branch
	neg	r0, r0
.L184:
	add	r0, r0, #0x1
	strb	r0, [r2, #0xa]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x5]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L185	@cond_branch
	neg	r0, r0
.L185:
	add	r0, r0, #0x1
	strb	r0, [r2, #0xb]
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r6, #0x0
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x8]
	ldrb	r1, [r0, #0xa]
	add	r2, r2, r1
	mov	r8, r2
	ldrb	r1, [r0, #0x9]
	ldrb	r0, [r0, #0xb]
	add	r0, r0, r1
	mov	r9, r0
	add	r2, r1, #0
	cmp	r2, r9
	bge	.L187	@cond_branch
.L189:
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldr	r3, .L196
	ldr	r1, [r3]
	lsl	r0, r0, #0x1
	ldrb	r3, [r1, #0x8]
	add	r0, r0, r3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r4, [r1, #0x8]
	add	r7, r2, #0x1
	cmp	r4, r8
	bge	.L188	@cond_branch
	mov	r0, r8
	sub	r4, r0, r4
.L193:
	mov	r0, sl
	add	r1, r5, #0
	bl	GetBoxedMonPtr
	add	r1, r0, #0
	ldr	r2, .L196
	ldr	r0, [r2]
	lsl	r2, r6, #0x2
	add	r2, r2, r6
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	add	r0, r0, #0x14
	mov	r2, #0x50
	bl	memcpy
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L193	@cond_branch
.L188:
	add	r2, r7, #0
	cmp	r2, r9
	blt	.L189	@cond_branch
.L187:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	sMultiMove
.Lfe21:
	.size	 MultiMove_GetMonsFromSelection,.Lfe21-MultiMove_GetMonsFromSelection
	.align	2, 0
	.type	 MultiMove_RemoveMonsFromBox,function
	.thumb_func
MultiMove_RemoveMonsFromBox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L209
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x8]
	ldrb	r1, [r0, #0xa]
	add	r7, r2, r1
	ldrb	r1, [r0, #0x9]
	ldrb	r0, [r0, #0xb]
	add	r1, r1, r0
	mov	r9, r1
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x9]
	cmp	r2, r9
	bge	.L200	@cond_branch
.L202:
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldr	r1, .L209
	ldr	r1, [r1]
	lsl	r0, r0, #0x1
	ldrb	r3, [r1, #0x8]
	add	r0, r0, r3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r4, [r1, #0x8]
	add	r6, r2, #0x1
	cmp	r4, r7
	bge	.L201	@cond_branch
	sub	r4, r7, r4
.L206:
	add	r0, r5, #0
	bl	DestroyBoxMonIconAtPosition
	mov	r0, r8
	add	r1, r5, #0
	bl	ZeroBoxMonAt
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L206	@cond_branch
.L201:
	add	r2, r6, #0
	cmp	r2, r9
	blt	.L202	@cond_branch
.L200:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	sMultiMove
.Lfe22:
	.size	 MultiMove_RemoveMonsFromBox,.Lfe22-MultiMove_RemoveMonsFromBox
	.align	2, 0
	.type	 MultiMove_CreatePlacedMonIcons,function
	.thumb_func
MultiMove_CreatePlacedMonIcons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L223
	ldr	r0, [r0]
	ldrb	r2, [r0, #0x8]
	ldrb	r1, [r0, #0xa]
	add	r2, r2, r1
	mov	r8, r2
	ldrb	r1, [r0, #0x9]
	ldrb	r0, [r0, #0xb]
	add	r0, r0, r1
	mov	sl, r0
	mov	r6, #0x0
	add	r2, r1, #0
	cmp	r2, sl
	bge	.L213	@cond_branch
.L215:
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldr	r3, .L223
	ldr	r1, [r3]
	lsl	r0, r0, #0x1
	ldrb	r4, [r1, #0x8]
	add	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r4, [r1, #0x8]
	add	r7, r2, #0x1
	cmp	r4, r8
	bge	.L214	@cond_branch
	mov	r9, r3
	mov	r0, r8
	sub	r4, r0, r4
.L219:
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x4
	add	r1, r1, #0x14
	mov	r2, r9
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r1, #0x5
	bl	GetBoxMonData
	cmp	r0, #0
	beq	.L220	@cond_branch
	add	r0, r5, #0
	bl	CreateBoxMonIconAtPos
.L220:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L219	@cond_branch
.L214:
	add	r2, r7, #0
	cmp	r2, sl
	blt	.L215	@cond_branch
.L213:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L224:
	.align	2, 0
.L223:
	.word	sMultiMove
.Lfe23:
	.size	 MultiMove_CreatePlacedMonIcons,.Lfe23-MultiMove_CreatePlacedMonIcons
	.align	2, 0
	.type	 MultiMove_SetPlacedMonData,function
	.thumb_func
MultiMove_SetPlacedMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, .L237
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x8]
	ldrb	r1, [r0, #0xa]
	add	r2, r2, r1
	mov	sl, r2
	ldrb	r1, [r0, #0x9]
	ldrb	r0, [r0, #0xb]
	add	r1, r1, r0
	str	r1, [sp]
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r7, #0x0
	ldr	r0, [r4]
	ldrb	r3, [r0, #0x9]
	ldr	r0, [sp]
	cmp	r3, r0
	bge	.L227	@cond_branch
.L229:
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	ldr	r2, .L237
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	ldrb	r4, [r1, #0x8]
	add	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r5, [r1, #0x8]
	add	r3, r3, #0x1
	mov	r9, r3
	cmp	r5, sl
	bge	.L228	@cond_branch
	mov	r8, r2
	mov	r0, sl
	sub	r5, r0, r5
.L233:
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x4
	add	r4, r0, #0
	add	r4, r4, #0x14
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	mov	r1, #0x5
	bl	GetBoxMonData
	cmp	r0, #0
	beq	.L234	@cond_branch
	mov	r0, r8
	ldr	r2, [r0]
	add	r2, r2, r4
	ldr	r0, [sp, #0x4]
	add	r1, r6, #0
	bl	SetBoxMonAt
.L234:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L233	@cond_branch
.L228:
	mov	r3, r9
	ldr	r1, [sp]
	cmp	r3, r1
	blt	.L229	@cond_branch
.L227:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L238:
	.align	2, 0
.L237:
	.word	sMultiMove
.Lfe24:
	.size	 MultiMove_SetPlacedMonData,.Lfe24-MultiMove_SetPlacedMonData
	.align	2, 0
	.type	 MultiMove_ResetBg,function
	.thumb_func
MultiMove_ResetBg:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x0
	mov	r1, #0x4
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x8
	mov	r1, #0x80
	bl	ClearGpuRegBits
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 MultiMove_ResetBg,.Lfe25-MultiMove_ResetBg
	.align	2, 0
	.globl	MultiMove_GetOriginPosition
	.type	 MultiMove_GetOriginPosition,function
	.thumb_func
MultiMove_GetOriginPosition:
	ldr	r0, .L241
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrb	r2, [r2, #0x2]
	add	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.L242:
	.align	2, 0
.L241:
	.word	sMultiMove
.Lfe26:
	.size	 MultiMove_GetOriginPosition,.Lfe26-MultiMove_GetOriginPosition
	.align	2, 0
	.globl	MultiMove_CanPlaceSelection
	.type	 MultiMove_CanPlaceSelection,function
	.thumb_func
MultiMove_CanPlaceSelection:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L256
	ldr	r0, [r0]
	ldrb	r2, [r0, #0x8]
	ldrb	r1, [r0, #0xa]
	add	r2, r2, r1
	mov	r9, r2
	ldrb	r1, [r0, #0x9]
	ldrb	r0, [r0, #0xb]
	add	r0, r1, r0
	str	r0, [sp]
	mov	r7, #0x0
	add	r6, r1, #0
	cmp	r6, r0
	bge	.L245	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	mov	r8, r0
.L247:
	ldr	r2, .L256
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x8]
	add	r0, r0, r8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r4, [r1, #0x8]
	cmp	r4, r9
	bge	.L246	@cond_branch
	mov	sl, r2
.L251:
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x4
	add	r1, r1, #0x14
	mov	r2, sl
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r1, #0x5
	bl	GetBoxMonData
	cmp	r0, #0
	beq	.L252	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetCurrentBoxMonData
	cmp	r0, #0
	beq	.L252	@cond_branch
	mov	r0, #0x0
	b	.L255
.L257:
	.align	2, 0
.L256:
	.word	sMultiMove
.L252:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x1
	cmp	r4, r9
	blt	.L251	@cond_branch
.L246:
	mov	r0, #0x6
	add	r8, r8, r0
	add	r6, r6, #0x1
	ldr	r2, [sp]
	cmp	r6, r2
	blt	.L247	@cond_branch
.L245:
	mov	r0, #0x1
.L255:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 MultiMove_CanPlaceSelection,.Lfe27-MultiMove_CanPlaceSelection
	.section .rodata
	.align	2, 0
	.type	 sItemInfoFrame_Gfx,object
sItemInfoFrame_Gfx:
	.word	-0x44444445
	.word	-0x66666667
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	0x11111111
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	0x4abbbbbb
	.word	-0x54866667
	.word	-0x486eeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x46eeeeef
	.word	-0x486eeeef
	.word	-0x54866667
	.word	-0x55444445
	.size	 sItemInfoFrame_Gfx,128
	.align	2, 0
	.type	 sOamData_ItemIcon,object
	.size	 sOamData_ItemIcon,8
sOamData_ItemIcon:
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sAffineAnim_ItemIcon_Small,object
sAffineAnim_ItemIcon_Small:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemIcon_Small,16
	.align	2, 0
	.type	 sAffineAnim_ItemIcon_Appear,object
sAffineAnim_ItemIcon_Appear:
	.short	0x58
	.short	0x58
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x5
	.short	0x5
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemIcon_Appear,24
	.align	2, 0
	.type	 sAffineAnim_ItemIcon_Disappear,object
sAffineAnim_ItemIcon_Disappear:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemIcon_Disappear,24
	.align	2, 0
	.type	 sAffineAnim_ItemIcon_PickUp,object
sAffineAnim_ItemIcon_PickUp:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xa
	.short	0xa
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemIcon_PickUp,32
	.align	2, 0
	.type	 sAffineAnim_ItemIcon_PutDown,object
sAffineAnim_ItemIcon_PutDown:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0xa
	.short	-0xa
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemIcon_PutDown,32
	.align	2, 0
	.type	 sAffineAnim_ItemIcon_PutAway,object
sAffineAnim_ItemIcon_PutAway:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemIcon_PutAway,24
	.align	2, 0
	.type	 sAffineAnim_ItemIcon_Large,object
sAffineAnim_ItemIcon_Large:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_ItemIcon_Large,16
	.align	2, 0
	.type	 sAffineAnims_ItemIcon,object
sAffineAnims_ItemIcon:
	.word	sAffineAnim_ItemIcon_Small
	.word	sAffineAnim_ItemIcon_Appear
	.word	sAffineAnim_ItemIcon_Disappear
	.word	sAffineAnim_ItemIcon_PickUp
	.word	sAffineAnim_ItemIcon_PutDown
	.word	sAffineAnim_ItemIcon_PutAway
	.word	sAffineAnim_ItemIcon_Large
	.size	 sAffineAnims_ItemIcon,28
	.align	2, 0
	.type	 sSpriteTemplate_ItemIcon,object
	.size	 sSpriteTemplate_ItemIcon,24
sSpriteTemplate_ItemIcon:
	.short	0x7
	.short	0xdacb
	.word	sOamData_ItemIcon
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_ItemIcon
	.word	SpriteCallbackDummy

	.lcomm	sItemIconGfxBuffer.84,388
.text
	.align	2, 0
	.globl	CreateItemIconSprites
	.type	 CreateItemIconSprites,function
	.thumb_func
CreateItemIconSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r3, .L265
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L259	@cond_branch
	ldr	r0, .L265+0x4
	str	r0, [sp, #0x18]
	ldr	r1, .L265+0x8
	add	r2, sp, #0x18
	ldr	r0, [r2, #0x4]
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	str	r0, [r2, #0x4]
	mov	r1, sp
	ldr	r0, .L265+0xc
	ldmia	r0!, {r4, r5, r6}
	stmia	r1!, {r4, r5, r6}
	ldmia	r0!, {r4, r5, r6}
	stmia	r1!, {r4, r5, r6}
	mov	r7, #0x0
	mov	r9, r2
	mov	r8, r3
	mov	r0, #0x0
	mov	sl, r0
.L263:
	add	r6, r7, #0x7
	lsl	r1, r6, #0x10
	mov	r2, r9
	ldrh	r0, [r2, #0x4]
	orr	r0, r0, r1
	str	r0, [r2, #0x4]
	mov	r0, r9
	bl	LoadCompressedSpriteSheet
	mov	r4, r9
	ldrh	r0, [r4, #0x6]
	bl	GetSpriteTileStartByTag
	mov	r5, r8
	ldr	r1, [r5]
	lsl	r5, r7, #0x4
	ldr	r2, .L265+0x10
	add	r1, r1, r2
	add	r1, r1, r5
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xb
	ldr	r4, .L265+0x14
	add	r0, r0, r4
	str	r0, [r1]
	ldr	r0, .L265+0x18
	add	r4, r7, r0
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	bl	AllocSpritePalette
	mov	r2, r8
	ldr	r1, [r2]
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L265+0x1c
	add	r1, r1, r2
	strh	r0, [r1]
	ldrh	r0, [r1]
	lsl	r0, r0, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	strh	r0, [r1]
	mov	r0, sp
	strh	r6, [r0]
	strh	r4, [r0, #0x2]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0xb
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, r8
	ldr	r2, [r4]
	ldr	r6, .L265+0x20
	add	r2, r2, r6
	add	r2, r2, r5
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L265+0x24
	add	r1, r1, r0
	str	r1, [r2]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, r5
	mov	r1, #0x88
	lsl	r1, r1, #0x6
	add	r0, r0, r1
	mov	r2, sl
	strb	r2, [r0]
	add	r7, r7, #0x1
	cmp	r7, #0x2
	ble	.L263	@cond_branch
.L259:
	ldr	r0, .L265
	ldr	r0, [r0]
	ldr	r4, .L265+0x28
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0]
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	gStorage
	.word	sItemIconGfxBuffer.84
	.word	-0x10000
	.word	sSpriteTemplate_ItemIcon
	.word	0x21f8
	.word	0x6010000
	.word	-0x2535
	.word	0x21fc
	.word	0x21f4
	.word	gSprites
	.word	0x2224
.Lfe28:
	.size	 CreateItemIconSprites,.Lfe28-CreateItemIconSprites
	.align	2, 0
	.globl	TryLoadItemIconAtPos
	.type	 TryLoadItemIconAtPos,function
	.thumb_func
TryLoadItemIconAtPos:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r0, .L279
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L267	@cond_branch
	mov	r0, r8
	add	r1, r7, #0
	bl	IsItemIconAtPosition
	cmp	r0, #0
	bne	.L267	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L271	@cond_branch
	cmp	r0, #0x1
	beq	.L273	@cond_branch
	b	.L267
.L280:
	.align	2, 0
.L279:
	.word	gStorage
.L271:
	add	r0, r7, #0
	mov	r1, #0x5
	bl	GetCurrentBoxMonData
	cmp	r0, #0
	beq	.L267	@cond_branch
	add	r0, r7, #0
	mov	r1, #0xc
	bl	GetCurrentBoxMonData
	b	.L278
.L273:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L281
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x5
	bl	GetMonData
	cmp	r0, #0
	beq	.L267	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
.L278:
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L267	@cond_branch
	add	r0, r4, #0
	bl	GetItemIconPic
	add	r6, r0, #0
	add	r0, r4, #0
	bl	GetItemIconPalette
	add	r5, r0, #0
	bl	GetNewItemIconIdx
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, r8
	add	r2, r7, #0
	bl	SetItemIconPosition
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	LoadItemIconGfx
	add	r0, r4, #0
	mov	r1, #0x1
	bl	SetItemIconAffineAnim
	add	r0, r4, #0
	mov	r1, #0x1
	bl	SetItemIconActive
.L267:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L282:
	.align	2, 0
.L281:
	.word	gPlayerParty
.Lfe29:
	.size	 TryLoadItemIconAtPos,.Lfe29-TryLoadItemIconAtPos
	.align	2, 0
	.globl	TryHideItemIconAtPos
	.type	 TryHideItemIconAtPos,function
	.thumb_func
TryHideItemIconAtPos:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L285
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L283	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetItemIconIdxByPosition
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x2
	bl	SetItemIconAffineAnim
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r6, #0
	add	r3, r5, #0
	bl	SetItemIconCallback
.L283:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	gStorage
.Lfe30:
	.size	 TryHideItemIconAtPos,.Lfe30-TryHideItemIconAtPos
	.align	2, 0
	.globl	Item_FromMonToMoving
	.type	 Item_FromMonToMoving,function
	.thumb_func
Item_FromMonToMoving:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r7, r5, #0
	ldr	r0, .L291
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L287	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetItemIconIdxByPosition
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x0
	mov	r0, sp
	strh	r1, [r0]
	add	r0, r4, #0
	mov	r1, #0x3
	bl	SetItemIconAffineAnim
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r6, #0
	add	r3, r5, #0
	bl	SetItemIconCallback
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	SetItemIconPosition
	cmp	r6, #0
	bne	.L289	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xc
	mov	r2, sp
	bl	SetCurrentBoxMonData
	add	r0, r5, #0
	mov	r1, #0x1
	bl	SetBoxMonIconObjMode
	b	.L290
.L292:
	.align	2, 0
.L291:
	.word	gStorage
.L289:
	mov	r0, #0x64
	mul	r0, r0, r7
	ldr	r1, .L293
	add	r0, r0, r1
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	add	r0, r7, #0
	mov	r1, #0x1
	bl	SetPartyMonIconObjMode
.L290:
	ldr	r0, .L293+0x4
	ldr	r0, [r0]
	ldr	r2, .L293+0x8
	add	r1, r0, r2
	ldrh	r1, [r1]
	ldr	r2, .L293+0xc
	add	r0, r0, r2
	strh	r1, [r0]
.L287:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gPlayerParty
	.word	gStorage
	.word	0xce2
	.word	0x2224
.Lfe31:
	.size	 Item_FromMonToMoving,.Lfe31-Item_FromMonToMoving
	.align	2, 0
	.globl	InitItemIconInCursor
	.type	 InitItemIconInCursor,function
	.thumb_func
InitItemIconInCursor:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r5, #0
	bl	GetItemIconPic
	mov	r8, r0
	add	r0, r5, #0
	bl	GetItemIconPalette
	add	r6, r0, #0
	bl	GetNewItemIconIdx
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, r8
	add	r2, r6, #0
	bl	LoadItemIconGfx
	add	r0, r4, #0
	mov	r1, #0x6
	bl	SetItemIconAffineAnim
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	SetItemIconCallback
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	SetItemIconPosition
	add	r0, r4, #0
	mov	r1, #0x1
	bl	SetItemIconActive
	ldr	r0, .L296
	ldr	r0, [r0]
	ldr	r1, .L296+0x4
	add	r0, r0, r1
	strh	r5, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L297:
	.align	2, 0
.L296:
	.word	gStorage
	.word	0x2224
.Lfe32:
	.size	 InitItemIconInCursor,.Lfe32-InitItemIconInCursor
	.align	2, 0
	.globl	Item_SwitchMonsWithMoving
	.type	 Item_SwitchMonsWithMoving,function
	.thumb_func
Item_SwitchMonsWithMoving:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r0, .L303
	mov	r8, r0
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L298	@cond_branch
	mov	r0, r9
	add	r1, r7, #0
	bl	GetItemIconIdxByPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x3
	bl	SetItemIconAffineAnim
	add	r0, r4, #0
	mov	r1, #0x3
	mov	r2, #0x2
	mov	r3, #0x0
	bl	SetItemIconCallback
	mov	r1, r9
	cmp	r1, #0
	bne	.L300	@cond_branch
	add	r0, r7, #0
	mov	r1, #0xc
	bl	GetCurrentBoxMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r0, r8
	ldr	r2, [r0]
	ldr	r4, .L303+0x4
	add	r2, r2, r4
	add	r0, r7, #0
	mov	r1, #0xc
	bl	SetCurrentBoxMonData
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	b	.L302
.L304:
	.align	2, 0
.L303:
	.word	gStorage
	.word	0x2224
.L300:
	mov	r0, #0x64
	mov	r4, r7
	mul	r4, r4, r0
	ldr	r0, .L305
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r0, r8
	ldr	r2, [r0]
	ldr	r5, .L305+0x4
	add	r2, r2, r5
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r5
.L302:
	strh	r6, [r0]
	mov	r0, #0x2
	mov	r1, #0x0
	bl	GetItemIconIdxByPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x4
	bl	SetItemIconAffineAnim
	add	r0, r4, #0
	mov	r1, #0x4
	mov	r2, r9
	add	r3, r7, #0
	bl	SetItemIconCallback
.L298:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gPlayerParty
	.word	0x2224
.Lfe33:
	.size	 Item_SwitchMonsWithMoving,.Lfe33-Item_SwitchMonsWithMoving
	.align	2, 0
	.globl	Item_GiveMovingToMon
	.type	 Item_GiveMovingToMon,function
	.thumb_func
Item_GiveMovingToMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r8, r5
	ldr	r6, .L311
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L307	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x0
	bl	GetItemIconIdxByPosition
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x4
	bl	SetItemIconAffineAnim
	add	r0, r4, #0
	mov	r1, #0x2
	add	r2, r7, #0
	add	r3, r5, #0
	bl	SetItemIconCallback
	cmp	r7, #0
	bne	.L309	@cond_branch
	ldr	r2, [r6]
	ldr	r0, .L311+0x4
	add	r2, r2, r0
	add	r0, r5, #0
	mov	r1, #0xc
	bl	SetCurrentBoxMonData
	add	r0, r5, #0
	mov	r1, #0x0
	bl	SetBoxMonIconObjMode
	b	.L307
.L312:
	.align	2, 0
.L311:
	.word	gStorage
	.word	0x2224
.L309:
	mov	r0, #0x64
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r1, .L313
	add	r0, r0, r1
	ldr	r2, [r6]
	ldr	r1, .L313+0x4
	add	r2, r2, r1
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, r8
	mov	r1, #0x0
	bl	SetPartyMonIconObjMode
.L307:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gPlayerParty
	.word	0x2224
.Lfe34:
	.size	 Item_GiveMovingToMon,.Lfe34-Item_GiveMovingToMon
	.align	2, 0
	.globl	Item_TakeMons
	.type	 Item_TakeMons,function
	.thumb_func
Item_TakeMons:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r7, r5, #0
	ldr	r0, .L319
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L315	@cond_branch
	mov	r1, #0x0
	mov	r0, sp
	strh	r1, [r0]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetItemIconIdxByPosition
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x2
	bl	SetItemIconAffineAnim
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r6, #0
	add	r3, r5, #0
	bl	SetItemIconCallback
	cmp	r6, #0
	bne	.L317	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xc
	mov	r2, sp
	bl	SetCurrentBoxMonData
	add	r0, r5, #0
	mov	r1, #0x1
	bl	SetBoxMonIconObjMode
	b	.L315
.L320:
	.align	2, 0
.L319:
	.word	gStorage
.L317:
	mov	r0, #0x64
	mul	r0, r0, r7
	ldr	r1, .L321
	add	r0, r0, r1
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	add	r0, r7, #0
	mov	r1, #0x1
	bl	SetPartyMonIconObjMode
.L315:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L322:
	.align	2, 0
.L321:
	.word	gPlayerParty
.Lfe35:
	.size	 Item_TakeMons,.Lfe35-Item_TakeMons
	.align	2, 0
	.globl	MoveItemFromCursorToBag
	.type	 MoveItemFromCursorToBag,function
	.thumb_func
MoveItemFromCursorToBag:
	push	{r4, lr}
	ldr	r0, .L325
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L324	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x0
	bl	GetItemIconIdxByPosition
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x5
	bl	SetItemIconAffineAnim
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x2
	mov	r3, #0x0
	bl	SetItemIconCallback
.L324:
	pop	{r4}
	pop	{r0}
	bx	r0
.L326:
	.align	2, 0
.L325:
	.word	gStorage
.Lfe36:
	.size	 MoveItemFromCursorToBag,.Lfe36-MoveItemFromCursorToBag
	.align	2, 0
	.globl	MoveHeldItemWithPartyMenu
	.type	 MoveHeldItemWithPartyMenu,function
	.thumb_func
MoveHeldItemWithPartyMenu:
	push	{r4, lr}
	ldr	r0, .L335
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x3
	bne	.L327	@cond_branch
	mov	r4, #0x0
.L332:
	ldr	r0, .L335
	ldr	r1, [r0]
	lsl	r0, r4, #0x4
	add	r1, r1, r0
	mov	r2, #0x88
	lsl	r2, r2, #0x6
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L331	@cond_branch
	sub	r2, r2, #0x2
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L331	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x7
	mov	r2, #0x2
	mov	r3, #0x0
	bl	SetItemIconCallback
.L331:
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L332	@cond_branch
.L327:
	pop	{r4}
	pop	{r0}
	bx	r0
.L336:
	.align	2, 0
.L335:
	.word	gStorage
.Lfe37:
	.size	 MoveHeldItemWithPartyMenu,.Lfe37-MoveHeldItemWithPartyMenu
	.align	2, 0
	.globl	IsItemIconAnimActive
	.type	 IsItemIconAnimActive,function
	.thumb_func
IsItemIconAnimActive:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r0, .L348
	ldr	r0, [r0]
	ldr	r1, .L348+0x4
	add	r4, r0, r1
	add	r3, r0, #0
.L341:
	mov	r1, #0x88
	lsl	r1, r1, #0x6
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L340	@cond_branch
	ldr	r2, [r4]
	add	r0, r2, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x28
	and	r0, r0, r1
	cmp	r0, #0x8
	beq	.L347	@cond_branch
	ldr	r1, [r2, #0x1c]
	ldr	r0, .L348+0x8
	cmp	r1, r0
	beq	.L340	@cond_branch
	ldr	r0, .L348+0xc
	cmp	r1, r0
	beq	.L340	@cond_branch
.L347:
	mov	r0, #0x1
	b	.L346
.L349:
	.align	2, 0
.L348:
	.word	gStorage
	.word	0x21f4
	.word	SpriteCallbackDummy
	.word	SpriteCB_ItemIcon_SetPosToCursor
.L340:
	add	r4, r4, #0x10
	add	r3, r3, #0x10
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L341	@cond_branch
	mov	r0, #0x0
.L346:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 IsItemIconAnimActive,.Lfe38-IsItemIconAnimActive
	.align	2, 0
	.globl	IsActiveItemMoving
	.type	 IsActiveItemMoving,function
	.thumb_func
IsActiveItemMoving:
	push	{lr}
	ldr	r0, .L359
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x3
	bne	.L351	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L359+0x4
	add	r1, r1, r0
.L355:
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L354	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, #0x2
	bne	.L354	@cond_branch
	mov	r0, #0x1
	b	.L358
.L360:
	.align	2, 0
.L359:
	.word	gStorage
	.word	0x21fe
.L354:
	add	r1, r1, #0x10
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L355	@cond_branch
.L351:
	mov	r0, #0x0
.L358:
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 IsActiveItemMoving,.Lfe39-IsActiveItemMoving
	.align	2, 0
	.globl	GetMovingItemName
	.type	 GetMovingItemName,function
	.thumb_func
GetMovingItemName:
	push	{lr}
	ldr	r0, .L362
	ldr	r0, [r0]
	ldr	r1, .L362+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	ItemId_GetName
	pop	{r1}
	bx	r1
.L363:
	.align	2, 0
.L362:
	.word	gStorage
	.word	0x2224
.Lfe40:
	.size	 GetMovingItemName,.Lfe40-GetMovingItemName
	.align	2, 0
	.globl	GetMovingItem
	.type	 GetMovingItem,function
	.thumb_func
GetMovingItem:
	ldr	r0, .L365
	ldr	r0, [r0]
	ldr	r1, .L365+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	bx	lr
.L366:
	.align	2, 0
.L365:
	.word	gStorage
	.word	0x2224
.Lfe41:
	.size	 GetMovingItem,.Lfe41-GetMovingItem
	.align	2, 0
	.type	 GetNewItemIconIdx,function
	.thumb_func
GetNewItemIconIdx:
	push	{r4, r5, lr}
	mov	r2, #0x0
	ldr	r5, .L375
	mov	r3, #0x88
	lsl	r3, r3, #0x6
	mov	r4, #0x1
.L371:
	ldr	r0, [r5]
	lsl	r1, r2, #0x4
	add	r0, r0, r1
	add	r1, r0, r3
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L370	@cond_branch
	strb	r4, [r1]
	add	r0, r2, #0
	b	.L374
.L376:
	.align	2, 0
.L375:
	.word	gStorage
.L370:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x2
	bls	.L371	@cond_branch
	mov	r0, #0x3
.L374:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 GetNewItemIconIdx,.Lfe42-GetNewItemIconIdx
	.align	2, 0
	.type	 IsItemIconAtPosition,function
	.thumb_func
IsItemIconAtPosition:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x0
	ldr	r0, .L385
	ldr	r2, [r0]
.L381:
	mov	r5, #0x88
	lsl	r5, r5, #0x6
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L380	@cond_branch
	sub	r5, r5, #0x2
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L380	@cond_branch
	add	r5, r5, #0x1
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r0, r1
	bne	.L380	@cond_branch
	mov	r0, #0x1
	b	.L384
.L386:
	.align	2, 0
.L385:
	.word	gStorage
.L380:
	add	r2, r2, #0x10
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L381	@cond_branch
	mov	r0, #0x0
.L384:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 IsItemIconAtPosition,.Lfe43-IsItemIconAtPosition
	.align	2, 0
	.type	 GetItemIconIdxByPosition,function
	.thumb_func
GetItemIconIdxByPosition:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r3, #0x0
	ldr	r0, .L395
	ldr	r1, [r0]
.L391:
	lsl	r0, r3, #0x4
	add	r2, r1, r0
	mov	r6, #0x88
	lsl	r6, r6, #0x6
	add	r0, r2, r6
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L390	@cond_branch
	sub	r6, r6, #0x2
	add	r0, r2, r6
	ldrb	r0, [r0]
	cmp	r0, r5
	bne	.L390	@cond_branch
	add	r6, r6, #0x1
	add	r0, r2, r6
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L390	@cond_branch
	add	r0, r3, #0
	b	.L394
.L396:
	.align	2, 0
.L395:
	.word	gStorage
.L390:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x2
	bls	.L391	@cond_branch
	mov	r0, #0x3
.L394:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 GetItemIconIdxByPosition,.Lfe44-GetItemIconIdxByPosition
	.align	2, 0
	.type	 GetItemIconIdxBySprite,function
	.thumb_func
GetItemIconIdxBySprite:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r2, #0x0
	ldr	r0, .L405
	ldr	r3, [r0]
	ldr	r0, .L405+0x4
	add	r4, r3, r0
	mov	r6, #0x88
	lsl	r6, r6, #0x6
.L401:
	lsl	r1, r2, #0x4
	add	r0, r3, r1
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L400	@cond_branch
	add	r0, r4, r1
	ldr	r0, [r0]
	cmp	r0, r5
	bne	.L400	@cond_branch
	add	r0, r2, #0
	b	.L404
.L406:
	.align	2, 0
.L405:
	.word	gStorage
	.word	0x21f4
.L400:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x2
	bls	.L401	@cond_branch
	mov	r0, #0x3
.L404:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 GetItemIconIdxBySprite,.Lfe45-GetItemIconIdxBySprite
	.align	2, 0
	.type	 SetItemIconPosition,function
	.thumb_func
SetItemIconPosition:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	cmp	r5, #0x2
	bhi	.L407	@cond_branch
	cmp	r1, #0
	beq	.L410	@cond_branch
	cmp	r1, #0x1
	beq	.L411	@cond_branch
	ldr	r4, .L416
	lsl	r3, r5, #0x4
	b	.L409
.L417:
	.align	2, 0
.L416:
	.word	gStorage
.L410:
	add	r0, r7, #0
	mov	r1, #0x6
	bl	__umodsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r7, #0
	mov	r1, #0x6
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r6, .L418
	ldr	r2, [r6]
	lsl	r5, r5, #0x4
	ldr	r1, .L418+0x4
	add	r2, r2, r1
	add	r2, r2, r5
	ldr	r3, [r2]
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, #0x70
	strh	r1, [r3, #0x20]
	ldr	r3, [r2]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, #0x38
	strh	r1, [r3, #0x22]
	ldr	r2, [r2]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	add	r4, r6, #0
	add	r3, r5, #0
	b	.L409
.L419:
	.align	2, 0
.L418:
	.word	gStorage
	.word	0x21f4
.L411:
	cmp	r7, #0
	bne	.L412	@cond_branch
	ldr	r4, .L420
	ldr	r0, [r4]
	lsl	r3, r5, #0x4
	ldr	r1, .L420+0x4
	add	r0, r0, r1
	add	r0, r0, r3
	ldr	r2, [r0]
	mov	r1, #0x74
	strh	r1, [r2, #0x20]
	ldr	r1, [r0]
	mov	r0, #0x4c
	strh	r0, [r1, #0x22]
	b	.L413
.L421:
	.align	2, 0
.L420:
	.word	gStorage
	.word	0x21f4
.L412:
	ldr	r4, .L422
	ldr	r0, [r4]
	lsl	r3, r5, #0x4
	ldr	r1, .L422+0x4
	add	r0, r0, r1
	add	r0, r0, r3
	ldr	r2, [r0]
	mov	r1, #0xa4
	strh	r1, [r2, #0x20]
	ldr	r2, [r0]
	sub	r1, r7, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, #0x1c
	strh	r0, [r2, #0x22]
.L413:
	ldr	r0, [r4]
	ldr	r1, .L422+0x4
	add	r0, r0, r1
	add	r0, r0, r3
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
.L409:
	ldr	r0, [r4]
	add	r0, r0, r3
	ldr	r1, .L422+0x8
	add	r0, r0, r1
	mov	r1, r8
	strb	r1, [r0]
	ldr	r0, [r4]
	add	r0, r0, r3
	ldr	r1, .L422+0xc
	add	r0, r0, r1
	strb	r7, [r0]
.L407:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	gStorage
	.word	0x21f4
	.word	0x21fe
	.word	0x21ff
.Lfe46:
	.size	 SetItemIconPosition,.Lfe46-SetItemIconPosition
	.align	2, 0
	.type	 LoadItemIconGfx,function
	.thumb_func
LoadItemIconGfx:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r1
	mov	r9, r2
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x2
	bhi	.L424	@cond_branch
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r4, .L431
	ldr	r1, [r4]
	ldr	r6, .L431+0x4
	add	r1, r1, r6
	ldr	r2, .L431+0x8
	mov	r0, sp
	bl	CpuFastSet
	ldr	r1, [r4]
	ldr	r5, .L431+0xc
	add	r1, r1, r5
	mov	r0, r8
	bl	LZ77UnCompWram
	lsl	r7, r7, #0x4
	mov	r8, r7
	add	r7, r4, #0
	mov	r4, #0x2
.L429:
	ldr	r1, [r7]
	add	r0, r1, r5
	add	r1, r1, r6
	mov	r2, #0x18
	bl	CpuFastSet
	add	r6, r6, #0x80
	add	r5, r5, #0x60
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L429	@cond_branch
	ldr	r5, .L431
	ldr	r1, [r5]
	ldr	r4, .L431+0x4
	add	r0, r1, r4
	ldr	r2, .L431+0x10
	add	r1, r1, r2
	add	r1, r1, r8
	ldr	r1, [r1]
	mov	r2, #0x80
	bl	CpuFastSet
	ldr	r1, [r5]
	add	r1, r1, r4
	mov	r0, r9
	bl	LZ77UnCompWram
	ldr	r0, [r5]
	add	r4, r0, r4
	add	r0, r0, r8
	ldr	r1, .L431+0x14
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
.L424:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L432:
	.align	2, 0
.L431:
	.word	gStorage
	.word	0x42bc
	.word	0x1000080
	.word	0x22bc
	.word	0x21f8
	.word	0x21fc
.Lfe47:
	.size	 LoadItemIconGfx,.Lfe47-LoadItemIconGfx
	.align	2, 0
	.type	 SetItemIconAffineAnim,function
	.thumb_func
SetItemIconAffineAnim:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	cmp	r2, #0x2
	bhi	.L433	@cond_branch
	ldr	r0, .L435
	ldr	r0, [r0]
	lsl	r1, r2, #0x4
	ldr	r2, .L435+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r3, #0
	bl	StartSpriteAffineAnim
.L433:
	pop	{r0}
	bx	r0
.L436:
	.align	2, 0
.L435:
	.word	gStorage
	.word	0x21f4
.Lfe48:
	.size	 SetItemIconAffineAnim,.Lfe48-SetItemIconAffineAnim
	.align	2, 0
	.type	 SetItemIconCallback,function
	.thumb_func
SetItemIconCallback:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	cmp	r4, #0x2
	bls	.LCB3652
	b	.L437	@long jump
.LCB3652:
	cmp	r0, #0x7
	bls	.LCB3655
	b	.L437	@long jump
.LCB3655:
	lsl	r0, r0, #0x2
	ldr	r1, .L449
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L450:
	.align	2, 0
.L449:
	.word	.L446
	.align	2, 0
	.align	2, 0
.L446:
	.word	.L440
	.word	.L441
	.word	.L442
	.word	.L443
	.word	.L444
	.word	.L437
	.word	.L437
	.word	.L445
.L440:
	ldr	r0, .L451
	ldr	r0, [r0]
	lsl	r1, r4, #0x4
	ldr	r2, .L451+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldr	r1, [r0]
	strh	r4, [r1, #0x2e]
	ldr	r1, [r0]
	ldr	r0, .L451+0x8
	b	.L448
.L452:
	.align	2, 0
.L451:
	.word	gStorage
	.word	0x21f4
	.word	SpriteCB_ItemIcon_WaitAnim
.L441:
	ldr	r0, .L453
	ldr	r0, [r0]
	lsl	r1, r4, #0x4
	ldr	r2, .L453+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r1, #0x0
	strh	r1, [r2, #0x2e]
	ldr	r1, [r0]
	ldr	r0, .L453+0x8
	b	.L448
.L454:
	.align	2, 0
.L453:
	.word	gStorage
	.word	0x21f4
	.word	SpriteCB_ItemIcon_ToHand
.L442:
	ldr	r0, .L455
	ldr	r0, [r0]
	lsl	r1, r4, #0x4
	ldr	r2, .L455+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r1, #0x0
	strh	r1, [r2, #0x2e]
	ldr	r1, [r0]
	strh	r5, [r1, #0x3a]
	ldr	r1, [r0]
	strh	r3, [r1, #0x3c]
	ldr	r1, [r0]
	ldr	r0, .L455+0x8
	b	.L448
.L456:
	.align	2, 0
.L455:
	.word	gStorage
	.word	0x21f4
	.word	SpriteCB_ItemIcon_ToMon
.L443:
	ldr	r0, .L457
	ldr	r0, [r0]
	lsl	r1, r4, #0x4
	ldr	r2, .L457+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r1, #0x0
	strh	r1, [r2, #0x2e]
	ldr	r2, [r0]
	ldr	r1, .L457+0x8
	str	r1, [r2, #0x1c]
	strh	r5, [r2, #0x3a]
	ldr	r0, [r0]
	strh	r3, [r0, #0x3c]
	b	.L437
.L458:
	.align	2, 0
.L457:
	.word	gStorage
	.word	0x21f4
	.word	SpriteCB_ItemIcon_SwapToHand
.L444:
	ldr	r0, .L459
	ldr	r0, [r0]
	lsl	r1, r4, #0x4
	ldr	r2, .L459+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r1, #0x0
	strh	r1, [r2, #0x2e]
	ldr	r1, [r0]
	strh	r5, [r1, #0x3a]
	ldr	r1, [r0]
	strh	r3, [r1, #0x3c]
	ldr	r1, [r0]
	ldr	r0, .L459+0x8
	b	.L448
.L460:
	.align	2, 0
.L459:
	.word	gStorage
	.word	0x21f4
	.word	SpriteCB_ItemIcon_SwapToMon
.L445:
	ldr	r0, .L461
	ldr	r0, [r0]
	lsl	r1, r4, #0x4
	ldr	r2, .L461+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L461+0x8
.L448:
	str	r0, [r1, #0x1c]
.L437:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L462:
	.align	2, 0
.L461:
	.word	gStorage
	.word	0x21f4
	.word	SpriteCB_ItemIcon_HideParty
.Lfe49:
	.size	 SetItemIconCallback,.Lfe49-SetItemIconCallback
	.align	2, 0
	.type	 SetItemIconActive,function
	.thumb_func
SetItemIconActive:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	cmp	r2, #0x2
	bhi	.L463	@cond_branch
	ldr	r1, .L466
	ldr	r0, [r1]
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	mov	r3, #0x88
	lsl	r3, r3, #0x6
	add	r0, r0, r3
	strb	r4, [r0]
	ldr	r0, [r1]
	ldr	r1, .L466+0x4
	add	r0, r0, r1
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r3, #0x0
	cmp	r4, #0
	bne	.L465	@cond_branch
	mov	r3, #0x1
.L465:
	add	r2, r0, #0
	add	r2, r2, #0x3e
	lsl	r3, r3, #0x2
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
.L463:
	pop	{r4}
	pop	{r0}
	bx	r0
.L467:
	.align	2, 0
.L466:
	.word	gStorage
	.word	0x21f4
.Lfe50:
	.size	 SetItemIconActive,.Lfe50-SetItemIconActive
	.align	2, 0
	.type	 GetItemIconPic,function
	.thumb_func
GetItemIconPic:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	bl	GetItemIconGfxPtr
	pop	{r1}
	bx	r1
.Lfe51:
	.size	 GetItemIconPic,.Lfe51-GetItemIconPic
	.align	2, 0
	.type	 GetItemIconPalette,function
	.thumb_func
GetItemIconPalette:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetItemIconGfxPtr
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 GetItemIconPalette,.Lfe52-GetItemIconPalette
	.align	2, 0
	.globl	PrintItemDescription
	.type	 PrintItemDescription,function
	.thumb_func
PrintItemDescription:
	push	{r4, lr}
	add	sp, sp, #-0x14
	bl	IsActiveItemMoving
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L471	@cond_branch
	ldr	r0, .L474
	ldr	r0, [r0]
	ldr	r1, .L474+0x4
	b	.L473
.L475:
	.align	2, 0
.L474:
	.word	gStorage
	.word	0x2224
.L471:
	ldr	r0, .L476
	ldr	r0, [r0]
	ldr	r1, .L476+0x4
.L473:
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	ItemId_GetDescription
	add	r4, r0, #0
	mov	r0, #0x2
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x2
	mov	r1, #0x2
	add	r2, r4, #0
	mov	r3, #0x2
	bl	AddTextPrinterParameterized5
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.L477:
	.align	2, 0
.L476:
	.word	gStorage
	.word	0xce2
.Lfe53:
	.size	 PrintItemDescription,.Lfe53-PrintItemDescription
	.align	2, 0
	.globl	InitItemInfoWindow
	.type	 InitItemInfoWindow,function
	.thumb_func
InitItemInfoWindow:
	push	{lr}
	ldr	r0, .L479
	ldr	r0, [r0]
	ldr	r1, .L479+0x4
	add	r0, r0, r1
	mov	r1, #0x19
	strh	r1, [r0]
	ldr	r1, .L479+0x8
	mov	r3, #0xd2
	lsl	r3, r3, #0x1
	mov	r0, #0x0
	mov	r2, #0x80
	bl	LoadBgTiles
	mov	r0, #0x0
	bl	DrawItemInfoWindow
	pop	{r0}
	bx	r0
.L480:
	.align	2, 0
.L479:
	.word	gStorage
	.word	0x2226
	.word	sItemInfoFrame_Gfx
.Lfe54:
	.size	 InitItemInfoWindow,.Lfe54-InitItemInfoWindow
	.align	2, 0
	.globl	UpdateItemInfoWindowSlideIn
	.type	 UpdateItemInfoWindowSlideIn,function
	.thumb_func
UpdateItemInfoWindowSlideIn:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	ldr	r0, .L490
	ldr	r0, [r0]
	ldr	r2, .L490+0x4
	add	r1, r0, r2
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L482	@cond_branch
	mov	r0, #0x0
	b	.L489
.L491:
	.align	2, 0
.L490:
	.word	gStorage
	.word	0x2226
.L482:
	sub	r0, r0, #0x1
	strh	r0, [r1]
	ldrh	r1, [r1]
	mov	r0, #0x19
	sub	r5, r0, r1
	mov	r4, #0x0
	cmp	r4, r5
	bge	.L484	@cond_branch
.L486:
	mov	r0, #0x0
	mov	r1, #0xa
	bl	GetBgAttribute
	add	r1, r0, #0
	ldr	r0, .L492
	ldr	r0, [r0]
	ldr	r2, .L492+0x4
	add	r0, r0, r2
	add	r1, r1, #0x14
	ldrh	r0, [r0]
	add	r1, r1, r0
	add	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x8
	str	r0, [sp, #0x4]
	mov	r0, #0xf
	str	r0, [sp, #0x8]
	mov	r0, #0x19
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r3, #0xc
	bl	WriteSequenceToBgTilemapBuffer
	add	r4, r4, #0x1
	cmp	r4, r5
	blt	.L486	@cond_branch
.L484:
	add	r0, r5, #0
	bl	DrawItemInfoWindow
	ldr	r0, .L492
	ldr	r0, [r0]
	ldr	r1, .L492+0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L489:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L493:
	.align	2, 0
.L492:
	.word	gStorage
	.word	0x2226
.Lfe55:
	.size	 UpdateItemInfoWindowSlideIn,.Lfe55-UpdateItemInfoWindowSlideIn
	.align	2, 0
	.globl	UpdateItemInfoWindowSlideOut
	.type	 UpdateItemInfoWindowSlideOut,function
	.thumb_func
UpdateItemInfoWindowSlideOut:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	ldr	r5, .L504
	ldr	r0, [r5]
	ldr	r4, .L504+0x4
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, #0x19
	bne	.L495	@cond_branch
	mov	r0, #0x0
	b	.L503
.L505:
	.align	2, 0
.L504:
	.word	gStorage
	.word	0x2226
.L495:
	cmp	r0, #0
	bne	.L496	@cond_branch
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0xa
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x19
	mov	r3, #0xb
	bl	FillBgTilemapBufferRect
.L496:
	ldr	r1, [r5]
	add	r1, r1, r4
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	ldrh	r1, [r1]
	mov	r0, #0x19
	sub	r5, r0, r1
	mov	r4, #0x0
	cmp	r4, r5
	bge	.L498	@cond_branch
.L500:
	mov	r0, #0x0
	mov	r1, #0xa
	bl	GetBgAttribute
	add	r1, r0, #0
	ldr	r0, .L506
	ldr	r0, [r0]
	ldr	r2, .L506+0x4
	add	r0, r0, r2
	add	r1, r1, #0x14
	ldrh	r0, [r0]
	add	r1, r1, r0
	add	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x8
	str	r0, [sp, #0x4]
	mov	r0, #0xf
	str	r0, [sp, #0x8]
	mov	r0, #0x19
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r3, #0xc
	bl	WriteSequenceToBgTilemapBuffer
	add	r4, r4, #0x1
	cmp	r4, r5
	blt	.L500	@cond_branch
.L498:
	add	r0, r5, #0
	bl	DrawItemInfoWindow
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0xa
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r3, #0xb
	bl	FillBgTilemapBufferRect
	ldr	r0, .L506
	ldr	r0, [r0]
	ldr	r1, .L506+0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x19
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L503:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L507:
	.align	2, 0
.L506:
	.word	gStorage
	.word	0x2226
.Lfe56:
	.size	 UpdateItemInfoWindowSlideOut,.Lfe56-UpdateItemInfoWindowSlideOut
	.align	2, 0
	.type	 DrawItemInfoWindow,function
	.thumb_func
DrawItemInfoWindow:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r7, r0, #0
	cmp	r7, #0
	beq	.L509	@cond_branch
	mov	r1, #0xd2
	lsl	r1, r1, #0x1
	lsl	r4, r7, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r6, #0x1
	str	r6, [sp, #0x4]
	mov	r5, #0xf
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0xb
	bl	FillBgTilemapBufferRect
	ldr	r1, .L510
	str	r4, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x14
	bl	FillBgTilemapBufferRect
.L509:
	ldr	r1, .L510+0x4
	lsl	r5, r7, #0x18
	lsr	r5, r5, #0x18
	mov	r4, #0x1
	str	r4, [sp]
	mov	r0, #0x8
	str	r0, [sp, #0x4]
	mov	r6, #0xf
	str	r6, [sp, #0x8]
	mov	r0, #0x0
	add	r2, r5, #0
	mov	r3, #0xc
	bl	FillBgTilemapBufferRect
	mov	r1, #0xd3
	lsl	r1, r1, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x0
	add	r2, r5, #0
	mov	r3, #0xb
	bl	FillBgTilemapBufferRect
	ldr	r1, .L510+0x8
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x0
	add	r2, r5, #0
	mov	r3, #0x14
	bl	FillBgTilemapBufferRect
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L511:
	.align	2, 0
.L510:
	.word	0x9a4
	.word	0x1a5
	.word	0x1a7
.Lfe57:
	.size	 DrawItemInfoWindow,.Lfe57-DrawItemInfoWindow
	.align	2, 0
	.type	 SpriteCB_ItemIcon_WaitAnim,function
	.thumb_func
SpriteCB_ItemIcon_WaitAnim:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L513	@cond_branch
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	SetItemIconActive
	ldr	r0, .L514
	str	r0, [r4, #0x1c]
.L513:
	pop	{r4}
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	SpriteCallbackDummy
.Lfe58:
	.size	 SpriteCB_ItemIcon_WaitAnim,.Lfe58-SpriteCB_ItemIcon_WaitAnim
	.align	2, 0
	.type	 SpriteCB_ItemIcon_ToHand,function
	.thumb_func
SpriteCB_ItemIcon_ToHand:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	cmp	r1, #0
	beq	.L518	@cond_branch
	cmp	r1, #0x1
	beq	.L519	@cond_branch
	b	.L517
.L518:
	ldrh	r0, [r3, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r3, #0x30]
	ldrh	r0, [r3, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r3, #0x32]
	mov	r0, #0xa
	strh	r0, [r3, #0x34]
	mov	r0, #0x15
	strh	r0, [r3, #0x36]
	strh	r1, [r3, #0x38]
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
.L519:
	ldrh	r1, [r3, #0x30]
	ldrh	r0, [r3, #0x34]
	sub	r1, r1, r0
	strh	r1, [r3, #0x30]
	ldrh	r0, [r3, #0x32]
	ldrh	r2, [r3, #0x36]
	sub	r0, r0, r2
	strh	r0, [r3, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r3, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r3, #0x22]
	ldrh	r0, [r3, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	ble	.L517	@cond_branch
	ldr	r0, .L523
	str	r0, [r3, #0x1c]
.L517:
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	SpriteCB_ItemIcon_SetPosToCursor
.Lfe59:
	.size	 SpriteCB_ItemIcon_ToHand,.Lfe59-SpriteCB_ItemIcon_ToHand
	.align	2, 0
	.type	 SpriteCB_ItemIcon_SetPosToCursor,function
	.thumb_func
SpriteCB_ItemIcon_SetPosToCursor:
	ldr	r1, .L526
	ldr	r3, [r1]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r3, r3, r1
	ldr	r1, [r3]
	ldrh	r1, [r1, #0x20]
	add	r1, r1, #0x4
	strh	r1, [r0, #0x20]
	ldr	r2, [r3]
	ldrh	r1, [r2, #0x26]
	ldrh	r2, [r2, #0x22]
	add	r1, r1, r2
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	ldr	r1, [r3]
	ldrb	r1, [r1, #0x5]
	mov	r2, #0xc
	and	r2, r2, r1
	ldrb	r3, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r3
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	bx	lr
.L527:
	.align	2, 0
.L526:
	.word	gStorage
.Lfe60:
	.size	 SpriteCB_ItemIcon_SetPosToCursor,.Lfe60-SpriteCB_ItemIcon_SetPosToCursor
	.align	2, 0
	.type	 SpriteCB_ItemIcon_ToMon,function
	.thumb_func
SpriteCB_ItemIcon_ToMon:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L530	@cond_branch
	cmp	r1, #0x1
	beq	.L531	@cond_branch
	b	.L529
.L530:
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x32]
	mov	r0, #0xa
	strh	r0, [r4, #0x34]
	mov	r0, #0x15
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L531:
	ldrh	r0, [r4, #0x34]
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x36]
	ldrh	r2, [r4, #0x32]
	add	r1, r1, r2
	strh	r1, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r4, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x22]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	ble	.L529	@cond_branch
	add	r0, r4, #0
	bl	GetItemIconIdxBySprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r4, #0x3c]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	bl	SetItemIconPosition
	ldr	r0, .L535
	str	r0, [r4, #0x1c]
.L529:
	pop	{r4}
	pop	{r0}
	bx	r0
.L536:
	.align	2, 0
.L535:
	.word	SpriteCallbackDummy
.Lfe61:
	.size	 SpriteCB_ItemIcon_ToMon,.Lfe61-SpriteCB_ItemIcon_ToMon
	.align	2, 0
	.type	 SpriteCB_ItemIcon_SwapToHand,function
	.thumb_func
SpriteCB_ItemIcon_SwapToHand:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L539	@cond_branch
	cmp	r1, #0x1
	beq	.L540	@cond_branch
	b	.L538
.L539:
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x32]
	mov	r0, #0xa
	strh	r0, [r4, #0x34]
	mov	r0, #0x15
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L540:
	ldrh	r1, [r4, #0x30]
	ldrh	r0, [r4, #0x34]
	sub	r1, r1, r0
	strh	r1, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	sub	r0, r0, r2
	strh	r0, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r4, #0x22]
	ldr	r1, .L544
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	ble	.L538	@cond_branch
	add	r0, r4, #0
	bl	GetItemIconIdxBySprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r4, #0x3c]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	bl	SetItemIconPosition
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	ldr	r0, .L544+0x4
	str	r0, [r4, #0x1c]
.L538:
	pop	{r4}
	pop	{r0}
	bx	r0
.L545:
	.align	2, 0
.L544:
	.word	gSineTable
	.word	SpriteCB_ItemIcon_SetPosToCursor
.Lfe62:
	.size	 SpriteCB_ItemIcon_SwapToHand,.Lfe62-SpriteCB_ItemIcon_SwapToHand
	.align	2, 0
	.type	 SpriteCB_ItemIcon_SwapToMon,function
	.thumb_func
SpriteCB_ItemIcon_SwapToMon:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L548	@cond_branch
	cmp	r1, #0x1
	beq	.L549	@cond_branch
	b	.L547
.L548:
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x32]
	mov	r0, #0xa
	strh	r0, [r4, #0x34]
	mov	r0, #0x15
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L549:
	ldrh	r0, [r4, #0x34]
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x36]
	ldrh	r2, [r4, #0x32]
	add	r1, r1, r2
	strh	r1, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r4, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x22]
	ldr	r1, .L553
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	ble	.L547	@cond_branch
	add	r0, r4, #0
	bl	GetItemIconIdxBySprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r4, #0x3c]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	bl	SetItemIconPosition
	ldr	r0, .L553+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
.L547:
	pop	{r4}
	pop	{r0}
	bx	r0
.L554:
	.align	2, 0
.L553:
	.word	gSineTable
	.word	SpriteCallbackDummy
.Lfe63:
	.size	 SpriteCB_ItemIcon_SwapToMon,.Lfe63-SpriteCB_ItemIcon_SwapToMon
	.align	2, 0
	.type	 SpriteCB_ItemIcon_HideParty,function
	.thumb_func
SpriteCB_ItemIcon_HideParty:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x22]
	sub	r0, r0, #0x8
	strh	r0, [r2, #0x22]
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bge	.L556	@cond_branch
	ldr	r0, .L557
	str	r0, [r2, #0x1c]
	add	r0, r2, #0
	bl	GetItemIconIdxBySprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	SetItemIconActive
.L556:
	pop	{r0}
	bx	r0
.L558:
	.align	2, 0
.L557:
	.word	SpriteCallbackDummy
.Lfe64:
	.size	 SpriteCB_ItemIcon_HideParty,.Lfe64-SpriteCB_ItemIcon_HideParty
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sUnkUtil,object
	.size	 sUnkUtil,4
sUnkUtil:
	.word	0x0
.text
	.align	2, 0
	.globl	UnkUtil_Init
	.type	 UnkUtil_Init,function
	.thumb_func
UnkUtil_Init:
	ldr	r3, .L560
	str	r0, [r3]
	str	r1, [r0]
	mov	r1, #0x0
	strb	r2, [r0, #0x5]
	strb	r1, [r0, #0x4]
	bx	lr
.L561:
	.align	2, 0
.L560:
	.word	sUnkUtil
.Lfe65:
	.size	 UnkUtil_Init,.Lfe65-UnkUtil_Init
	.align	2, 0
	.globl	UnkUtil_Run
	.type	 UnkUtil_Run,function
	.thumb_func
UnkUtil_Run:
	push	{r4, r5, lr}
	ldr	r2, .L569
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L563	@cond_branch
	mov	r4, #0x0
	ldrb	r1, [r1, #0x4]
	cmp	r4, r1
	bcs	.L565	@cond_branch
	add	r5, r2, #0
.L567:
	ldr	r0, [r5]
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	ldr	r0, [r0]
	add	r0, r0, r1
	ldr	r1, [r0, #0x10]
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x4]
	cmp	r4, r0
	bcc	.L567	@cond_branch
.L565:
	ldr	r0, .L569
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x4]
.L563:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L570:
	.align	2, 0
.L569:
	.word	sUnkUtil
.Lfe66:
	.size	 UnkUtil_Run,.Lfe66-UnkUtil_Run
	.align	2, 0
	.type	 UnkUtil_CpuAdd,function
	.thumb_func
UnkUtil_CpuAdd:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r9, r0
	mov	sl, r3
	ldr	r0, [sp, #0x24]
	ldr	r3, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	ldr	r5, [sp, #0x30]
	ldr	r6, [sp, #0x34]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	ip, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	ldr	r0, .L574
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x4]
	add	r1, r0, #0
	ldrb	r7, [r2, #0x5]
	cmp	r1, r7
	bcs	.L572	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r2, #0x4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, [r2]
	add	r1, r1, r0
	lsl	r0, r4, #0x1
	strh	r0, [r1, #0x8]
	ldr	r2, [sp]
	lsl	r0, r2, #0x5
	add	r0, r0, ip
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	str	r0, [r1, #0x4]
	mov	r0, r3
	mul	r0, r0, r6
	add	r0, r0, r8
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	str	r0, [r1]
	strh	r5, [r1, #0xc]
	strh	r6, [r1, #0xa]
	ldr	r0, .L574+0x4
	str	r0, [r1, #0x10]
	mov	r0, #0x1
	b	.L573
.L575:
	.align	2, 0
.L574:
	.word	sUnkUtil
	.word	UnkUtil_CpuRun
.L572:
	mov	r0, #0x0
.L573:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe67:
	.size	 UnkUtil_CpuAdd,.Lfe67-UnkUtil_CpuAdd
	.align	2, 0
	.type	 UnkUtil_CpuRun,function
	.thumb_func
UnkUtil_CpuRun:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	b	.L582
.L580:
	ldr	r0, [r4]
	ldr	r1, [r4, #0x4]
	ldrh	r2, [r4, #0x8]
	lsr	r2, r2, #0x1
	bl	CpuSet
	ldr	r0, [r4, #0x4]
	add	r0, r0, #0x40
	str	r0, [r4, #0x4]
	ldrh	r1, [r4, #0xa]
	lsl	r1, r1, #0x1
	ldr	r0, [r4]
	add	r0, r0, r1
	str	r0, [r4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L582:
	ldrh	r0, [r4, #0xc]
	cmp	r5, r0
	bcc	.L580	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 UnkUtil_CpuRun,.Lfe68-UnkUtil_CpuRun
	.align	2, 0
	.type	 UnkUtil_DmaAdd,function
	.thumb_func
UnkUtil_DmaAdd:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r0
	ldr	r0, [sp, #0x14]
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L586
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x4]
	add	r1, r0, #0
	ldrb	r7, [r2, #0x5]
	cmp	r1, r7
	bcs	.L584	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r2, #0x4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, [r2]
	add	r1, r1, r0
	lsl	r0, r3, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r4, #0x5
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	str	r0, [r1, #0x4]
	strh	r5, [r1, #0xc]
	ldr	r0, .L586+0x4
	str	r0, [r1, #0x10]
	mov	r0, #0x1
	b	.L585
.L587:
	.align	2, 0
.L586:
	.word	sUnkUtil
	.word	UnkUtil_DmaRun
.L584:
	mov	r0, #0x0
.L585:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 UnkUtil_DmaAdd,.Lfe69-UnkUtil_DmaAdd
	.align	2, 0
	.type	 UnkUtil_DmaRun,function
	.thumb_func
UnkUtil_DmaRun:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	mov	r0, #0x0
	ldrh	r1, [r6, #0xc]
	cmp	r0, r1
	bcs	.L590	@cond_branch
	mov	r7, #0x80
	lsl	r7, r7, #0x5
	mov	r5, sp
	ldr	r2, .L601
	mov	r8, r2
	mov	r1, #0x81
	lsl	r1, r1, #0x18
	mov	sl, r1
.L592:
	ldr	r2, [r6, #0x4]
	ldrh	r3, [r6, #0x8]
	mov	ip, r2
	add	r0, r0, #0x1
	mov	r9, r0
	cmp	r3, r7
	bhi	.L596	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5]
	mov	r2, sp
	mov	r0, r8
	str	r2, [r0]
	mov	r1, ip
	str	r1, [r0, #0x4]
	lsr	r0, r3, #0x1
	mov	r2, sl
	orr	r0, r0, r2
	mov	r1, r8
	b	.L600
.L602:
	.align	2, 0
.L601:
	.word	0x40000d4
.L596:
	mov	r4, #0x0
	strh	r4, [r5]
	ldr	r1, .L603
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	ldr	r0, .L603+0x4
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r7
	sub	r3, r3, r7
	cmp	r3, r7
	bhi	.L596	@cond_branch
	strh	r4, [r5]
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x1
	mov	r2, sl
	orr	r0, r0, r2
.L600:
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, ip
	add	r0, r0, #0x40
	str	r0, [r6, #0x4]
	mov	r1, r9
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	ldrh	r2, [r6, #0xc]
	cmp	r0, r2
	bcc	.L592	@cond_branch
.L590:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L604:
	.align	2, 0
.L603:
	.word	0x40000d4
	.word	-0x7efff800
.Lfe70:
	.size	 UnkUtil_DmaRun,.Lfe70-UnkUtil_DmaRun
.text
	.align	2, 0 @ Don't pad with nop

