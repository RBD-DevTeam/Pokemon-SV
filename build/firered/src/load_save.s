@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gSaveBlock2
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gSaveBlock2,object
	.size	 gSaveBlock2,3876
gSaveBlock2:
	.byte	0x0
	.space	7
	.space	3868
	.globl	gSaveBlock2_DMA
	.type	 gSaveBlock2_DMA,object
	.size	 gSaveBlock2_DMA,128
gSaveBlock2_DMA:
	.byte	0x0
	.space	127
	.globl	gSaveBlock1
	.align	2, 0
	.type	 gSaveBlock1,object
	.size	 gSaveBlock1,15720
gSaveBlock1:
	.short	0x0
	.space	2
	.space	15716
	.globl	gSaveBlock1_DMA
	.type	 gSaveBlock1_DMA,object
	.size	 gSaveBlock1_DMA,128
gSaveBlock1_DMA:
	.byte	0x0
	.space	127
	.globl	gPokemonStorage
	.align	2, 0
	.type	 gPokemonStorage,object
	.size	 gPokemonStorage,33744
gPokemonStorage:
	.byte	0x0
	.space	33743
	.globl	gSaveBlock3_DMA
	.type	 gSaveBlock3_DMA,object
	.size	 gSaveBlock3_DMA,128
gSaveBlock3_DMA:
	.byte	0x0
	.space	127
	.globl	gLoadedSaveData
	.align	2, 0
	.type	 gLoadedSaveData,object
	.size	 gLoadedSaveData,1320
gLoadedSaveData:
	.short	0x0
	.space	2
	.space	164
	.space	1152
	.globl	gLastEncryptionKey
	.align	2, 0
	.type	 gLastEncryptionKey,object
	.size	 gLastEncryptionKey,4
gLastEncryptionKey:
	.word	0x0
.text
	.align	2, 0
	.globl	CheckForFlashMemory
	.type	 CheckForFlashMemory,function
	.thumb_func
CheckForFlashMemory:
	push	{lr}
	bl	IdentifyFlash
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldr	r1, .L5
	mov	r0, #0x1
	str	r0, [r1]
	bl	InitFlashTimer
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	gFlashMemoryPresent
.L3:
	ldr	r1, .L7
	mov	r0, #0x0
	str	r0, [r1]
.L4:
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gFlashMemoryPresent
.Lfe1:
	.size	 CheckForFlashMemory,.Lfe1-CheckForFlashMemory
	.align	2, 0
	.globl	ClearSav2
	.type	 ClearSav2,function
	.thumb_func
ClearSav2:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L10
	ldr	r2, .L10+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	gSaveBlock2
	.word	0x10007d2
.Lfe2:
	.size	 ClearSav2,.Lfe2-ClearSav2
	.align	2, 0
	.globl	ClearSav1
	.type	 ClearSav1,function
	.thumb_func
ClearSav1:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L13
	ldr	r2, .L13+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gSaveBlock1
	.word	0x1001ef4
.Lfe3:
	.size	 ClearSav1,.Lfe3-ClearSav1
	.align	2, 0
	.globl	SetSaveBlocksPointers
	.type	 SetSaveBlocksPointers,function
	.thumb_func
SetSaveBlocksPointers:
	push	{r4, r5, lr}
	ldr	r4, .L16
	ldr	r5, [r4]
	bl	Random
	mov	r1, #0x7c
	and	r1, r1, r0
	ldr	r2, .L16+0x4
	ldr	r0, .L16+0x8
	add	r0, r1, r0
	str	r0, [r2]
	ldr	r0, .L16+0xc
	add	r0, r1, r0
	str	r0, [r4]
	ldr	r2, .L16+0x10
	ldr	r0, .L16+0x14
	add	r1, r1, r0
	str	r1, [r2]
	bl	SetBagPocketsPointers
	add	r0, r5, #0
	bl	SetQuestLogRecordAndPlaybackPointers
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gSaveBlock1Ptr
	.word	gSaveBlock2Ptr
	.word	gSaveBlock2
	.word	gSaveBlock1
	.word	gPokemonStoragePtr
	.word	gPokemonStorage
.Lfe4:
	.size	 SetSaveBlocksPointers,.Lfe4-SetSaveBlocksPointers
	.align	2, 0
	.globl	MoveSaveBlocks_ResetHeap
	.type	 MoveSaveBlocks_ResetHeap,function
	.thumb_func
MoveSaveBlocks_ResetHeap:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, .L19
	ldr	r0, [r4, #0xc]
	str	r0, [sp]
	ldr	r1, [r4, #0x10]
	str	r1, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [r4, #0xc]
	str	r0, [r4, #0x10]
	str	r0, [r4, #0x20]
	ldr	r5, .L19+0x4
	ldr	r0, .L19+0x8
	ldr	r1, [r0]
	ldr	r0, .L19+0xc
	mov	r9, r0
	add	r0, r5, #0
	mov	r2, r9
	bl	memcpy
	ldr	r1, .L19+0x10
	mov	sl, r1
	ldr	r1, [r1]
	ldr	r7, .L19+0x14
	ldr	r0, .L19+0x18
	add	r2, r7, #0
	bl	memcpy
	ldr	r6, .L19+0x1c
	ldr	r1, [r6]
	ldr	r0, .L19+0x20
	mov	r8, r0
	ldr	r0, .L19+0x24
	mov	r2, r8
	bl	memcpy
	bl	SetSaveBlocksPointers
	ldr	r1, .L19+0x8
	ldr	r0, [r1]
	add	r1, r5, #0
	mov	r2, r9
	bl	memcpy
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r1, .L19+0x18
	add	r2, r7, #0
	bl	memcpy
	ldr	r0, [r6]
	ldr	r1, .L19+0x24
	mov	r2, r8
	bl	memcpy
	mov	r1, #0xe0
	lsl	r1, r1, #0x9
	add	r0, r5, #0
	bl	InitHeap
	ldr	r0, [sp, #0x4]
	str	r0, [r4, #0x10]
	ldr	r1, [sp]
	str	r1, [r4, #0xc]
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r4, r0
	add	r0, r4, #0
	bl	ApplyNewEncryptionKeyToAllEncryptedData
	ldr	r1, .L19+0x8
	ldr	r0, [r1]
	mov	r1, #0xf2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	str	r4, [r0]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gMain
	.word	gHeap
	.word	gSaveBlock2Ptr
	.word	0xf24
	.word	gSaveBlock1Ptr
	.word	0x3d68
	.word	gHeap+0xf24
	.word	gPokemonStoragePtr
	.word	0x83d0
	.word	gHeap+0x4c8c
.Lfe5:
	.size	 MoveSaveBlocks_ResetHeap,.Lfe5-MoveSaveBlocks_ResetHeap
	.align	2, 0
	.globl	UseContinueGameWarp
	.type	 UseContinueGameWarp,function
	.thumb_func
UseContinueGameWarp:
	ldr	r0, .L22
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	bx	lr
.L23:
	.align	2, 0
.L22:
	.word	gSaveBlock2Ptr
.Lfe6:
	.size	 UseContinueGameWarp,.Lfe6-UseContinueGameWarp
	.align	2, 0
	.globl	ClearContinueGameWarpStatus
	.type	 ClearContinueGameWarpStatus,function
	.thumb_func
ClearContinueGameWarpStatus:
	ldr	r0, .L25
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	bx	lr
.L26:
	.align	2, 0
.L25:
	.word	gSaveBlock2Ptr
.Lfe7:
	.size	 ClearContinueGameWarpStatus,.Lfe7-ClearContinueGameWarpStatus
	.align	2, 0
	.globl	SetContinueGameWarpStatus
	.type	 SetContinueGameWarpStatus,function
	.thumb_func
SetContinueGameWarpStatus:
	ldr	r0, .L28
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	bx	lr
.L29:
	.align	2, 0
.L28:
	.word	gSaveBlock2Ptr
.Lfe8:
	.size	 SetContinueGameWarpStatus,.Lfe8-SetContinueGameWarpStatus
	.align	2, 0
	.globl	SetContinueGameWarpStatusToDynamicWarp
	.type	 SetContinueGameWarpStatusToDynamicWarp,function
	.thumb_func
SetContinueGameWarpStatusToDynamicWarp:
	push	{lr}
	mov	r0, #0x0
	bl	SetContinueGameWarpToDynamicWarp
	ldr	r0, .L31
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gSaveBlock2Ptr
.Lfe9:
	.size	 SetContinueGameWarpStatusToDynamicWarp,.Lfe9-SetContinueGameWarpStatusToDynamicWarp
	.align	2, 0
	.globl	ClearContinueGameWarpStatus2
	.type	 ClearContinueGameWarpStatus2,function
	.thumb_func
ClearContinueGameWarpStatus2:
	ldr	r0, .L34
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	bx	lr
.L35:
	.align	2, 0
.L34:
	.word	gSaveBlock2Ptr
.Lfe10:
	.size	 ClearContinueGameWarpStatus2,.Lfe10-ClearContinueGameWarpStatus2
	.align	2, 0
	.globl	SavePlayerParty
	.type	 SavePlayerParty,function
	.thumb_func
SavePlayerParty:
	push	{r4, lr}
	ldr	r0, .L42
	ldr	r0, [r0]
	ldr	r1, .L42+0x4
	ldrb	r1, [r1]
	add	r0, r0, #0x34
	strb	r1, [r0]
	mov	r4, #0x0
.L40:
	ldr	r0, .L42
	ldr	r0, [r0]
	mov	r1, #0x64
	mul	r1, r1, r4
	add	r0, r0, r1
	ldr	r2, .L42+0x8
	add	r1, r1, r2
	add	r0, r0, #0x38
	mov	r2, #0x64
	bl	memcpy
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L40	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gSaveBlock1Ptr
	.word	gPlayerPartyCount
	.word	gPlayerParty
.Lfe11:
	.size	 SavePlayerParty,.Lfe11-SavePlayerParty
	.align	2, 0
	.globl	LoadPlayerParty
	.type	 LoadPlayerParty,function
	.thumb_func
LoadPlayerParty:
	push	{r4, r5, lr}
	ldr	r1, .L50
	ldr	r0, .L50+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x34
	ldrb	r0, [r0]
	strb	r0, [r1]
	mov	r4, #0x0
	ldr	r5, .L50+0x8
.L48:
	mov	r0, #0x64
	mov	r2, r4
	mul	r2, r2, r0
	add	r0, r2, r5
	ldr	r1, .L50+0x4
	ldr	r1, [r1]
	add	r1, r1, r2
	add	r1, r1, #0x38
	mov	r2, #0x64
	bl	memcpy
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L48	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gPlayerPartyCount
	.word	gSaveBlock1Ptr
	.word	gPlayerParty
.Lfe12:
	.size	 LoadPlayerParty,.Lfe12-LoadPlayerParty
	.align	2, 0
	.globl	SaveObjectEvents
	.type	 SaveObjectEvents,function
	.thumb_func
SaveObjectEvents:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L58
	mov	ip, r0
	mov	r5, #0xd4
	lsl	r5, r5, #0x3
	mov	r8, r5
	ldr	r4, .L58+0x4
	mov	r3, #0x0
	mov	r2, #0xf
.L56:
	mov	r6, ip
	ldr	r1, [r6]
	add	r1, r1, r3
	add	r1, r1, r8
	add	r0, r4, #0
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	add	r4, r4, #0x24
	add	r3, r3, #0x24
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L56	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gSaveBlock1Ptr
	.word	gObjectEvents
.Lfe13:
	.size	 SaveObjectEvents,.Lfe13-SaveObjectEvents
	.align	2, 0
	.globl	LoadObjectEvents
	.type	 LoadObjectEvents,function
	.thumb_func
LoadObjectEvents:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L66
	mov	ip, r0
	mov	r5, #0xd4
	lsl	r5, r5, #0x3
	mov	r8, r5
	ldr	r4, .L66+0x4
	mov	r3, #0x0
	mov	r2, #0xf
.L64:
	mov	r6, ip
	ldr	r1, [r6]
	add	r1, r1, r3
	add	r0, r4, #0
	add	r1, r1, r8
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	add	r4, r4, #0x24
	add	r3, r3, #0x24
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L64	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	gSaveBlock1Ptr
	.word	gObjectEvents
.Lfe14:
	.size	 LoadObjectEvents,.Lfe14-LoadObjectEvents
	.align	2, 0
	.globl	SaveSerializedGame
	.type	 SaveSerializedGame,function
	.thumb_func
SaveSerializedGame:
	push	{lr}
	bl	SavePlayerParty
	bl	SaveObjectEvents
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 SaveSerializedGame,.Lfe15-SaveSerializedGame
	.align	2, 0
	.globl	LoadSerializedGame
	.type	 LoadSerializedGame,function
	.thumb_func
LoadSerializedGame:
	push	{lr}
	bl	LoadPlayerParty
	bl	LoadObjectEvents
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 LoadSerializedGame,.Lfe16-LoadSerializedGame
	.align	2, 0
	.globl	LoadPlayerBag
	.type	 LoadPlayerBag,function
	.thumb_func
LoadPlayerBag:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r2, #0x0
	ldr	r0, .L101
	mov	ip, r0
	ldr	r1, .L101+0x4
	mov	sl, r1
	ldr	r5, .L101+0x8
	mov	r3, #0xc4
	lsl	r3, r3, #0x2
	ldr	r4, .L101+0xc
.L74:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x29
	ble	.L74	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L101+0xc
	ldr	r5, .L101+0x8
	mov	r3, #0xee
	lsl	r3, r3, #0x2
	add	r4, r0, #0
	add	r4, r4, #0xa8
.L79:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x1d
	ble	.L79	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L101+0xc
	ldr	r5, .L101+0x8
	mov	r6, #0x90
	lsl	r6, r6, #0x1
	add	r4, r0, r6
	mov	r3, #0x86
	lsl	r3, r3, #0x3
.L84:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0xc
	ble	.L84	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L101+0xc
	ldr	r5, .L101+0x8
	mov	r7, #0xaa
	lsl	r7, r7, #0x1
	add	r4, r0, r7
	ldr	r3, .L101+0x10
.L89:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x39
	ble	.L89	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L101+0xc
	ldr	r5, .L101+0x8
	mov	r1, #0x8f
	lsl	r1, r1, #0x2
	add	r4, r0, r1
	ldr	r3, .L101+0x14
.L94:
	lsl	r0, r2, #0x2
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, [r1]
	stmia	r4!, {r0}
	add	r2, r2, #0x1
	cmp	r2, #0x2a
	ble	.L94	@cond_branch
	ldr	r0, .L101+0xc
	ldr	r5, .L101+0x8
	mov	r8, r5
	mov	r6, #0xba
	lsl	r6, r6, #0x2
	add	r4, r0, r6
	mov	r3, #0x0
	ldr	r7, .L101+0x18
	mov	r9, r7
	mov	r2, #0xf
.L99:
	mov	r0, r8
	ldr	r1, [r0]
	add	r1, r1, r3
	add	r0, r4, #0
	add	r1, r1, r9
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	add	r4, r4, #0x24
	add	r3, r3, #0x24
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L99	@cond_branch
	mov	r1, sl
	ldr	r0, [r1]
	mov	r5, #0xf2
	lsl	r5, r5, #0x4
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r6, ip
	str	r0, [r6]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L102:
	.align	2, 0
.L101:
	.word	gLastEncryptionKey
	.word	gSaveBlock2Ptr
	.word	gSaveBlock1Ptr
	.word	gLoadedSaveData
	.word	0x464
	.word	0x54c
	.word	0x2cd0
.Lfe17:
	.size	 LoadPlayerBag,.Lfe17-LoadPlayerBag
	.align	2, 0
	.globl	SavePlayerBag
	.type	 SavePlayerBag,function
	.thumb_func
SavePlayerBag:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r2, #0x0
	ldr	r0, .L134
	mov	r8, r0
	ldr	r1, .L134+0x4
	mov	ip, r1
	ldr	r5, .L134+0x8
	mov	r3, #0xc4
	lsl	r3, r3, #0x2
	ldr	r4, .L134+0xc
.L107:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r3
	add	r0, r0, r1
	ldmia	r4!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x29
	ble	.L107	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L134+0x8
	mov	r4, #0xee
	lsl	r4, r4, #0x2
	ldr	r0, .L134+0xc
	add	r3, r0, #0
	add	r3, r3, #0xa8
.L112:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x1d
	ble	.L112	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L134+0x8
	mov	r4, #0x86
	lsl	r4, r4, #0x3
	ldr	r0, .L134+0xc
	mov	r6, #0x90
	lsl	r6, r6, #0x1
	add	r3, r0, r6
.L117:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xc
	ble	.L117	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L134+0x8
	ldr	r4, .L134+0x10
	ldr	r0, .L134+0xc
	mov	r7, #0xaa
	lsl	r7, r7, #0x1
	add	r3, r0, r7
.L122:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x39
	ble	.L122	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L134+0x8
	ldr	r4, .L134+0x14
	ldr	r0, .L134+0xc
	mov	r1, #0x8f
	lsl	r1, r1, #0x2
	add	r3, r0, r1
.L127:
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r4
	add	r0, r0, r1
	ldmia	r3!, {r1}
	str	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x2a
	ble	.L127	@cond_branch
	ldr	r2, .L134+0x8
	mov	r9, r2
	ldr	r5, .L134+0x18
	mov	sl, r5
	ldr	r4, .L134+0xc
	mov	r3, #0x0
	mov	r2, #0xf
.L132:
	mov	r6, r9
	ldr	r1, [r6]
	add	r1, r1, r3
	add	r1, r1, sl
	mov	r7, #0xba
	lsl	r7, r7, #0x2
	add	r0, r4, r7
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	add	r4, r4, #0x24
	add	r3, r3, #0x24
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L132	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	mov	r5, #0xf2
	lsl	r5, r5, #0x4
	add	r0, r0, r5
	ldr	r4, [r0]
	mov	r2, ip
	ldr	r1, [r2]
	str	r1, [r0]
	add	r0, r4, #0
	bl	ApplyNewEncryptionKeyToBagItems
	mov	r6, r8
	ldr	r0, [r6]
	add	r0, r0, r5
	str	r4, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L135:
	.align	2, 0
.L134:
	.word	gSaveBlock2Ptr
	.word	gLastEncryptionKey
	.word	gSaveBlock1Ptr
	.word	gLoadedSaveData
	.word	0x464
	.word	0x54c
	.word	0x2cd0
.Lfe18:
	.size	 SavePlayerBag,.Lfe18-SavePlayerBag
	.align	2, 0
	.globl	ApplyNewEncryptionKeyToHword
	.type	 ApplyNewEncryptionKeyToHword,function
	.thumb_func
ApplyNewEncryptionKeyToHword:
	ldr	r2, .L137
	ldr	r2, [r2]
	mov	r3, #0xf2
	lsl	r3, r3, #0x4
	add	r2, r2, r3
	ldr	r2, [r2]
	ldrh	r3, [r0]
	eor	r2, r2, r3
	eor	r2, r2, r1
	strh	r2, [r0]
	bx	lr
.L138:
	.align	2, 0
.L137:
	.word	gSaveBlock2Ptr
.Lfe19:
	.size	 ApplyNewEncryptionKeyToHword,.Lfe19-ApplyNewEncryptionKeyToHword
	.align	2, 0
	.globl	ApplyNewEncryptionKeyToWord
	.type	 ApplyNewEncryptionKeyToWord,function
	.thumb_func
ApplyNewEncryptionKeyToWord:
	ldr	r2, .L140
	ldr	r3, [r2]
	mov	r2, #0xf2
	lsl	r2, r2, #0x4
	add	r3, r3, r2
	ldr	r2, [r0]
	ldr	r3, [r3]
	eor	r2, r2, r3
	eor	r2, r2, r1
	str	r2, [r0]
	bx	lr
.L141:
	.align	2, 0
.L140:
	.word	gSaveBlock2Ptr
.Lfe20:
	.size	 ApplyNewEncryptionKeyToWord,.Lfe20-ApplyNewEncryptionKeyToWord
	.align	2, 0
	.globl	ApplyNewEncryptionKeyToAllEncryptedData
	.type	 ApplyNewEncryptionKeyToAllEncryptedData,function
	.thumb_func
ApplyNewEncryptionKeyToAllEncryptedData:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r7, .L148
	ldr	r6, .L148+0x4
	mov	r4, #0x3
.L146:
	ldr	r0, [r7]
	add	r0, r0, r6
	add	r0, r0, #0x4
	add	r1, r5, #0
	bl	ApplyNewEncryptionKeyToWord
	add	r6, r6, #0xc
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L146	@cond_branch
	add	r0, r5, #0
	bl	ApplyNewEncryptionKeyToGameStats
	add	r0, r5, #0
	bl	ApplyNewEncryptionKeyToBagItems_
	add	r0, r5, #0
	bl	ApplyNewEncryptionKeyToBerryPowder
	ldr	r4, .L148
	ldr	r0, [r4]
	mov	r1, #0xa4
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	add	r1, r5, #0
	bl	ApplyNewEncryptionKeyToWord
	ldr	r0, [r4]
	mov	r1, #0xa5
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	add	r1, r5, #0
	bl	ApplyNewEncryptionKeyToHword
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L149:
	.align	2, 0
.L148:
	.word	gSaveBlock1Ptr
	.word	0x3d38
.Lfe21:
	.size	 ApplyNewEncryptionKeyToAllEncryptedData,.Lfe21-ApplyNewEncryptionKeyToAllEncryptedData
	.comm	gPokemonStoragePtr, 4	@ 4
	.comm	gSaveBlock2Ptr, 4	@ 4
	.comm	gSaveBlock1Ptr, 4	@ 4
	.comm	gFlashMemoryPresent, 4	@ 4
.text
	.align	2, 0 @ Don't pad with nop

