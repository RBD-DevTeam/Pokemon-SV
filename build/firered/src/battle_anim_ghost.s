@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sAffineAnim_ConfuseRayBallBounce,object
sAffineAnim_ConfuseRayBallBounce:
	.short	0x1e
	.short	0x1e
	.byte	0xa
	.byte	0x5
	.space	2
	.short	-0x1e
	.short	-0x1e
	.byte	0xa
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_ConfuseRayBallBounce,24
	.align	2, 0
	.type	 sAffineAnims_ConfuseRayBallBounce,object
sAffineAnims_ConfuseRayBallBounce:
	.word	sAffineAnim_ConfuseRayBallBounce
	.size	 sAffineAnims_ConfuseRayBallBounce,4
	.globl	gConfuseRayBallBounceSpriteTemplate
	.align	2, 0
	.type	 gConfuseRayBallBounceSpriteTemplate,object
	.size	 gConfuseRayBallBounceSpriteTemplate,24
gConfuseRayBallBounceSpriteTemplate:
	.short	0x271d
	.short	0x271d
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_ConfuseRayBallBounce
	.word	AnimConfuseRayBallBounce
	.globl	gConfuseRayBallSpiralSpriteTemplate
	.align	2, 0
	.type	 gConfuseRayBallSpiralSpriteTemplate,object
	.size	 gConfuseRayBallSpiralSpriteTemplate,24
gConfuseRayBallSpiralSpriteTemplate:
	.short	0x271d
	.short	0x271d
	.word	gOamData_AffineOff_ObjBlend_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimConfuseRayBallSpiral
	.align	2, 0
	.type	 sAffineAnim_ShadowBall,object
sAffineAnim_ShadowBall:
	.short	0x0
	.short	0x0
	.byte	0xa
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sAffineAnim_ShadowBall,16
	.align	2, 0
	.type	 sAffineAnims_ShadowBall,object
sAffineAnims_ShadowBall:
	.word	sAffineAnim_ShadowBall
	.size	 sAffineAnims_ShadowBall,4
	.globl	gShadowBallSpriteTemplate
	.align	2, 0
	.type	 gShadowBallSpriteTemplate,object
	.size	 gShadowBallSpriteTemplate,24
gShadowBallSpriteTemplate:
	.short	0x27c0
	.short	0x27c0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	sAffineAnims_ShadowBall
	.word	AnimShadowBall
	.globl	sAnim_Lick
	.align	2, 0
	.type	 sAnim_Lick,object
sAnim_Lick:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x8
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x18
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 sAnim_Lick,24
	.align	2, 0
	.type	 sAnims_Lick,object
sAnims_Lick:
	.word	sAnim_Lick
	.size	 sAnims_Lick,4
	.globl	gLickSpriteTemplate
	.align	2, 0
	.type	 gLickSpriteTemplate,object
	.size	 gLickSpriteTemplate,24
gLickSpriteTemplate:
	.short	0x27c1
	.short	0x27c1
	.word	gOamData_AffineOff_ObjNormal_16x32
	.word	sAnims_Lick
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLick
	.align	2, 0
	.type	 sAffineAnim_Unused,object
sAffineAnim_Unused:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sAffineAnim_Unused,16
	.align	2, 0
	.type	 sAffineAnims_Unused,object
sAffineAnims_Unused:
	.word	sAffineAnim_Unused
	.size	 sAffineAnims_Unused,4
	.globl	gDestinyBondWhiteShadowSpriteTemplate
	.align	2, 0
	.type	 gDestinyBondWhiteShadowSpriteTemplate,object
	.size	 gDestinyBondWhiteShadowSpriteTemplate,24
gDestinyBondWhiteShadowSpriteTemplate:
	.short	0x27cc
	.short	0x27cc
	.word	gOamData_AffineOff_ObjBlend_64x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDestinyBondWhiteShadow
	.globl	gCurseNailSpriteTemplate
	.align	2, 0
	.type	 gCurseNailSpriteTemplate,object
	.size	 gCurseNailSpriteTemplate,24
gCurseNailSpriteTemplate:
	.short	0x27d7
	.short	0x27d7
	.word	gOamData_AffineOff_ObjBlend_32x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCurseNail
	.globl	gCurseGhostSpriteTemplate
	.align	2, 0
	.type	 gCurseGhostSpriteTemplate,object
	.size	 gCurseGhostSpriteTemplate,24
gCurseGhostSpriteTemplate:
	.short	0x27d8
	.short	0x27d8
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGhostStatusSprite
	.globl	gNightmareDevilSpriteTemplate
	.align	2, 0
	.type	 gNightmareDevilSpriteTemplate,object
	.size	 gNightmareDevilSpriteTemplate,24
gNightmareDevilSpriteTemplate:
	.short	0x27ed
	.short	0x27ed
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGhostStatusSprite
	.align	2, 0
	.type	 sAnim_GrudgeFlame,object
sAnim_GrudgeFlame:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x18
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sAnim_GrudgeFlame,20
	.align	2, 0
	.type	 sAnims_GrudgeFlame,object
sAnims_GrudgeFlame:
	.word	sAnim_GrudgeFlame
	.size	 sAnims_GrudgeFlame,4
	.globl	gGrudgeFlameSpriteTemplate
	.align	2, 0
	.type	 gGrudgeFlameSpriteTemplate,object
	.size	 gGrudgeFlameSpriteTemplate,24
gGrudgeFlameSpriteTemplate:
	.short	0x280d
	.short	0x280d
	.word	gOamData_AffineOff_ObjBlend_16x32
	.word	sAnims_GrudgeFlame
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGrudgeFlame
	.align	2, 0
	.type	 sMonMoveCircularSpriteTemplate,object
	.size	 sMonMoveCircularSpriteTemplate,24
sMonMoveCircularSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMonMoveCircular
.text
	.align	2, 0
	.type	 AnimConfuseRayBallBounce,function
	.thumb_func
AnimConfuseRayBallBounce:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L3
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L3+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslationWithSpeed
	ldr	r0, .L3+0x8
	str	r0, [r4, #0x1c]
	mov	r0, #0x10
	strh	r0, [r4, #0x3a]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x3a]
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimConfuseRayBallBounce_Step1
.Lfe1:
	.size	 AnimConfuseRayBallBounce,.Lfe1-AnimConfuseRayBallBounce
	.align	2, 0
	.type	 AnimConfuseRayBallBounce_Step1,function
	.thumb_func
AnimConfuseRayBallBounce_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateConfuseRayBallBlend
	add	r0, r4, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L6	@cond_branch
	ldr	r0, .L9
	str	r0, [r4, #0x1c]
	b	.L5
.L10:
	.align	2, 0
.L9:
	.word	AnimConfuseRayBallBounce_Step2
.L6:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xf
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x38]
	add	r0, r2, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x38]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0
	beq	.L7	@cond_branch
	cmp	r2, #0xc4
	ble	.L5	@cond_branch
.L7:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L5	@cond_branch
	ldr	r0, .L11
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0xbd
	bl	PlaySE12WithPanning
.L5:
	pop	{r4}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gAnimCustomPanning
.Lfe2:
	.size	 AnimConfuseRayBallBounce_Step1,.Lfe2-AnimConfuseRayBallBounce_Step1
	.align	2, 0
	.type	 AnimConfuseRayBallBounce_Step2,function
	.thumb_func
AnimConfuseRayBallBounce_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	AnimTranslateLinear
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xf
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x38]
	add	r0, r2, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x38]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0
	beq	.L15	@cond_branch
	cmp	r2, #0xc4
	ble	.L14	@cond_branch
.L15:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L14	@cond_branch
	mov	r0, #0xbd
	bl	PlaySE
.L14:
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L16	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L18
	str	r0, [r4, #0x1c]
	b	.L17
.L19:
	.align	2, 0
.L18:
	.word	DestroyAnimSpriteAndDisableBlend
.L16:
	add	r0, r4, #0
	bl	UpdateConfuseRayBallBlend
.L17:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 AnimConfuseRayBallBounce_Step2,.Lfe3-AnimConfuseRayBallBounce_Step2
	.align	2, 0
	.type	 UpdateConfuseRayBallBlend,function
	.thumb_func
UpdateConfuseRayBallBlend:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x3a]
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xff
	ble	.L21	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	ldr	r1, .L31
	cmp	r0, r1
	bne	.L20	@cond_branch
	mov	r0, #0x0
	b	.L29
.L32:
	.align	2, 0
.L31:
	.word	0x10d0000
.L21:
	ldrh	r1, [r4, #0x3c]
	add	r3, r1, #0x1
	strh	r3, [r4, #0x3c]
	mov	r0, #0xff
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldr	r1, .L33
	and	r1, r1, r3
	strh	r1, [r4, #0x3c]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	add	r0, r2, #0x1
	b	.L30
.L34:
	.align	2, 0
.L33:
	.word	-0x100
.L24:
	sub	r0, r2, #0x1
.L30:
	strh	r0, [r4, #0x3a]
	ldrh	r0, [r4, #0x3a]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L27	@cond_branch
	cmp	r0, #0x10
	bne	.L26	@cond_branch
.L27:
	ldrh	r0, [r4, #0x3c]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	eor	r0, r0, r1
	strh	r0, [r4, #0x3c]
.L26:
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L20	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L29:
	strh	r0, [r4, #0x3a]
.L20:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 UpdateConfuseRayBallBlend,.Lfe4-UpdateConfuseRayBallBlend
	.align	2, 0
	.type	 AnimConfuseRayBallSpiral,function
	.thumb_func
AnimConfuseRayBallSpiral:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r1, .L36
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	AnimConfuseRayBallSpiral_Step
.Lfe5:
	.size	 AnimConfuseRayBallSpiral,.Lfe5-AnimConfuseRayBallSpiral
	.align	2, 0
	.type	 AnimConfuseRayBallSpiral_Step,function
	.thumb_func
AnimConfuseRayBallSpiral_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x41
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x82
	bhi	.L39	@cond_branch
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x8
	b	.L42
.L39:
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
.L42:
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x13
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x50
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3d
	bne	.L41	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L41:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimConfuseRayBallSpiral_Step,.Lfe6-AnimConfuseRayBallSpiral_Step
	.align	2, 0
	.globl	AnimTask_NightShadeClone
	.type	 AnimTask_NightShadeClone,function
	.thumb_func
AnimTask_NightShadeClone:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	PrepareBattlerSpriteForRotScale
	add	r0, r4, #0
	mov	r1, #0x80
	mov	r2, #0x80
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldr	r1, .L44
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L44+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x0
	mov	r1, #0x80
	strh	r1, [r0, #0x8]
	ldr	r1, .L44+0x8
	ldrh	r1, [r1]
	strh	r1, [r0, #0xa]
	strh	r2, [r0, #0xc]
	mov	r1, #0x10
	strh	r1, [r0, #0xe]
	ldr	r1, .L44+0xc
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gSprites
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_NightShadeClone_Step1
.Lfe7:
	.size	 AnimTask_NightShadeClone,.Lfe7-AnimTask_NightShadeClone
	.align	2, 0
	.type	 AnimTask_NightShadeClone_Step1,function
	.thumb_func
AnimTask_NightShadeClone_Step1:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L49
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L46	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0xc]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x9
	bne	.L46	@cond_branch
	ldr	r0, .L49+0x4
	str	r0, [r4]
.L46:
	pop	{r4}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gTasks
	.word	AnimTask_NightShadeClone_Step2
.Lfe8:
	.size	 AnimTask_NightShadeClone_Step1,.Lfe8-AnimTask_NightShadeClone_Step1
	.align	2, 0
	.type	 AnimTask_NightShadeClone_Step2,function
	.thumb_func
AnimTask_NightShadeClone_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L55
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L52	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xa]
	b	.L51
.L56:
	.align	2, 0
.L55:
	.word	gTasks
.L52:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	bgt	.L53	@cond_branch
	mov	r0, #0x8
	ldrsh	r2, [r4, r0]
	add	r0, r1, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	b	.L51
.L53:
	add	r0, r1, #0
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
.L51:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimTask_NightShadeClone_Step2,.Lfe9-AnimTask_NightShadeClone_Step2
	.align	2, 0
	.type	 AnimShadowBall,function
	.thumb_func
AnimShadowBall:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldrh	r5, [r4, #0x20]
	ldrh	r6, [r4, #0x22]
	ldr	r0, .L58
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r9, r1
	strh	r0, [r4, #0x20]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	mov	r1, r9
	strh	r1, [r4, #0x2e]
	ldr	r2, .L58+0x4
	ldrh	r1, [r2]
	strh	r1, [r4, #0x30]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r4, #0x32]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r4, #0x34]
	ldrh	r1, [r4, #0x20]
	lsl	r1, r1, #0x4
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x38]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	sub	r5, r5, r0
	lsl	r5, r5, #0x4
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r1, r1, #0x1
	add	r0, r5, #0
	str	r2, [sp]
	bl	__divsi3
	strh	r0, [r4, #0x3a]
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	sub	r6, r6, r0
	lsl	r6, r6, #0x4
	ldr	r2, [sp]
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r1, r1, #0x1
	add	r0, r6, #0
	bl	__divsi3
	strh	r0, [r4, #0x3c]
	ldr	r0, .L58+0x8
	str	r0, [r4, #0x1c]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimShadowBall_Step
.Lfe10:
	.size	 AnimShadowBall,.Lfe10-AnimShadowBall
	.align	2, 0
	.type	 AnimShadowBall_Step,function
	.thumb_func
AnimShadowBall_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L64	@cond_branch
	cmp	r0, #0x1
	bgt	.L71	@cond_branch
	cmp	r0, #0
	beq	.L62	@cond_branch
	b	.L61
.L71:
	cmp	r0, #0x2
	beq	.L66	@cond_branch
	cmp	r0, #0x3
	beq	.L68	@cond_branch
	b	.L61
.L62:
	ldrh	r0, [r5, #0x3a]
	ldrh	r2, [r5, #0x36]
	add	r0, r0, r2
	strh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x3c]
	ldrh	r2, [r5, #0x38]
	add	r1, r1, r2
	strh	r1, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r5, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r5, #0x22]
	ldrh	r0, [r5, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L61	@cond_branch
	b	.L72
.L64:
	ldrh	r0, [r5, #0x32]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L61	@cond_branch
	ldr	r4, .L73
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x30]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x36]
	ldrh	r0, [r5, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x38]
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r2, #0x34
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r5, #0x3a]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r2, #0x22
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r2, #0x34
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r5, #0x3c]
	b	.L72
.L74:
	.align	2, 0
.L73:
	.word	gBattleAnimTarget
.L66:
	ldrh	r0, [r5, #0x3a]
	ldrh	r1, [r5, #0x36]
	add	r0, r0, r1
	strh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x3c]
	ldrh	r2, [r5, #0x38]
	add	r1, r1, r2
	strh	r1, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r5, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r5, #0x22]
	ldrh	r0, [r5, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L61	@cond_branch
	ldr	r4, .L75
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L72:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L61
.L76:
	.align	2, 0
.L75:
	.word	gBattleAnimTarget
.L68:
	add	r0, r5, #0
	bl	DestroySpriteAndMatrix
.L61:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 AnimShadowBall_Step,.Lfe11-AnimShadowBall_Step
	.align	2, 0
	.type	 AnimLick,function
	.thumb_func
AnimLick:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L78
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	AnimLick_Step
.Lfe12:
	.size	 AnimLick,.Lfe12-AnimLick
	.align	2, 0
	.type	 AnimLick_Step,function
	.thumb_func
AnimLick_Step:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r5, #0x0
	mov	r6, #0x0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L81	@cond_branch
	add	r1, r3, #0
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x4
	and	r0, r0, r2
	add	r4, r1, #0
	cmp	r0, #0
	bne	.L82	@cond_branch
	mov	r0, #0x4
	orr	r0, r0, r2
	strb	r0, [r4]
.L82:
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L85	@cond_branch
	cmp	r0, #0x1
	beq	.L87	@cond_branch
	mov	r6, #0x1
	b	.L83
.L85:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x2
	bne	.L83	@cond_branch
	b	.L95
.L87:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x4
	bne	.L83	@cond_branch
	mov	r5, #0x1
.L83:
	cmp	r5, #0
	beq	.L90	@cond_branch
.L95:
	ldrb	r2, [r4]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r3, #0x32]
	strh	r1, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L81	@cond_branch
	strh	r1, [r3, #0x32]
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	b	.L81
.L90:
	cmp	r6, #0
	beq	.L93	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
	b	.L81
.L93:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
.L81:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 AnimLick_Step,.Lfe13-AnimLick_Step
	.align	2, 0
	.globl	AnimTask_NightmareClone
	.type	 AnimTask_NightmareClone,function
	.thumb_func
AnimTask_NightmareClone:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L101
	add	r5, r0, r1
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	mov	r6, #0x0
	mov	r1, #0x0
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L97	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L96
.L102:
	.align	2, 0
.L101:
	.word	gTasks
.L97:
	strh	r1, [r5, #0xa]
	mov	r0, #0xf
	strh	r0, [r5, #0xc]
	mov	r0, #0x2
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r5, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r5, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r4, .L103
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x50
	strh	r1, [r0, #0x2e]
	ldr	r0, .L103+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L98	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L103+0x8
	strh	r1, [r0, #0x30]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x70
	b	.L100
.L104:
	.align	2, 0
.L103:
	.word	gSprites
	.word	gBattleAnimTarget
	.word	0xff70
.L98:
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x90
	strh	r1, [r0, #0x30]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L105
.L100:
	strh	r1, [r0, #0x32]
	ldr	r4, .L105+0x4
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, #0x0
	strh	r2, [r0, #0x34]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x36]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L105+0x8
	bl	StoreSpriteCallbackInData6
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L105+0xc
	str	r1, [r0]
	ldr	r0, .L105+0x10
	str	r0, [r5]
.L96:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L106:
	.align	2, 0
.L105:
	.word	0xff90
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	TranslateSpriteLinearFixedPoint
	.word	AnimTask_NightmareClone_Step
.Lfe14:
	.size	 AnimTask_NightmareClone,.Lfe14-AnimTask_NightmareClone
	.align	2, 0
	.type	 AnimTask_NightmareClone_Step,function
	.thumb_func
AnimTask_NightmareClone_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L122
	add	r4, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L116	@cond_branch
	cmp	r0, #0x1
	bgt	.L121	@cond_branch
	cmp	r0, #0
	beq	.L109	@cond_branch
	b	.L108
.L123:
	.align	2, 0
.L122:
	.word	gTasks
.L121:
	cmp	r0, #0x2
	beq	.L118	@cond_branch
	b	.L108
.L109:
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x3
	and	r0, r0, r1
	strh	r0, [r4, #0x12]
	cmp	r0, #0x1
	bne	.L110	@cond_branch
	ldrh	r1, [r4, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L110	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xc]
.L110:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3
	bne	.L112	@cond_branch
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L112	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
.L112:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, [r4, #0xc]
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	cmp	r1, r0
	bne	.L108	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	ble	.L108	@cond_branch
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L124
	add	r0, r0, r1
	bl	DestroySpriteWithActiveSheet
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	b	.L108
.L125:
	.align	2, 0
.L124:
	.word	gSprites
.L116:
	ldrh	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L108	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	b	.L108
.L118:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L108:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 AnimTask_NightmareClone_Step,.Lfe15-AnimTask_NightmareClone_Step
	.align	2, 0
	.globl	AnimTask_SpiteTargetShadow
	.type	 AnimTask_SpiteTargetShadow,function
	.thumb_func
AnimTask_SpiteTargetShadow:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r2, .L127
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x26]
	ldr	r2, .L127+0x4
	str	r2, [r1]
	bl	_call_via_r2
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	gTasks
	.word	AnimTask_SpiteTargetShadow_Step1
.Lfe16:
	.size	 AnimTask_SpiteTargetShadow,.Lfe16-AnimTask_SpiteTargetShadow
	.align	2, 0
	.type	 AnimTask_SpiteTargetShadow_Step1,function
	.thumb_func
AnimTask_SpiteTargetShadow_Step1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L154
	add	r5, r0, r1
	ldr	r0, .L154+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x4
	bls	.LCB1380
	b	.L150	@long jump
.LCB1380:
	lsl	r0, r0, #0x2
	ldr	r1, .L154+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L155:
	.align	2, 0
.L154:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	.L151
	.align	2, 0
	.align	2, 0
.L151:
	.word	.L131
	.word	.L139
	.word	.L140
	.word	.L144
	.word	.L147
.L131:
	ldr	r7, .L156
	add	r0, r7, #0
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	mov	r8, r2
	strh	r0, [r5, #0x24]
	cmp	r0, #0xff
	beq	.L152	@cond_branch
	cmp	r0, #0xf
	beq	.L152	@cond_branch
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L135	@cond_branch
	add	r0, r7, #0
	bl	FreeSpritePaletteByTag
.L152:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L130
.L157:
	.align	2, 0
.L156:
	.word	0x2771
.L135:
	ldr	r4, .L158
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r2, [r5, #0x24]
	lsl	r2, r2, #0x4
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r2, #0x8
	ldrsh	r0, [r5, r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r0, .L158+0x4
	ldr	r1, [r0]
	ldr	r0, .L158+0x8
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1f
	add	r2, r2, #0x3e
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r2, r8
	strh	r2, [r5, #0xa]
	strh	r2, [r5, #0xc]
	mov	r0, #0x10
	strh	r0, [r5, #0xe]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, #0x22
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x10]
	cmp	r6, #0x1
	bne	.L137	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	b	.L138
.L159:
	.align	2, 0
.L158:
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.L137:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
.L138:
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L150
.L139:
	mov	r1, #0x24
	ldrsh	r0, [r5, r1]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x24]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x1
	ldr	r1, .L160
	add	r0, r0, r1
	mov	r2, #0x24
	ldrsh	r1, [r5, r2]
	lsl	r1, r1, #0x1
	ldr	r2, .L160+0x4
	add	r1, r1, r2
	ldr	r2, .L160+0x8
	bl	CpuSet
	ldrh	r0, [r5, #0x10]
	ldr	r3, .L160+0xc
	mov	r1, #0x10
	mov	r2, #0xa
	bl	BlendPalette
	b	.L150
.L161:
	.align	2, 0
.L160:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
	.word	0x3c0d
.L140:
	ldr	r2, .L162
	mov	r0, #0x22
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	sub	r1, r1, #0x20
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	cmp	r1, #0
	bge	.L141	@cond_branch
	mov	r2, #0x0
.L141:
	cmp	r6, #0x1
	bne	.L142	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x4
	str	r2, [sp, #0x4]
	str	r6, [sp, #0x8]
	b	.L153
.L163:
	.align	2, 0
.L162:
	.word	gSprites
.L142:
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x8
	str	r2, [sp, #0x4]
	mov	r2, #0x1
	str	r2, [sp, #0x8]
.L153:
	mov	r2, #0x2
	mov	r3, #0x6
	bl	ScanlineEffect_InitWave
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x1c]
	b	.L150
.L144:
	cmp	r6, #0x1
	bne	.L145	@cond_branch
	ldr	r1, .L164
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L146
.L165:
	.align	2, 0
.L164:
	.word	0x3f42
.L145:
	ldr	r1, .L166
	mov	r0, #0x50
	bl	SetGpuReg
.L146:
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L150
.L167:
	.align	2, 0
.L166:
	.word	0x3f44
.L147:
	cmp	r6, #0x1
	bne	.L148	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L149
.L148:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L149:
	ldr	r0, .L168
	str	r0, [r5]
.L150:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
.L130:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	AnimTask_SpiteTargetShadow_Step2
.Lfe17:
	.size	 AnimTask_SpiteTargetShadow_Step1,.Lfe17-AnimTask_SpiteTargetShadow_Step1
	.align	2, 0
	.type	 AnimTask_SpiteTargetShadow_Step2,function
	.thumb_func
AnimTask_SpiteTargetShadow_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L174
	add	r4, r0, r1
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	strh	r0, [r4, #0x12]
	cmp	r0, #0
	bne	.L171	@cond_branch
	ldr	r1, .L174+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	strh	r0, [r4, #0xc]
.L171:
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bne	.L172	@cond_branch
	ldr	r1, .L174+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	mov	r1, #0x10
	sub	r1, r1, r0
	strh	r1, [r4, #0xe]
.L172:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x80
	bne	.L173	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	ldr	r1, .L174+0x8
	str	r1, [r4]
	add	r0, r5, #0
	bl	_call_via_r1
.L173:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L175:
	.align	2, 0
.L174:
	.word	gTasks
	.word	gSineTable
	.word	AnimTask_SpiteTargetShadow_Step3
.Lfe18:
	.size	 AnimTask_SpiteTargetShadow_Step2,.Lfe18-AnimTask_SpiteTargetShadow_Step2
	.align	2, 0
	.type	 AnimTask_SpiteTargetShadow_Step3,function
	.thumb_func
AnimTask_SpiteTargetShadow_Step3:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L189
	add	r4, r0, r1
	ldr	r0, .L189+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L181	@cond_branch
	cmp	r0, #0x1
	bgt	.L187	@cond_branch
	cmp	r0, #0
	beq	.L178	@cond_branch
	b	.L177
.L190:
	.align	2, 0
.L189:
	.word	gTasks
	.word	gBattleAnimTarget
.L187:
	cmp	r0, #0x2
	beq	.L182	@cond_branch
	b	.L177
.L178:
	ldr	r1, .L191
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	cmp	r6, #0x1
	bne	.L179	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	b	.L188
.L192:
	.align	2, 0
.L191:
	.word	gScanlineEffect
.L179:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
.L188:
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L177
.L181:
	ldrh	r0, [r4, #0x10]
	ldr	r3, .L193
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalette
	b	.L177
.L194:
	.align	2, 0
.L193:
	.word	0x3c0d
.L182:
	ldr	r3, .L195
	mov	r0, #0x24
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	bl	DestroySpriteWithActiveSheet
	ldr	r0, .L195+0x4
	bl	FreeSpritePaletteByTag
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	cmp	r6, #0x1
	bne	.L183	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L184
.L196:
	.align	2, 0
.L195:
	.word	gSprites
	.word	0x2771
.L183:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L184:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L177:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimTask_SpiteTargetShadow_Step3,.Lfe19-AnimTask_SpiteTargetShadow_Step3
	.align	2, 0
	.type	 AnimDestinyBondWhiteShadow,function
	.thumb_func
AnimDestinyBondWhiteShadow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r7, r0, #0
	ldr	r0, .L201
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L198	@cond_branch
	ldr	r4, .L201+0x4
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r2, #0xe0
	lsl	r2, r2, #0xd
	add	r0, r0, r2
	lsr	r5, r0, #0x10
	ldr	r4, .L201+0x8
	b	.L200
.L202:
	.align	2, 0
.L201:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L198:
	ldr	r4, .L203
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r2, #0xe0
	lsl	r2, r2, #0xd
	add	r0, r0, r2
	lsr	r5, r0, #0x10
	ldr	r4, .L203+0x4
.L200:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0xe0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r8, r5
	mov	r2, r9
	sub	r4, r2, r5
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r6, #0x4
	strh	r0, [r7, #0x2e]
	lsl	r0, r5, #0x4
	strh	r0, [r7, #0x30]
	mov	r1, sl
	sub	r0, r1, r6
	lsl	r0, r0, #0x4
	ldr	r5, .L203+0x8
	mov	r2, #0x2
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r7, #0x32]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0xc
	mov	r0, #0x2
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	__divsi3
	strh	r0, [r7, #0x34]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r7, #0x36]
	mov	r1, sl
	strh	r1, [r7, #0x38]
	mov	r2, r9
	strh	r2, [r7, #0x3a]
	mov	r1, #0x36
	ldrsh	r0, [r7, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r7, #0x3c]
	ldrb	r1, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
	strh	r6, [r7, #0x20]
	mov	r2, r8
	strh	r2, [r7, #0x22]
	ldr	r0, .L203+0xc
	str	r0, [r7, #0x1c]
	add	r2, r7, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L204:
	.align	2, 0
.L203:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimDestinyBondWhiteShadow_Step
.Lfe20:
	.size	 AnimDestinyBondWhiteShadow,.Lfe20-AnimDestinyBondWhiteShadow
	.align	2, 0
	.type	 AnimDestinyBondWhiteShadow_Step,function
	.thumb_func
AnimDestinyBondWhiteShadow_Step:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r3, [r2, #0x36]
	mov	r1, #0x36
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L206	@cond_branch
	ldrh	r0, [r2, #0x32]
	ldrh	r4, [r2, #0x2e]
	add	r0, r0, r4
	strh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x34]
	ldrh	r4, [r2, #0x30]
	add	r1, r1, r4
	strh	r1, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r2, #0x22]
	sub	r0, r3, #0x1
	strh	r0, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L206	@cond_branch
	strh	r0, [r2, #0x2e]
.L206:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimDestinyBondWhiteShadow_Step,.Lfe21-AnimDestinyBondWhiteShadow_Step
	.align	2, 0
	.globl	AnimTask_DestinyBondWhiteShadow
	.type	 AnimTask_DestinyBondWhiteShadow,function
	.thumb_func
AnimTask_DestinyBondWhiteShadow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L219
	add	r1, r1, r0
	str	r1, [sp]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x0
	ldr	r1, [sp]
	strh	r0, [r1, #0x12]
	strh	r0, [r1, #0x14]
	strh	r0, [r1, #0x16]
	strh	r0, [r1, #0x18]
	mov	r0, #0x10
	strh	r0, [r1, #0x1a]
	ldr	r2, .L219+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0x1c]
	ldr	r4, .L219+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2261
	b	.L209	@long jump
.LCB2261:
	mov	r4, #0x0
.L213:
	lsl	r1, r4, #0x10
	asr	r3, r1, #0x10
	ldr	r0, .L219+0x8
	ldrb	r2, [r0]
	str	r1, [sp, #0x10]
	cmp	r3, r2
	beq	.L212	@cond_branch
	mov	r0, #0x2
	eor	r2, r2, r0
	cmp	r3, r2
	beq	.L212	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L212	@cond_branch
	ldr	r6, [sp, #0x4]
	ldr	r3, [sp, #0x8]
	lsl	r0, r3, #0x10
	asr	r7, r0, #0x10
	ldr	r0, .L219+0xc
	add	r1, r6, #0
	add	r2, r7, #0
	mov	r3, #0x37
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x40
	beq	.L212	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r0, r8
	lsl	r5, r0, #0x4
	add	r5, r5, r8
	lsl	r5, r5, #0x2
	ldr	r1, .L219+0x10
	add	r4, r5, r1
	lsl	r0, r6, #0x4
	strh	r0, [r4, #0x2e]
	lsl	r0, r7, #0x4
	strh	r0, [r4, #0x30]
	mov	r2, sl
	sub	r0, r2, r6
	lsl	r0, r0, #0x4
	ldr	r3, .L219+0x4
	mov	r2, #0x2
	ldrsh	r1, [r3, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	mov	r3, r9
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r7
	lsl	r0, r0, #0x4
	ldr	r2, .L219+0x4
	mov	r3, #0x2
	ldrsh	r1, [r2, r3]
	bl	__divsi3
	strh	r0, [r4, #0x34]
	ldr	r1, .L219+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x36]
	mov	r2, sl
	strh	r2, [r4, #0x38]
	mov	r3, r9
	strh	r3, [r4, #0x3a]
	ldr	r0, .L219+0x14
	add	r5, r5, r0
	ldr	r0, .L219+0x18
	str	r0, [r5]
	ldr	r2, [sp]
	mov	r3, #0x20
	ldrsh	r1, [r2, r3]
	add	r1, r1, #0xd
	lsl	r1, r1, #0x1
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	mov	r1, r8
	strh	r1, [r0]
	ldrh	r0, [r2, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x20]
.L212:
	ldr	r2, [sp, #0x10]
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r2, r3
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L213	@cond_branch
	b	.L217
.L220:
	.align	2, 0
.L219:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gDestinyBondWhiteShadowSpriteTemplate
	.word	gSprites
	.word	gSprites+0x1c
	.word	AnimDestinyBondWhiteShadow_Step
.L209:
	ldr	r0, .L221
	ldr	r7, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	str	r1, [sp, #0xc]
	add	r1, r7, #0
	ldr	r2, [sp, #0xc]
	mov	r3, #0x37
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x40
	beq	.L217	@cond_branch
	mov	r3, #0x30
	mov	sl, r3
	mov	r0, #0x28
	mov	r9, r0
	ldr	r6, .L221+0x4
	mov	r1, r8
	lsl	r5, r1, #0x4
	add	r5, r5, r8
	lsl	r5, r5, #0x2
	add	r4, r5, r6
	lsl	r0, r7, #0x4
	strh	r0, [r4, #0x2e]
	ldr	r2, [sp, #0xc]
	lsl	r0, r2, #0x4
	strh	r0, [r4, #0x30]
	sub	r0, r3, r7
	lsl	r0, r0, #0x4
	ldr	r3, .L221+0x8
	mov	r2, #0x2
	ldrsh	r1, [r3, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	mov	r3, r9
	ldr	r1, [sp, #0xc]
	sub	r0, r3, r1
	lsl	r0, r0, #0x4
	ldr	r2, .L221+0x8
	mov	r3, #0x2
	ldrsh	r1, [r2, r3]
	bl	__divsi3
	strh	r0, [r4, #0x34]
	ldr	r1, .L221+0x8
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x36]
	mov	r2, sl
	strh	r2, [r4, #0x38]
	mov	r3, r9
	strh	r3, [r4, #0x3a]
	add	r6, r6, #0x1c
	add	r5, r5, r6
	ldr	r0, .L221+0xc
	str	r0, [r5]
	mov	r1, r8
	ldr	r0, [sp]
	strh	r1, [r0, #0x22]
	mov	r0, #0x1
	ldr	r2, [sp]
	strh	r0, [r2, #0x20]
.L217:
	ldr	r0, .L221+0x10
	ldr	r3, [sp]
	str	r0, [r3]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L222:
	.align	2, 0
.L221:
	.word	gDestinyBondWhiteShadowSpriteTemplate
	.word	gSprites
	.word	gBattleAnimArgs
	.word	AnimDestinyBondWhiteShadow_Step
	.word	AnimTask_DestinyBondWhiteShadow_Step
.Lfe22:
	.size	 AnimTask_DestinyBondWhiteShadow,.Lfe22-AnimTask_DestinyBondWhiteShadow
	.align	2, 0
	.type	 AnimTask_DestinyBondWhiteShadow_Step,function
	.thumb_func
AnimTask_DestinyBondWhiteShadow_Step:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L256
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L236	@cond_branch
	cmp	r1, #0x1
	bgt	.L253	@cond_branch
	cmp	r1, #0
	beq	.L225	@cond_branch
	b	.L224
.L257:
	.align	2, 0
.L256:
	.word	gTasks
.L253:
	cmp	r1, #0x2
	bne	.LCB2540
	b	.L248	@long jump
.LCB2540:
	cmp	r1, #0x3
	bne	.LCB2542
	b	.L250	@long jump
.LCB2542:
	b	.L224
.L225:
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L226	@cond_branch
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L226	@cond_branch
	strh	r1, [r4, #0x12]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L228	@cond_branch
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L230	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	b	.L230
.L228:
	ldrh	r1, [r4, #0x1a]
	mov	r2, #0x1a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L230	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
.L230:
	ldrh	r1, [r4, #0x1a]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x18]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x17
	ble	.L226	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x16]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
.L226:
	ldrh	r1, [r4, #0x1c]
	mov	r2, #0x1c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L233	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1c]
	b	.L224
.L233:
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L224	@cond_branch
	b	.L254
.L236:
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L224	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x12]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L238	@cond_branch
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L240	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	b	.L240
.L238:
	ldrh	r1, [r4, #0x1a]
	mov	r2, #0x1a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L240	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
.L240:
	ldrh	r1, [r4, #0x1a]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x18]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, [r4, #0x18]
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	cmp	r1, r0
	bne	.L224	@cond_branch
	mov	r5, #0x0
	b	.L255
.L246:
	add	r1, r5, #0
	add	r1, r1, #0xd
	lsl	r1, r1, #0x1
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L258
	add	r0, r0, r1
	bl	DestroySprite
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L255:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	cmp	r5, r0
	blt	.L246	@cond_branch
	b	.L254
.L259:
	.align	2, 0
.L258:
	.word	gSprites
.L248:
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L224	@cond_branch
.L254:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L224
.L250:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L224:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 AnimTask_DestinyBondWhiteShadow_Step,.Lfe23-AnimTask_DestinyBondWhiteShadow_Step
	.align	2, 0
	.globl	AnimTask_CurseStretchingBlackBg
	.type	 AnimTask_CurseStretchingBlackBg,function
	.thumb_func
AnimTask_CurseStretchingBlackBg:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L264
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L264+0x4
	strh	r1, [r0]
	ldr	r1, .L264+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L264+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0xc8
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, .L264+0x10
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L262	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L261	@cond_branch
.L262:
	mov	r6, #0x28
	b	.L263
.L265:
	.align	2, 0
.L264:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f1f
	.word	gBattleAnimAttacker
.L261:
	mov	r6, #0xc8
.L263:
	ldr	r1, .L266
	lsl	r3, r6, #0x10
	asr	r2, r3, #0x10
	lsl	r0, r2, #0x8
	orr	r0, r0, r2
	strh	r0, [r1]
	ldr	r1, .L266+0x4
	mov	r5, #0x28
	ldr	r0, .L266+0x8
	strh	r0, [r1]
	lsr	r3, r3, #0x10
	mov	r1, #0xf0
	sub	r1, r1, r2
	mov	r4, #0x48
	ldr	r2, .L266+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r3, [r0, #0xa]
	strh	r1, [r0, #0xc]
	strh	r5, [r0, #0xe]
	strh	r4, [r0, #0x10]
	strh	r6, [r0, #0x12]
	strh	r5, [r0, #0x14]
	ldr	r1, .L266+0x10
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L267:
	.align	2, 0
.L266:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x2828
	.word	gTasks
	.word	AnimTask_CurseStretchingBlackBg_Step1
.Lfe24:
	.size	 AnimTask_CurseStretchingBlackBg,.Lfe24-AnimTask_CurseStretchingBlackBg
	.align	2, 0
	.type	 AnimTask_CurseStretchingBlackBg_Step1,function
	.thumb_func
AnimTask_CurseStretchingBlackBg_Step1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L271
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0x8]
	add	r0, r1, #0x1
	strh	r0, [r4, #0x8]
	ldrh	r5, [r4, #0xa]
	ldrh	r7, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	mov	sl, r0
	ldrh	r2, [r4, #0x10]
	str	r2, [sp, #0xc]
	ldrh	r0, [r4, #0x12]
	ldrh	r2, [r4, #0x14]
	mov	r8, r2
	lsl	r1, r1, #0x10
	asr	r6, r1, #0x10
	cmp	r6, #0xf
	ble	.LCB2884
	b	.L269	@long jump
.LCB2884:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	str	r0, [sp, #0x10]
	str	r1, [sp, #0x14]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L271+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L271+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r5, r1, #0
	add	r4, r0, #0
	add	r0, r6, #0
	bl	__floatsidf
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r1, r5, #0
	add	r0, r4, #0
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	bl	__subdf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L271+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L271+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	bl	__adddf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	add	r5, r1, #0
	add	r4, r0, #0
	mov	r2, sl
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L271+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L271+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__subdf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r1, [sp, #0xc]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L271+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L271+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__adddf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	b	.L270
.L272:
	.align	2, 0
.L271:
	.word	gTasks
	.long 0x3fb00000, 0x0	@ double 6.25000000000000000000e-2
.L269:
	mov	r2, #0x0
	mov	r9, r2
	mov	r7, #0xf0
	mov	r6, #0x0
	mov	r5, #0x70
	str	r6, [sp]
	str	r6, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r6, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L273
	str	r0, [r4]
.L270:
	ldr	r1, .L273+0x4
	mov	r2, r9
	lsl	r0, r2, #0x8
	orr	r7, r7, r0
	strh	r7, [r1]
	ldr	r1, .L273+0x8
	lsl	r0, r6, #0x8
	orr	r5, r5, r0
	strh	r5, [r1]
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L274:
	.align	2, 0
.L273:
	.word	AnimTask_CurseStretchingBlackBg_Step2
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
.Lfe25:
	.size	 AnimTask_CurseStretchingBlackBg_Step1,.Lfe25-AnimTask_CurseStretchingBlackBg_Step1
	.align	2, 0
	.type	 AnimTask_CurseStretchingBlackBg_Step2,function
	.thumb_func
AnimTask_CurseStretchingBlackBg_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L277
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L276	@cond_branch
	ldr	r0, .L277+0x4
	strh	r1, [r0]
	ldr	r0, .L277+0x8
	strh	r1, [r0]
	ldr	r4, .L277+0xc
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L276:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L278:
	.align	2, 0
.L277:
	.word	gPaletteFade
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe26:
	.size	 AnimTask_CurseStretchingBlackBg_Step2,.Lfe26-AnimTask_CurseStretchingBlackBg_Step2
	.align	2, 0
	.type	 AnimCurseNail,function
	.thumb_func
AnimCurseNail:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L282
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L280	@cond_branch
	mov	r2, #0x18
	ldr	r3, .L282+0x4
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r4, #0x3]
	b	.L281
.L283:
	.align	2, 0
.L282:
	.word	gBattleAnimAttacker
	.word	0xfffe
.L280:
	ldr	r2, .L284
	mov	r3, #0x2
.L281:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	strh	r3, [r4, #0x30]
	mov	r0, #0x3c
	strh	r0, [r4, #0x2e]
	ldr	r0, .L284+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	0xffe8
	.word	AnimCurseNail_Step1
.Lfe27:
	.size	 AnimCurseNail,.Lfe27-AnimCurseNail
	.align	2, 0
	.type	 AnimCurseNail_Step1,function
	.thumb_func
AnimCurseNail_Step1:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L287	@cond_branch
	sub	r0, r1, #0x1
	b	.L292
.L287:
	ldrh	r0, [r3, #0x30]
	ldrh	r4, [r3, #0x24]
	add	r1, r0, r4
	strh	r1, [r3, #0x24]
	add	r0, r1, #0x7
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xe
	bls	.L288	@cond_branch
	ldrh	r0, [r3, #0x20]
	add	r0, r0, r1
	strh	r0, [r3, #0x20]
	mov	r0, #0x0
	strh	r0, [r3, #0x24]
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x8
	ldr	r4, .L293
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L293+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L290	@cond_branch
	mov	r0, #0x1e
	strh	r0, [r3, #0x2e]
	ldr	r0, .L293+0x8
	str	r0, [r3, #0x1c]
	ldr	r1, .L293+0xc
	add	r0, r3, #0
	bl	StoreSpriteCallbackInData6
	b	.L288
.L294:
	.align	2, 0
.L293:
	.word	0x3ff
	.word	-0x400
	.word	WaitAnimForDuration
	.word	AnimCurseNail_Step2
.L290:
	mov	r0, #0x28
.L292:
	strh	r0, [r3, #0x2e]
.L288:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 AnimCurseNail_Step1,.Lfe28-AnimCurseNail_Step1
	.align	2, 0
	.type	 AnimCurseNail_Step2,function
	.thumb_func
AnimCurseNail_Step2:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r5, [r4, r0]
	cmp	r5, #0
	bne	.L296	@cond_branch
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	b	.L297
.L296:
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bgt	.L298	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L297
.L298:
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L297	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L301
	str	r0, [r4, #0x1c]
.L297:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	AnimCurseNail_End
.Lfe29:
	.size	 AnimCurseNail_Step2,.Lfe29-AnimCurseNail_Step2
	.align	2, 0
	.type	 AnimCurseNail_End,function
	.thumb_func
AnimCurseNail_End:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L304
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L304+0x4
	strh	r1, [r0]
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
.Lfe30:
	.size	 AnimCurseNail_End,.Lfe30-AnimCurseNail_End
	.align	2, 0
	.type	 AnimGhostStatusSprite,function
	.thumb_func
AnimGhostStatusSprite:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r1, #0xc
	bl	Sin
	strh	r0, [r5, #0x24]
	ldr	r0, .L314
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L307	@cond_branch
	ldrh	r0, [r5, #0x24]
	neg	r0, r0
	strh	r0, [r5, #0x24]
.L307:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x6
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r5, #0x30]
	add	r0, r0, r1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L308	@cond_branch
	ldr	r0, .L314+0x4
	strh	r0, [r5, #0x3a]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r5, #0x3a]
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L309
.L315:
	.align	2, 0
.L314:
	.word	gBattleAnimAttacker
	.word	0x50b
.L308:
	cmp	r0, #0x1e
	ble	.L309	@cond_branch
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x3a]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x10
	mov	r6, #0xff
	and	r6, r6, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	cmp	r7, #0x10
	bls	.L311	@cond_branch
	mov	r7, #0x10
.L311:
	sub	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r0, #0
	bge	.L312	@cond_branch
	mov	r6, #0x0
.L312:
	lsl	r4, r7, #0x8
	orr	r4, r4, r6
	lsl	r1, r4, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r4, [r5, #0x3a]
	cmp	r7, #0x10
	bne	.L309	@cond_branch
	cmp	r6, #0
	bne	.L309	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L316
	str	r0, [r5, #0x1c]
.L309:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L317:
	.align	2, 0
.L316:
	.word	AnimGhostStatusSprite_End
.Lfe31:
	.size	 AnimGhostStatusSprite,.Lfe31-AnimGhostStatusSprite
	.align	2, 0
	.type	 AnimGhostStatusSprite_End,function
	.thumb_func
AnimGhostStatusSprite_End:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 AnimGhostStatusSprite_End,.Lfe32-AnimGhostStatusSprite_End
	.align	2, 0
	.globl	AnimTask_GrudgeFlames
	.type	 AnimTask_GrudgeFlames,function
	.thumb_func
AnimTask_GrudgeFlames:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L320
	add	r4, r4, r0
	mov	r6, #0x0
	strh	r6, [r4, #0x8]
	mov	r0, #0x10
	mov	r8, r0
	mov	r0, r8
	strh	r0, [r4, #0xa]
	ldr	r5, .L320+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1a]
	ldrb	r0, [r5]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1c]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	lsr	r0, r0, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	add	r1, r1, #0x8
	strh	r1, [r4, #0x1e]
	strh	r6, [r4, #0x16]
	ldrb	r0, [r5]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x12]
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x14]
	strh	r6, [r4, #0xe]
	mov	r0, r8
	strh	r0, [r4, #0x10]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r6, [r4, #0x18]
	ldr	r0, .L320+0x8
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L321:
	.align	2, 0
.L320:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	AnimTask_GrudgeFlames_Step
.Lfe33:
	.size	 AnimTask_GrudgeFlames,.Lfe33-AnimTask_GrudgeFlames
	.align	2, 0
	.type	 AnimTask_GrudgeFlames_Step,function
	.thumb_func
AnimTask_GrudgeFlames_Step:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L353
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bls	.LCB3647
	b	.L323	@long jump
.LCB3647:
	lsl	r0, r0, #0x2
	ldr	r1, .L353+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L354:
	.align	2, 0
.L353:
	.word	gTasks
	.word	.L349
	.align	2, 0
	.align	2, 0
.L349:
	.word	.L324
	.word	.L332
	.word	.L338
	.word	.L340
	.word	.L346
	.word	.L348
.L324:
	mov	r6, #0x0
.L328:
	mov	r2, #0x1a
	ldrsh	r1, [r4, r2]
	mov	r0, #0x1c
	ldrsh	r2, [r4, r0]
	ldrb	r3, [r4, #0x14]
	ldr	r0, .L355
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L327	@cond_branch
	ldr	r1, .L355+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	strh	r7, [r5, #0x2e]
	ldr	r0, .L355+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L330	@cond_branch
	mov	r1, #0x1
.L330:
	strh	r1, [r5, #0x30]
	mov	r0, #0x2a
	mul	r0, r0, r6
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r4, #0x1e]
	strh	r0, [r5, #0x34]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
.L327:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bls	.L328	@cond_branch
	b	.L351
.L356:
	.align	2, 0
.L355:
	.word	gGrudgeFlameSpriteTemplate
	.word	gSprites
	.word	gBattleAnimAttacker
.L332:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L333	@cond_branch
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xd
	bgt	.L335	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L335
.L333:
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x4
	ble	.L335	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
.L335:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	ldrh	r2, [r4, #0xe]
	ldrh	r1, [r4, #0x10]
	cmp	r0, #0xe
	bne	.L345	@cond_branch
	cmp	r1, #0x4
	bne	.L345	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L352
.L338:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L323	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L351
.L340:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L341	@cond_branch
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L343	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L343
.L341:
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L343	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x10]
.L343:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	ldrh	r2, [r4, #0xe]
	ldrh	r1, [r4, #0x10]
	cmp	r0, #0
	bne	.L345	@cond_branch
	cmp	r1, #0x10
	bne	.L345	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x18]
.L352:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L345:
	lsl	r1, r1, #0x8
	orr	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L323
.L346:
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L323	@cond_branch
.L351:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L323
.L348:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L323:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 AnimTask_GrudgeFlames_Step,.Lfe34-AnimTask_GrudgeFlames_Step
	.align	2, 0
	.type	 AnimGrudgeFlame,function
	.thumb_func
AnimGrudgeFlame:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L358	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x2
	b	.L363
.L358:
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x2
.L363:
	strh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x32]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x41
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7e
	bhi	.L360	@cond_branch
	ldr	r2, .L365
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x12]
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	b	.L364
.L366:
	.align	2, 0
.L365:
	.word	gTasks
.L360:
	ldr	r2, .L367
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x3
	ldrb	r1, [r0, #0x12]
	and	r1, r1, r2
.L364:
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	mov	r1, #0x7
	bl	Sin
	strh	r0, [r4, #0x26]
	ldr	r2, .L367
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	mov	r2, #0x18
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L362	@cond_branch
	ldrh	r0, [r1, #0x16]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x16]
	add	r0, r4, #0
	bl	DestroySprite
.L362:
	pop	{r4}
	pop	{r0}
	bx	r0
.L368:
	.align	2, 0
.L367:
	.word	gTasks
.Lfe35:
	.size	 AnimGrudgeFlame,.Lfe35-AnimGrudgeFlame
	.align	2, 0
	.globl	AnimTask_GhostGetOut
	.type	 AnimTask_GhostGetOut,function
	.thumb_func
AnimTask_GhostGetOut:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r2, .L370
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x26]
	ldr	r2, .L370+0x4
	str	r2, [r1]
	bl	_call_via_r2
	pop	{r0}
	bx	r0
.L371:
	.align	2, 0
.L370:
	.word	gTasks
	.word	AnimTask_GhostGetOut_Step1
.Lfe36:
	.size	 AnimTask_GhostGetOut,.Lfe36-AnimTask_GhostGetOut
	.align	2, 0
	.type	 AnimTask_GhostGetOut_Step1,function
	.thumb_func
AnimTask_GhostGetOut_Step1:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L397
	add	r6, r1, r0
	ldr	r0, .L397+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, #0x26
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x7
	bls	.LCB4074
	b	.L373	@long jump
.LCB4074:
	lsl	r0, r0, #0x2
	ldr	r1, .L397+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L398:
	.align	2, 0
.L397:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	.L393
	.align	2, 0
	.align	2, 0
.L393:
	.word	.L374
	.word	.L375
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L383
	.word	.L386
	.word	.L390
.L374:
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x2
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x0
	strh	r0, [r6, #0xa]
	strh	r0, [r6, #0xc]
	mov	r0, #0x10
	strh	r0, [r6, #0xe]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x10]
	ldr	r3, .L399
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x5]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	strh	r0, [r6, #0x12]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x14]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r2, [r0, #0x1]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r0, #0x10
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r0, #0x80
	strh	r0, [r6, #0x16]
	b	.L373
.L400:
	.align	2, 0
.L399:
	.word	gSprites
.L375:
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	mov	r5, #0x1
	and	r5, r5, r0
	cmp	r5, #0
	beq	.LCB4178
	b	.L372	@long jump
.LCB4178:
	ldrh	r0, [r6, #0x14]
	ldrb	r2, [r6, #0xc]
	ldr	r4, .L401
	mov	r1, #0x10
	add	r3, r4, #0
	bl	BlendPalette
	ldrh	r0, [r6, #0x16]
	ldrb	r2, [r6, #0xc]
	mov	r1, #0x10
	add	r3, r4, #0
	bl	BlendPalette
	ldrh	r1, [r6, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r6, r2]
	cmp	r0, #0xb
	bgt	.L377	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r6, #0xc]
	b	.L372
.L402:
	.align	2, 0
.L401:
	.word	0x66e0
.L377:
	strh	r5, [r6, #0xa]
	strh	r5, [r6, #0xc]
	ldr	r1, .L403
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L373
.L404:
	.align	2, 0
.L403:
	.word	0x3f44
.L378:
	mov	r0, #0x2
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	ldr	r0, .L405
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L405+0x4
	strh	r1, [r4]
	mov	r0, #0x18
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x1a
	bl	SetGpuReg
	add	r0, sp, #0xc
	mov	r1, #0x2
	bl	GetBattleAnimBgData
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L405+0x8
	add	r2, sp, #0xc
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L405+0xc
	add	r1, sp, #0xc
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L373
.L406:
	.align	2, 0
.L405:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattleAnim_ScaryFaceGfx
	.word	gBattleAnim_ScaryFacePal
.L379:
	add	r0, sp, #0xc
	mov	r1, #0x2
	bl	GetBattleAnimBgData
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	add	r1, r0, #0
	ldr	r5, .L407
	ldr	r0, [r5]
	mov	r4, #0xbe
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	str	r1, [r0]
	ldr	r0, .L407+0x4
	bl	LZDecompressWram
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x8]
	ldr	r1, [r5]
	add	r1, r1, r4
	ldr	r1, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r3, #0x0
	bl	RelocateBattleBgPal
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	ldr	r1, [r5]
	add	r1, r1, r4
	ldr	r1, [r1]
	mov	r2, #0x20
	str	r2, [sp]
	str	r2, [sp, #0x4]
	mov	r2, #0x11
	str	r2, [sp, #0x8]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x0
	str	r1, [r0]
	b	.L373
.L408:
	.align	2, 0
.L407:
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimBgTilemap_ScaryFacePlayer
.L380:
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4366
	b	.L372	@long jump
.LCB4366:
	ldrh	r1, [r6, #0xc]
	add	r1, r1, #0x1
	strh	r1, [r6, #0xc]
	ldrh	r0, [r6, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xe
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L372	@cond_branch
	strh	r0, [r6, #0xa]
	strh	r0, [r6, #0xc]
	mov	r0, #0x10
	strh	r0, [r6, #0xe]
	ldr	r1, .L409
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x2
	bl	SetAnimBgAttribute
	b	.L373
.L410:
	.align	2, 0
.L409:
	.word	0x3f42
.L383:
	cmp	r4, #0x1
	bne	.L384	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	b	.L395
.L384:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
.L395:
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L373
.L386:
	ldr	r2, .L411
	mov	r0, #0x10
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	sub	r1, r1, #0x20
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	cmp	r1, #0
	bge	.L387	@cond_branch
	mov	r2, #0x0
.L387:
	cmp	r4, #0x1
	bne	.L388	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x4
	str	r2, [sp, #0x4]
	str	r4, [sp, #0x8]
	b	.L396
.L412:
	.align	2, 0
.L411:
	.word	gSprites
.L388:
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x8
	str	r2, [sp, #0x4]
	mov	r2, #0x1
	str	r2, [sp, #0x8]
	mov	r2, #0x4
.L396:
	mov	r3, #0x8
	bl	ScanlineEffect_InitWave
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x1c]
	b	.L373
.L390:
	ldrh	r0, [r6, #0x16]
	ldr	r3, .L413
	mov	r1, #0x10
	mov	r2, #0xc
	bl	BlendPalette
	cmp	r4, #0x1
	bne	.L391	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L392
.L414:
	.align	2, 0
.L413:
	.word	0x77ff
.L391:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L392:
	ldr	r0, .L415
	str	r0, [r6]
	mov	r0, #0x0
	strh	r0, [r6, #0x26]
.L373:
	ldrh	r0, [r6, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x26]
.L372:
	add	sp, sp, #0x1c
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L416:
	.align	2, 0
.L415:
	.word	AnimTask_GhostGetOut_Step2
.Lfe37:
	.size	 AnimTask_GhostGetOut_Step1,.Lfe37-AnimTask_GhostGetOut_Step1
	.align	2, 0
	.type	 AnimTask_GhostGetOut_Step2,function
	.thumb_func
AnimTask_GhostGetOut_Step2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L421
	add	r4, r0, r1
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	strh	r0, [r4, #0x18]
	cmp	r0, #0
	bne	.L418	@cond_branch
	ldr	r1, .L421+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	strh	r0, [r4, #0xc]
.L418:
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bne	.L419	@cond_branch
	ldr	r1, .L421+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	mov	r1, #0x10
	sub	r1, r1, r0
	strh	r1, [r4, #0xe]
.L419:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x80
	bne	.L420	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	ldr	r1, .L421+0x8
	str	r1, [r4]
	add	r0, r5, #0
	bl	_call_via_r1
.L420:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L422:
	.align	2, 0
.L421:
	.word	gTasks
	.word	gSineTable
	.word	AnimTask_GhostGetOut_Step3
.Lfe38:
	.size	 AnimTask_GhostGetOut_Step2,.Lfe38-AnimTask_GhostGetOut_Step2
	.align	2, 0
	.type	 AnimTask_GhostGetOut_Step3,function
	.thumb_func
AnimTask_GhostGetOut_Step3:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L435
	add	r6, r0, r1
	mov	r1, #0x26
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x5
	bls	.LCB4663
	b	.L424	@long jump
.LCB4663:
	lsl	r0, r0, #0x2
	ldr	r1, .L435+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L436:
	.align	2, 0
.L435:
	.word	gTasks
	.word	.L433
	.align	2, 0
	.align	2, 0
.L433:
	.word	.L425
	.word	.L426
	.word	.L427
	.word	.L429
	.word	.L430
	.word	.L432
.L425:
	ldr	r1, .L437
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	ldrh	r0, [r6, #0x16]
	ldr	r3, .L437+0x4
	mov	r1, #0x10
	mov	r2, #0xc
	bl	BlendPalette
	b	.L424
.L438:
	.align	2, 0
.L437:
	.word	gScanlineEffect
	.word	0x66e0
.L426:
	ldr	r1, .L439
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	mov	r1, #0x0
	mov	r0, #0x10
	strh	r0, [r6, #0xc]
	strh	r1, [r6, #0xe]
	b	.L424
.L440:
	.align	2, 0
.L439:
	.word	0x3f44
.L427:
	ldrh	r1, [r6, #0xc]
	sub	r1, r1, #0x1
	strh	r1, [r6, #0xc]
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xe
	ldrsh	r0, [r6, r2]
	cmp	r0, #0xf
	ble	.L423	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x2
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x2
	bl	SetAnimBgAttribute
	b	.L424
.L429:
	mov	r0, #0x2
	bl	InitBattleAnimBg
	mov	r0, #0x0
	mov	r1, #0x90
	mov	r2, #0x20
	bl	FillPalette
	mov	r0, #0x2
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0xc
	strh	r0, [r6, #0xa]
	b	.L424
.L430:
	ldrh	r0, [r6, #0x14]
	ldrb	r2, [r6, #0xa]
	ldr	r4, .L441
	mov	r1, #0x10
	add	r3, r4, #0
	bl	BlendPalette
	ldrh	r0, [r6, #0x16]
	ldrb	r2, [r6, #0xa]
	mov	r1, #0x10
	add	r3, r4, #0
	bl	BlendPalette
	ldrh	r0, [r6, #0xa]
	mov	r2, #0xa
	ldrsh	r1, [r6, r2]
	cmp	r1, #0
	beq	.L431	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	b	.L423
.L442:
	.align	2, 0
.L441:
	.word	0x66e0
.L431:
	strh	r1, [r6, #0xa]
	ldr	r1, .L443
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L424
.L444:
	.align	2, 0
.L443:
	.word	0x3f44
.L432:
	ldr	r5, .L445
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r0, #0x3
	ldrb	r2, [r6, #0x12]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r4, [r1, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r4
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	and	r3, r3, r1
	strb	r3, [r0, #0x1]
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L424:
	ldrh	r0, [r6, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x26]
.L423:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L446:
	.align	2, 0
.L445:
	.word	gSprites
.Lfe39:
	.size	 AnimTask_GhostGetOut_Step3,.Lfe39-AnimTask_GhostGetOut_Step3
	.align	2, 0
	.type	 AnimMonMoveCircular,function
	.thumb_func
AnimMonMoveCircular:
	add	r3, r0, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r2, .L448
	ldr	r1, .L448+0x4
	ldrb	r1, [r1]
	add	r1, r1, r2
	ldrb	r1, [r1]
	strh	r1, [r0, #0x38]
	mov	r1, #0x80
	strh	r1, [r0, #0x2e]
	mov	r1, #0xa
	strh	r1, [r0, #0x30]
	ldr	r2, .L448+0x8
	ldrh	r1, [r2]
	strh	r1, [r0, #0x32]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x34]
	ldr	r1, .L448+0xc
	str	r1, [r0, #0x1c]
	ldr	r2, .L448+0x10
	mov	r3, #0x38
	ldrsh	r1, [r0, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	bx	lr
.L449:
	.align	2, 0
.L448:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimMonMoveCircular_Step
	.word	gSprites
.Lfe40:
	.size	 AnimMonMoveCircular,.Lfe40-AnimMonMoveCircular
	.align	2, 0
	.type	 AnimMonMoveCircular_Step,function
	.thumb_func
AnimMonMoveCircular_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x34]
	mov	r1, #0x34
	ldrsh	r3, [r5, r1]
	cmp	r3, #0
	beq	.L451	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Sin
	ldr	r4, .L454
	mov	r1, #0x38
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Cos
	mov	r1, #0x38
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x26]
	ldrh	r0, [r5, #0x32]
	ldrh	r2, [r5, #0x2e]
	add	r1, r0, r2
	strh	r1, [r5, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L453	@cond_branch
	ldr	r2, .L454+0x4
	add	r0, r1, r2
	strh	r0, [r5, #0x2e]
	b	.L453
.L455:
	.align	2, 0
.L454:
	.word	gSprites
	.word	-0x100
.L451:
	ldr	r2, .L456
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x24]
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	ldr	r0, .L456+0x4
	str	r0, [r5, #0x1c]
.L453:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L457:
	.align	2, 0
.L456:
	.word	gSprites
	.word	DestroySpriteAndMatrix
.Lfe41:
	.size	 AnimMonMoveCircular_Step,.Lfe41-AnimMonMoveCircular_Step
.text
	.align	2, 0 @ Don't pad with nop

