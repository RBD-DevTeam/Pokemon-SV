@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sVsSeeker,object
	.size	 sVsSeeker,4
sVsSeeker:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sVsSeekerData,object
sVsSeekerData:
	.short	0x59
	.short	0x65
	.short	0xffff
	.short	0x1f2
	.short	0x1f3
	.space	2
	.short	0x3
	.short	0x15
	.short	0x5a
	.short	0x5a
	.space	8
	.short	0x3
	.short	0x15
	.short	0x69
	.short	0x2d9
	.short	0xffff
	.short	0x2da
	.short	0xffff
	.short	0x2db
	.short	0x3
	.short	0x15
	.short	0x6a
	.short	0x6a
	.space	8
	.short	0x3
	.short	0x15
	.short	0x6b
	.short	0x6b
	.space	8
	.short	0x3
	.short	0x15
	.short	0x74
	.short	0x1fb
	.short	0xffff
	.short	0x1fc
	.space	4
	.short	0x3
	.short	0x15
	.short	0x75
	.short	0x75
	.space	8
	.short	0x3
	.short	0x15
	.short	0x76
	.short	0x76
	.space	8
	.short	0x3
	.short	0x15
	.short	0x77
	.short	0x77
	.space	8
	.short	0x3
	.short	0x16
	.short	0x5c
	.short	0x1f7
	.short	0xffff
	.short	0x1f8
	.short	0xffff
	.short	0x1f9
	.short	0x3
	.short	0x2b
	.short	0x6e
	.short	0x6e
	.space	8
	.short	0x3
	.short	0x2b
	.short	0x7a
	.short	0x1f5
	.short	0xffff
	.short	0x1f6
	.space	4
	.short	0x3
	.short	0x2b
	.short	0x7b
	.short	0x7b
	.space	8
	.short	0x3
	.short	0x2b
	.short	0x8f
	.short	0x8f
	.space	8
	.short	0x3
	.short	0x2b
	.short	0x90
	.short	0x90
	.space	8
	.short	0x3
	.short	0x2b
	.short	0x5d
	.short	0x5d
	.space	8
	.short	0x3
	.short	0x2c
	.short	0x5e
	.short	0x5e
	.space	8
	.short	0x3
	.short	0x2c
	.short	0x5f
	.short	0x1f4
	.short	0xffff
	.short	0x1fa
	.short	0x1fd
	.space	2
	.short	0x3
	.short	0x2c
	.short	0x99
	.short	0x26d
	.short	0xffff
	.short	0x26e
	.short	0x26f
	.space	2
	.short	0x3
	.short	0x2c
	.short	0x7d
	.short	0x7d
	.space	8
	.short	0x3
	.short	0x2c
	.short	0xb6
	.short	0xffff
	.short	0x1fe
	.space	6
	.short	0x3
	.short	0x2c
	.short	0xb7
	.short	0xb7
	.space	8
	.short	0x3
	.short	0x2c
	.short	0xb8
	.short	0xb8
	.space	8
	.short	0x3
	.short	0x2c
	.short	0x1d7
	.short	0x1d7
	.space	8
	.short	0x3
	.short	0x2c
	.short	0x6f
	.short	0x6f
	.space	8
	.short	0x3
	.short	0x18
	.short	0x70
	.short	0x70
	.space	8
	.short	0x3
	.short	0x18
	.short	0x91
	.short	0x270
	.short	0xffff
	.short	0x271
	.short	0xffff
	.short	0x272
	.short	0x3
	.short	0x18
	.short	0x92
	.short	0x273
	.short	0xffff
	.short	0x274
	.short	0xffff
	.short	0x275
	.short	0x3
	.short	0x18
	.short	0x97
	.short	0x97
	.space	8
	.short	0x3
	.short	0x18
	.short	0x98
	.short	0x276
	.short	0xffff
	.short	0x277
	.short	0x278
	.space	2
	.short	0x3
	.short	0x18
	.short	0x61
	.short	0x61
	.space	8
	.short	0x3
	.short	0x1d
	.short	0x62
	.short	0x62
	.space	8
	.short	0x3
	.short	0x1d
	.short	0x63
	.short	0xffff
	.short	0x279
	.short	0xffff
	.short	0x27a
	.space	2
	.short	0x3
	.short	0x1d
	.short	0x64
	.short	0x64
	.space	8
	.short	0x3
	.short	0x1d
	.short	0xdd
	.short	0xdd
	.space	8
	.short	0x3
	.short	0x1d
	.short	0xde
	.short	0xffff
	.short	0xffff
	.short	0x27b
	.space	4
	.short	0x3
	.short	0x1d
	.short	0x102
	.short	0x102
	.space	8
	.short	0x3
	.short	0x1d
	.short	0x103
	.short	0x103
	.space	8
	.short	0x3
	.short	0x1d
	.short	0x104
	.short	0x104
	.space	8
	.short	0x3
	.short	0x1d
	.short	0x105
	.short	0xffff
	.short	0xffff
	.short	0x27c
	.space	4
	.short	0x3
	.short	0x1d
	.short	0x72
	.short	0x72
	.space	8
	.short	0x3
	.short	0x1b
	.short	0x73
	.short	0x73
	.space	8
	.short	0x3
	.short	0x1b
	.short	0x94
	.short	0xffff
	.short	0x27d
	.short	0x27e
	.short	0xffff
	.short	0x27f
	.short	0x3
	.short	0x1b
	.short	0x95
	.short	0x95
	.space	8
	.short	0x3
	.short	0x1b
	.short	0x9a
	.short	0xffff
	.short	0x280
	.short	0x281
	.short	0xffff
	.short	0x282
	.short	0x3
	.short	0x1b
	.short	0x9b
	.short	0x9b
	.space	8
	.short	0x3
	.short	0x1b
	.short	0xb9
	.short	0xb9
	.space	8
	.short	0x3
	.short	0x1b
	.short	0xba
	.short	0xba
	.space	8
	.short	0x3
	.short	0x1b
	.short	0x1d1
	.short	0xffff
	.short	0xffff
	.short	0x283
	.space	4
	.short	0x3
	.short	0x1b
	.short	0x9c
	.short	0x9c
	.space	8
	.short	0x3
	.short	0x1c
	.short	0x9d
	.short	0x9d
	.space	8
	.short	0x3
	.short	0x1c
	.short	0xa2
	.short	0xffff
	.short	0xffff
	.short	0x252
	.short	0xffff
	.short	0x284
	.short	0x3
	.short	0x1c
	.short	0xa3
	.short	0xffff
	.short	0xffff
	.short	0x285
	.short	0xffff
	.short	0x286
	.short	0x3
	.short	0x1c
	.short	0xbb
	.short	0xbb
	.space	8
	.short	0x3
	.short	0x1c
	.short	0xbc
	.short	0xffff
	.short	0xffff
	.short	0x287
	.space	4
	.short	0x3
	.short	0x1c
	.short	0x80
	.short	0x80
	.space	8
	.short	0x3
	.short	0x1a
	.short	0x81
	.short	0x81
	.space	8
	.short	0x3
	.short	0x1a
	.short	0x82
	.short	0xffff
	.short	0x288
	.short	0xffff
	.short	0x289
	.space	2
	.short	0x3
	.short	0x1a
	.short	0x83
	.short	0x83
	.space	8
	.short	0x3
	.short	0x1a
	.short	0xab
	.short	0xab
	.space	8
	.short	0x3
	.short	0x1a
	.short	0xac
	.short	0xffff
	.short	0xffff
	.short	0x28a
	.space	4
	.short	0x3
	.short	0x1a
	.short	0xad
	.short	0xad
	.space	8
	.short	0x3
	.short	0x1a
	.short	0x106
	.short	0x106
	.space	8
	.short	0x3
	.short	0x1a
	.short	0x108
	.short	0xffff
	.short	0xffff
	.short	0x28b
	.space	4
	.short	0x3
	.short	0x1a
	.short	0x1e4
	.short	0xffff
	.short	0xffff
	.short	0x215
	.space	4
	.short	0x3
	.short	0x1a
	.short	0x217
	.short	0x217
	.space	8
	.short	0x3
	.short	0x1a
	.short	0x218
	.short	0xffff
	.short	0xffff
	.short	0x28c
	.space	4
	.short	0x3
	.short	0x1a
	.short	0xe1
	.short	0xe1
	.space	8
	.short	0x3
	.short	0x1e
	.short	0xe2
	.short	0xe2
	.space	8
	.short	0x3
	.short	0x1e
	.short	0xe3
	.short	0xe3
	.space	8
	.short	0x3
	.short	0x1e
	.short	0xe4
	.short	0xffff
	.short	0xffff
	.short	0x28d
	.space	4
	.short	0x3
	.short	0x1e
	.short	0xe9
	.short	0xe9
	.space	8
	.short	0x3
	.short	0x1e
	.short	0x11d
	.short	0xffff
	.short	0xffff
	.short	0x28e
	.space	4
	.short	0x3
	.short	0x1e
	.short	0x1dd
	.short	0x1dd
	.space	8
	.short	0x3
	.short	0x1e
	.short	0x1e6
	.short	0xffff
	.short	0xffff
	.short	0x2c2
	.short	0xffff
	.short	0x2c3
	.short	0x3
	.short	0x1e
	.short	0xc3
	.short	0xc3
	.space	8
	.short	0x3
	.short	0x1f
	.short	0x10c
	.short	0x10c
	.space	8
	.short	0x3
	.short	0x1f
	.short	0x10d
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x28f
	.space	2
	.short	0x3
	.short	0x1f
	.short	0x12c
	.short	0x12c
	.space	8
	.short	0x3
	.short	0x1f
	.short	0x12d
	.short	0x12d
	.space	8
	.short	0x3
	.short	0x1f
	.short	0x12e
	.short	0xffff
	.short	0xffff
	.short	0x290
	.short	0x291
	.space	2
	.short	0x3
	.short	0x1f
	.short	0x1d2
	.short	0x1d2
	.space	8
	.short	0x3
	.short	0x1f
	.short	0x1d3
	.short	0xffff
	.short	0xffff
	.short	0x292
	.short	0x293
	.short	0x294
	.short	0x3
	.short	0x1f
	.short	0x1d4
	.short	0x1d4
	.space	8
	.short	0x3
	.short	0x1f
	.short	0x1d5
	.short	0x1d5
	.space	8
	.short	0x3
	.short	0x1f
	.short	0xc4
	.short	0xc4
	.space	8
	.short	0x3
	.short	0x20
	.short	0xcf
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x295
	.space	2
	.short	0x3
	.short	0x20
	.short	0xd0
	.short	0xd0
	.space	8
	.short	0x3
	.short	0x20
	.short	0xd1
	.short	0xd1
	.space	8
	.short	0x3
	.short	0x20
	.short	0x12f
	.short	0x12f
	.space	8
	.short	0x3
	.short	0x20
	.short	0x130
	.short	0xffff
	.short	0xffff
	.short	0x296
	.short	0x297
	.space	2
	.short	0x3
	.short	0x20
	.short	0x139
	.short	0x139
	.space	8
	.short	0x3
	.short	0x20
	.short	0x13a
	.short	0x13a
	.space	8
	.short	0x3
	.short	0x20
	.short	0x13b
	.short	0x13b
	.space	8
	.short	0x3
	.short	0x20
	.short	0x13c
	.short	0xffff
	.short	0xffff
	.short	0x298
	.short	0x299
	.space	2
	.short	0x3
	.short	0x20
	.short	0x1e7
	.short	0x1e7
	.space	8
	.short	0x3
	.short	0x20
	.short	0xc5
	.short	0xc5
	.space	8
	.short	0x3
	.short	0x21
	.short	0xc6
	.short	0xc6
	.space	8
	.short	0x3
	.short	0x21
	.short	0x111
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x29a
	.space	2
	.short	0x3
	.short	0x21
	.short	0x112
	.short	0x112
	.space	8
	.short	0x3
	.short	0x21
	.short	0x131
	.short	0x131
	.space	8
	.short	0x3
	.short	0x21
	.short	0x132
	.short	0xffff
	.short	0xffff
	.short	0x29b
	.short	0x29c
	.space	2
	.short	0x3
	.short	0x21
	.short	0x1de
	.short	0x1de
	.space	8
	.short	0x3
	.short	0x21
	.short	0x1df
	.short	0x1df
	.space	8
	.short	0x3
	.short	0x21
	.short	0x1e0
	.short	0xffff
	.short	0xffff
	.short	0x29d
	.short	0x29e
	.short	0x29f
	.short	0x3
	.short	0x21
	.short	0x1e1
	.short	0x1e1
	.space	8
	.short	0x3
	.short	0x21
	.short	0x1e8
	.short	0xffff
	.short	0xffff
	.short	0x2a0
	.short	0x2a1
	.short	0x2a2
	.short	0x3
	.short	0x21
	.short	0xc7
	.short	0xc7
	.space	8
	.short	0x3
	.short	0x22
	.short	0xc9
	.short	0xc9
	.space	8
	.short	0x3
	.short	0x22
	.short	0xca
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2a3
	.space	2
	.short	0x3
	.short	0x22
	.short	0xf9
	.short	0xf9
	.space	8
	.short	0x3
	.short	0x22
	.short	0xfa
	.short	0xfa
	.space	8
	.short	0x3
	.short	0x22
	.short	0xfb
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2a4
	.space	2
	.short	0x3
	.short	0x22
	.short	0x1e9
	.short	0x1e9
	.space	8
	.short	0x3
	.short	0x22
	.short	0xcb
	.short	0xcb
	.space	8
	.short	0x3
	.short	0x23
	.short	0xcc
	.short	0xcc
	.space	8
	.short	0x3
	.short	0x23
	.short	0xcd
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2a5
	.space	2
	.short	0x3
	.short	0x23
	.short	0xce
	.short	0xce
	.space	8
	.short	0x3
	.short	0x23
	.short	0xfc
	.short	0xfc
	.space	8
	.short	0x3
	.short	0x23
	.short	0xfd
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2a6
	.space	2
	.short	0x3
	.short	0x23
	.short	0xfe
	.short	0xfe
	.space	8
	.short	0x3
	.short	0x23
	.short	0xff
	.short	0xff
	.space	8
	.short	0x3
	.short	0x23
	.short	0x100
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2a7
	.space	2
	.short	0x3
	.short	0x23
	.short	0x1d6
	.short	0x1d6
	.space	8
	.short	0x3
	.short	0x23
	.short	0x133
	.short	0x133
	.space	8
	.short	0x3
	.short	0x24
	.short	0x134
	.short	0x134
	.space	8
	.short	0x3
	.short	0x24
	.short	0x135
	.short	0xffff
	.short	0xffff
	.short	0x2a8
	.short	0x2a9
	.space	2
	.short	0x3
	.short	0x24
	.short	0xeb
	.short	0xeb
	.space	8
	.short	0x3
	.short	0x25
	.short	0xec
	.short	0xec
	.space	8
	.short	0x3
	.short	0x25
	.short	0xed
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2dc
	.space	2
	.short	0x3
	.short	0x25
	.short	0xee
	.short	0xee
	.space	8
	.short	0x3
	.short	0x25
	.short	0xef
	.short	0xef
	.space	8
	.short	0x3
	.short	0x25
	.short	0xf0
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2dd
	.space	2
	.short	0x3
	.short	0x25
	.short	0xf1
	.short	0xf1
	.space	8
	.short	0x3
	.short	0x25
	.short	0x114
	.short	0x114
	.space	8
	.short	0x3
	.short	0x25
	.short	0x115
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2aa
	.space	2
	.short	0x3
	.short	0x25
	.short	0x116
	.short	0x116
	.space	8
	.short	0x3
	.short	0x25
	.short	0x1ea
	.short	0x1ea
	.space	8
	.short	0x3
	.short	0x25
	.short	0xf2
	.short	0xf2
	.space	8
	.short	0x3
	.short	0x26
	.short	0xf3
	.short	0xf3
	.space	8
	.short	0x3
	.short	0x26
	.short	0xf4
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2ab
	.short	0x3
	.short	0x26
	.short	0x10e
	.short	0x10e
	.space	8
	.short	0x3
	.short	0x26
	.short	0x10f
	.short	0x10f
	.space	8
	.short	0x3
	.short	0x26
	.short	0x110
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2de
	.space	2
	.short	0x3
	.short	0x26
	.short	0x117
	.short	0x117
	.space	8
	.short	0x3
	.short	0x26
	.short	0x136
	.short	0x136
	.space	8
	.short	0x3
	.short	0x26
	.short	0x1d8
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2ac
	.short	0x2ad
	.short	0x3
	.short	0x26
	.short	0x1d9
	.short	0x1d9
	.space	8
	.short	0x3
	.short	0x26
	.short	0xe5
	.short	0xe5
	.space	8
	.short	0x3
	.short	0x27
	.short	0xe6
	.short	0xe6
	.space	8
	.short	0x3
	.short	0x27
	.short	0xe7
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2ae
	.space	2
	.short	0x3
	.short	0x27
	.short	0xe8
	.short	0xe8
	.space	8
	.short	0x3
	.short	0x27
	.short	0xf5
	.short	0xf5
	.space	8
	.short	0x3
	.short	0x27
	.short	0xf6
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2af
	.space	2
	.short	0x3
	.short	0x27
	.short	0xf7
	.short	0xf7
	.space	8
	.short	0x3
	.short	0x27
	.short	0xf8
	.short	0xf8
	.space	8
	.short	0x3
	.short	0x27
	.short	0x1eb
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2b0
	.short	0x2b1
	.short	0x3
	.short	0x27
	.short	0x223
	.short	0x223
	.space	8
	.short	0x3
	.short	0x2d
	.short	0x224
	.short	0x224
	.space	8
	.short	0x3
	.short	0x2d
	.short	0x225
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2b2
	.space	2
	.short	0x3
	.short	0x2d
	.short	0x226
	.short	0x226
	.space	8
	.short	0x3
	.short	0x2d
	.short	0x227
	.short	0x227
	.space	8
	.short	0x3
	.short	0x2d
	.short	0x206
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2b3
	.short	0x2b4
	.short	0x3
	.short	0x2d
	.short	0x228
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2b5
	.short	0x2b6
	.short	0x3
	.short	0x2d
	.short	0x229
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2b7
	.short	0x2b8
	.short	0x3
	.short	0x2d
	.short	0x22a
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2b9
	.short	0x2ba
	.short	0x3
	.short	0x2d
	.short	0x22b
	.short	0x22b
	.space	8
	.short	0x3
	.short	0x2d
	.short	0x22c
	.short	0x22c
	.space	8
	.short	0x3
	.short	0x2d
	.short	0x22d
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2bb
	.short	0x2bc
	.short	0x3
	.short	0x2d
	.short	0x222
	.short	0x222
	.space	8
	.short	0x3
	.short	0x2e
	.short	0x20b
	.short	0x20b
	.space	8
	.short	0x3
	.short	0x30
	.short	0x22e
	.short	0x22e
	.space	8
	.short	0x3
	.short	0x30
	.short	0x207
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2bd
	.space	2
	.short	0x3
	.short	0x30
	.short	0x22f
	.short	0x22f
	.space	8
	.short	0x3
	.short	0x30
	.short	0x231
	.short	0x231
	.space	8
	.short	0x3
	.short	0x30
	.short	0x230
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2be
	.space	2
	.short	0x3
	.short	0x30
	.short	0x20e
	.short	0x20e
	.space	8
	.short	0x3
	.short	0x36
	.short	0x232
	.short	0x232
	.space	8
	.short	0x3
	.short	0x36
	.short	0x233
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2bf
	.short	0x3
	.short	0x36
	.short	0x20d
	.short	0x20d
	.space	8
	.short	0x3
	.short	0x36
	.short	0x234
	.short	0x234
	.space	8
	.short	0x3
	.short	0x36
	.short	0x235
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2c0
	.short	0x3
	.short	0x36
	.short	0x236
	.short	0x236
	.space	8
	.short	0x3
	.short	0x36
	.short	0x208
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2c1
	.short	0x3
	.short	0x37
	.short	0x23a
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2c4
	.short	0x3
	.short	0x39
	.short	0x23b
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2c5
	.short	0x3
	.short	0x39
	.short	0x23c
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2c6
	.short	0x3
	.short	0x39
	.short	0x23d
	.short	0x23d
	.space	8
	.short	0x3
	.short	0x3a
	.short	0x23e
	.short	0x23e
	.space	8
	.short	0x3
	.short	0x3a
	.short	0x23f
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2c7
	.short	0x3
	.short	0x3a
	.short	0x240
	.short	0x240
	.space	8
	.short	0x3
	.short	0x3a
	.short	0x205
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2c8
	.short	0x3
	.short	0x3b
	.short	0x241
	.short	0x241
	.space	8
	.short	0x3
	.short	0x3c
	.short	0x123
	.short	0x123
	.space	8
	.short	0x3
	.short	0x3c
	.short	0x242
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2c9
	.short	0x3
	.short	0x3c
	.short	0x243
	.short	0x243
	.space	8
	.short	0x3
	.short	0x3c
	.short	0x244
	.short	0x244
	.space	8
	.short	0x3
	.short	0x3c
	.short	0x245
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2ca
	.short	0x3
	.short	0x3c
	.short	0x20c
	.short	0x20c
	.space	8
	.short	0x3
	.short	0x3d
	.short	0x246
	.short	0x246
	.space	8
	.short	0x3
	.short	0x3d
	.short	0x247
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2cb
	.short	0x3
	.short	0x3d
	.short	0x248
	.short	0x248
	.space	8
	.short	0x3
	.short	0x3d
	.short	0x249
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2cc
	.short	0x3
	.short	0x3d
	.short	0x24a
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2cd
	.short	0x3
	.short	0x3e
	.short	0x24b
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2ce
	.short	0x3
	.short	0x3e
	.short	0x24c
	.short	0x24c
	.space	8
	.short	0x3
	.short	0x3f
	.short	0x24d
	.short	0x24d
	.space	8
	.short	0x3
	.short	0x3f
	.short	0x24e
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2cf
	.short	0x3
	.short	0x3f
	.short	0x209
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2d0
	.short	0x3
	.short	0x3f
	.short	0x20a
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2d1
	.short	0x3
	.short	0x3f
	.short	0x24f
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2d2
	.short	0x3
	.short	0x40
	.short	0x251
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2d3
	.short	0x3
	.short	0x40
	.short	0x254
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2d4
	.short	0x3
	.short	0x40
	.short	0x256
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2d5
	.short	0x3
	.short	0x40
	.short	0x257
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2d6
	.short	0x3
	.short	0x40
	.short	0x258
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2d7
	.short	0x3
	.short	0x40
	.short	0x259
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0x2d8
	.short	0x3
	.short	0x40
	.short	0x25a
	.short	0x25a
	.space	8
	.short	0x3
	.short	0x41
	.short	0x25b
	.short	0x25b
	.space	8
	.short	0x3
	.short	0x41
	.short	0x25c
	.short	0x25c
	.space	8
	.short	0x3
	.short	0x41
	.short	0x25d
	.short	0x25d
	.space	8
	.short	0x3
	.short	0x41
	.size	 sVsSeekerData,3536
	.type	 sMovementScript_Wait48,object
sMovementScript_Wait48:
	.byte	0x1c
	.byte	0x1c
	.byte	0x1c
	.byte	0xfe
	.size	 sMovementScript_Wait48,4
	.type	 sMovementScript_TrainerUnfought,object
sMovementScript_TrainerUnfought:
	.byte	0x62
	.byte	0xfe
	.size	 sMovementScript_TrainerUnfought,2
	.type	 sMovementScript_TrainerNoRematch,object
sMovementScript_TrainerNoRematch:
	.byte	0x64
	.byte	0xfe
	.size	 sMovementScript_TrainerNoRematch,2
	.type	 sMovementScript_TrainerRematch,object
sMovementScript_TrainerRematch:
	.byte	0x2d
	.byte	0x65
	.byte	0xfe
	.size	 sMovementScript_TrainerRematch,3
	.type	 sFaceDirectionMovementTypeByFacingDirection,object
sFaceDirectionMovementTypeByFacingDirection:
	.byte	0x8
	.byte	0x8
	.byte	0x7
	.byte	0x9
	.byte	0xa
	.size	 sFaceDirectionMovementTypeByFacingDirection,5
.text
	.align	2, 0
	.globl	VsSeekerFreezeObjectsAfterChargeComplete
	.type	 VsSeekerFreezeObjectsAfterChargeComplete,function
	.thumb_func
VsSeekerFreezeObjectsAfterChargeComplete:
	push	{lr}
	ldr	r0, .L3
	mov	r1, #0x50
	bl	CreateTask
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	Task_ResetObjectsRematchWantedState
.Lfe1:
	.size	 VsSeekerFreezeObjectsAfterChargeComplete,.Lfe1-VsSeekerFreezeObjectsAfterChargeComplete
	.align	2, 0
	.type	 Task_ResetObjectsRematchWantedState,function
	.thumb_func
Task_ResetObjectsRematchWantedState:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L16
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L6	@cond_branch
	bl	walkrun_is_standing_still
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bne	.L6	@cond_branch
	bl	HandleEnforcedLookDirectionOnPlayerStopMoving
	strh	r4, [r5, #0x8]
.L6:
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L7	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L16+0x4
.L11:
	add	r0, r4, #0
	bl	ObjectEventIdIsSane
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L10	@cond_branch
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L5	@cond_branch
	add	r0, r1, #0
	bl	FreezeObjectEvent
.L10:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bls	.L11	@cond_branch
.L7:
	mov	r0, #0x1
	strh	r0, [r5, #0xa]
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L5	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	bl	StopPlayerAvatar
	bl	ScriptContext_Enable
.L5:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gTasks
	.word	gObjectEvents
.Lfe2:
	.size	 Task_ResetObjectsRematchWantedState,.Lfe2-Task_ResetObjectsRematchWantedState
	.align	2, 0
	.globl	VsSeekerResetObjectMovementAfterChargeComplete
	.type	 VsSeekerResetObjectMovementAfterChargeComplete,function
	.thumb_func
VsSeekerResetObjectMovementAfterChargeComplete:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r0, .L27
	ldr	r0, [r0]
	mov	r1, #0x8e
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	mov	r8, r1
	mov	r7, #0x0
	ldr	r0, .L27+0x4
	ldr	r1, [r0, #0x4]
	add	r2, r0, #0
	ldrb	r1, [r1]
	cmp	r7, r1
	bcs	.L20	@cond_branch
.L22:
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	mov	r1, r8
	add	r5, r0, r1
	ldrh	r0, [r5, #0xc]
	cmp	r0, #0x1
	beq	.L24	@cond_branch
	cmp	r0, #0x3
	bne	.L21	@cond_branch
.L24:
	ldrb	r0, [r5, #0x9]
	sub	r0, r0, #0x4d
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bhi	.L21	@cond_branch
	bl	GetRandomFaceDirectionMovementType
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r5]
	ldr	r1, .L27
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	mov	r3, sp
	bl	TryGetObjectEventIdByLocalIdAndMap
	mov	r0, sp
	ldrb	r0, [r0]
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L27+0x8
	add	r4, r1, r2
	bl	ObjectEventIdIsSane
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L25	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	bl	SetTrainerMovementType
.L25:
	strb	r6, [r5, #0x9]
	ldr	r2, .L27+0x4
.L21:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, [r2, #0x4]
	ldrb	r0, [r0]
	cmp	r7, r0
	bcc	.L22	@cond_branch
.L20:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	gSaveBlock1Ptr
	.word	gMapHeader
	.word	gObjectEvents
.Lfe3:
	.size	 VsSeekerResetObjectMovementAfterChargeComplete,.Lfe3-VsSeekerResetObjectMovementAfterChargeComplete
	.align	2, 0
	.globl	UpdateVsSeekerStepCounter
	.type	 UpdateVsSeekerStepCounter,function
	.thumb_func
UpdateVsSeekerStepCounter:
	push	{r4, r5, r6, r7, lr}
	mov	r0, #0xb5
	lsl	r0, r0, #0x1
	mov	r1, #0x1
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L30	@cond_branch
	ldr	r0, .L36
	ldr	r0, [r0]
	mov	r2, #0xc7
	lsl	r2, r2, #0x3
	add	r1, r0, r2
	ldrh	r2, [r1]
	ldrb	r0, [r1]
	cmp	r0, #0x63
	bhi	.L30	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1]
.L30:
	ldr	r7, .L36+0x4
	add	r0, r7, #0
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L32	@cond_branch
	ldr	r6, .L36
	ldr	r0, [r6]
	mov	r5, #0xc7
	lsl	r5, r5, #0x3
	add	r3, r0, r5
	ldrh	r2, [r3]
	lsr	r1, r2, #0x8
	mov	r4, #0xff
	cmp	r1, #0x63
	bhi	.L33	@cond_branch
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	mov	r0, #0xff
	and	r0, r0, r2
	lsr	r1, r1, #0x10
	orr	r0, r0, r1
	strh	r0, [r3]
.L33:
	ldr	r0, [r6]
	add	r0, r0, r5
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	and	r0, r0, r4
	cmp	r0, #0x64
	bne	.L32	@cond_branch
	add	r0, r7, #0
	bl	FlagClear
	bl	VsSeekerResetChargingStepCounter
	bl	ClearAllTrainerRematchStates
	mov	r0, #0x1
	b	.L35
.L37:
	.align	2, 0
.L36:
	.word	gSaveBlock1Ptr
	.word	0x801
.L32:
	mov	r0, #0x0
.L35:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 UpdateVsSeekerStepCounter,.Lfe4-UpdateVsSeekerStepCounter
	.align	2, 0
	.globl	MapResetTrainerRematches
	.type	 MapResetTrainerRematches,function
	.thumb_func
MapResetTrainerRematches:
	push	{lr}
	ldr	r0, .L39
	bl	FlagClear
	bl	VsSeekerResetChargingStepCounter
	bl	ClearAllTrainerRematchStates
	bl	ResetMovementOfRematchableTrainers
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	0x801
.Lfe5:
	.size	 MapResetTrainerRematches,.Lfe5-MapResetTrainerRematches
	.align	2, 0
	.type	 ResetMovementOfRematchableTrainers,function
	.thumb_func
ResetMovementOfRematchableTrainers:
	push	{r4, r5, r6, r7, lr}
	mov	r5, #0x0
	mov	r6, #0x0
.L45:
	lsl	r0, r5, #0x3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L49
	add	r4, r0, r1
	ldrb	r0, [r4, #0x6]
	sub	r0, r0, #0x4d
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bhi	.L44	@cond_branch
	bl	GetRandomFaceDirectionMovementType
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L44	@cond_branch
	ldr	r2, .L49+0x4
	ldrb	r0, [r4, #0x4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r7, #0x2e
	ldrsh	r0, [r1, r7]
	cmp	r0, r5
	bne	.L44	@cond_branch
	strh	r6, [r1, #0x24]
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r6, [r0, #0x26]
	add	r0, r4, #0
	add	r1, r3, #0
	bl	SetTrainerMovementType
.L44:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xf
	bls	.L45	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gObjectEvents
	.word	gSprites
.Lfe6:
	.size	 ResetMovementOfRematchableTrainers,.Lfe6-ResetMovementOfRematchableTrainers
	.align	2, 0
	.type	 VsSeekerResetInBagStepCounter,function
	.thumb_func
VsSeekerResetInBagStepCounter:
	ldr	r0, .L52
	ldr	r1, [r0]
	mov	r0, #0xc7
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r2
	strh	r0, [r1]
	bx	lr
.L53:
	.align	2, 0
.L52:
	.word	gSaveBlock1Ptr
.Lfe7:
	.size	 VsSeekerResetInBagStepCounter,.Lfe7-VsSeekerResetInBagStepCounter
	.align	2, 0
	.type	 VsSeekerSetStepCounterInBagFull,function
	.thumb_func
VsSeekerSetStepCounterInBagFull:
	ldr	r0, .L55
	ldr	r2, [r0]
	mov	r0, #0xc7
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	mov	r1, #0x64
	orr	r0, r0, r1
	strh	r0, [r2]
	bx	lr
.L56:
	.align	2, 0
.L55:
	.word	gSaveBlock1Ptr
.Lfe8:
	.size	 VsSeekerSetStepCounterInBagFull,.Lfe8-VsSeekerSetStepCounterInBagFull
	.align	2, 0
	.type	 VsSeekerResetChargingStepCounter,function
	.thumb_func
VsSeekerResetChargingStepCounter:
	ldr	r0, .L58
	ldr	r0, [r0]
	mov	r1, #0xc7
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0]
	strh	r1, [r0]
	bx	lr
.L59:
	.align	2, 0
.L58:
	.word	gSaveBlock1Ptr
.Lfe9:
	.size	 VsSeekerResetChargingStepCounter,.Lfe9-VsSeekerResetChargingStepCounter
	.align	2, 0
	.type	 VsSeekerSetStepCounterFullyCharged,function
	.thumb_func
VsSeekerSetStepCounterFullyCharged:
	ldr	r0, .L61
	ldr	r1, [r0]
	mov	r0, #0xc7
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r3, #0xc8
	lsl	r3, r3, #0x7
	add	r2, r3, #0
	orr	r0, r0, r2
	strh	r0, [r1]
	bx	lr
.L62:
	.align	2, 0
.L61:
	.word	gSaveBlock1Ptr
.Lfe10:
	.size	 VsSeekerSetStepCounterFullyCharged,.Lfe10-VsSeekerSetStepCounterFullyCharged
	.align	2, 0
	.globl	Task_VsSeeker_0
	.type	 Task_VsSeeker_0,function
	.thumb_func
Task_VsSeeker_0:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r2, #0x0
	ldr	r7, .L75
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r3, r0, #0x3
	ldr	r5, .L75+0x4
	add	r6, r1, #0
	mov	r1, #0x0
.L67:
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	add	r0, r0, r5
	strh	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xf
	bls	.L67	@cond_branch
	add	r5, r7, #0
	ldr	r0, .L75+0x8
	bl	AllocZeroed
	str	r0, [r5]
	bl	GatherNearbyTrainerInfo
	bl	CanUseVsSeeker
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r0, [r5]
	bl	Free
	ldr	r2, .L75+0xc
	b	.L74
.L76:
	.align	2, 0
.L75:
	.word	sVsSeeker
	.word	gTasks+0x8
	.word	0x434
	.word	VSSeeker_Text_BatteryNotChargedNeedXSteps
.L69:
	cmp	r0, #0x1
	bne	.L71	@cond_branch
	ldr	r0, [r7]
	bl	Free
	ldr	r2, .L77
.L74:
	ldr	r3, .L77+0x4
	add	r0, r4, #0
	mov	r1, #0x2
	bl	DisplayItemMessageOnField
	b	.L70
.L78:
	.align	2, 0
.L77:
	.word	VSSeeker_Text_NoTrainersWithinRange
	.word	Task_ItemUse_CloseMessageBoxAndReturnToField_VsSeeker
.L71:
	cmp	r1, #0x2
	bne	.L70	@cond_branch
	ldr	r0, .L79
	ldrh	r2, [r0]
	ldr	r3, .L79+0x4
	mov	r0, #0x4
	mov	r1, #0x0
	bl	ItemUse_SetQuestLogEvent
	mov	r0, #0x41
	bl	FieldEffectStart
	ldr	r1, .L79+0x8
	add	r0, r6, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L79+0xc
	str	r1, [r0]
	mov	r1, #0xf
	strh	r1, [r0, #0x8]
.L70:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gSpecialVar_ItemId
	.word	0xffff
	.word	gTasks
	.word	Task_VsSeeker_1
.Lfe11:
	.size	 Task_VsSeeker_0,.Lfe11-Task_VsSeeker_0
	.align	2, 0
	.type	 Task_VsSeeker_1,function
	.thumb_func
Task_VsSeeker_1:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L83
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r1, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L82	@cond_branch
	ldr	r0, .L83+0x4
	str	r0, [r1]
	mov	r0, #0x10
	strh	r0, [r1, #0xa]
.L82:
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	gTasks
	.word	Task_VsSeeker_2
.Lfe12:
	.size	 Task_VsSeeker_1,.Lfe12-Task_VsSeeker_1
	.align	2, 0
	.type	 Task_VsSeeker_2,function
	.thumb_func
Task_VsSeeker_2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L88
	add	r4, r0, r1
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x2
	beq	.L86	@cond_branch
	ldrh	r0, [r4, #0x2]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L86	@cond_branch
	mov	r0, #0x5e
	bl	PlaySE
	mov	r0, #0xb
	strh	r0, [r4, #0x2]
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
.L86:
	mov	r0, #0x41
	bl	FieldEffectActiveListContains
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L87	@cond_branch
	strh	r0, [r4, #0x2]
	strh	r0, [r4, #0x4]
	bl	VsSeekerResetInBagStepCounter
	ldr	r0, .L88+0x4
	bl	GetVsSeekerResponseInArea
	ldr	r1, .L88+0x8
	ldr	r2, [r1]
	ldr	r1, .L88+0xc
	add	r2, r2, r1
	lsl	r0, r0, #0x3
	ldrb	r3, [r2]
	mov	r1, #0x7
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2]
	ldr	r0, .L88+0x10
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x5]
	ldrb	r2, [r0, #0x4]
	ldr	r3, .L88+0x14
	mov	r0, #0xff
	bl	ScriptMovement_StartObjectMovementScript
	ldr	r1, .L88+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L88+0x1c
	str	r1, [r0]
.L87:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L89:
	.align	2, 0
.L88:
	.word	gTasks+0x8
	.word	sVsSeekerData
	.word	sVsSeeker
	.word	0x431
	.word	gSaveBlock1Ptr
	.word	sMovementScript_Wait48
	.word	gTasks
	.word	Task_VsSeeker_3
.Lfe13:
	.size	 Task_VsSeeker_2,.Lfe13-Task_VsSeeker_2
	.align	2, 0
	.type	 GatherNearbyTrainerInfo,function
	.thumb_func
GatherNearbyTrainerInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L98
	ldr	r0, [r0]
	mov	r1, #0x8e
	lsl	r1, r1, #0x4
	add	r2, r0, r1
	mov	r1, #0x0
	mov	r0, sp
	strb	r1, [r0]
	mov	r8, r1
	mov	r9, r1
	ldr	r0, .L98+0x4
	ldr	r0, [r0, #0x4]
	ldrb	r0, [r0]
	cmp	r8, r0
	bge	.L92	@cond_branch
	ldr	r7, .L98+0x8
	mov	r6, sp
	ldr	r0, .L98+0xc
	mov	sl, r0
	add	r5, r2, #0
.L94:
	ldrh	r0, [r5, #0xc]
	cmp	r0, #0x1
	beq	.L96	@cond_branch
	cmp	r0, #0x3
	bne	.L93	@cond_branch
.L96:
	ldr	r1, [r7]
	mov	r2, r8
	lsl	r4, r2, #0x4
	add	r1, r1, r4
	ldr	r0, [r5, #0x10]
	str	r0, [r1]
	ldr	r0, [r5, #0x10]
	bl	GetTrainerFlagFromScript
	ldr	r1, [r7]
	add	r1, r1, r4
	strh	r0, [r1, #0x4]
	ldrb	r0, [r5]
	strb	r0, [r1, #0x6]
	ldrb	r0, [r5]
	ldr	r1, .L98
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	mov	r3, sp
	bl	TryGetObjectEventIdByLocalIdAndMap
	ldr	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r6]
	strb	r1, [r0, #0x7]
	ldr	r2, [r7]
	add	r2, r2, r4
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r0, [r0, #0x10]
	sub	r0, r0, #0x7
	strh	r0, [r2, #0x8]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r0, [r0, #0x12]
	sub	r0, r0, #0x7
	strh	r0, [r2, #0xa]
	ldrb	r0, [r5, #0x1]
	strb	r0, [r2, #0xc]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L93:
	add	r5, r5, #0x18
	mov	r0, #0x1
	add	r9, r9, r0
	ldr	r0, .L98+0x4
	ldr	r0, [r0, #0x4]
	ldrb	r0, [r0]
	cmp	r9, r0
	blt	.L94	@cond_branch
.L92:
	ldr	r0, .L98+0x8
	ldr	r0, [r0]
	mov	r2, r8
	lsl	r1, r2, #0x4
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0, #0x6]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L99:
	.align	2, 0
.L98:
	.word	gSaveBlock1Ptr
	.word	gMapHeader
	.word	sVsSeeker
	.word	gObjectEvents
.Lfe14:
	.size	 GatherNearbyTrainerInfo,.Lfe14-GatherNearbyTrainerInfo
	.align	2, 0
	.type	 Task_VsSeeker_3,function
	.thumb_func
Task_VsSeeker_3:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	ldr	r0, .L105
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x5]
	ldrb	r2, [r0, #0x4]
	mov	r0, #0xff
	bl	ScriptMovement_IsObjectMovementFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L101	@cond_branch
	ldr	r0, .L105+0x4
	ldr	r0, [r0]
	ldr	r1, .L105+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0xf8
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L102	@cond_branch
	ldr	r2, .L105+0xc
	ldr	r3, .L105+0x10
	add	r0, r4, #0
	mov	r1, #0x2
	bl	DisplayItemMessageOnField
	b	.L103
.L106:
	.align	2, 0
.L105:
	.word	gSaveBlock1Ptr
	.word	sVsSeeker
	.word	0x431
	.word	VSSeeker_Text_TrainersNotReady
	.word	Task_ItemUse_CloseMessageBoxAndReturnToField_VsSeeker
.L102:
	cmp	r1, #0x10
	bne	.L104	@cond_branch
	bl	StartAllRespondantIdleMovements
.L104:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	ClearDialogWindowAndFrame
	bl	ClearPlayerHeldMovementAndUnfreezeObjectEvents
	bl	UnlockPlayerFieldControls
	add	r0, r5, #0
	bl	DestroyTask
.L103:
	ldr	r0, .L107
	ldr	r0, [r0]
	bl	Free
.L101:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	sVsSeeker
.Lfe15:
	.size	 Task_VsSeeker_3,.Lfe15-Task_VsSeeker_3
	.align	2, 0
	.type	 CanUseVsSeeker,function
	.thumb_func
CanUseVsSeeker:
	push	{lr}
	ldr	r0, .L115
	ldr	r0, [r0]
	mov	r1, #0xc7
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x64
	bne	.L110	@cond_branch
	bl	GetRematchableTrainerLocalId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L111	@cond_branch
	mov	r0, #0x1
	b	.L114
.L116:
	.align	2, 0
.L115:
	.word	gSaveBlock1Ptr
.L111:
	mov	r0, #0x2
	b	.L114
.L110:
	mov	r1, #0x64
	sub	r1, r1, r0
	mov	r0, #0x0
	bl	TV_PrintIntToStringVar
	mov	r0, #0x0
.L114:
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 CanUseVsSeeker,.Lfe16-CanUseVsSeeker
	.align	2, 0
	.type	 GetVsSeekerResponseInArea,function
	.thumb_func
GetVsSeekerResponseInArea:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, sp
	mov	r1, r8
	strb	r1, [r0]
	mov	r2, #0x0
	mov	r9, r2
	ldr	r4, .L135
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0xff
	bne	.LCB1107
	b	.L119	@long jump
.LCB1107:
	add	r6, r4, #0
	mov	r3, #0x86
	lsl	r3, r3, #0x3
	mov	sl, r3
	mov	r5, #0x0
.L120:
	ldr	r0, [r6]
	add	r0, r0, r5
	bl	IsTrainerVisibleOnScreen
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB1127
	b	.L121	@long jump
.LCB1127:
	ldr	r0, [r4]
	add	r0, r0, r5
	ldrh	r0, [r0, #0x4]
	mov	r8, r0
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L122	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r5
	ldr	r1, .L135+0x4
	bl	StartTrainerObjectMovementScript
	ldr	r2, [r6]
	ldr	r0, .L135+0x8
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r1, #0x1
	b	.L134
.L136:
	.align	2, 0
.L135:
	.word	sVsSeeker
	.word	sMovementScript_TrainerUnfought
	.word	0x431
.L122:
	ldr	r0, [sp, #0x4]
	mov	r1, r8
	mov	r2, sp
	bl	GetNextAvailableRematchTrainer
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L123	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r5
	ldr	r1, .L137
	bl	StartTrainerObjectMovementScript
	ldr	r2, [r6]
	ldr	r3, .L137+0x4
	add	r2, r2, r3
	ldrb	r0, [r2]
	mov	r1, #0x2
	b	.L134
.L138:
	.align	2, 0
.L137:
	.word	sMovementScript_TrainerNoRematch
	.word	0x431
.L123:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, r9
	mov	r1, r8
	bl	GetCurVsSeekerResponse
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L125	@cond_branch
	mov	r4, #0x64
	b	.L126
.L125:
	cmp	r0, #0x1
	bne	.L126	@cond_branch
	mov	r4, #0x0
.L126:
	cmp	r4, #0x1d
	bhi	.L128	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r5
	ldr	r1, .L139
	bl	StartTrainerObjectMovementScript
	ldr	r2, [r6]
	ldr	r0, .L139+0x4
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r1, #0x2
	b	.L134
.L140:
	.align	2, 0
.L139:
	.word	sMovementScript_TrainerNoRematch
	.word	0x431
.L128:
	ldr	r0, .L141
	ldr	r1, [r0]
	ldr	r0, [r6]
	add	r0, r0, r5
	ldr	r2, .L141+0x4
	add	r1, r1, r2
	ldrb	r0, [r0, #0x6]
	add	r1, r1, r0
	strb	r7, [r1]
	ldr	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0, #0x7]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L141+0x8
	add	r0, r0, r1
	bl	ShiftStillObjectEventCoords
	ldr	r0, [r6]
	add	r0, r0, r5
	ldr	r1, .L141+0xc
	bl	StartTrainerObjectMovementScript
	ldr	r2, [r6]
	mov	r3, sl
	add	r0, r2, r3
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r0, r2, r3
	add	r0, r0, r1
	mov	r1, r8
	strh	r1, [r0]
	add	r2, r2, r5
	ldrb	r0, [r2, #0xc]
	bl	GetRunningBehaviorFromGraphicsId
	ldr	r1, [r6]
	mov	r3, sl
	add	r2, r1, r3
	mov	r3, #0x84
	lsl	r3, r3, #0x3
	add	r1, r1, r3
	ldrb	r2, [r2]
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r1, [r6]
	add	r1, r1, sl
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, [r6]
	ldr	r0, .L141+0x10
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r1, #0x4
.L134:
	orr	r0, r0, r1
	strb	r0, [r2]
.L121:
	add	r5, r5, #0x10
	mov	r1, #0x1
	add	r9, r9, r1
	ldr	r4, .L141+0x14
	ldr	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0xff
	beq	.LCB1330
	b	.L120	@long jump
.LCB1330:
.L119:
	ldr	r2, .L141+0x14
	ldr	r0, [r2]
	ldr	r3, .L141+0x10
	add	r0, r0, r3
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L131	@cond_branch
	mov	r0, #0x15
	bl	PlaySE
	ldr	r0, .L141+0x18
	bl	FlagSet
	bl	VsSeekerResetChargingStepCounter
	mov	r0, #0x2
	b	.L133
.L142:
	.align	2, 0
.L141:
	.word	gSaveBlock1Ptr
	.word	0x63a
	.word	gObjectEvents
	.word	sMovementScript_TrainerRematch
	.word	0x431
	.word	sVsSeeker
	.word	0x801
.L131:
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L132	@cond_branch
	mov	r0, #0x0
	b	.L133
.L132:
	mov	r0, #0x1
.L133:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 GetVsSeekerResponseInArea,.Lfe17-GetVsSeekerResponseInArea
	.align	2, 0
	.globl	ClearRematchStateByTrainerId
	.type	 ClearRematchStateByTrainerId,function
	.thumb_func
ClearRematchStateByTrainerId:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r1, #0x0
	mov	r0, sp
	strb	r1, [r0]
	ldr	r5, .L155
	ldr	r0, [r5]
	mov	r1, #0x8e
	lsl	r1, r1, #0x4
	add	r4, r0, r1
	ldr	r0, .L155+0x4
	ldr	r1, .L155+0x8
	ldrh	r1, [r1]
	bl	LookupVsSeekerOpponentInArray
	mov	r9, r0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r9, r0
	beq	.L144	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L155+0xc
	ldr	r0, [r0, #0x4]
	ldrb	r0, [r0]
	cmp	r8, r0
	bge	.L144	@cond_branch
	mov	sl, r5
	add	r6, r4, #0
	add	r5, r6, #0
.L148:
	ldrh	r0, [r5, #0xc]
	cmp	r0, #0x1
	beq	.L150	@cond_branch
	cmp	r0, #0x3
	bne	.L147	@cond_branch
.L150:
	ldr	r0, [r5, #0x10]
	bl	GetTrainerFlagFromScript
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L155+0x4
	bl	LookupVsSeekerOpponentInArray
	cmp	r9, r0
	bne	.L147	@cond_branch
	ldrb	r0, [r5]
	mov	r1, sl
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	mov	r3, sp
	bl	TryGetObjectEventIdByLocalIdAndMap
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L155+0x10
	add	r4, r0, r1
	add	r0, r6, #0
	bl	GetRandomFaceDirectionMovementType
	ldr	r7, .L155+0x14
	ldrb	r0, [r4, #0x18]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	add	r0, r0, r7
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	OverrideMovementTypeForObjectEvent
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r1, .L155+0x18
	add	r0, r0, r1
	ldrb	r1, [r5]
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L155+0x1c
	mov	r1, sp
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L151	@cond_branch
	ldrb	r0, [r4, #0x18]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	add	r0, r0, r7
	ldrb	r0, [r0]
	b	.L154
.L156:
	.align	2, 0
.L155:
	.word	gSaveBlock1Ptr
	.word	sVsSeekerData
	.word	gTrainerBattleOpponent_A
	.word	gMapHeader
	.word	gObjectEvents
	.word	sFaceDirectionMovementTypeByFacingDirection
	.word	0x63a
	.word	gSelectedObjectEvent
.L151:
	mov	r0, #0x8
.L154:
	strb	r0, [r4, #0x6]
.L147:
	add	r5, r5, #0x18
	add	r6, r6, #0x18
	mov	r0, #0x1
	add	r8, r8, r0
	ldr	r0, .L157
	ldr	r0, [r0, #0x4]
	ldrb	r0, [r0]
	cmp	r8, r0
	blt	.L148	@cond_branch
.L144:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L158:
	.align	2, 0
.L157:
	.word	gMapHeader
.Lfe18:
	.size	 ClearRematchStateByTrainerId,.Lfe18-ClearRematchStateByTrainerId
	.align	2, 0
	.type	 TryGetRematchTrainerIdGivenGameState,function
	.thumb_func
TryGetRematchTrainerIdGivenGameState:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	ldrb	r0, [r4]
	cmp	r0, #0x5
	bhi	.L160	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L175
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L176:
	.align	2, 0
.L175:
	.word	.L172
	.align	2, 0
	.align	2, 0
.L172:
	.word	.L160
	.word	.L162
	.word	.L164
	.word	.L166
	.word	.L168
	.word	.L170
.L162:
	ldr	r0, .L177
	b	.L174
.L178:
	.align	2, 0
.L177:
	.word	0x292
.L164:
	ldr	r0, .L179
	b	.L174
.L180:
	.align	2, 0
.L179:
	.word	0x896
.L166:
	ldr	r0, .L181
	b	.L174
.L182:
	.align	2, 0
.L181:
	.word	0x897
.L168:
	ldr	r0, .L183
	b	.L174
.L184:
	.align	2, 0
.L183:
	.word	0x82c
.L170:
	ldr	r0, .L185
.L174:
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L160	@cond_branch
	ldrb	r1, [r4]
	add	r0, r5, #0
	bl	GetRematchTrainerIdGivenGameState
	strb	r0, [r4]
.L160:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	0x844
.Lfe19:
	.size	 TryGetRematchTrainerIdGivenGameState,.Lfe19-TryGetRematchTrainerIdGivenGameState
	.align	2, 0
	.type	 GetRematchTrainerIdGivenGameState,function
	.thumb_func
GetRematchTrainerIdGivenGameState:
	push	{lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	mov	r0, #0xff
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	cmp	r1, #0
	beq	.L189	@cond_branch
	ldr	r3, .L194
.L190:
	lsl	r0, r1, #0x1
	add	r0, r2, r0
	ldrh	r0, [r0]
	cmp	r0, r3
	beq	.L188	@cond_branch
	add	r0, r1, #0
	b	.L193
.L195:
	.align	2, 0
.L194:
	.word	0xffff
.L188:
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L190	@cond_branch
.L189:
	mov	r0, #0x0
.L193:
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 GetRematchTrainerIdGivenGameState,.Lfe20-GetRematchTrainerIdGivenGameState
	.align	2, 0
	.globl	ShouldTryRematchBattle
	.type	 ShouldTryRematchBattle,function
	.thumb_func
ShouldTryRematchBattle:
	push	{r4, r5, lr}
	ldr	r5, .L199
	ldr	r4, .L199+0x4
	ldrh	r1, [r4]
	add	r0, r5, #0
	bl	ShouldTryRematchBattleInternal
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L197	@cond_branch
	ldrh	r1, [r4]
	add	r0, r5, #0
	bl	HasRematchTrainerAlreadyBeenFought
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L198
.L200:
	.align	2, 0
.L199:
	.word	sVsSeekerData
	.word	gTrainerBattleOpponent_A
.L197:
	mov	r0, #0x1
.L198:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 ShouldTryRematchBattle,.Lfe21-ShouldTryRematchBattle
	.align	2, 0
	.type	 ShouldTryRematchBattleInternal,function
	.thumb_func
ShouldTryRematchBattleInternal:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	GetRematchIdx
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L203	@cond_branch
	cmp	r1, #0xdc
	bhi	.L203	@cond_branch
	ldr	r0, .L206
	ldrh	r0, [r0]
	bl	IsThisTrainerRematchable
	cmp	r0, #0
	beq	.L203	@cond_branch
	mov	r0, #0x1
	b	.L205
.L207:
	.align	2, 0
.L206:
	.word	gSpecialVar_LastTalked
.L203:
	mov	r0, #0x0
.L205:
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 ShouldTryRematchBattleInternal,.Lfe22-ShouldTryRematchBattleInternal
	.align	2, 0
	.type	 HasRematchTrainerAlreadyBeenFought,function
	.thumb_func
HasRematchTrainerAlreadyBeenFought:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	GetRematchIdx
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L210	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r4
	ldrh	r0, [r0]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L210	@cond_branch
	mov	r0, #0x1
	b	.L211
.L210:
	mov	r0, #0x0
.L211:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 HasRematchTrainerAlreadyBeenFought,.Lfe23-HasRematchTrainerAlreadyBeenFought
	.align	2, 0
	.globl	ClearRematchStateOfLastTalked
	.type	 ClearRematchStateOfLastTalked,function
	.thumb_func
ClearRematchStateOfLastTalked:
	push	{lr}
	ldr	r0, .L213
	ldr	r0, [r0]
	ldr	r1, .L213+0x4
	ldr	r2, .L213+0x8
	add	r0, r0, r2
	ldrh	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	bl	SetBattledTrainerFlag
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	gSaveBlock1Ptr
	.word	gSpecialVar_LastTalked
	.word	0x63a
.Lfe24:
	.size	 ClearRematchStateOfLastTalked,.Lfe24-ClearRematchStateOfLastTalked
	.align	2, 0
	.type	 LookupVsSeekerOpponentInArray,function
	.thumb_func
LookupVsSeekerOpponentInArray:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	mov	r1, #0x0
	mov	r4, ip
	mov	r7, #0x0
.L219:
	mov	r3, #0x0
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldr	r5, .L230
	mov	r0, ip
	add	r2, r7, r0
.L224:
	ldrh	r0, [r2]
	cmp	r0, r5
	beq	.L222	@cond_branch
	cmp	r0, r6
	bne	.L222	@cond_branch
	add	r0, r1, #0
	b	.L229
.L231:
	.align	2, 0
.L230:
	.word	0xffff
.L222:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x5
	bgt	.L218	@cond_branch
	ldrh	r0, [r2]
	cmp	r0, #0
	bne	.L224	@cond_branch
.L218:
	add	r4, r4, #0x10
	add	r7, r7, #0x10
	add	r1, r1, #0x1
	cmp	r1, #0xdc
	bls	.L219	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L229:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 LookupVsSeekerOpponentInArray,.Lfe25-LookupVsSeekerOpponentInArray
	.align	2, 0
	.globl	GetRematchTrainerId
	.type	 GetRematchTrainerId,function
	.thumb_func
GetRematchTrainerId:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r5, .L235
	add	r0, r5, #0
	mov	r2, sp
	bl	GetNextAvailableRematchTrainer
	mov	r4, sp
	add	r4, r4, #0x1
	strb	r0, [r4]
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L233	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	add	r1, r4, #0
	bl	TryGetRematchTrainerIdGivenGameState
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	mov	r0, sp
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r1, r1, r5
	ldrh	r0, [r1]
	b	.L234
.L236:
	.align	2, 0
.L235:
	.word	sVsSeekerData
.L233:
	mov	r0, #0x0
.L234:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 GetRematchTrainerId,.Lfe26-GetRematchTrainerId
	.align	2, 0
	.globl	IsTrainerReadyForRematch
	.type	 IsTrainerReadyForRematch,function
	.thumb_func
IsTrainerReadyForRematch:
	push	{lr}
	ldr	r0, .L238
	ldr	r1, .L238+0x4
	ldrh	r1, [r1]
	bl	IsTrainerReadyForRematchInternal
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L239:
	.align	2, 0
.L238:
	.word	sVsSeekerData
	.word	gTrainerBattleOpponent_A
.Lfe27:
	.size	 IsTrainerReadyForRematch,.Lfe27-IsTrainerReadyForRematch
	.align	2, 0
	.type	 IsTrainerReadyForRematchInternal,function
	.thumb_func
IsTrainerReadyForRematchInternal:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	LookupVsSeekerOpponentInArray
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L243	@cond_branch
	cmp	r1, #0xdc
	bhi	.L243	@cond_branch
	ldr	r0, .L245
	ldrh	r0, [r0]
	bl	IsThisTrainerRematchable
	cmp	r0, #0
	beq	.L243	@cond_branch
	mov	r0, #0x1
	b	.L244
.L246:
	.align	2, 0
.L245:
	.word	gSpecialVar_LastTalked
.L243:
	mov	r0, #0x0
.L244:
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 IsTrainerReadyForRematchInternal,.Lfe28-IsTrainerReadyForRematchInternal
	.align	2, 0
	.type	 ObjectEventIdIsSane,function
	.thumb_func
ObjectEventIdIsSane:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x3
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, .L250
	add	r1, r0, r1
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L248	@cond_branch
	ldr	r0, .L250+0x4
	ldr	r0, [r0, #0x4]
	ldrb	r0, [r0]
	ldrb	r2, [r1, #0x8]
	cmp	r0, r2
	bcc	.L248	@cond_branch
	ldr	r2, .L250+0x8
	ldrb	r1, [r1, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2e
	ldrsh	r0, [r0, r1]
	cmp	r0, r3
	bne	.L248	@cond_branch
	mov	r0, #0x1
	b	.L249
.L251:
	.align	2, 0
.L250:
	.word	gObjectEvents
	.word	gMapHeader
	.word	gSprites
.L248:
	mov	r0, #0x0
.L249:
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 ObjectEventIdIsSane,.Lfe29-ObjectEventIdIsSane
	.align	2, 0
	.type	 GetRandomFaceDirectionMovementType,function
	.thumb_func
GetRandomFaceDirectionMovementType:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r1, #0
	cmp	r1, #0x1
	beq	.L258	@cond_branch
	cmp	r1, #0x1
	bgt	.L260	@cond_branch
	cmp	r1, #0
	beq	.L254	@cond_branch
	b	.L258
.L260:
	cmp	r0, #0x2
	beq	.L256	@cond_branch
	cmp	r0, #0x3
	beq	.L257	@cond_branch
	b	.L258
.L254:
	mov	r0, #0x7
	b	.L261
.L256:
	mov	r0, #0x9
	b	.L261
.L257:
	mov	r0, #0xa
	b	.L261
.L258:
	mov	r0, #0x8
.L261:
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 GetRandomFaceDirectionMovementType,.Lfe30-GetRandomFaceDirectionMovementType
	.align	2, 0
	.type	 GetRunningBehaviorFromGraphicsId,function
	.thumb_func
GetRunningBehaviorFromGraphicsId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x11
	cmp	r0, #0x2d
	bhi	.L289	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L292
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L293:
	.align	2, 0
.L292:
	.word	.L290
	.align	2, 0
	.align	2, 0
.L290:
	.word	.L285
	.word	.L285
	.word	.L285
	.word	.L285
	.word	.L289
	.word	.L285
	.word	.L285
	.word	.L285
	.word	.L285
	.word	.L285
	.word	.L289
	.word	.L285
	.word	.L285
	.word	.L285
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L288
	.word	.L285
	.word	.L289
	.word	.L285
	.word	.L285
	.word	.L285
	.word	.L285
	.word	.L288
	.word	.L288
	.word	.L285
	.word	.L285
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L285
	.word	.L289
	.word	.L285
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L289
	.word	.L285
.L285:
	mov	r0, #0x4e
	b	.L291
.L288:
	mov	r0, #0x4f
	b	.L291
.L289:
	mov	r0, #0x4d
.L291:
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 GetRunningBehaviorFromGraphicsId,.Lfe31-GetRunningBehaviorFromGraphicsId
	.align	2, 0
	.type	 GetTrainerFlagFromScript,function
	.thumb_func
GetTrainerFlagFromScript:
	add	r0, r0, #0x2
	ldrb	r1, [r0]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	add	r0, r1, #0
	bx	lr
.Lfe32:
	.size	 GetTrainerFlagFromScript,.Lfe32-GetTrainerFlagFromScript
	.align	2, 0
	.type	 GetRematchIdx,function
	.thumb_func
GetRematchIdx:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r3, #0x0
	add	r2, r0, #0
.L299:
	ldrh	r0, [r2]
	cmp	r0, r1
	bne	.L298	@cond_branch
	add	r0, r3, #0
	b	.L302
.L298:
	add	r2, r2, #0x10
	add	r3, r3, #0x1
	cmp	r3, #0xdc
	bls	.L299	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L302:
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 GetRematchIdx,.Lfe33-GetRematchIdx
	.align	2, 0
	.type	 IsThisTrainerRematchable,function
	.thumb_func
IsThisTrainerRematchable:
	push	{lr}
	ldr	r1, .L306
	ldr	r1, [r1]
	ldr	r2, .L306+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L304	@cond_branch
	mov	r0, #0x1
	b	.L305
.L307:
	.align	2, 0
.L306:
	.word	gSaveBlock1Ptr
	.word	0x63a
.L304:
	mov	r0, #0x0
.L305:
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 IsThisTrainerRematchable,.Lfe34-IsThisTrainerRematchable
	.align	2, 0
	.type	 ClearAllTrainerRematchStates,function
	.thumb_func
ClearAllTrainerRematchStates:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r4, .L314
	ldr	r3, .L314+0x4
	mov	r2, #0x0
.L312:
	ldr	r0, [r4]
	add	r0, r0, r3
	add	r0, r0, r1
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x63
	bls	.L312	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L315:
	.align	2, 0
.L314:
	.word	gSaveBlock1Ptr
	.word	0x63a
.Lfe35:
	.size	 ClearAllTrainerRematchStates,.Lfe35-ClearAllTrainerRematchStates
	.align	2, 0
	.type	 IsTrainerVisibleOnScreen,function
	.thumb_func
IsTrainerVisibleOnScreen:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	PlayerGetDestCoords
	mov	r1, sp
	mov	r0, sp
	ldrh	r0, [r0]
	sub	r0, r0, #0x7
	strh	r0, [r1]
	ldrh	r0, [r4]
	sub	r0, r0, #0x7
	strh	r0, [r4]
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r2, [r0, r1]
	sub	r0, r2, #0x7
	mov	r3, #0x8
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	bgt	.L317	@cond_branch
	add	r0, r2, #0x7
	cmp	r0, r1
	blt	.L317	@cond_branch
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	sub	r0, r1, #0x5
	mov	r3, #0xa
	ldrsh	r2, [r5, r3]
	cmp	r0, r2
	bgt	.L317	@cond_branch
	add	r0, r1, #0x5
	cmp	r0, r2
	blt	.L317	@cond_branch
	ldrb	r0, [r5, #0x7]
	bl	ObjectEventIdIsSane
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L317	@cond_branch
	mov	r0, #0x1
	b	.L318
.L317:
	mov	r0, #0x0
.L318:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 IsTrainerVisibleOnScreen,.Lfe36-IsTrainerVisibleOnScreen
	.align	2, 0
	.type	 GetNextAvailableRematchTrainer,function
	.thumb_func
GetNextAvailableRematchTrainer:
	push	{r4, r5, r6, r7, lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r4, #0x0
	add	r3, r0, #0
.L323:
	ldrh	r0, [r3]
	cmp	r0, r1
	bne	.L322	@cond_branch
	strb	r4, [r2]
	mov	r5, #0x1
	ldr	r7, .L335
	add	r4, r3, #0x2
	mov	r6, #0x0
.L328:
	ldrh	r0, [r4]
	cmp	r0, #0
	bne	.L329	@cond_branch
	lsr	r0, r6, #0x18
	b	.L334
.L336:
	.align	2, 0
.L335:
	.word	0xffff
.L329:
	cmp	r0, r7
	beq	.L327	@cond_branch
	ldrh	r0, [r4]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L327	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	b	.L334
.L327:
	add	r4, r4, #0x2
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r6, r6, r0
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L328	@cond_branch
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L334
.L322:
	add	r3, r3, #0x10
	add	r4, r4, #0x1
	cmp	r4, #0xdc
	bls	.L323	@cond_branch
	mov	r0, #0x0
	strb	r0, [r2]
	mov	r0, #0x0
.L334:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 GetNextAvailableRematchTrainer,.Lfe37-GetNextAvailableRematchTrainer
	.align	2, 0
	.type	 GetRematchableTrainerLocalId,function
	.thumb_func
GetRematchableTrainerLocalId:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r5, #0x0
	ldr	r6, .L347
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0xff
	beq	.L339	@cond_branch
	add	r7, r6, #0
.L341:
	lsl	r4, r5, #0x4
	ldr	r0, [r7]
	add	r0, r0, r4
	bl	IsTrainerVisibleOnScreen
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L340	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrh	r0, [r0, #0x4]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L344	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, r4
	ldrh	r1, [r0, #0x4]
	ldr	r0, .L347+0x4
	mov	r2, sp
	bl	GetNextAvailableRematchTrainer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L340	@cond_branch
.L344:
	ldr	r0, [r7]
	add	r0, r0, r4
	ldrb	r0, [r0, #0x6]
	b	.L346
.L348:
	.align	2, 0
.L347:
	.word	sVsSeeker
	.word	sVsSeekerData
.L340:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L349
	ldr	r0, [r6]
	lsl	r1, r5, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0xff
	bne	.L341	@cond_branch
.L339:
	mov	r0, #0xff
.L346:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L350:
	.align	2, 0
.L349:
	.word	sVsSeeker
.Lfe38:
	.size	 GetRematchableTrainerLocalId,.Lfe38-GetRematchableTrainerLocalId
	.align	2, 0
	.type	 StartTrainerObjectMovementScript,function
	.thumb_func
StartTrainerObjectMovementScript:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldrb	r1, [r4, #0x7]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L352
	add	r0, r0, r1
	bl	UnfreezeObjectEvent
	ldrb	r0, [r4, #0x6]
	ldr	r1, .L352+0x4
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	add	r3, r5, #0
	bl	ScriptMovement_StartObjectMovementScript
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L353:
	.align	2, 0
.L352:
	.word	gObjectEvents
	.word	gSaveBlock1Ptr
.Lfe39:
	.size	 StartTrainerObjectMovementScript,.Lfe39-StartTrainerObjectMovementScript
	.align	2, 0
	.type	 GetCurVsSeekerResponse,function
	.thumb_func
GetCurVsSeekerResponse:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	mov	r5, #0x0
	cmp	r5, r6
	bge	.L356	@cond_branch
	ldr	r7, .L368
	mov	r4, #0x0
.L358:
	ldr	r0, [r7]
	add	r0, r0, r4
	bl	IsTrainerVisibleOnScreen
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L357	@cond_branch
	ldr	r1, [r7]
	add	r0, r1, r4
	ldrh	r0, [r0, #0x4]
	cmp	r0, r8
	bne	.L357	@cond_branch
	mov	r3, #0x0
	mov	r2, #0x86
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r3, r0
	bge	.L361	@cond_branch
	ldr	r0, .L368
	ldr	r1, [r0]
	add	r0, r1, r4
	ldrh	r4, [r0, #0x4]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	add	r2, r1, r0
	add	r0, r0, #0x30
	add	r1, r1, r0
	ldrb	r1, [r1]
.L363:
	ldrh	r0, [r2]
	cmp	r0, r4
	bne	.L362	@cond_branch
	mov	r0, #0x2
	b	.L367
.L369:
	.align	2, 0
.L368:
	.word	sVsSeeker
.L362:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, r1
	blt	.L363	@cond_branch
.L361:
	mov	r0, #0x1
	b	.L367
.L357:
	add	r4, r4, #0x10
	add	r5, r5, #0x1
	cmp	r5, r6
	blt	.L358	@cond_branch
.L356:
	mov	r0, #0x0
.L367:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 GetCurVsSeekerResponse,.Lfe40-GetCurVsSeekerResponse
	.align	2, 0
	.type	 StartAllRespondantIdleMovements,function
	.thumb_func
StartAllRespondantIdleMovements:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r1, #0x0
	mov	r0, sp
	strb	r1, [r0]
	mov	r7, #0x0
	ldr	r2, .L384
	ldr	r0, [r2]
	mov	r1, #0x86
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	mov	sl, r2
	b	.L383
.L385:
	.align	2, 0
.L384:
	.word	sVsSeeker
.L374:
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x6]
	add	r3, r7, #0x1
	mov	r8, r3
	cmp	r0, #0xff
	beq	.L373	@cond_branch
	add	r5, r2, #0
	mov	sl, r5
	mov	r6, #0x0
	mov	r9, r5
.L378:
	ldr	r0, [r5]
	add	r2, r0, r6
	lsl	r1, r7, #0x1
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	add	r0, r0, r1
	ldrh	r1, [r2, #0x4]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L377	@cond_branch
	ldrb	r0, [r2, #0x7]
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L386
	add	r4, r1, r2
	bl	ObjectEventIdIsSane
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L380	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0x84
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r0, r0, r7
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	SetTrainerMovementType
.L380:
	ldr	r0, [r5]
	mov	r3, #0x84
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	add	r0, r0, r7
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	OverrideMovementTypeForObjectEvent
	ldr	r0, [r5]
	add	r0, r0, r6
	ldrh	r1, [r0, #0x4]
	ldr	r0, .L386+0x4
	mov	r2, sp
	bl	GetNextAvailableRematchTrainer
	ldr	r1, .L386+0x8
	ldr	r1, [r1]
	ldr	r2, [r5]
	add	r2, r2, r6
	ldr	r3, .L386+0xc
	add	r1, r1, r3
	ldrb	r2, [r2, #0x6]
	add	r1, r1, r2
	strb	r0, [r1]
.L377:
	add	r6, r6, #0x10
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, r6
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0xff
	bne	.L378	@cond_branch
.L373:
	mov	r7, r8
	mov	r2, sl
	ldr	r0, [r2]
	mov	r3, #0x86
	lsl	r3, r3, #0x3
	add	r0, r0, r3
.L383:
	ldrb	r0, [r0]
	cmp	r7, r0
	blt	.L374	@cond_branch
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L387:
	.align	2, 0
.L386:
	.word	gObjectEvents
	.word	sVsSeekerData
	.word	gSaveBlock1Ptr
	.word	0x63a
.Lfe41:
	.size	 StartAllRespondantIdleMovements,.Lfe41-StartAllRespondantIdleMovements
.text
	.align	2, 0 @ Don't pad with nop

