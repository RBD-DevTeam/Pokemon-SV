@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sAnimStatsChangeData,object
	.size	 sAnimStatsChangeData,4
sAnimStatsChangeData:
	.word	0x0
	.section .rodata
	.align	1, 0
	.type	 sRgbWhite,object
sRgbWhite:
	.short	0x7fff
	.size	 sRgbWhite,2
	.globl	gBattleAnimRegOffsBgCnt
	.type	 gBattleAnimRegOffsBgCnt,object
gBattleAnimRegOffsBgCnt:
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.size	 gBattleAnimRegOffsBgCnt,4
	.globl	gBattleIntroRegOffsBgCnt
	.type	 gBattleIntroRegOffsBgCnt,object
gBattleIntroRegOffsBgCnt:
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.size	 gBattleIntroRegOffsBgCnt,4
.text
	.align	2, 0
	.globl	AnimTask_BlendBattleAnimPal
	.type	 AnimTask_BlendBattleAnimPal,function
	.thumb_func
AnimTask_BlendBattleAnimPal:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L3
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	bl	UnpackSelectedBattlePalettes
	add	r6, r0, #0
	ldrh	r3, [r4]
	lsl	r3, r3, #0x10
	asr	r0, r3, #0x17
	mov	r4, #0x1
	and	r0, r0, r4
	asr	r1, r3, #0x18
	and	r1, r1, r4
	asr	r2, r3, #0x19
	and	r2, r2, r4
	asr	r3, r3, #0x1a
	and	r3, r3, r4
	bl	GetBattleMonSpritePalettesMask
	orr	r6, r6, r0
	add	r0, r5, #0
	add	r1, r6, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimArgs
.Lfe1:
	.size	 AnimTask_BlendBattleAnimPal,.Lfe1-AnimTask_BlendBattleAnimPal
	.align	2, 0
	.globl	AnimTask_BlendBattleAnimPalExclude
	.type	 AnimTask_BlendBattleAnimPalExclude,function
	.thumb_func
AnimTask_BlendBattleAnimPalExclude:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r1, sp
	mov	r0, #0xff
	strb	r0, [r1, #0x1]
	mov	r0, #0x1
	bl	UnpackSelectedBattlePalettes
	add	r5, r0, #0
	ldr	r0, .L25
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x7
	bhi	.L6	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L25+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L26:
	.align	2, 0
.L25:
	.word	gBattleAnimArgs
	.word	.L15
	.align	2, 0
	.align	2, 0
.L15:
	.word	.L8
	.word	.L10
	.word	.L7
	.word	.L9
	.word	.L11
	.word	.L12
	.word	.L13
	.word	.L14
.L7:
	mov	r5, #0x0
.L8:
	mov	r0, sp
	ldr	r1, .L27
	b	.L23
.L28:
	.align	2, 0
.L27:
	.word	gBattleAnimAttacker
.L9:
	mov	r5, #0x0
.L10:
	mov	r0, sp
	ldr	r1, .L29
.L23:
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L6
.L30:
	.align	2, 0
.L29:
	.word	gBattleAnimTarget
.L11:
	mov	r1, sp
	ldr	r0, .L31
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L31+0x4
	ldrb	r0, [r0]
	strb	r0, [r1, #0x1]
	b	.L6
.L32:
	.align	2, 0
.L31:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L12:
	mov	r1, sp
	mov	r0, #0xff
	strb	r0, [r1]
	b	.L6
.L13:
	mov	r5, #0x0
	mov	r2, sp
	ldr	r0, .L33
	b	.L24
.L34:
	.align	2, 0
.L33:
	.word	gBattleAnimAttacker
.L14:
	mov	r5, #0x0
	mov	r2, sp
	ldr	r0, .L35
.L24:
	ldrb	r0, [r0]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r2]
.L6:
	mov	r4, #0x0
	mov	r6, sp
.L20:
	ldrb	r0, [r6]
	cmp	r4, r0
	beq	.L19	@cond_branch
	ldrb	r0, [r6, #0x1]
	cmp	r4, r0
	beq	.L19	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L19	@cond_branch
	add	r0, r4, #0
	bl	GetSpritePalIdxByBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r0
	orr	r5, r5, r1
.L19:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L20	@cond_branch
	add	r0, r7, #0
	add	r1, r5, #0
	bl	StartBlendAnimSpriteColor
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gBattleAnimTarget
.Lfe2:
	.size	 AnimTask_BlendBattleAnimPalExclude,.Lfe2-AnimTask_BlendBattleAnimPalExclude
	.align	2, 0
	.globl	AnimTask_SetCamouflageBlend
	.type	 AnimTask_SetCamouflageBlend,function
	.thumb_func
AnimTask_SetCamouflageBlend:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L52
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	bl	UnpackSelectedBattlePalettes
	add	r2, r0, #0
	ldr	r0, .L52+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x9
	bhi	.L38	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L52+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L53:
	.align	2, 0
.L52:
	.word	gBattleAnimArgs
	.word	gBattleTerrain
	.word	.L49
	.align	2, 0
	.align	2, 0
.L49:
	.word	.L39
	.word	.L40
	.word	.L41
	.word	.L42
	.word	.L43
	.word	.L44
	.word	.L45
	.word	.L46
	.word	.L47
	.word	.L48
.L39:
	ldr	r1, .L54
	ldr	r0, .L54+0x4
	b	.L51
.L55:
	.align	2, 0
.L54:
	.word	gBattleAnimArgs
	.word	0xb0c
.L40:
	ldr	r1, .L56
	mov	r0, #0x9e
	lsl	r0, r0, #0x4
	b	.L51
.L57:
	.align	2, 0
.L56:
	.word	gBattleAnimArgs
.L41:
	ldr	r1, .L58
	ldr	r0, .L58+0x4
	b	.L51
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimArgs
	.word	0x2f1e
.L42:
	ldr	r1, .L60
	mov	r0, #0x90
	lsl	r0, r0, #0x7
	b	.L51
.L61:
	.align	2, 0
.L60:
	.word	gBattleAnimArgs
.L43:
	ldr	r1, .L62
	ldr	r0, .L62+0x4
	b	.L51
.L63:
	.align	2, 0
.L62:
	.word	gBattleAnimArgs
	.word	0x7ecb
.L44:
	ldr	r1, .L64
	ldr	r0, .L64+0x4
	b	.L51
.L65:
	.align	2, 0
.L64:
	.word	gBattleAnimArgs
	.word	0x7ecb
.L45:
	ldr	r1, .L66
	ldr	r0, .L66+0x4
	b	.L51
.L67:
	.align	2, 0
.L66:
	.word	gBattleAnimArgs
	.word	0x2a16
.L46:
	ldr	r1, .L68
	ldr	r0, .L68+0x4
	b	.L51
.L69:
	.align	2, 0
.L68:
	.word	gBattleAnimArgs
	.word	0xd2e
.L47:
.L48:
	ldr	r1, .L70
	ldr	r0, .L70+0x4
.L51:
	strh	r0, [r1, #0x8]
.L38:
	add	r0, r4, #0
	add	r1, r2, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gBattleAnimArgs
	.word	0x7fff
.Lfe3:
	.size	 AnimTask_SetCamouflageBlend,.Lfe3-AnimTask_SetCamouflageBlend
	.align	2, 0
	.globl	AnimTask_BlendParticle
	.type	 AnimTask_BlendParticle,function
	.thumb_func
AnimTask_BlendParticle:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L73
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	add	r0, r4, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	gBattleAnimArgs
.Lfe4:
	.size	 AnimTask_BlendParticle,.Lfe4-AnimTask_BlendParticle
	.align	2, 0
	.type	 StartBlendAnimSpriteColor,function
	.thumb_func
StartBlendAnimSpriteColor:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L76
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	strh	r1, [r2, #0x8]
	lsr	r1, r1, #0x10
	strh	r1, [r2, #0xa]
	ldr	r3, .L76+0x4
	ldrh	r1, [r3, #0x2]
	strh	r1, [r2, #0xc]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r2, #0xe]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r2, #0x10]
	ldrh	r1, [r3, #0x8]
	strh	r1, [r2, #0x12]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r2, #0x1c]
	ldr	r1, .L76+0x8
	str	r1, [r2]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_BlendSpriteColor_Step2
.Lfe5:
	.size	 StartBlendAnimSpriteColor,.Lfe5-StartBlendAnimSpriteColor
	.align	2, 0
	.type	 AnimTask_BlendSpriteColor_Step2,function
	.thumb_func
AnimTask_BlendSpriteColor_Step2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L90
	lsl	r5, r7, #0x2
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1a]
	mov	r8, r0
	mov	r4, #0x1a
	ldrsh	r1, [r3, r4]
	mov	r4, #0xc
	ldrsh	r0, [r3, r4]
	mov	r9, r2
	cmp	r1, r0
	bne	.L79	@cond_branch
	strh	r6, [r3, #0x1a]
	mov	r0, #0x8
	ldrsh	r4, [r3, r0]
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	mov	r8, r5
	cmp	r4, #0
	beq	.L81	@cond_branch
	add	r5, r3, #0
.L82:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L83	@cond_branch
	ldrb	r2, [r5, #0x1c]
	ldrh	r3, [r5, #0x12]
	add	r0, r6, #0
	mov	r1, #0x10
	bl	BlendPalette
.L83:
	add	r0, r6, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsr	r4, r4, #0x1
	cmp	r4, #0
	bne	.L82	@cond_branch
.L81:
	mov	r4, r8
	add	r0, r4, r7
	lsl	r0, r0, #0x3
	mov	r1, r9
	add	r2, r0, r1
	ldrh	r0, [r2, #0x1c]
	mov	r4, #0x1c
	ldrsh	r3, [r2, r4]
	mov	r4, #0x10
	ldrsh	r1, [r2, r4]
	cmp	r3, r1
	bge	.L85	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r2, #0x1c]
	b	.L89
.L91:
	.align	2, 0
.L90:
	.word	gTasks
.L85:
	cmp	r3, r1
	ble	.L87	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x1c]
	b	.L89
.L87:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	b	.L89
.L79:
	mov	r0, r8
	add	r0, r0, #0x1
	strh	r0, [r3, #0x1a]
.L89:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimTask_BlendSpriteColor_Step2,.Lfe6-AnimTask_BlendSpriteColor_Step2
	.align	2, 0
	.globl	AnimTask_HardwarePaletteFade
	.type	 AnimTask_HardwarePaletteFade,function
	.thumb_func
AnimTask_HardwarePaletteFade:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L93
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x2]
	ldrb	r2, [r4, #0x4]
	ldrb	r3, [r4, #0x6]
	ldrb	r4, [r4, #0x8]
	str	r4, [sp]
	bl	BeginHardwarePaletteFade
	ldr	r1, .L93+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L93+0x8
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_HardwarePaletteFade_Step
.Lfe7:
	.size	 AnimTask_HardwarePaletteFade,.Lfe7-AnimTask_HardwarePaletteFade
	.align	2, 0
	.type	 AnimTask_HardwarePaletteFade_Step,function
	.thumb_func
AnimTask_HardwarePaletteFade_Step:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L97
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L96	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L96:
	pop	{r0}
	bx	r0
.L98:
	.align	2, 0
.L97:
	.word	gPaletteFade
.Lfe8:
	.size	 AnimTask_HardwarePaletteFade_Step,.Lfe8-AnimTask_HardwarePaletteFade_Step
	.align	2, 0
	.globl	AnimTask_TraceMonBlended
	.type	 AnimTask_TraceMonBlended,function
	.thumb_func
AnimTask_TraceMonBlended:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L100
	add	r1, r1, r0
	ldr	r2, .L100+0x4
	ldrh	r0, [r2]
	mov	r3, #0x0
	strh	r0, [r1, #0x8]
	strh	r3, [r1, #0xa]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0xc]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r1, #0x10]
	strh	r3, [r1, #0x12]
	ldr	r0, .L100+0x8
	str	r0, [r1]
	bx	lr
.L101:
	.align	2, 0
.L100:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_TraceMonBlended_Step
.Lfe9:
	.size	 AnimTask_TraceMonBlended,.Lfe9-AnimTask_TraceMonBlended
	.align	2, 0
	.type	 AnimTask_TraceMonBlended_Step,function
	.thumb_func
AnimTask_TraceMonBlended_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r2, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L111
	add	r4, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L103	@cond_branch
	ldrh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L104	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xa]
	b	.L109
.L112:
	.align	2, 0
.L111:
	.word	gTasks
.L104:
	ldrb	r0, [r4, #0x8]
	bl	CloneBattlerSpriteWithBlend
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L106	@cond_branch
	ldr	r6, .L113
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r3, r1, r6
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	mov	r2, #0x2
	cmp	r0, #0
	beq	.L107	@cond_branch
	mov	r2, #0x1
.L107:
	lsl	r2, r2, #0x2
	ldrb	r1, [r3, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3, #0x5]
	mov	r0, #0x14
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r4, #0xe]
	strh	r1, [r0, #0x2e]
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r5, [r0, #0x30]
	mov	r0, #0x14
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L113+0x4
	str	r1, [r0]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
.L106:
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	strh	r0, [r4, #0xa]
	b	.L109
.L114:
	.align	2, 0
.L113:
	.word	gSprites
	.word	AnimMonTrace
.L103:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L109	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L109:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 AnimTask_TraceMonBlended_Step,.Lfe10-AnimTask_TraceMonBlended_Step
	.align	2, 0
	.type	 AnimMonTrace,function
	.thumb_func
AnimMonTrace:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L116	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	b	.L117
.L116:
	ldr	r3, .L118
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySpriteWithActiveSheet
.L117:
	pop	{r4}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	gTasks
.Lfe11:
	.size	 AnimMonTrace,.Lfe11-AnimMonTrace
	.align	2, 0
	.globl	AnimTask_DrawFallingWhiteLinesOnAttacker
	.type	 AnimTask_DrawFallingWhiteLinesOnAttacker,function
	.thumb_func
AnimTask_DrawFallingWhiteLinesOnAttacker:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r7, #0x0
	ldr	r0, .L130
	strh	r7, [r0]
	ldr	r0, .L130+0x4
	strh	r7, [r0]
	ldr	r1, .L130+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L130+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L130+0x10
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L130+0x14
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0xa
	bl	GetGpuReg
	add	r4, sp, #0x10
	strh	r0, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x4
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r2, sp
	add	r2, r2, #0x11
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L121	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
.L121:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L122	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L122	@cond_branch
	ldr	r5, .L130+0x18
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L124	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L122	@cond_branch
.L124:
	ldrb	r0, [r5]
	mov	r6, #0x2
	eor	r0, r0, r6
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L122	@cond_branch
	ldr	r3, .L130+0x1c
	ldr	r1, .L130+0x20
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldrb	r1, [r4]
	mov	r0, r8
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r7, #0x1
.L122:
	ldr	r4, .L130+0x18
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L126	@cond_branch
	ldr	r1, .L130+0x24
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L130+0x28
	b	.L129
.L131:
	.align	2, 0
.L130:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	0xc08
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L126:
	ldr	r1, .L132
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L132+0x4
.L129:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r0, .L132+0x8
	ldrb	r0, [r0]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L132+0xc
	bl	AnimLoadCompressedBgTilemap
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L128	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
.L128:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L132+0x10
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L132+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	add	r1, r1, #0x1
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r2, .L132+0x18
	ldr	r0, .L132+0x1c
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r2]
	ldr	r2, .L132+0x20
	ldrh	r0, [r1, #0x22]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r2]
	ldr	r1, .L132+0x24
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	strh	r7, [r0, #0x14]
	ldr	r1, .L132+0x28
	str	r1, [r0]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleAnimAttacker
	.word	gFile_graphics_battle_anims_masks_curse_tilemap
	.word	gFile_graphics_battle_anims_masks_curse_sheet
	.word	sRgbWhite
	.word	gBattle_BG1_X
	.word	gSprites
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	AnimTask_DrawFallingWhiteLinesOnAttacker_Step
.Lfe12:
	.size	 AnimTask_DrawFallingWhiteLinesOnAttacker,.Lfe12-AnimTask_DrawFallingWhiteLinesOnAttacker
	.align	2, 0
	.type	 AnimTask_DrawFallingWhiteLinesOnAttacker_Step,function
	.thumb_func
AnimTask_DrawFallingWhiteLinesOnAttacker_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L139
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x4
	mov	r1, #0x0
	mov	r8, r1
	strh	r0, [r5, #0x1c]
	ldr	r7, .L139+0x4
	ldrh	r2, [r7]
	sub	r1, r2, #0x4
	strh	r1, [r7]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L135	@cond_branch
	mov	r0, r8
	strh	r0, [r5, #0x1c]
	add	r0, r2, #0
	add	r0, r0, #0x3c
	strh	r0, [r7]
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L135	@cond_branch
	mov	r0, #0x0
	bl	ResetBattleAnimBg
	ldr	r0, .L139+0x8
	mov	r1, r8
	strh	r1, [r0]
	ldr	r0, .L139+0xc
	strh	r1, [r0]
	ldr	r4, .L139+0x10
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L137	@cond_branch
	mov	r0, #0xa
	bl	GetGpuReg
	add	r1, sp, #0x10
	strh	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrh	r1, [r1]
	mov	r0, #0xa
	bl	SetGpuReg
.L137:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r4, .L139+0x14
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	InitBattleAnimBg
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L138	@cond_branch
	ldr	r2, .L139+0x18
	ldr	r0, .L139+0x1c
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
.L138:
	mov	r2, r8
	strh	r2, [r7]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L135:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	gTasks
	.word	gBattle_BG1_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe13:
	.size	 AnimTask_DrawFallingWhiteLinesOnAttacker_Step,.Lfe13-AnimTask_DrawFallingWhiteLinesOnAttacker_Step
	.align	2, 0
	.globl	InitStatsChangeAnimation
	.type	 InitStatsChangeAnimation,function
	.thumb_func
InitStatsChangeAnimation:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L147
	mov	r0, #0x18
	bl	AllocZeroed
	str	r0, [r4]
	mov	r2, #0x0
	ldr	r3, .L147+0x4
.L145:
	ldr	r1, [r4]
	lsl	r0, r2, #0x1
	add	r1, r1, #0x4
	add	r1, r1, r0
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L145	@cond_branch
	ldr	r0, .L147+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L147+0xc
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	sAnimStatsChangeData
	.word	gBattleAnimArgs
	.word	gTasks
	.word	StatsChangeAnimation_Step1
.Lfe14:
	.size	 InitStatsChangeAnimation,.Lfe14-InitStatsChangeAnimation
	.align	2, 0
	.type	 StatsChangeAnimation_Step1,function
	.thumb_func
StatsChangeAnimation_Step1:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L163
	ldr	r1, [r0]
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L150	@cond_branch
	ldr	r0, .L163+0x4
	b	.L161
.L164:
	.align	2, 0
.L163:
	.word	sAnimStatsChangeData
	.word	gBattleAnimAttacker
.L150:
	ldr	r0, .L165
.L161:
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r4, .L165+0x4
	ldr	r2, [r4]
	ldrb	r0, [r2]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r2, #0x1]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L153	@cond_branch
	ldr	r1, [r4]
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldrb	r0, [r1, #0x1]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L152	@cond_branch
.L153:
	ldr	r1, [r4]
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
.L152:
	ldr	r0, .L165+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L165+0xc
	strh	r1, [r0]
	ldr	r1, .L165+0x10
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L165+0x14
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L165+0x18
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L154	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L154:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L155	@cond_branch
	ldr	r4, .L165+0x4
	ldr	r1, [r4]
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L155	@cond_branch
	ldrb	r0, [r1]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L157	@cond_branch
	ldr	r0, [r4]
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L155	@cond_branch
.L157:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1
	bne	.L155	@cond_branch
	ldr	r3, .L165+0x1c
	ldr	r1, .L165+0x20
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, [r4]
	strb	r5, [r0, #0x2]
.L155:
	ldr	r4, .L165+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L159	@cond_branch
	ldr	r1, .L165+0x24
	ldr	r0, [r4]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L165+0x28
	b	.L162
.L166:
	.align	2, 0
.L165:
	.word	gBattleAnimTarget
	.word	sAnimStatsChangeData
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L159:
	ldr	r1, .L167
	ldr	r0, [r4]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L167+0x4
.L162:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	ldr	r1, [r4]
	strh	r0, [r1, #0x14]
	ldr	r0, .L167+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L167+0xc
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gTasks
	.word	StatsChangeAnimation_Step2
.Lfe15:
	.size	 StatsChangeAnimation_Step1,.Lfe15-StatsChangeAnimation_Step1
	.align	2, 0
	.type	 StatsChangeAnimation_Step2,function
	.thumb_func
StatsChangeAnimation_Step2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r6, .L193
	ldr	r4, .L193+0x4
	ldr	r2, [r4]
	ldrb	r0, [r2]
	add	r1, r0, r6
	ldrb	r1, [r1]
	ldrh	r2, [r2, #0x14]
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r2, [r4]
	mov	r1, #0xa
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L170	@cond_branch
	ldrb	r0, [r2, #0x1]
	add	r1, r0, r6
	ldrb	r1, [r1]
	ldrh	r2, [r2, #0x14]
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L170:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	ldr	r0, [r4]
	mov	r4, #0x4
	ldrsh	r0, [r0, r4]
	cmp	r0, #0
	bne	.L171	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L193+0x8
	bl	AnimLoadCompressedBgTilemap
	b	.L172
.L194:
	.align	2, 0
.L193:
	.word	gBattlerSpriteIds
	.word	sAnimStatsChangeData
	.word	gBattleStatMask1_Tilemap
.L171:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L195
	bl	AnimLoadCompressedBgTilemap
.L172:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L173	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
.L173:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L195+0x4
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L195+0x8
	ldr	r0, [r0]
	mov	r1, #0x6
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x6
	bhi	.L182	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L195+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L196:
	.align	2, 0
.L195:
	.word	gBattleStatMask2_Tilemap
	.word	gBattleStatMask_Gfx
	.word	sAnimStatsChangeData
	.word	.L183
	.align	2, 0
	.align	2, 0
.L183:
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
.L175:
	ldr	r0, .L197
	b	.L190
.L198:
	.align	2, 0
.L197:
	.word	gBattleStatMask2_Pal
.L176:
	ldr	r0, .L199
	b	.L190
.L200:
	.align	2, 0
.L199:
	.word	gBattleStatMask1_Pal
.L177:
	ldr	r0, .L201
	b	.L190
.L202:
	.align	2, 0
.L201:
	.word	gBattleStatMask3_Pal
.L178:
	ldr	r0, .L203
	b	.L190
.L204:
	.align	2, 0
.L203:
	.word	gBattleStatMask4_Pal
.L179:
	ldr	r0, .L205
	b	.L190
.L206:
	.align	2, 0
.L205:
	.word	gBattleStatMask6_Pal
.L180:
	ldr	r0, .L207
	b	.L190
.L208:
	.align	2, 0
.L207:
	.word	gBattleStatMask7_Pal
.L181:
	ldr	r0, .L209
.L190:
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L174
.L210:
	.align	2, 0
.L209:
	.word	gBattleStatMask8_Pal
.L182:
	ldr	r0, .L211
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
.L174:
	ldr	r3, .L211+0x4
	mov	r2, #0x0
	strh	r2, [r3]
	ldr	r0, .L211+0x8
	strh	r2, [r0]
	ldr	r1, .L211+0xc
	ldr	r0, [r1]
	mov	r4, #0x4
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	cmp	r0, #0x1
	bne	.L184	@cond_branch
	mov	r0, #0x40
	strh	r0, [r3]
	ldr	r2, .L211+0x10
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L211+0x14
	b	.L191
.L212:
	.align	2, 0
.L211:
	.word	gBattleStatMask5_Pal
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sAnimStatsChangeData
	.word	gTasks
	.word	0xfffd
.L184:
	ldr	r2, .L213
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x3
.L191:
	strh	r1, [r0, #0xa]
	ldr	r0, [r4]
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L186	@cond_branch
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0xa
	strh	r1, [r0, #0x10]
	mov	r1, #0x14
	b	.L192
.L214:
	.align	2, 0
.L213:
	.word	gTasks
.L186:
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0xd
	strh	r1, [r0, #0x10]
	mov	r1, #0x1e
.L192:
	strh	r1, [r0, #0x12]
	add	r1, r3, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r7, [r1, #0x8]
	ldr	r3, [r4]
	ldrh	r0, [r3, #0xa]
	strh	r0, [r1, #0xc]
	mov	r4, r8
	strh	r4, [r1, #0xe]
	ldrb	r0, [r3, #0x2]
	strh	r0, [r1, #0x14]
	ldr	r2, .L215
	ldrb	r0, [r3, #0x1]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1, #0x16]
	ldr	r0, .L215+0x4
	str	r0, [r1]
	mov	r1, #0x4
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L188	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning2
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xe8
	bl	PlaySE12WithPanning
	b	.L189
.L216:
	.align	2, 0
.L215:
	.word	gBattlerSpriteIds
	.word	StatsChangeAnimation_Step3
.L188:
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning2
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xee
	bl	PlaySE12WithPanning
.L189:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 StatsChangeAnimation_Step2,.Lfe16-StatsChangeAnimation_Step2
	.align	2, 0
	.type	 StatsChangeAnimation_Step3,function
	.thumb_func
StatsChangeAnimation_Step3:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L235
	ldr	r1, .L235+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0xa]
	ldrh	r1, [r2]
	add	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x26
	ldrsh	r2, [r5, r0]
	cmp	r2, #0x1
	beq	.L222	@cond_branch
	cmp	r2, #0x1
	bgt	.L233	@cond_branch
	cmp	r2, #0
	beq	.L219	@cond_branch
	b	.L218
.L236:
	.align	2, 0
.L235:
	.word	gBattle_BG1_Y
	.word	gTasks
.L233:
	cmp	r2, #0x2
	beq	.L224	@cond_branch
	cmp	r2, #0x3
	beq	.L227	@cond_branch
	b	.L218
.L219:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB2183
	b	.L218	@long jump
.LCB2183:
	strh	r2, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	beq	.LCB2205
	b	.L218	@long jump
.LCB2205:
	b	.L234
.L222:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r5, r2]
	cmp	r0, r1
	beq	.LCB2218
	b	.L218	@long jump
.LCB2218:
	b	.L234
.L224:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L218	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x20
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L218	@cond_branch
	mov	r0, #0x0
	bl	ResetBattleAnimBg
.L234:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	b	.L218
.L227:
	ldr	r0, .L237
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L237+0x4
	strh	r1, [r0]
	ldr	r4, .L237+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L228	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L228:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L237+0xc
	add	r0, r0, r4
	bl	DestroySprite
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L229	@cond_branch
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
.L229:
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L230	@cond_branch
	mov	r2, #0x16
	ldrsh	r0, [r5, r2]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
.L230:
	ldr	r4, .L237+0x10
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L218:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L238:
	.align	2, 0
.L237:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
	.word	sAnimStatsChangeData
.Lfe17:
	.size	 StatsChangeAnimation_Step3,.Lfe17-StatsChangeAnimation_Step3
	.align	2, 0
	.globl	AnimTask_Flash
	.type	 AnimTask_Flash,function
	.thumb_func
AnimTask_Flash:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	GetBattleMonSpritePalettesMask
	add	r6, r0, #0
	mov	r1, #0x0
	bl	SetPalettesToColor
	ldr	r0, .L240
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	lsr	r0, r6, #0x10
	mov	r5, #0x0
	strh	r0, [r4, #0x24]
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r6, r0, #0
	ldr	r1, .L240+0x4
	and	r6, r6, r1
	add	r0, r6, #0
	bl	SetPalettesToColor
	strh	r6, [r4, #0x26]
	strh	r5, [r4, #0x8]
	strh	r5, [r4, #0xa]
	ldr	r0, .L240+0x8
	str	r0, [r4]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	gTasks
	.word	0xffff
	.word	AnimTask_Flash_Step
.Lfe18:
	.size	 AnimTask_Flash,.Lfe18-AnimTask_Flash
	.align	2, 0
	.type	 AnimTask_Flash_Step,function
	.thumb_func
AnimTask_Flash_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L261
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L246	@cond_branch
	cmp	r1, #0x1
	bgt	.L259	@cond_branch
	cmp	r1, #0
	beq	.L244	@cond_branch
	b	.L243
.L262:
	.align	2, 0
.L261:
	.word	gTasks
.L259:
	cmp	r1, #0x2
	beq	.L256	@cond_branch
	b	.L243
.L244:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L243	@cond_branch
	strh	r1, [r4, #0xa]
	mov	r0, #0x10
	strh	r0, [r4, #0xc]
	b	.L260
.L246:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L243	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r5, #0x0
	mov	r6, #0x1
.L251:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	asr	r0, r0, r5
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L252	@cond_branch
	lsl	r0, r5, #0x14
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0xc]
	mov	r1, #0x10
	ldr	r3, .L263
	bl	BlendPalette
.L252:
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	asr	r0, r0, r5
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L250	@cond_branch
	lsl	r0, r5, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0xc]
	mov	r1, #0x10
	mov	r3, #0x0
	bl	BlendPalette
.L250:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xf
	bls	.L251	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L243	@cond_branch
.L260:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L243
.L264:
	.align	2, 0
.L263:
	.word	0xffff
.L256:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L243:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimTask_Flash_Step,.Lfe19-AnimTask_Flash_Step
	.align	2, 0
	.type	 SetPalettesToColor,function
	.thumb_func
SetPalettesToColor:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	mov	r2, #0x0
.L269:
	mov	r0, #0x1
	and	r0, r0, r3
	lsr	r4, r3, #0x1
	add	r5, r2, #0x1
	cmp	r0, #0
	beq	.L268	@cond_branch
	lsl	r0, r2, #0x14
	lsr	r2, r0, #0x10
	add	r0, r2, #0
	add	r0, r0, #0x10
	cmp	r2, r0
	bge	.L268	@cond_branch
	ldr	r1, .L277
	add	r3, r0, #0
.L274:
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	strh	r6, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	blt	.L274	@cond_branch
.L268:
	add	r3, r4, #0
	lsl	r0, r5, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x1f
	bls	.L269	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L278:
	.align	2, 0
.L277:
	.word	gPlttBufferFaded
.Lfe20:
	.size	 SetPalettesToColor,.Lfe20-SetPalettesToColor
	.align	2, 0
	.globl	AnimTask_BlendNonAttackerPalettes
	.type	 AnimTask_BlendNonAttackerPalettes,function
	.thumb_func
AnimTask_BlendNonAttackerPalettes:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	mov	r2, #0x0
	ldr	r0, .L291
	ldrb	r3, [r0]
	mov	r5, #0x1
.L283:
	cmp	r3, r2
	beq	.L282	@cond_branch
	add	r1, r2, #0
	add	r1, r1, #0x10
	add	r0, r5, #0
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L282:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L283	@cond_branch
	mov	r2, #0x5
	ldr	r0, .L291+0x4
	add	r1, r0, #0
	add	r1, r1, #0x8
.L289:
	ldrh	r0, [r1]
	strh	r0, [r1, #0x2]
	sub	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L289	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe21:
	.size	 AnimTask_BlendNonAttackerPalettes,.Lfe21-AnimTask_BlendNonAttackerPalettes
	.align	2, 0
	.globl	AnimTask_StartSlidingBg
	.type	 AnimTask_StartSlidingBg,function
	.thumb_func
AnimTask_StartSlidingBg:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	bl	ToggleBg3Mode
	ldr	r0, .L295
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L295+0x4
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L294	@cond_branch
	ldr	r0, .L295+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L294	@cond_branch
	ldrh	r0, [r4]
	neg	r0, r0
	strh	r0, [r4]
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
.L294:
	ldr	r0, .L295+0xc
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r2, .L295+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0xa]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0xc]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L296:
	.align	2, 0
.L295:
	.word	AnimTask_UpdateSlidingBg
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gTasks
.Lfe22:
	.size	 AnimTask_StartSlidingBg,.Lfe22-AnimTask_StartSlidingBg
	.align	2, 0
	.type	 AnimTask_UpdateSlidingBg,function
	.thumb_func
AnimTask_UpdateSlidingBg:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L299
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r3, [r1, #0xa]
	ldrh	r0, [r1, #0x1c]
	add	r3, r3, r0
	mov	r4, #0x0
	mov	ip, r4
	strh	r3, [r1, #0x1c]
	ldrh	r2, [r1, #0xc]
	ldrh	r7, [r1, #0x1e]
	add	r2, r2, r7
	strh	r2, [r1, #0x1e]
	ldr	r6, .L299+0x4
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r6]
	add	r0, r0, r4
	strh	r0, [r6]
	ldr	r4, .L299+0x8
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r7, [r4]
	add	r0, r0, r7
	strh	r0, [r4]
	mov	r0, #0xff
	and	r3, r3, r0
	strh	r3, [r1, #0x1c]
	and	r2, r2, r0
	strh	r2, [r1, #0x1e]
	ldr	r0, .L299+0xc
	mov	r3, #0xe
	ldrsh	r2, [r0, r3]
	mov	r7, #0xe
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bne	.L298	@cond_branch
	mov	r0, ip
	strh	r0, [r6]
	strh	r0, [r4]
	mov	r0, #0x1
	bl	ToggleBg3Mode
	add	r0, r5, #0
	bl	DestroyTask
.L298:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	gTasks
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattleAnimArgs
.Lfe23:
	.size	 AnimTask_UpdateSlidingBg,.Lfe23-AnimTask_UpdateSlidingBg
	.align	2, 0
	.globl	AnimTask_GetAttackerSide
	.type	 AnimTask_GetAttackerSide,function
	.thumb_func
AnimTask_GetAttackerSide:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L302
	ldrb	r0, [r0]
	bl	GetBattlerSide
	ldr	r1, .L302+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe24:
	.size	 AnimTask_GetAttackerSide,.Lfe24-AnimTask_GetAttackerSide
	.align	2, 0
	.globl	AnimTask_GetTargetSide
	.type	 AnimTask_GetTargetSide,function
	.thumb_func
AnimTask_GetTargetSide:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L305
	ldrb	r0, [r0]
	bl	GetBattlerSide
	ldr	r1, .L305+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.Lfe25:
	.size	 AnimTask_GetTargetSide,.Lfe25-AnimTask_GetTargetSide
	.align	2, 0
	.globl	AnimTask_GetTargetIsAttackerPartner
	.type	 AnimTask_GetTargetIsAttackerPartner,function
	.thumb_func
AnimTask_GetTargetIsAttackerPartner:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r5, .L309
	mov	r4, #0x0
	ldr	r0, .L309+0x4
	ldrb	r2, [r0]
	mov	r0, #0x2
	ldr	r1, .L309+0x8
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L308	@cond_branch
	mov	r4, #0x1
.L308:
	strh	r4, [r5, #0xe]
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe26:
	.size	 AnimTask_GetTargetIsAttackerPartner,.Lfe26-AnimTask_GetTargetIsAttackerPartner
	.align	2, 0
	.globl	AnimTask_SetAllNonAttackersInvisiblity
	.type	 AnimTask_SetAllNonAttackersInvisiblity,function
	.thumb_func
AnimTask_SetAllNonAttackersInvisiblity:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r6, .L318
.L315:
	ldr	r0, .L318+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L314	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L314	@cond_branch
	ldr	r0, .L318+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldr	r1, .L318+0xc
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r3, [r1]
	and	r3, r3, r0
	lsl	r3, r3, #0x2
	ldrb	r0, [r2]
	mov	r7, #0x5
	neg	r7, r7
	add	r1, r7, #0
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
.L314:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L315	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L319:
	.align	2, 0
.L318:
	.word	gSprites
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	gBattleAnimArgs
.Lfe27:
	.size	 AnimTask_SetAllNonAttackersInvisiblity,.Lfe27-AnimTask_SetAllNonAttackersInvisiblity
	.align	2, 0
	.globl	StartMonScrollingBgMask
	.type	 StartMonScrollingBgMask,function
	.thumb_func
StartMonScrollingBgMask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	ldr	r1, [sp, #0x44]
	ldr	r4, [sp, #0x48]
	ldr	r5, [sp, #0x4c]
	ldr	r6, [sp, #0x50]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0x14]
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x18]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x1c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	sl, r6
	mov	r0, #0x0
	str	r0, [sp, #0x20]
	mov	r0, #0x2
	add	r6, r7, #0
	eor	r6, r6, r0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L322	@cond_branch
	mov	r1, r8
	cmp	r1, #0
	beq	.L321	@cond_branch
	add	r0, r6, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L321	@cond_branch
.L322:
	mov	r2, #0x0
	mov	r8, r2
.L321:
	ldr	r0, .L329
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L329+0x4
	strh	r1, [r0]
	ldr	r1, .L329+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L329+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L329+0x10
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0xa
	bl	GetGpuReg
	add	r4, sp, #0x10
	strh	r0, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r2, sp
	add	r2, r2, #0x11
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L323	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4]
.L323:
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L324	@cond_branch
	ldr	r1, .L329+0x14
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L329+0x18
	b	.L328
.L330:
	.align	2, 0
.L329:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L324:
	ldr	r1, .L331
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L331+0x4
.L328:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L331+0x8
	add	r0, r7, r5
	ldrb	r1, [r0]
	add	r0, r7, #0
	add	r2, r4, #0
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, r8
	cmp	r0, #0
	beq	.L326	@cond_branch
	add	r0, r6, r5
	ldrb	r1, [r0]
	add	r0, r6, #0
	add	r2, r4, #0
	bl	CreateInvisibleSpriteCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x20]
.L326:
	mov	r0, sp
	bl	GetBattleAnimBg1Data
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, [sp, #0x58]
	bl	AnimLoadCompressedBgTilemap
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L327	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	RelocateBattleBgPal
.L327:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	mov	r1, sp
	ldrh	r2, [r1, #0xa]
	ldr	r1, [sp, #0x54]
	bl	AnimLoadCompressedBgGfx
	mov	r0, sp
	ldrb	r1, [r0, #0x8]
	lsl	r1, r1, #0x4
	ldr	r0, [sp, #0x5c]
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, .L331+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L331+0x10
	strh	r1, [r0]
	ldr	r1, .L331+0x14
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, sp
	ldrh	r1, [r1, #0x14]
	strh	r1, [r0, #0xa]
	mov	r2, sp
	ldrh	r2, [r2, #0x18]
	strh	r2, [r0, #0x10]
	mov	r1, sl
	strh	r1, [r0, #0x12]
	mov	r2, sp
	ldrh	r2, [r2, #0x1c]
	strh	r2, [r0, #0x14]
	strh	r7, [r0, #0x8]
	mov	r1, r8
	strh	r1, [r0, #0xc]
	mov	r2, sp
	ldrh	r2, [r2, #0x20]
	strh	r2, [r0, #0xe]
	ldr	r1, .L331+0x18
	str	r1, [r0]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L332:
	.align	2, 0
.L331:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerSpriteIds
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	UpdateMonScrollingBgMask
.Lfe28:
	.size	 StartMonScrollingBgMask,.Lfe28-StartMonScrollingBgMask
	.align	2, 0
	.type	 UpdateMonScrollingBgMask,function
	.thumb_func
UpdateMonScrollingBgMask:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L352
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r0, #0xa
	ldrsh	r2, [r3, r0]
	add	r5, r1, #0
	cmp	r2, #0
	bge	.L334	@cond_branch
	neg	r2, r2
.L334:
	ldrh	r0, [r3, #0x22]
	add	r4, r0, r2
	strh	r4, [r3, #0x22]
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bge	.L335	@cond_branch
	ldr	r2, .L352+0x4
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2]
	sub	r0, r0, r1
	strh	r0, [r2]
	b	.L336
.L353:
	.align	2, 0
.L352:
	.word	gTasks
	.word	gBattle_BG1_Y
.L335:
	ldr	r1, .L354
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r1]
	add	r0, r0, r2
	strh	r0, [r1]
.L336:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r5
	ldrh	r1, [r5, #0x22]
	mov	r0, #0xff
	and	r0, r0, r1
	mov	r2, #0x0
	strh	r0, [r5, #0x22]
	mov	r3, #0x26
	ldrsh	r0, [r5, r3]
	cmp	r0, #0x1
	beq	.L341	@cond_branch
	cmp	r0, #0x1
	bgt	.L350	@cond_branch
	cmp	r0, #0
	beq	.L338	@cond_branch
	b	.L337
.L355:
	.align	2, 0
.L354:
	.word	gBattle_BG1_Y
.L350:
	cmp	r0, #0x2
	beq	.L343	@cond_branch
	b	.L337
.L338:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x14
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	bge	.LCB3436
	b	.L337	@long jump
.LCB3436:
	strh	r2, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x20
	ldrsh	r1, [r5, r0]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	bne	.L337	@cond_branch
	b	.L351
.L341:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x12
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	bne	.L337	@cond_branch
.L351:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	b	.L337
.L343:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x14
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	blt	.L337	@cond_branch
	strh	r2, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x20
	ldrsh	r4, [r5, r0]
	cmp	r4, #0
	bne	.L337	@cond_branch
	mov	r0, #0x0
	bl	ResetBattleAnimBg
	ldr	r0, .L356
	strh	r4, [r0]
	ldr	r0, .L356+0x4
	strh	r4, [r0]
	ldr	r4, .L356+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L346	@cond_branch
	mov	r0, #0xa
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	mov	r2, sp
	ldrb	r1, [r2]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0xa
	bl	SetGpuReg
.L346:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r3, #0x8
	ldrsh	r1, [r5, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L356+0xc
	add	r0, r0, r4
	bl	DestroySprite
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L347	@cond_branch
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
.L347:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L337:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L357:
	.align	2, 0
.L356:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
.Lfe29:
	.size	 UpdateMonScrollingBgMask,.Lfe29-UpdateMonScrollingBgMask
	.align	2, 0
	.globl	AnimTask_GetBattleTerrain
	.type	 AnimTask_GetBattleTerrain,function
	.thumb_func
AnimTask_GetBattleTerrain:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L359
	ldr	r1, .L359+0x4
	ldrb	r1, [r1]
	strh	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	gBattleAnimArgs
	.word	gBattleTerrain
.Lfe30:
	.size	 AnimTask_GetBattleTerrain,.Lfe30-AnimTask_GetBattleTerrain
	.align	2, 0
	.globl	AnimTask_AllocBackupPalBuffer
	.type	 AnimTask_AllocBackupPalBuffer,function
	.thumb_func
AnimTask_AllocBackupPalBuffer:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	ldr	r1, .L362
	ldr	r1, [r1]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	str	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	gMonSpritesGfxPtr
.Lfe31:
	.size	 AnimTask_AllocBackupPalBuffer,.Lfe31-AnimTask_AllocBackupPalBuffer
	.align	2, 0
	.globl	AnimTask_FreeBackupPalBuffer
	.type	 AnimTask_FreeBackupPalBuffer,function
	.thumb_func
AnimTask_FreeBackupPalBuffer:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L365
	ldr	r0, [r6]
	mov	r5, #0xbe
	lsl	r5, r5, #0x1
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r6]
	add	r0, r0, r5
	mov	r1, #0x0
	str	r1, [r0]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L366:
	.align	2, 0
.L365:
	.word	gMonSpritesGfxPtr
.Lfe32:
	.size	 AnimTask_FreeBackupPalBuffer,.Lfe32-AnimTask_FreeBackupPalBuffer
	.align	2, 0
	.globl	AnimTask_CopyPalUnfadedToBackup
	.type	 AnimTask_CopyPalUnfadedToBackup,function
	.thumb_func
AnimTask_CopyPalUnfadedToBackup:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L379
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L368	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r1, r0, #0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L374	@cond_branch
	mov	r2, #0x1
.L372:
	lsr	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L372	@cond_branch
	b	.L374
.L380:
	.align	2, 0
.L379:
	.word	gBattleAnimArgs
.L368:
	cmp	r0, #0x1
	bne	.L375	@cond_branch
	ldr	r0, .L381
	b	.L378
.L382:
	.align	2, 0
.L381:
	.word	gBattleAnimAttacker
.L375:
	cmp	r0, #0x2
	bne	.L374	@cond_branch
	ldr	r0, .L383
.L378:
	ldrb	r0, [r0]
	add	r4, r0, #0
	add	r4, r4, #0x10
.L374:
	ldr	r0, .L383+0x4
	ldr	r1, [r0]
	ldr	r0, .L383+0x8
	mov	r2, #0x2
	ldrsh	r0, [r0, r2]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r1, [r1]
	lsl	r0, r0, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x5
	ldr	r2, .L383+0xc
	add	r1, r1, r2
	mov	r2, #0x20
	bl	memcpy
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L384:
	.align	2, 0
.L383:
	.word	gBattleAnimTarget
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimArgs
	.word	gPlttBufferUnfaded
.Lfe33:
	.size	 AnimTask_CopyPalUnfadedToBackup,.Lfe33-AnimTask_CopyPalUnfadedToBackup
	.align	2, 0
	.globl	AnimTask_CopyPalUnfadedFromBackup
	.type	 AnimTask_CopyPalUnfadedFromBackup,function
	.thumb_func
AnimTask_CopyPalUnfadedFromBackup:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L397
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L386	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r1, r0, #0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L392	@cond_branch
	mov	r2, #0x1
.L390:
	lsr	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L390	@cond_branch
	b	.L392
.L398:
	.align	2, 0
.L397:
	.word	gBattleAnimArgs
.L386:
	cmp	r0, #0x1
	bne	.L393	@cond_branch
	ldr	r0, .L399
	b	.L396
.L400:
	.align	2, 0
.L399:
	.word	gBattleAnimAttacker
.L393:
	cmp	r0, #0x2
	bne	.L392	@cond_branch
	ldr	r0, .L401
.L396:
	ldrb	r0, [r0]
	add	r4, r0, #0
	add	r4, r4, #0x10
.L392:
	lsl	r0, r4, #0x5
	ldr	r1, .L401+0x4
	add	r0, r0, r1
	ldr	r1, .L401+0x8
	ldr	r2, [r1]
	ldr	r1, .L401+0xc
	mov	r3, #0x2
	ldrsh	r1, [r1, r3]
	mov	r3, #0xbe
	lsl	r3, r3, #0x1
	add	r2, r2, r3
	ldr	r2, [r2]
	lsl	r1, r1, #0x5
	add	r1, r1, r2
	mov	r2, #0x20
	bl	memcpy
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L402:
	.align	2, 0
.L401:
	.word	gBattleAnimTarget
	.word	gPlttBufferUnfaded
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimArgs
.Lfe34:
	.size	 AnimTask_CopyPalUnfadedFromBackup,.Lfe34-AnimTask_CopyPalUnfadedFromBackup
	.align	2, 0
	.globl	AnimTask_CopyPalFadedToUnfaded
	.type	 AnimTask_CopyPalFadedToUnfaded,function
	.thumb_func
AnimTask_CopyPalFadedToUnfaded:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L415
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L404	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	GetBattlePalettesMask
	add	r1, r0, #0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L410	@cond_branch
	mov	r2, #0x1
.L408:
	lsr	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L408	@cond_branch
	b	.L410
.L416:
	.align	2, 0
.L415:
	.word	gBattleAnimArgs
.L404:
	cmp	r0, #0x1
	bne	.L411	@cond_branch
	ldr	r0, .L417
	b	.L414
.L418:
	.align	2, 0
.L417:
	.word	gBattleAnimAttacker
.L411:
	cmp	r0, #0x2
	bne	.L410	@cond_branch
	ldr	r0, .L419
.L414:
	ldrb	r0, [r0]
	add	r4, r0, #0
	add	r4, r4, #0x10
.L410:
	lsl	r1, r4, #0x5
	ldr	r0, .L419+0x4
	add	r0, r1, r0
	ldr	r2, .L419+0x8
	add	r1, r1, r2
	mov	r2, #0x20
	bl	memcpy
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L420:
	.align	2, 0
.L419:
	.word	gBattleAnimTarget
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe35:
	.size	 AnimTask_CopyPalFadedToUnfaded,.Lfe35-AnimTask_CopyPalFadedToUnfaded
	.align	2, 0
	.globl	AnimTask_IsContest
	.type	 AnimTask_IsContest,function
	.thumb_func
AnimTask_IsContest:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L422	@cond_branch
	ldr	r1, .L424
	mov	r0, #0x1
	strh	r0, [r1, #0xe]
	b	.L423
.L425:
	.align	2, 0
.L424:
	.word	gBattleAnimArgs
.L422:
	ldr	r0, .L426
	strh	r1, [r0, #0xe]
.L423:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L427:
	.align	2, 0
.L426:
	.word	gBattleAnimArgs
.Lfe36:
	.size	 AnimTask_IsContest,.Lfe36-AnimTask_IsContest
	.align	2, 0
	.globl	AnimTask_SetAnimAttackerAndTargetForEffectTgt
	.type	 AnimTask_SetAnimAttackerAndTargetForEffectTgt,function
	.thumb_func
AnimTask_SetAnimAttackerAndTargetForEffectTgt:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L429
	ldr	r1, .L429+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	ldr	r2, .L429+0x8
	ldr	r1, .L429+0xc
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L430:
	.align	2, 0
.L429:
	.word	gBattleAnimAttacker
	.word	gBattlerTarget
	.word	gBattleAnimTarget
	.word	gEffectBattler
.Lfe37:
	.size	 AnimTask_SetAnimAttackerAndTargetForEffectTgt,.Lfe37-AnimTask_SetAnimAttackerAndTargetForEffectTgt
	.align	2, 0
	.globl	AnimTask_IsTargetSameSide
	.type	 AnimTask_IsTargetSameSide,function
	.thumb_func
AnimTask_IsTargetSameSide:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L435
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L435+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L432	@cond_branch
	ldr	r1, .L435+0x8
	mov	r0, #0x1
	b	.L434
.L436:
	.align	2, 0
.L435:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L432:
	ldr	r1, .L437
	mov	r0, #0x0
.L434:
	strh	r0, [r1, #0xe]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L438:
	.align	2, 0
.L437:
	.word	gBattleAnimArgs
.Lfe38:
	.size	 AnimTask_IsTargetSameSide,.Lfe38-AnimTask_IsTargetSameSide
	.align	2, 0
	.globl	AnimTask_SetAnimTargetToBattlerTarget
	.type	 AnimTask_SetAnimTargetToBattlerTarget,function
	.thumb_func
AnimTask_SetAnimTargetToBattlerTarget:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L440
	ldr	r1, .L440+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L441:
	.align	2, 0
.L440:
	.word	gBattleAnimTarget
	.word	gBattlerTarget
.Lfe39:
	.size	 AnimTask_SetAnimTargetToBattlerTarget,.Lfe39-AnimTask_SetAnimTargetToBattlerTarget
	.align	2, 0
	.globl	AnimTask_SetAnimAttackerAndTargetForEffectAtk
	.type	 AnimTask_SetAnimAttackerAndTargetForEffectAtk,function
	.thumb_func
AnimTask_SetAnimAttackerAndTargetForEffectAtk:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L443
	ldr	r1, .L443+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	ldr	r2, .L443+0x8
	ldr	r1, .L443+0xc
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L444:
	.align	2, 0
.L443:
	.word	gBattleAnimAttacker
	.word	gBattlerAttacker
	.word	gBattleAnimTarget
	.word	gEffectBattler
.Lfe40:
	.size	 AnimTask_SetAnimAttackerAndTargetForEffectAtk,.Lfe40-AnimTask_SetAnimAttackerAndTargetForEffectAtk
	.align	2, 0
	.globl	AnimTask_SetAttackerInvisibleWaitForSignal
	.type	 AnimTask_SetAttackerInvisibleWaitForSignal,function
	.thumb_func
AnimTask_SetAttackerInvisibleWaitForSignal:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L446	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L447
.L446:
	ldr	r0, .L448
	lsl	r3, r4, #0x2
	add	r3, r3, r4
	lsl	r3, r3, #0x3
	add	r3, r3, r0
	ldr	r0, .L448+0x4
	ldr	r4, [r0]
	ldr	r2, .L448+0x8
	ldrb	r0, [r2]
	ldr	r1, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	strh	r0, [r3, #0x8]
	ldrb	r1, [r2]
	ldr	r0, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L448+0xc
	str	r0, [r3]
	ldr	r1, .L448+0x10
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L447:
	pop	{r4}
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimAttacker
	.word	AnimTask_WaitAndRestoreVisibility
	.word	gAnimVisualTaskCount
.Lfe41:
	.size	 AnimTask_SetAttackerInvisibleWaitForSignal,.Lfe41-AnimTask_SetAttackerInvisibleWaitForSignal
	.align	2, 0
	.type	 AnimTask_WaitAndRestoreVisibility,function
	.thumb_func
AnimTask_WaitAndRestoreVisibility:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L452
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	bne	.L451	@cond_branch
	ldr	r0, .L452+0x4
	ldr	r1, [r0]
	ldr	r0, .L452+0x8
	ldrb	r3, [r0]
	ldr	r0, [r1]
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r1, .L452+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r0, r4, #0
	bl	DestroyTask
.L451:
	pop	{r4}
	pop	{r0}
	bx	r0
.L453:
	.align	2, 0
.L452:
	.word	gBattleAnimArgs
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimAttacker
	.word	gTasks
.Lfe42:
	.size	 AnimTask_WaitAndRestoreVisibility,.Lfe42-AnimTask_WaitAndRestoreVisibility
.text
	.align	2, 0 @ Don't pad with nop

