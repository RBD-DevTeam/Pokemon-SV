@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sLinkOpponentBufferCommands,object
	.size	 sLinkOpponentBufferCommands,228
sLinkOpponentBufferCommands:
	.word	LinkOpponentHandleGetMonData
	.word	LinkOpponentHandleGetRawMonData
	.word	LinkOpponentHandleSetMonData
	.word	LinkOpponentHandleSetRawMonData
	.word	LinkOpponentHandleLoadMonSprite
	.word	LinkOpponentHandleSwitchInAnim
	.word	LinkOpponentHandleReturnMonToBall
	.word	LinkOpponentHandleDrawTrainerPic
	.word	LinkOpponentHandleTrainerSlide
	.word	LinkOpponentHandleTrainerSlideBack
	.word	LinkOpponentHandleFaintAnimation
	.word	LinkOpponentHandlePaletteFade
	.word	LinkOpponentHandleSuccessBallThrowAnim
	.word	LinkOpponentHandleBallThrowAnim
	.word	LinkOpponentHandlePause
	.word	LinkOpponentHandleMoveAnimation
	.word	LinkOpponentHandlePrintString
	.word	LinkOpponentHandlePrintSelectionString
	.word	LinkOpponentHandleChooseAction
	.word	LinkOpponentHandleUnknownYesNoBox
	.word	LinkOpponentHandleChooseMove
	.word	LinkOpponentHandleChooseItem
	.word	LinkOpponentHandleChoosePokemon
	.word	LinkOpponentHandleCmd23
	.word	LinkOpponentHandleHealthBarUpdate
	.word	LinkOpponentHandleExpUpdate
	.word	LinkOpponentHandleStatusIconUpdate
	.word	LinkOpponentHandleStatusAnimation
	.word	LinkOpponentHandleStatusXor
	.word	LinkOpponentHandleDataTransfer
	.word	LinkOpponentHandleDMA3Transfer
	.word	LinkOpponentHandlePlayBGM
	.word	LinkOpponentHandleCmd32
	.word	LinkOpponentHandleTwoReturnValues
	.word	LinkOpponentHandleChosenMonReturnValue
	.word	LinkOpponentHandleOneReturnValue
	.word	LinkOpponentHandleOneReturnValue_Duplicate
	.word	LinkOpponentHandleClearUnkVar
	.word	LinkOpponentHandleSetUnkVar
	.word	LinkOpponentHandleClearUnkFlag
	.word	LinkOpponentHandleToggleUnkFlag
	.word	LinkOpponentHandleHitAnimation
	.word	LinkOpponentHandleCantSwitch
	.word	LinkOpponentHandlePlaySE
	.word	LinkOpponentHandlePlayFanfare
	.word	LinkOpponentHandleFaintingCry
	.word	LinkOpponentHandleIntroSlide
	.word	LinkOpponentHandleIntroTrainerBallThrow
	.word	LinkOpponentHandleDrawPartyStatusSummary
	.word	LinkOpponentHandleHidePartyStatusSummary
	.word	LinkOpponentHandleEndBounceEffect
	.word	LinkOpponentHandleSpriteInvisibility
	.word	LinkOpponentHandleBattleAnimation
	.word	LinkOpponentHandleLinkStandbyMsg
	.word	LinkOpponentHandleResetActionMoveSelection
	.word	LinkOpponentHandleEndLinkBattle
	.word	LinkOpponentCmdEnd
.text
	.align	2, 0
	.type	 LinkOpponentDummy,function
	.thumb_func
LinkOpponentDummy:
	bx	lr
.Lfe1:
	.size	 LinkOpponentDummy,.Lfe1-LinkOpponentDummy
	.align	2, 0
	.globl	SetControllerToLinkOpponent
	.type	 SetControllerToLinkOpponent,function
	.thumb_func
SetControllerToLinkOpponent:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	LinkOpponentBufferRunCommand
.Lfe2:
	.size	 SetControllerToLinkOpponent,.Lfe2-SetControllerToLinkOpponent
	.align	2, 0
	.type	 LinkOpponentBufferRunCommand,function
	.thumb_func
LinkOpponentBufferRunCommand:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	lsl	r1, r3, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x38
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	sLinkOpponentBufferCommands
.L8:
	bl	LinkOpponentBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 LinkOpponentBufferRunCommand,.Lfe3-LinkOpponentBufferRunCommand
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L14
	ldr	r1, .L14+0x4
	ldr	r0, .L14+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L14+0xc
	cmp	r1, r0
	bne	.L13	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L13:
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe4-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 FreeTrainerSpriteAfterSlide,function
	.thumb_func
FreeTrainerSpriteAfterSlide:
	push	{r4, r5, r6, lr}
	ldr	r4, .L18
	ldr	r6, .L18+0x4
	ldr	r5, .L18+0x8
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L18+0xc
	cmp	r1, r0
	bne	.L17	@cond_branch
	add	r0, r2, r4
	ldrh	r0, [r0, #0x6]
	bl	FreeTrainerFrontPicPaletteAndTile
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x38]
	ldr	r2, .L18+0x10
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L18+0x14
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	bl	LinkOpponentBufferExecCompleted
.L17:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	0x3ff
	.word	-0x400
.Lfe5:
	.size	 FreeTrainerSpriteAfterSlide,.Lfe5-FreeTrainerSpriteAfterSlide
	.align	2, 0
	.type	 Intro_DelayAndEnd,function
	.thumb_func
Intro_DelayAndEnd:
	push	{r4, lr}
	ldr	r4, .L22
	ldr	r1, [r4]
	ldr	r3, .L22+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L21	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	LinkOpponentBufferExecCompleted
.L21:
	pop	{r4}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe6:
	.size	 Intro_DelayAndEnd,.Lfe6-Intro_DelayAndEnd
	.align	2, 0
	.type	 Intro_WaitForShinyAnimAndHealthbox,function
	.thumb_func
Intro_WaitForShinyAnimAndHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L26	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	ldr	r0, .L39
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
.L26:
	ldr	r2, .L39+0x4
	ldr	r1, .L39+0x8
	ldr	r0, .L39+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L39+0x10
	cmp	r1, r0
	bne	.L28	@cond_branch
	b	.L38
.L40:
	.align	2, 0
.L39:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.L25:
	ldr	r2, .L41
	ldr	r5, .L41+0x4
	ldr	r0, .L41+0x8
	ldrb	r3, [r0]
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L41+0xc
	cmp	r4, r0
	bne	.L28	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L28	@cond_branch
.L38:
	mov	r6, #0x1
.L28:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L30	@cond_branch
	mov	r6, #0x0
.L30:
	cmp	r6, #0
	bne	.LCB342
	b	.L24	@long jump
.LCB342:
	ldr	r0, .L41+0x8
	mov	r8, r0
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x1
	bne	.L32	@cond_branch
	ldr	r7, .L41+0x10
	ldr	r0, [r7]
	mov	r1, r8
	ldrb	r2, [r1]
	ldr	r5, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r5
	ldrb	r1, [r4, #0x1]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	ldr	r0, [r7]
	mov	r1, r8
	ldrb	r2, [r1]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r2, [r7]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	ldr	r2, [r7]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r1, r6, #0
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L41+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
.L32:
	ldr	r0, .L41+0x18
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L35	@cond_branch
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L37	@cond_branch
	ldr	r0, .L41+0x1c
	bl	m4aMPlayContinue
	b	.L37
.L42:
	.align	2, 0
.L41:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	gBattleTypeFlags
	.word	gMPlayInfo_BGM
.L35:
	ldr	r0, .L43
	ldr	r1, .L43+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L37:
	ldr	r0, .L43+0x8
	ldr	r0, [r0]
	ldr	r3, .L43+0xc
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L43+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L43+0x14
	str	r1, [r0]
.L24:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	Intro_DelayAndEnd
.Lfe7:
	.size	 Intro_WaitForShinyAnimAndHealthbox,.Lfe7-Intro_WaitForShinyAnimAndHealthbox
	.align	2, 0
	.type	 Intro_TryShinyAnimShowHealthbox,function
	.thumb_func
Intro_TryShinyAnimShowHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L52
	mov	r8, r0
	ldr	r0, [r0]
	ldr	r7, .L52+0x4
	ldrb	r2, [r7]
	ldr	r3, [r0, #0x4]
	lsl	r5, r2, #0x1
	add	r0, r5, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r4, [r0]
	mov	r6, #0x8
	add	r0, r6, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.LCB548
	b	.L45	@long jump
.LCB548:
	mov	r1, #0x2
	mov	r9, r1
	add	r1, r2, #0
	mov	r0, r9
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r6, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0
	beq	.LCB567
	b	.L45	@long jump
.LCB567:
	mov	r6, #0x80
	add	r0, r6, #0
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L47	@cond_branch
	ldr	r0, .L52+0x8
	add	r0, r5, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L52+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L47:
	mov	r2, r8
	ldr	r1, [r2]
	ldrb	r0, [r7]
	mov	r2, r9
	eor	r2, r2, r0
	ldr	r1, [r1, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L48	@cond_branch
	ldr	r0, .L52+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L52+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L48:
	ldr	r0, .L52+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L49	@cond_branch
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L49	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x9]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB650
	b	.L45	@long jump
.LCB650:
	mov	r2, r8
	ldr	r0, [r2]
	ldrb	r1, [r7]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, sl
	strb	r1, [r0, #0x9]
.L49:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	ldr	r0, .L52+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r1, .L52+0x14
	ldr	r5, .L52+0x4
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L52+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r2, .L52+0x1c
	mov	r8, r2
	ldrb	r0, [r5]
	add	r1, r4, #0
	eor	r1, r1, r0
	add	r0, r1, r2
	ldrb	r0, [r0]
	ldr	r2, .L52+0x8
	mov	sl, r2
	lsl	r1, r1, #0x1
	add	r1, r1, sl
	ldrh	r1, [r1]
	mov	r2, #0x64
	mov	r9, r2
	mov	r2, r9
	mul	r2, r2, r1
	add	r1, r2, #0
	ldr	r6, .L52+0xc
	add	r1, r1, r6
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	eor	r0, r0, r4
	bl	StartHealthboxSlideIn
	ldrb	r0, [r5]
	eor	r0, r0, r4
	add	r0, r0, r8
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r0, [r5]
	eor	r4, r4, r0
	lsl	r0, r4, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
.L51:
	ldr	r1, .L52+0x14
	ldr	r5, .L52+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L52+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L52+0x1c
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L52+0x8
	mov	r9, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r9
	ldrh	r1, [r1]
	mov	r2, #0x64
	mov	r8, r2
	mov	r2, r8
	mul	r2, r2, r1
	add	r1, r2, #0
	ldr	r6, .L52+0xc
	add	r1, r1, r6
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	bl	StartHealthboxSlideIn
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r4, [r5]
	lsl	r0, r4, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r0, .L52
	ldr	r0, [r0]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L52+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L52+0x24
	str	r1, [r0]
.L45:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gBattleControllerData
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	Intro_WaitForShinyAnimAndHealthbox
.Lfe8:
	.size	 Intro_TryShinyAnimShowHealthbox,.Lfe8-Intro_TryShinyAnimShowHealthbox
	.align	2, 0
	.type	 TryShinyAnimAfterMonAnim,function
	.thumb_func
TryShinyAnimAfterMonAnim:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L59
	ldr	r0, .L59+0x4
	ldr	r7, .L59+0x8
	ldrb	r3, [r7]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r2, r0, #0x1f
	cmp	r2, #0x1
	bne	.L55	@cond_branch
	mov	r4, #0x24
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bne	.L55	@cond_branch
	ldr	r6, .L59+0xc
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r4, r3, #0x1
	add	r0, r4, r3
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r5, [r1]
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L56	@cond_branch
	ldr	r0, .L59+0x10
	add	r0, r4, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L59+0x14
	add	r1, r1, r0
	add	r0, r3, #0
	bl	TryShinyAnimation
	b	.L55
.L60:
	.align	2, 0
.L59:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L56:
	ldrb	r0, [r1, #0x1]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L55	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r5
	strb	r0, [r1]
	ldr	r0, [r6]
	ldrb	r2, [r7]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L61
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	bl	LinkOpponentBufferExecCompleted
.L55:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	0x27f9
.Lfe9:
	.size	 TryShinyAnimAfterMonAnim,.Lfe9-TryShinyAnimAfterMonAnim
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r6, .L66
	ldrb	r0, [r6]
	ldr	r5, .L66+0x4
	add	r1, r0, r5
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L64	@cond_branch
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L65
.L67:
	.align	2, 0
.L66:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L64:
	bl	LinkOpponentBufferExecCompleted
.L65:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 CompleteOnHealthbarDone,.Lfe10-CompleteOnHealthbarDone
	.align	2, 0
	.type	 HideHealthboxAfterMonFaint,function
	.thumb_func
HideHealthboxAfterMonFaint:
	push	{lr}
	ldr	r2, .L70
	ldr	r0, .L70+0x4
	ldr	r1, .L70+0x8
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r0, .L70+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	LinkOpponentBufferExecCompleted
.L69:
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.Lfe11:
	.size	 HideHealthboxAfterMonFaint,.Lfe11-HideHealthboxAfterMonFaint
	.align	2, 0
	.type	 FreeMonSpriteAfterSwitchOutAnim,function
	.thumb_func
FreeMonSpriteAfterSwitchOutAnim:
	push	{r4, r5, r6, lr}
	ldr	r0, .L74
	ldr	r0, [r0]
	ldr	r6, .L74+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L73	@cond_branch
	ldr	r5, .L74+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L74+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L74+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	LinkOpponentBufferExecCompleted
.L73:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe12:
	.size	 FreeMonSpriteAfterSwitchOutAnim,.Lfe12-FreeMonSpriteAfterSwitchOutAnim
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L77	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L77:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 CompleteOnInactiveTextPrinter,.Lfe13-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L82
	ldr	r0, .L82+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L82+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L79	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L82+0xc
	strb	r3, [r0]
	bl	LinkOpponentBufferExecCompleted
	b	.L80
.L83:
	.align	2, 0
.L82:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L79:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L81	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L81:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L80:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe14-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 SwitchIn_ShowSubstitute,function
	.thumb_func
SwitchIn_ShowSubstitute:
	push	{r4, lr}
	ldr	r2, .L87
	ldr	r0, .L87+0x4
	ldr	r4, .L87+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L87+0xc
	cmp	r1, r0
	bne	.L85	@cond_branch
	ldr	r0, .L87+0x10
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L86	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L86:
	ldr	r0, .L87+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L87+0x18
	str	r0, [r1]
.L85:
	pop	{r4}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	SwitchIn_HandleSoundAndEnd
.Lfe15:
	.size	 SwitchIn_ShowSubstitute,.Lfe15-SwitchIn_ShowSubstitute
	.align	2, 0
	.type	 SwitchIn_HandleSoundAndEnd,function
	.thumb_func
SwitchIn_HandleSoundAndEnd:
	push	{lr}
	ldr	r0, .L91
	ldr	r2, [r0]
	ldr	r0, .L91+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L90	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L90	@cond_branch
	ldr	r0, .L91+0x8
	ldr	r1, .L91+0xc
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	bl	LinkOpponentBufferExecCompleted
.L90:
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe16:
	.size	 SwitchIn_HandleSoundAndEnd,.Lfe16-SwitchIn_HandleSoundAndEnd
	.align	2, 0
	.type	 SwitchIn_ShowHealthbox,function
	.thumb_func
SwitchIn_ShowHealthbox:
	push	{r4, r5, lr}
	ldr	r3, .L95
	ldr	r0, [r3]
	ldr	r5, .L95+0x4
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L94	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r3]
	ldrb	r2, [r5]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L95+0x8
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r1, .L95+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L95+0x10
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L95+0x14
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L95+0x18
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L95+0x1c
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	bl	StartHealthboxSlideIn
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldrb	r0, [r5]
	bl	CopyBattleSpriteInvisibility
	ldr	r1, .L95+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L95+0x24
	str	r1, [r0]
.L94:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	0x27f9
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerControllerFuncs
	.word	SwitchIn_ShowSubstitute
.Lfe17:
	.size	 SwitchIn_ShowHealthbox,.Lfe17-SwitchIn_ShowHealthbox
	.align	2, 0
	.type	 SwitchIn_TryShinyAnim,function
	.thumb_func
SwitchIn_TryShinyAnim:
	push	{r4, r5, r6, lr}
	ldr	r6, .L100
	ldr	r0, [r6]
	ldr	r5, .L100+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L98	@cond_branch
	ldr	r0, .L100+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L100+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	TryShinyAnimation
.L98:
	ldr	r4, .L100+0x10
	ldr	r0, .L100+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L100+0x18
	cmp	r1, r0
	bne	.L99	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L99	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldrb	r4, [r5]
	ldr	r1, .L100+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L100+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L100+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L100+0x20
	str	r1, [r0]
.L99:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gSprites
	.word	gBattleControllerData
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	SwitchIn_ShowHealthbox
.Lfe18:
	.size	 SwitchIn_TryShinyAnim,.Lfe18-SwitchIn_TryShinyAnim
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L104
	ldr	r2, [r0]
	ldr	r0, .L104+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L103	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L103:
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe19:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe19-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L108
	ldr	r2, [r0]
	ldr	r0, .L108+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L107	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L107:
	pop	{r0}
	bx	r0
.L109:
	.align	2, 0
.L108:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe20:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe20-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 LinkOpponentBufferExecCompleted,function
	.thumb_func
LinkOpponentBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L113
	ldr	r4, .L113+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L113+0x8
	str	r1, [r0]
	ldr	r0, .L113+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L111	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r1, .L113+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	mov	r1, #0x38
	strb	r1, [r0]
	b	.L112
.L114:
	.align	2, 0
.L113:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	LinkOpponentBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleBufferA
.L111:
	ldr	r2, .L115
	ldr	r1, .L115+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L112:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe21:
	.size	 LinkOpponentBufferExecCompleted,.Lfe21-LinkOpponentBufferExecCompleted
	.align	2, 0
	.type	 LinkOpponentHandleGetMonData,function
	.thumb_func
LinkOpponentHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r1, .L126
	ldr	r0, .L126+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L118	@cond_branch
	ldr	r0, .L126+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyLinkOpponentMonData
	add	r6, r0, #0
	b	.L119
.L127:
	.align	2, 0
.L126:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L118:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L123:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L124	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyLinkOpponentMonData
	add	r6, r6, r0
.L124:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L123	@cond_branch
.L119:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	LinkOpponentBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 LinkOpponentHandleGetMonData,.Lfe22-LinkOpponentHandleGetMonData
	.align	2, 0
	.type	 CopyLinkOpponentMonData,function
	.thumb_func
CopyLinkOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x90
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L217
	ldr	r3, .L217+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB1808
	bl	.L129	@far jump
.LCB1808:
	lsl	r0, r0, #0x2
	ldr	r1, .L217+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L218:
	.align	2, 0
.L217:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	.L211
	.align	2, 0
	.align	2, 0
.L211:
	.word	.L130
	.word	.L141
	.word	.L142
	.word	.L143
	.word	.L157
	.word	.L157
	.word	.L157
	.word	.L157
	.word	.L158
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L129
	.word	.L168
	.word	.L169
	.word	.L170
	.word	.L171
	.word	.L172
	.word	.L173
	.word	.L174
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
	.word	.L200
	.word	.L201
	.word	.L202
	.word	.L203
	.word	.L204
	.word	.L205
	.word	.L206
	.word	.L207
	.word	.L208
	.word	.L209
	.word	.L210
.L130:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L219
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r6, #0x0
	add	r0, sp, #0x24
	mov	r9, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2b
	str	r2, [sp, #0x80]
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x8c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x84]
	add	r0, r0, #0x12
	str	r0, [sp, #0x88]
	mov	r8, r4
	add	r4, sp, #0xc
.L134:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L134	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L219
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x80]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L219+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L219+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L219+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	ldr	r0, [sp, #0x84]
	ldr	r1, [sp, #0x8c]
	bl	StringCopy_Nickname
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L139:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x57
	bls	.L139	@cond_branch
	b	.L129
.L220:
	.align	2, 0
.L219:
	.word	gEnemyParty
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L141:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L221
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L213
.L222:
	.align	2, 0
.L221:
	.word	gEnemyParty
.L142:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L223
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L213
.L224:
	.align	2, 0
.L223:
	.word	gEnemyParty
.L143:
	mov	r6, #0x0
	add	r2, sp, #0x58
	mov	r9, r2
	add	r0, sp, #0x60
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L225
	add	r4, r1, r0
	mov	r8, r9
.L147:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L147	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L225
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L152:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L152	@cond_branch
	b	.L129
.L226:
	.align	2, 0
.L225:
	.word	gEnemyParty
.L157:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L227
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L213
.L228:
	.align	2, 0
.L227:
	.word	gEnemyParty
.L158:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L229
	mov	r8, r2
.L162:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L162	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L229
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L129
.L230:
	.align	2, 0
.L229:
	.word	gEnemyParty
.L167:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L231
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x8
	b	.L214
.L232:
	.align	2, 0
.L231:
	.word	gEnemyParty
.L168:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L233
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L215
.L234:
	.align	2, 0
.L233:
	.word	gEnemyParty
.L169:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L235
	add	r0, r0, r1
	mov	r1, #0x19
.L215:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L129
.L236:
	.align	2, 0
.L235:
	.word	gEnemyParty
.L170:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L237
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L214
.L238:
	.align	2, 0
.L237:
	.word	gEnemyParty
.L171:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L239
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L214
.L240:
	.align	2, 0
.L239:
	.word	gEnemyParty
.L172:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L241
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L214
.L242:
	.align	2, 0
.L241:
	.word	gEnemyParty
.L173:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L243
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L214
.L244:
	.align	2, 0
.L243:
	.word	gEnemyParty
.L174:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L245
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L214
.L246:
	.align	2, 0
.L245:
	.word	gEnemyParty
.L175:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L247
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L214
.L248:
	.align	2, 0
.L247:
	.word	gEnemyParty
.L176:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L249
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L214
.L250:
	.align	2, 0
.L249:
	.word	gEnemyParty
.L177:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L251
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L214
.L252:
	.align	2, 0
.L251:
	.word	gEnemyParty
.L178:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L253
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L214
.L254:
	.align	2, 0
.L253:
	.word	gEnemyParty
.L179:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L255
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L214
.L256:
	.align	2, 0
.L255:
	.word	gEnemyParty
.L180:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L257
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L214
.L258:
	.align	2, 0
.L257:
	.word	gEnemyParty
.L181:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L259
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L214
.L260:
	.align	2, 0
.L259:
	.word	gEnemyParty
.L182:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L261
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L129
.L262:
	.align	2, 0
.L261:
	.word	gEnemyParty
.L183:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L263
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L214
.L264:
	.align	2, 0
.L263:
	.word	gEnemyParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L265
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L214
.L266:
	.align	2, 0
.L265:
	.word	gEnemyParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L267
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L214
.L268:
	.align	2, 0
.L267:
	.word	gEnemyParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L269
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L214
.L270:
	.align	2, 0
.L269:
	.word	gEnemyParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L271
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L214
.L272:
	.align	2, 0
.L271:
	.word	gEnemyParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L273
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L214
.L274:
	.align	2, 0
.L273:
	.word	gEnemyParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L275
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L216
.L276:
	.align	2, 0
.L275:
	.word	gEnemyParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L277
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L213
.L278:
	.align	2, 0
.L277:
	.word	gEnemyParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L279
	add	r0, r0, r1
	mov	r1, #0x37
.L216:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L129
.L280:
	.align	2, 0
.L279:
	.word	gEnemyParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L281
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L214
.L282:
	.align	2, 0
.L281:
	.word	gEnemyParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L283
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L213
.L284:
	.align	2, 0
.L283:
	.word	gEnemyParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L285
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L213
.L286:
	.align	2, 0
.L285:
	.word	gEnemyParty
.L195:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L287
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L213
.L288:
	.align	2, 0
.L287:
	.word	gEnemyParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L289
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L213
.L290:
	.align	2, 0
.L289:
	.word	gEnemyParty
.L197:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L291
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L213
.L292:
	.align	2, 0
.L291:
	.word	gEnemyParty
.L198:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L293
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L213
.L294:
	.align	2, 0
.L293:
	.word	gEnemyParty
.L199:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L295
	add	r0, r0, r1
	mov	r1, #0x3f
.L213:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L129
.L296:
	.align	2, 0
.L295:
	.word	gEnemyParty
.L200:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L297
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L214
.L298:
	.align	2, 0
.L297:
	.word	gEnemyParty
.L201:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L299
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L214
.L300:
	.align	2, 0
.L299:
	.word	gEnemyParty
.L202:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L301
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L214
.L302:
	.align	2, 0
.L301:
	.word	gEnemyParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L303
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L214
.L304:
	.align	2, 0
.L303:
	.word	gEnemyParty
.L204:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L305
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L214
.L306:
	.align	2, 0
.L305:
	.word	gEnemyParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L307
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L214
.L308:
	.align	2, 0
.L307:
	.word	gEnemyParty
.L206:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L309
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L214
.L310:
	.align	2, 0
.L309:
	.word	gEnemyParty
.L207:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L311
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L214
.L312:
	.align	2, 0
.L311:
	.word	gEnemyParty
.L208:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L313
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L214
.L314:
	.align	2, 0
.L313:
	.word	gEnemyParty
.L209:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L315
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L214
.L316:
	.align	2, 0
.L315:
	.word	gEnemyParty
.L210:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L317
	add	r0, r0, r1
	mov	r1, #0x36
.L214:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L129:
	add	r0, r6, #0
	add	sp, sp, #0x90
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L318:
	.align	2, 0
.L317:
	.word	gEnemyParty
.Lfe23:
	.size	 CopyLinkOpponentMonData,.Lfe23-CopyLinkOpponentMonData
	.align	2, 0
	.type	 LinkOpponentHandleGetRawMonData,function
	.thumb_func
LinkOpponentHandleGetRawMonData:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 LinkOpponentHandleGetRawMonData,.Lfe24-LinkOpponentHandleGetRawMonData
	.align	2, 0
	.type	 LinkOpponentHandleSetMonData,function
	.thumb_func
LinkOpponentHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r1, .L329
	ldr	r0, .L329+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L321	@cond_branch
	ldr	r0, .L329+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetLinkOpponentMonData
	b	.L322
.L330:
	.align	2, 0
.L329:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L321:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L326:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L327	@cond_branch
	add	r0, r5, #0
	bl	SetLinkOpponentMonData
.L327:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L326	@cond_branch
.L322:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 LinkOpponentHandleSetMonData,.Lfe25-LinkOpponentHandleSetMonData
	.align	2, 0
	.type	 SetLinkOpponentMonData,function
	.thumb_func
SetLinkOpponentMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, .L403
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	ldr	r2, .L403+0x4
	add	r4, r0, r2
	add	r7, r4, #0
	sub	r1, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r6, r3, #0
	add	r3, r2, #0
	cmp	r0, #0x3b
	bls	.LCB3226
	bl	.L332	@far jump
.LCB3226:
	lsl	r0, r0, #0x2
	ldr	r1, .L403+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L404:
	.align	2, 0
.L403:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
	.word	.L399
	.align	2, 0
	.align	2, 0
.L399:
	.word	.L333
	.word	.L339
	.word	.L340
	.word	.L341
	.word	.L350
	.word	.L350
	.word	.L350
	.word	.L350
	.word	.L351
	.word	.L355
	.word	.L355
	.word	.L355
	.word	.L355
	.word	.L332
	.word	.L332
	.word	.L332
	.word	.L332
	.word	.L356
	.word	.L357
	.word	.L358
	.word	.L359
	.word	.L360
	.word	.L361
	.word	.L362
	.word	.L363
	.word	.L364
	.word	.L365
	.word	.L366
	.word	.L367
	.word	.L368
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
	.word	.L384
	.word	.L385
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
.L333:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L405
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	add	r2, r7, #0
	bl	SetMonData
	add	r2, r7, #0
	add	r2, r2, #0x2e
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x3b
	add	r0, r0, r7
	mov	sl, r0
	add	r0, r7, #0
	add	r0, r0, #0x2b
	str	r0, [sp, #0x20]
	add	r0, r0, #0x19
	str	r0, [sp, #0x28]
	add	r0, r0, #0x4
	str	r0, [sp, #0x2c]
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	sub	r0, r0, #0x22
	str	r0, [sp, #0x1c]
	sub	r0, r0, #0x2
	str	r0, [sp, #0x18]
	add	r0, r0, #0x4
	str	r0, [sp, #0x24]
	add	r0, r7, #0x2
	str	r0, [sp, #0x4]
	add	r0, r7, #0x4
	str	r0, [sp, #0x8]
	add	r0, r7, #0x6
	str	r0, [sp, #0xc]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x14]
	mov	r9, r4
	add	r6, r7, #0
	add	r6, r6, #0x24
	add	r4, r7, #0
	add	r4, r4, #0xc
.L337:
	mov	r1, r8
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L337	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L405
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	ldrb	r0, [r7, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r7, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r7, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldr	r0, [r7, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r7, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r7, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L332
.L406:
	.align	2, 0
.L405:
	.word	gEnemyParty
.L339:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L407
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0xb
	bl	SetMonData
	b	.L332
.L408:
	.align	2, 0
.L407:
	.word	gEnemyParty
.L340:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L409
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0xc
	bl	SetMonData
	b	.L332
.L410:
	.align	2, 0
.L409:
	.word	gEnemyParty
.L341:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0xc
	add	r0, r0, r4
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L411
	add	r7, r1, r0
	add	r6, r4, #0
	add	r6, r6, #0x8
.L345:
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	add	r0, r7, #0
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L345	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L411
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	b	.L332
.L412:
	.align	2, 0
.L411:
	.word	gEnemyParty
.L350:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L413
	add	r0, r0, r1
	ldr	r3, .L413+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L401
.L414:
	.align	2, 0
.L413:
	.word	gEnemyParty
	.word	gBattleBufferA
.L351:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L415
	add	r4, r4, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	add	r0, r4, #0
	mov	r1, #0x11
	str	r3, [sp, #0x34]
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L332
.L416:
	.align	2, 0
.L415:
	.word	gEnemyParty
.L355:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L417
	add	r0, r0, r1
	ldr	r3, .L417+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L401:
	add	r3, r3, #0x3
	add	r2, r2, r3
	bl	SetMonData
	b	.L332
.L418:
	.align	2, 0
.L417:
	.word	gEnemyParty
	.word	gBattleBufferA
.L356:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L419
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1
	bl	SetMonData
	b	.L332
.L420:
	.align	2, 0
.L419:
	.word	gEnemyParty
.L357:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L421
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x19
	bl	SetMonData
	b	.L332
.L422:
	.align	2, 0
.L421:
	.word	gEnemyParty
.L358:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L423
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L332
.L424:
	.align	2, 0
.L423:
	.word	gEnemyParty
.L359:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L425
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L332
.L426:
	.align	2, 0
.L425:
	.word	gEnemyParty
.L360:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L427
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L332
.L428:
	.align	2, 0
.L427:
	.word	gEnemyParty
.L361:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L429
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L332
.L430:
	.align	2, 0
.L429:
	.word	gEnemyParty
.L362:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L431
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L332
.L432:
	.align	2, 0
.L431:
	.word	gEnemyParty
.L363:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L433
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L332
.L434:
	.align	2, 0
.L433:
	.word	gEnemyParty
.L364:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L435
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x20
	bl	SetMonData
	b	.L332
.L436:
	.align	2, 0
.L435:
	.word	gEnemyParty
.L365:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L437
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x22
	bl	SetMonData
	b	.L332
.L438:
	.align	2, 0
.L437:
	.word	gEnemyParty
.L366:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L439
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x23
	bl	SetMonData
	b	.L332
.L440:
	.align	2, 0
.L439:
	.word	gEnemyParty
.L367:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L441
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x24
	bl	SetMonData
	b	.L332
.L442:
	.align	2, 0
.L441:
	.word	gEnemyParty
.L368:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L443
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x25
	bl	SetMonData
	b	.L332
.L444:
	.align	2, 0
.L443:
	.word	gEnemyParty
.L369:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L445
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x26
	bl	SetMonData
	b	.L332
.L446:
	.align	2, 0
.L445:
	.word	gEnemyParty
.L370:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L447
	add	r4, r4, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	add	r0, r4, #0
	mov	r1, #0x27
	str	r3, [sp, #0x34]
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x5
	add	r2, r2, r0
	add	r0, r4, #0
	b	.L402
.L448:
	.align	2, 0
.L447:
	.word	gEnemyParty
.L371:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L449
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x27
	bl	SetMonData
	b	.L332
.L450:
	.align	2, 0
.L449:
	.word	gEnemyParty
.L372:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L451
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x28
	bl	SetMonData
	b	.L332
.L452:
	.align	2, 0
.L451:
	.word	gEnemyParty
.L373:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L453
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x29
	bl	SetMonData
	b	.L332
.L454:
	.align	2, 0
.L453:
	.word	gEnemyParty
.L374:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L455
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L332
.L456:
	.align	2, 0
.L455:
	.word	gEnemyParty
.L375:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L457
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L332
.L458:
	.align	2, 0
.L457:
	.word	gEnemyParty
.L376:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L459
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
.L402:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L332
.L460:
	.align	2, 0
.L459:
	.word	gEnemyParty
.L377:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L461
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x0
	bl	SetMonData
	b	.L332
.L462:
	.align	2, 0
.L461:
	.word	gEnemyParty
.L378:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L463
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x9
	bl	SetMonData
	b	.L332
.L464:
	.align	2, 0
.L463:
	.word	gEnemyParty
.L379:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L465
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x37
	bl	SetMonData
	b	.L332
.L466:
	.align	2, 0
.L465:
	.word	gEnemyParty
.L380:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L467
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x38
	bl	SetMonData
	b	.L332
.L468:
	.align	2, 0
.L467:
	.word	gEnemyParty
.L381:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L469
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x39
	bl	SetMonData
	b	.L332
.L470:
	.align	2, 0
.L469:
	.word	gEnemyParty
.L382:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L471
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L332
.L472:
	.align	2, 0
.L471:
	.word	gEnemyParty
.L383:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L473
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L332
.L474:
	.align	2, 0
.L473:
	.word	gEnemyParty
.L384:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L475
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L332
.L476:
	.align	2, 0
.L475:
	.word	gEnemyParty
.L385:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L477
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L332
.L478:
	.align	2, 0
.L477:
	.word	gEnemyParty
.L386:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L479
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L332
.L480:
	.align	2, 0
.L479:
	.word	gEnemyParty
.L387:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L481
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L332
.L482:
	.align	2, 0
.L481:
	.word	gEnemyParty
.L388:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L483
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x16
	bl	SetMonData
	b	.L332
.L484:
	.align	2, 0
.L483:
	.word	gEnemyParty
.L389:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L485
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x17
	bl	SetMonData
	b	.L332
.L486:
	.align	2, 0
.L485:
	.word	gEnemyParty
.L390:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L487
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x18
	bl	SetMonData
	b	.L332
.L488:
	.align	2, 0
.L487:
	.word	gEnemyParty
.L391:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L489
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x21
	bl	SetMonData
	b	.L332
.L490:
	.align	2, 0
.L489:
	.word	gEnemyParty
.L392:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L491
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L332
.L492:
	.align	2, 0
.L491:
	.word	gEnemyParty
.L393:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L493
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x30
	bl	SetMonData
	b	.L332
.L494:
	.align	2, 0
.L493:
	.word	gEnemyParty
.L394:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L495
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x32
	bl	SetMonData
	b	.L332
.L496:
	.align	2, 0
.L495:
	.word	gEnemyParty
.L395:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L497
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x33
	bl	SetMonData
	b	.L332
.L498:
	.align	2, 0
.L497:
	.word	gEnemyParty
.L396:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L499
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x34
	bl	SetMonData
	b	.L332
.L500:
	.align	2, 0
.L499:
	.word	gEnemyParty
.L397:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L501
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x35
	bl	SetMonData
	b	.L332
.L502:
	.align	2, 0
.L501:
	.word	gEnemyParty
.L398:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L503
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x36
	bl	SetMonData
.L332:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L504:
	.align	2, 0
.L503:
	.word	gEnemyParty
.Lfe26:
	.size	 SetLinkOpponentMonData,.Lfe26-SetLinkOpponentMonData
	.align	2, 0
	.type	 LinkOpponentHandleSetRawMonData,function
	.thumb_func
LinkOpponentHandleSetRawMonData:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L511
	ldr	r7, .L511+0x4
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r3, r1
	mul	r3, r3, r0
	ldr	r4, .L511+0x8
	lsl	r2, r2, #0x9
	add	r0, r4, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	ldr	r1, .L511+0xc
	add	r0, r0, r1
	add	r5, r3, r0
	mov	r3, #0x0
	add	r0, r4, #0x2
	add	r2, r2, r0
	ldrb	r2, [r2]
	cmp	r3, r2
	bcs	.L507	@cond_branch
	add	r6, r4, #0
	add	r2, r7, #0
	add	r4, r0, #0
.L509:
	add	r1, r5, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r3, r0
	bcc	.L509	@cond_branch
.L507:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gEnemyParty
.Lfe27:
	.size	 LinkOpponentHandleSetRawMonData,.Lfe27-LinkOpponentHandleSetRawMonData
	.align	2, 0
	.type	 LinkOpponentHandleLoadMonSprite,function
	.thumb_func
LinkOpponentHandleLoadMonSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r7, .L514
	ldr	r6, .L514+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, #0x64
	mov	sl, r1
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r1, .L514+0x8
	mov	r9, r1
	add	r0, r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r9
	bl	BattleLoadOpponentMonSpriteGfx
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L514+0xc
	mov	r8, r0
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L514+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L514+0x14
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L514+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r6]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	ldrb	r3, [r6]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r2, [r6]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L514+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldrb	r4, [r6]
	lsl	r0, r4, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	SetBattlerShadowSpriteCallback
	ldr	r1, .L514+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L514+0x24
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattlerControllerFuncs
	.word	TryShinyAnimAfterMonAnim
.Lfe28:
	.size	 LinkOpponentHandleLoadMonSprite,.Lfe28-LinkOpponentHandleLoadMonSprite
	.align	2, 0
	.type	 LinkOpponentHandleSwitchInAnim,function
	.thumb_func
LinkOpponentHandleSwitchInAnim:
	push	{r4, lr}
	ldr	r1, .L517
	ldr	r4, .L517+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r1
	ldr	r3, .L517+0x8
	lsl	r0, r0, #0x9
	add	r1, r3, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x9
	add	r3, r3, #0x2
	add	r1, r1, r3
	ldrb	r1, [r1]
	bl	StartSendOutAnim
	ldr	r1, .L517+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L517+0x10
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerControllerFuncs
	.word	SwitchIn_TryShinyAnim
.Lfe29:
	.size	 LinkOpponentHandleSwitchInAnim,.Lfe29-LinkOpponentHandleSwitchInAnim
	.align	2, 0
	.type	 StartSendOutAnim,function
	.thumb_func
StartSendOutAnim:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ClearTemporarySpeciesSpriteData
	ldr	r0, .L520
	lsl	r4, r6, #0x1
	add	r4, r4, r0
	ldr	r0, .L520+0x4
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x64
	mov	r9, r1
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r5, .L520+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L520+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L520+0x10
	mov	sl, r1
	add	sl, sl, r6
	mov	r1, sl
	strb	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	add	r1, r6, #0
	bl	BattleLoadOpponentMonSpriteGfx
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L520+0x14
	mov	r9, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r9
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L520+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L520+0x1c
	mov	r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L520+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L520+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xfe
	bl	DoPokeballSendOutAnimation
	mov	r1, sl
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L521:
	.align	2, 0
.L520:
	.word	gBattlerPartyIndexes
	.word	gBattleBufferA
	.word	gEnemyParty
	.word	SpriteCB_WaitForBattlerBallReleaseAnim
	.word	gBattleControllerData
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe30:
	.size	 StartSendOutAnim,.Lfe30-StartSendOutAnim
	.align	2, 0
	.type	 LinkOpponentHandleReturnMonToBall,function
	.thumb_func
LinkOpponentHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r1, .L525
	ldr	r6, .L525+0x4
	ldrb	r2, [r6]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L523	@cond_branch
	ldr	r0, .L525+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L525+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L525+0x10
	str	r1, [r0]
	b	.L524
.L526:
	.align	2, 0
.L525:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L523:
	ldr	r5, .L527
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L527+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	HideBattlerShadowSprite
	ldr	r1, .L527+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	LinkOpponentBufferExecCompleted
.L524:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L528:
	.align	2, 0
.L527:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe31:
	.size	 LinkOpponentHandleReturnMonToBall,.Lfe31-LinkOpponentHandleReturnMonToBall
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L537
	ldr	r4, [r6]
	ldr	r5, .L537+0x4
	ldrb	r2, [r5]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L531	@cond_branch
	cmp	r0, #0x1
	beq	.L533	@cond_branch
	b	.L530
.L538:
	.align	2, 0
.L537:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L531:
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L532	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L532:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L530
.L533:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L530	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x2
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L539
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L539+0x4
	str	r1, [r0]
.L530:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L540:
	.align	2, 0
.L539:
	.word	gBattlerControllerFuncs
	.word	FreeMonSpriteAfterSwitchOutAnim
.Lfe32:
	.size	 DoSwitchOutAnimation,.Lfe32-DoSwitchOutAnimation
	.align	2, 0
	.type	 LinkOpponentHandleDrawTrainerPic,function
	.thumb_func
LinkOpponentHandleDrawTrainerPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L563
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L542	@cond_branch
	ldr	r6, .L563+0x4
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	mov	r1, #0x2
	and	r1, r1, r0
	mov	r7, #0xc8
	cmp	r1, #0
	beq	.L543	@cond_branch
	mov	r7, #0x98
.L543:
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	ldr	r5, .L563+0x8
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r4, #0xff
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L546	@cond_branch
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L546	@cond_branch
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1]
	and	r4, r4, r0
	cmp	r4, #0x3
	bne	.L545	@cond_branch
.L546:
	ldr	r4, .L563+0x8
	ldr	r0, .L563+0x4
	ldrb	r0, [r0]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L547	@cond_branch
	ldr	r0, .L563+0xc
	add	r0, r0, #0x3d
	b	.L562
.L564:
	.align	2, 0
.L563:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gLinkPlayers
	.word	gFacilityClassToPicIndex
.L547:
	ldr	r0, .L565
	add	r0, r0, #0x3a
	b	.L562
.L566:
	.align	2, 0
.L565:
	.word	gFacilityClassToPicIndex
.L545:
	ldrb	r0, [r6]
	bl	GetBattlerMultiplayerId
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L560	@cond_branch
	ldr	r0, .L567
	add	r0, r0, #0x87
	b	.L562
.L568:
	.align	2, 0
.L567:
	.word	gFacilityClassToPicIndex
.L542:
	mov	r7, #0xb0
	ldr	r0, .L569
	ldrh	r1, [r0]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	cmp	r1, r0
	bne	.L553	@cond_branch
	bl	GetUnionRoomTrainerPic
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L552
.L570:
	.align	2, 0
.L569:
	.word	gTrainerBattleOpponent_A
.L553:
	bl	GetMultiplayerId
	ldr	r6, .L571
	mov	r5, #0x1
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r4, #0xff
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L556	@cond_branch
	bl	GetMultiplayerId
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L556	@cond_branch
	bl	GetMultiplayerId
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r1]
	and	r4, r4, r0
	cmp	r4, #0x3
	bne	.L555	@cond_branch
.L556:
	ldr	r4, .L571
	bl	GetMultiplayerId
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L557	@cond_branch
	ldr	r0, .L571+0x4
	add	r0, r0, #0x3d
	b	.L562
.L572:
	.align	2, 0
.L571:
	.word	gLinkPlayers
	.word	gFacilityClassToPicIndex
.L557:
	ldr	r0, .L573
	add	r0, r0, #0x3a
	b	.L562
.L574:
	.align	2, 0
.L573:
	.word	gFacilityClassToPicIndex
.L555:
	bl	GetMultiplayerId
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L560	@cond_branch
	ldr	r0, .L575
	add	r0, r0, #0x87
	b	.L562
.L576:
	.align	2, 0
.L575:
	.word	gFacilityClassToPicIndex
.L560:
	ldr	r0, .L577
	add	r0, r0, #0x86
.L562:
	ldrb	r0, [r0]
.L552:
	mov	r9, r0
	ldr	r0, .L577+0x4
	mov	r8, r0
	ldrb	r1, [r0]
	mov	r0, r9
	bl	DecompressTrainerFrontPic
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r5, .L577+0x8
	add	r6, r7, #0
	ldr	r1, .L577+0xc
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xe
	add	r4, r4, r0
	asr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r5, .L577+0x10
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L577+0x14
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L577+0x18
	strh	r1, [r0, #0x24]
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldr	r0, .L577+0x1c
	mov	r1, r9
	lsl	r6, r1, #0x3
	add	r0, r6, r0
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	strh	r0, [r1, #0x38]
	ldr	r0, .L577+0x20
	add	r6, r6, r0
	ldrh	r0, [r6, #0x6]
	bl	GetSpriteTileStartByTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r2, .L577+0x24
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L577+0x28
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, r9
	strh	r2, [r0, #0x6]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L577+0x2c
	str	r1, [r0]
	ldr	r1, .L577+0x30
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L577+0x34
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L578:
	.align	2, 0
.L577:
	.word	gFacilityClassToPicIndex
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerFrontPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xff10
	.word	gTrainerFrontPicPaletteTable
	.word	gTrainerFrontPicTable
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_TrainerSlideIn
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe33:
	.size	 LinkOpponentHandleDrawTrainerPic,.Lfe33-LinkOpponentHandleDrawTrainerPic
	.align	2, 0
	.type	 LinkOpponentHandleTrainerSlide,function
	.thumb_func
LinkOpponentHandleTrainerSlide:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 LinkOpponentHandleTrainerSlide,.Lfe34-LinkOpponentHandleTrainerSlide
	.align	2, 0
	.type	 LinkOpponentHandleTrainerSlideBack,function
	.thumb_func
LinkOpponentHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L581
	ldr	r4, .L581+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L581+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L581+0xc
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L581+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L581+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L581+0x18
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L582:
	.align	2, 0
.L581:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	FreeTrainerSpriteAfterSlide
.Lfe35:
	.size	 LinkOpponentHandleTrainerSlideBack,.Lfe35-LinkOpponentHandleTrainerSlideBack
	.align	2, 0
	.type	 LinkOpponentHandleFaintAnimation,function
	.thumb_func
LinkOpponentHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L588
	ldr	r4, [r6]
	ldr	r5, .L588+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L584	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L585	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L585:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L586
.L589:
	.align	2, 0
.L588:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L584:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L586	@cond_branch
	strb	r0, [r3, #0x4]
	mov	r0, #0x10
	mov	r1, #0x3f
	bl	PlaySE12WithPanning
	ldr	r2, .L590
	ldr	r1, .L590+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L590+0x8
	str	r1, [r0]
	ldr	r1, .L590+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L590+0x10
	str	r1, [r0]
.L586:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L591:
	.align	2, 0
.L590:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	SpriteCB_FaintOpponentMon
	.word	gBattlerControllerFuncs
	.word	HideHealthboxAfterMonFaint
.Lfe36:
	.size	 LinkOpponentHandleFaintAnimation,.Lfe36-LinkOpponentHandleFaintAnimation
	.align	2, 0
	.type	 LinkOpponentHandlePaletteFade,function
	.thumb_func
LinkOpponentHandlePaletteFade:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 LinkOpponentHandlePaletteFade,.Lfe37-LinkOpponentHandlePaletteFade
	.align	2, 0
	.type	 LinkOpponentHandleSuccessBallThrowAnim,function
	.thumb_func
LinkOpponentHandleSuccessBallThrowAnim:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 LinkOpponentHandleSuccessBallThrowAnim,.Lfe38-LinkOpponentHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 LinkOpponentHandleBallThrowAnim,function
	.thumb_func
LinkOpponentHandleBallThrowAnim:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 LinkOpponentHandleBallThrowAnim,.Lfe39-LinkOpponentHandleBallThrowAnim
	.align	2, 0
	.type	 LinkOpponentHandlePause,function
	.thumb_func
LinkOpponentHandlePause:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 LinkOpponentHandlePause,.Lfe40-LinkOpponentHandlePause
	.align	2, 0
	.type	 LinkOpponentHandleMoveAnimation,function
	.thumb_func
LinkOpponentHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L600
	ldrb	r0, [r6]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6067
	b	.L597	@long jump
.LCB6067:
	ldr	r0, .L600+0x4
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L600+0x8
	mov	r1, ip
	add	r1, r1, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r5]
	ldr	r4, .L600+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x5
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L600+0x10
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x6
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x7
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	str	r3, [r4]
	ldr	r3, .L600+0x14
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, ip
	add	r2, r2, #0xa
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L600+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0xc
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0xd
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L600+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x10
	add	r2, r2, r1
	str	r2, [r3]
	ldr	r3, .L600+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L598	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L597
.L601:
	.align	2, 0
.L600:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L598:
	ldr	r0, .L602
	ldr	r0, [r0]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L602+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L602+0x8
	str	r1, [r0]
.L597:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L603:
	.align	2, 0
.L602:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	LinkOpponentDoMoveAnimation
.Lfe41:
	.size	 LinkOpponentHandleMoveAnimation,.Lfe41-LinkOpponentHandleMoveAnimation
	.align	2, 0
	.type	 LinkOpponentDoMoveAnimation,function
	.thumb_func
LinkOpponentDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r2, .L618
	ldr	r6, .L618+0x4
	ldrb	r3, [r6]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	sl, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r2, #0x2
	mov	r9, r5
	add	r0, r1, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r2, r2, #0xb
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r7, .L618+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L608	@cond_branch
	cmp	r2, #0x1
	bgt	.L617	@cond_branch
	cmp	r2, #0
	beq	.L606	@cond_branch
	b	.L605
.L619:
	.align	2, 0
.L618:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L617:
	cmp	r2, #0x2
	beq	.L610	@cond_branch
	cmp	r2, #0x3
	beq	.L613	@cond_branch
	b	.L605
.L606:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r1, r0, r1
	ldrb	r2, [r1]
	mov	r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0x4
	bne	.L607	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r2, [r6]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L607:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L605
.L608:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L605	@cond_branch
	mov	r0, #0x0
	bl	SetBattlerSpriteAffineMode
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L605
.L610:
	ldr	r0, .L620
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L620+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L605	@cond_branch
	mov	r0, #0x1
	bl	SetBattlerSpriteAffineMode
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L612	@cond_branch
	mov	r0, r8
	cmp	r0, #0x1
	bhi	.L612	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L612:
	ldr	r0, .L620+0x8
	ldr	r2, [r0]
	ldr	r0, .L620+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L605
.L621:
	.align	2, 0
.L620:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L613:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L605	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	lsl	r2, r0, #0x9
	mov	r3, sl
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r9
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	LinkOpponentBufferExecCompleted
.L605:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 LinkOpponentDoMoveAnimation,.Lfe42-LinkOpponentDoMoveAnimation
	.align	2, 0
	.type	 LinkOpponentHandlePrintString,function
	.thumb_func
LinkOpponentHandlePrintString:
	push	{r4, lr}
	ldr	r0, .L625
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L625+0x4
	strh	r1, [r0]
	ldr	r0, .L625+0x8
	ldrb	r4, [r0]
	lsl	r4, r4, #0x9
	ldr	r0, .L625+0xc
	add	r4, r4, r0
	ldrh	r0, [r4]
	bl	BufferStringBattle
	ldrh	r0, [r4]
	bl	BattleStringShouldBeColored
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L623	@cond_branch
	ldr	r0, .L625+0x10
	mov	r1, #0x40
	bl	BattlePutTextOnWindow
	b	.L624
.L626:
	.align	2, 0
.L625:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gActiveBattler
	.word	gBattleBufferA+0x2
	.word	gDisplayedStringBattle
.L623:
	ldr	r0, .L627
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
.L624:
	ldr	r1, .L627+0x4
	ldr	r0, .L627+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L627+0xc
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnInactiveTextPrinter
.Lfe43:
	.size	 LinkOpponentHandlePrintString,.Lfe43-LinkOpponentHandlePrintString
	.align	2, 0
	.type	 LinkOpponentHandlePrintSelectionString,function
	.thumb_func
LinkOpponentHandlePrintSelectionString:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 LinkOpponentHandlePrintSelectionString,.Lfe44-LinkOpponentHandlePrintSelectionString
	.align	2, 0
	.type	 LinkOpponentHandleChooseAction,function
	.thumb_func
LinkOpponentHandleChooseAction:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 LinkOpponentHandleChooseAction,.Lfe45-LinkOpponentHandleChooseAction
	.align	2, 0
	.type	 LinkOpponentHandleUnknownYesNoBox,function
	.thumb_func
LinkOpponentHandleUnknownYesNoBox:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 LinkOpponentHandleUnknownYesNoBox,.Lfe46-LinkOpponentHandleUnknownYesNoBox
	.align	2, 0
	.type	 LinkOpponentHandleChooseMove,function
	.thumb_func
LinkOpponentHandleChooseMove:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 LinkOpponentHandleChooseMove,.Lfe47-LinkOpponentHandleChooseMove
	.align	2, 0
	.type	 LinkOpponentHandleChooseItem,function
	.thumb_func
LinkOpponentHandleChooseItem:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 LinkOpponentHandleChooseItem,.Lfe48-LinkOpponentHandleChooseItem
	.align	2, 0
	.type	 LinkOpponentHandleChoosePokemon,function
	.thumb_func
LinkOpponentHandleChoosePokemon:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 LinkOpponentHandleChoosePokemon,.Lfe49-LinkOpponentHandleChoosePokemon
	.align	2, 0
	.type	 LinkOpponentHandleCmd23,function
	.thumb_func
LinkOpponentHandleCmd23:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 LinkOpponentHandleCmd23,.Lfe50-LinkOpponentHandleCmd23
	.align	2, 0
	.type	 LinkOpponentHandleHealthBarUpdate,function
	.thumb_func
LinkOpponentHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r3, .L639
	ldr	r0, .L639+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r2, r4, #0x9
	add	r0, r3, #0x2
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r3, r3, #0x3
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L639+0x8
	cmp	r7, r0
	beq	.L637	@cond_branch
	ldr	r6, .L639+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L639+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L639+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L638
.L640:
	.align	2, 0
.L639:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
.L637:
	ldr	r1, .L641
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L641+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L641+0x8
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
.L638:
	ldr	r1, .L641+0xc
	ldr	r0, .L641+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L641+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L642:
	.align	2, 0
.L641:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe51:
	.size	 LinkOpponentHandleHealthBarUpdate,.Lfe51-LinkOpponentHandleHealthBarUpdate
	.align	2, 0
	.type	 LinkOpponentHandleExpUpdate,function
	.thumb_func
LinkOpponentHandleExpUpdate:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 LinkOpponentHandleExpUpdate,.Lfe52-LinkOpponentHandleExpUpdate
	.align	2, 0
	.type	 LinkOpponentHandleStatusIconUpdate,function
	.thumb_func
LinkOpponentHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L646
	ldrb	r0, [r4]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L645	@cond_branch
	ldr	r0, .L646+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L646+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L646+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L646+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L646+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L646+0x18
	str	r1, [r0]
.L645:
	pop	{r4}
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe53:
	.size	 LinkOpponentHandleStatusIconUpdate,.Lfe53-LinkOpponentHandleStatusIconUpdate
	.align	2, 0
	.type	 LinkOpponentHandleStatusAnimation,function
	.thumb_func
LinkOpponentHandleStatusAnimation:
	push	{r4, r5, lr}
	ldr	r5, .L650
	ldrb	r0, [r5]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L649	@cond_branch
	ldr	r4, .L650+0x4
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r0, r4, #0x1
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r1, r4, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	add	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	add	r2, r4, #0x4
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	add	r4, r4, #0x5
	add	r3, r3, r4
	ldrb	r2, [r3]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L650+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L650+0xc
	str	r1, [r0]
.L649:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L651:
	.align	2, 0
.L650:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe54:
	.size	 LinkOpponentHandleStatusAnimation,.Lfe54-LinkOpponentHandleStatusAnimation
	.align	2, 0
	.type	 LinkOpponentHandleStatusXor,function
	.thumb_func
LinkOpponentHandleStatusXor:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 LinkOpponentHandleStatusXor,.Lfe55-LinkOpponentHandleStatusXor
	.align	2, 0
	.type	 LinkOpponentHandleDataTransfer,function
	.thumb_func
LinkOpponentHandleDataTransfer:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 LinkOpponentHandleDataTransfer,.Lfe56-LinkOpponentHandleDataTransfer
	.align	2, 0
	.type	 LinkOpponentHandleDMA3Transfer,function
	.thumb_func
LinkOpponentHandleDMA3Transfer:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 LinkOpponentHandleDMA3Transfer,.Lfe57-LinkOpponentHandleDMA3Transfer
	.align	2, 0
	.type	 LinkOpponentHandlePlayBGM,function
	.thumb_func
LinkOpponentHandlePlayBGM:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 LinkOpponentHandlePlayBGM,.Lfe58-LinkOpponentHandlePlayBGM
	.align	2, 0
	.type	 LinkOpponentHandleCmd32,function
	.thumb_func
LinkOpponentHandleCmd32:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 LinkOpponentHandleCmd32,.Lfe59-LinkOpponentHandleCmd32
	.align	2, 0
	.type	 LinkOpponentHandleTwoReturnValues,function
	.thumb_func
LinkOpponentHandleTwoReturnValues:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 LinkOpponentHandleTwoReturnValues,.Lfe60-LinkOpponentHandleTwoReturnValues
	.align	2, 0
	.type	 LinkOpponentHandleChosenMonReturnValue,function
	.thumb_func
LinkOpponentHandleChosenMonReturnValue:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 LinkOpponentHandleChosenMonReturnValue,.Lfe61-LinkOpponentHandleChosenMonReturnValue
	.align	2, 0
	.type	 LinkOpponentHandleOneReturnValue,function
	.thumb_func
LinkOpponentHandleOneReturnValue:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 LinkOpponentHandleOneReturnValue,.Lfe62-LinkOpponentHandleOneReturnValue
	.align	2, 0
	.type	 LinkOpponentHandleOneReturnValue_Duplicate,function
	.thumb_func
LinkOpponentHandleOneReturnValue_Duplicate:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 LinkOpponentHandleOneReturnValue_Duplicate,.Lfe63-LinkOpponentHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 LinkOpponentHandleClearUnkVar,function
	.thumb_func
LinkOpponentHandleClearUnkVar:
	push	{lr}
	ldr	r2, .L662
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	gUnusedControllerStruct
.Lfe64:
	.size	 LinkOpponentHandleClearUnkVar,.Lfe64-LinkOpponentHandleClearUnkVar
	.align	2, 0
	.type	 LinkOpponentHandleSetUnkVar,function
	.thumb_func
LinkOpponentHandleSetUnkVar:
	push	{lr}
	ldr	r3, .L665
	ldr	r1, .L665+0x4
	ldr	r0, .L665+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L666:
	.align	2, 0
.L665:
	.word	gUnusedControllerStruct
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe65:
	.size	 LinkOpponentHandleSetUnkVar,.Lfe65-LinkOpponentHandleSetUnkVar
	.align	2, 0
	.type	 LinkOpponentHandleClearUnkFlag,function
	.thumb_func
LinkOpponentHandleClearUnkFlag:
	push	{lr}
	ldr	r2, .L668
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L669:
	.align	2, 0
.L668:
	.word	gUnusedControllerStruct
.Lfe66:
	.size	 LinkOpponentHandleClearUnkFlag,.Lfe66-LinkOpponentHandleClearUnkFlag
	.align	2, 0
	.type	 LinkOpponentHandleToggleUnkFlag,function
	.thumb_func
LinkOpponentHandleToggleUnkFlag:
	push	{lr}
	ldr	r3, .L671
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	gUnusedControllerStruct
.Lfe67:
	.size	 LinkOpponentHandleToggleUnkFlag,.Lfe67-LinkOpponentHandleToggleUnkFlag
	.align	2, 0
	.type	 LinkOpponentHandleHitAnimation,function
	.thumb_func
LinkOpponentHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L676
	ldr	r2, .L676+0x4
	ldr	r4, .L676+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L674	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L675
.L677:
	.align	2, 0
.L676:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L674:
	ldr	r1, .L678
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L678+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L678+0x8
	str	r1, [r0]
.L675:
	pop	{r4}
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe68:
	.size	 LinkOpponentHandleHitAnimation,.Lfe68-LinkOpponentHandleHitAnimation
	.align	2, 0
	.type	 LinkOpponentHandleCantSwitch,function
	.thumb_func
LinkOpponentHandleCantSwitch:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 LinkOpponentHandleCantSwitch,.Lfe69-LinkOpponentHandleCantSwitch
	.align	2, 0
	.type	 LinkOpponentHandlePlaySE,function
	.thumb_func
LinkOpponentHandlePlaySE:
	push	{r4, lr}
	ldr	r4, .L684
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L682	@cond_branch
	mov	r3, #0xc0
.L682:
	ldr	r2, .L684+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	LinkOpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L685:
	.align	2, 0
.L684:
	.word	gActiveBattler
	.word	gBattleBufferA
.Lfe70:
	.size	 LinkOpponentHandlePlaySE,.Lfe70-LinkOpponentHandlePlaySE
	.align	2, 0
	.type	 LinkOpponentHandlePlayFanfare,function
	.thumb_func
LinkOpponentHandlePlayFanfare:
	push	{lr}
	ldr	r2, .L687
	ldr	r0, .L687+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L688:
	.align	2, 0
.L687:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe71:
	.size	 LinkOpponentHandlePlayFanfare,.Lfe71-LinkOpponentHandlePlayFanfare
	.align	2, 0
	.type	 LinkOpponentHandleFaintingCry,function
	.thumb_func
LinkOpponentHandleFaintingCry:
	push	{lr}
	ldr	r1, .L690
	ldr	r0, .L690+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L690+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	mov	r2, #0x5
	bl	PlayCry_ByMode
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L691:
	.align	2, 0
.L690:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gEnemyParty
.Lfe72:
	.size	 LinkOpponentHandleFaintingCry,.Lfe72-LinkOpponentHandleFaintingCry
	.align	2, 0
	.type	 LinkOpponentHandleIntroSlide,function
	.thumb_func
LinkOpponentHandleIntroSlide:
	push	{lr}
	ldr	r1, .L693
	ldr	r0, .L693+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	HandleIntroSlide
	ldr	r2, .L693+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L694:
	.align	2, 0
.L693:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe73:
	.size	 LinkOpponentHandleIntroSlide,.Lfe73-LinkOpponentHandleIntroSlide
	.align	2, 0
	.type	 LinkOpponentHandleIntroTrainerBallThrow,function
	.thumb_func
LinkOpponentHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, lr}
	ldr	r5, .L697
	ldr	r6, .L697+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L697+0x8
	add	r0, r0, r4
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L697+0xc
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L697+0x10
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L697+0x14
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L697+0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r6]
	strh	r0, [r1, #0x8]
	ldr	r3, .L697+0x1c
	ldr	r0, [r3]
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L696	@cond_branch
	ldr	r0, .L697+0x20
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L697+0x24
	str	r1, [r0]
.L696:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L697+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L697+0x2c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	StartAnimLinearTranslation
	.word	SpriteCB_FreeOpponentSprite
	.word	Task_StartSendOutAnim
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	LinkOpponentDummy
.Lfe74:
	.size	 LinkOpponentHandleIntroTrainerBallThrow,.Lfe74-LinkOpponentHandleIntroTrainerBallThrow
	.align	2, 0
	.type	 Task_StartSendOutAnim,function
	.thumb_func
Task_StartSendOutAnim:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r7, .L703
	ldrb	r0, [r7]
	mov	r9, r0
	ldr	r1, .L703+0x4
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L701	@cond_branch
	ldr	r0, .L703+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L700	@cond_branch
.L701:
	ldr	r0, .L703+0xc
	ldrb	r1, [r7]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L703+0x10
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	StartSendOutAnim
	b	.L702
.L704:
	.align	2, 0
.L703:
	.word	gActiveBattler
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
.L700:
	ldr	r4, .L705
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r4, r4, #0x1
	add	r1, r1, r4
	ldr	r6, .L705+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	StartSendOutAnim
	ldrb	r0, [r7]
	mov	r5, #0x2
	eor	r0, r0, r5
	strb	r0, [r7]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r1, r1, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	StartSendOutAnim
	ldrb	r0, [r7]
	eor	r0, r0, r5
	strb	r0, [r7]
.L702:
	ldr	r1, .L705+0x8
	ldr	r2, .L705+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L705+0x10
	str	r1, [r0]
	mov	r0, r9
	strb	r0, [r2]
	mov	r0, r8
	bl	DestroyTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	Intro_TryShinyAnimShowHealthbox
.Lfe75:
	.size	 Task_StartSendOutAnim,.Lfe75-Task_StartSendOutAnim
	.align	2, 0
	.type	 SpriteCB_FreeOpponentSprite,function
	.thumb_func
SpriteCB_FreeOpponentSprite:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x6]
	bl	FreeTrainerFrontPicPaletteAndTile
	ldrh	r0, [r4, #0x38]
	ldr	r1, .L708
	and	r1, r1, r0
	ldrh	r2, [r4, #0x4]
	ldr	r0, .L708+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L709:
	.align	2, 0
.L708:
	.word	0x3ff
	.word	-0x400
.Lfe76:
	.size	 SpriteCB_FreeOpponentSprite,.Lfe76-SpriteCB_FreeOpponentSprite
	.align	2, 0
	.type	 LinkOpponentHandleDrawPartyStatusSummary,function
	.thumb_func
LinkOpponentHandleDrawPartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L717
	ldr	r0, .L717+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L711	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L711	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L710
.L718:
	.align	2, 0
.L717:
	.word	gBattleBufferA
	.word	gActiveBattler
.L711:
	ldr	r4, .L719
	ldr	r0, [r4]
	ldr	r3, .L719+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L719+0x8
	ldrb	r2, [r3]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L713	@cond_branch
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r2, [r3, #0x1]
	lsl	r1, r2, #0x1a
	lsr	r0, r1, #0x1b
	cmp	r0, #0x1
	bhi	.L714	@cond_branch
	add	r0, r0, #0x1
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	b	.L710
.L720:
	.align	2, 0
.L719:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleBufferA
.L714:
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3, #0x1]
.L713:
	add	r5, r7, #0
	ldrb	r0, [r5]
	lsl	r3, r0, #0x9
	ldr	r4, .L721
	add	r1, r3, r4
	sub	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	sub	r4, r4, #0x2
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L721+0x4
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r6, .L721+0x8
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x5]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L716	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L716:
	ldr	r0, .L721+0xc
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L721+0x10
	str	r0, [r1]
.L710:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L722:
	.align	2, 0
.L721:
	.word	gBattleBufferA+0x4
	.word	gBattlerStatusSummaryTaskId
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	EndDrawPartyStatusSummary
.Lfe77:
	.size	 LinkOpponentHandleDrawPartyStatusSummary,.Lfe77-LinkOpponentHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 EndDrawPartyStatusSummary,function
	.thumb_func
EndDrawPartyStatusSummary:
	push	{r4, lr}
	ldr	r4, .L725
	ldr	r0, [r4]
	ldr	r3, .L725+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L724	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	bl	LinkOpponentBufferExecCompleted
.L724:
	pop	{r4}
	pop	{r0}
	bx	r0
.L726:
	.align	2, 0
.L725:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe78:
	.size	 EndDrawPartyStatusSummary,.Lfe78-EndDrawPartyStatusSummary
	.align	2, 0
	.type	 LinkOpponentHandleHidePartyStatusSummary,function
	.thumb_func
LinkOpponentHandleHidePartyStatusSummary:
	push	{lr}
	ldr	r0, .L729
	ldr	r1, [r0]
	ldr	r0, .L729+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L728	@cond_branch
	ldr	r2, .L729+0x8
	ldr	r0, .L729+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L729+0x10
	str	r1, [r0]
.L728:
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L730:
	.align	2, 0
.L729:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe79:
	.size	 LinkOpponentHandleHidePartyStatusSummary,.Lfe79-LinkOpponentHandleHidePartyStatusSummary
	.align	2, 0
	.type	 LinkOpponentHandleEndBounceEffect,function
	.thumb_func
LinkOpponentHandleEndBounceEffect:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 LinkOpponentHandleEndBounceEffect,.Lfe80-LinkOpponentHandleEndBounceEffect
	.align	2, 0
	.type	 LinkOpponentHandleSpriteInvisibility,function
	.thumb_func
LinkOpponentHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L734
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L733	@cond_branch
	ldr	r3, .L734+0x4
	ldr	r0, .L734+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L734+0xc
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r1, [r1]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CopyBattleSpriteInvisibility
.L733:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L735:
	.align	2, 0
.L734:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleBufferA
.Lfe81:
	.size	 LinkOpponentHandleSpriteInvisibility,.Lfe81-LinkOpponentHandleSpriteInvisibility
	.align	2, 0
	.type	 LinkOpponentHandleBattleAnimation,function
	.thumb_func
LinkOpponentHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L740
	ldrb	r0, [r6]
	bl	IsBattleSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L737	@cond_branch
	ldr	r5, .L740+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r5, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r5, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L738	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L737
.L741:
	.align	2, 0
.L740:
	.word	gActiveBattler
	.word	gBattleBufferA
.L738:
	ldr	r0, .L742
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L742+0x4
	str	r0, [r1]
.L737:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L743:
	.align	2, 0
.L742:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe82:
	.size	 LinkOpponentHandleBattleAnimation,.Lfe82-LinkOpponentHandleBattleAnimation
	.align	2, 0
	.type	 LinkOpponentHandleLinkStandbyMsg,function
	.thumb_func
LinkOpponentHandleLinkStandbyMsg:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 LinkOpponentHandleLinkStandbyMsg,.Lfe83-LinkOpponentHandleLinkStandbyMsg
	.align	2, 0
	.type	 LinkOpponentHandleResetActionMoveSelection,function
	.thumb_func
LinkOpponentHandleResetActionMoveSelection:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 LinkOpponentHandleResetActionMoveSelection,.Lfe84-LinkOpponentHandleResetActionMoveSelection
	.align	2, 0
	.type	 LinkOpponentHandleEndLinkBattle,function
	.thumb_func
LinkOpponentHandleEndLinkBattle:
	push	{lr}
	ldr	r1, .L749
	ldr	r0, .L749+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r2, [r0]
	cmp	r2, #0x3
	bne	.L747	@cond_branch
	ldr	r0, .L749+0x8
	strb	r2, [r0]
	b	.L748
.L750:
	.align	2, 0
.L749:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleOutcome
.L747:
	ldr	r0, .L751
	mov	r1, #0x3
	eor	r1, r1, r2
	strb	r1, [r0]
.L748:
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	LinkOpponentBufferExecCompleted
	ldr	r1, .L751+0x4
	ldr	r0, .L751+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L751+0xc
	str	r1, [r0]
	pop	{r0}
	bx	r0
.L752:
	.align	2, 0
.L751:
	.word	gBattleOutcome
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	SetBattleEndCallbacks
.Lfe85:
	.size	 LinkOpponentHandleEndLinkBattle,.Lfe85-LinkOpponentHandleEndLinkBattle
	.align	2, 0
	.type	 LinkOpponentCmdEnd,function
	.thumb_func
LinkOpponentCmdEnd:
	bx	lr
.Lfe86:
	.size	 LinkOpponentCmdEnd,.Lfe86-LinkOpponentCmdEnd
.text
	.align	2, 0 @ Don't pad with nop

