@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_20399C8,object
	.size	 gUnknown_20399C8,4
gUnknown_20399C8:
	.word	0x0
	.align	2, 0
	.type	 gUnknown_20399CC,object
	.size	 gUnknown_20399CC,4
gUnknown_20399CC:
	.word	0x0
	.type	 gUnknown_20399D0,object
	.size	 gUnknown_20399D0,1
gUnknown_20399D0:
	.byte	0x0
.text
	.align	2, 0
	.globl	DisplayMessageAndContinueTask
	.type	 DisplayMessageAndContinueTask,function
	.thumb_func
DisplayMessageAndContinueTask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r6, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r7, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L4
	strb	r6, [r0]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	DrawDialogFrameWithCustomTileAndPalette
	ldr	r4, .L4+0x4
	ldr	r0, [sp, #0x30]
	cmp	r0, r4
	beq	.L3	@cond_branch
	add	r0, r4, #0
	ldr	r1, [sp, #0x30]
	bl	StringExpandPlaceholders
.L3:
	ldr	r2, .L4+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	add	r0, r6, #0
	add	r1, r7, #0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	AddTextPrinterParameterized2
	ldr	r1, .L4+0xc
	ldr	r0, [sp, #0x34]
	str	r0, [r1]
	ldr	r1, .L4+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L4+0x14
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	gUnknown_20399D0
	.word	gStringVar4
	.word	gTextFlags
	.word	gUnknown_20399CC
	.word	gTasks
	.word	Task_ContinueTaskAfterMessagePrints
.Lfe1:
	.size	 DisplayMessageAndContinueTask,.Lfe1-DisplayMessageAndContinueTask
	.align	2, 0
	.globl	RunTextPrinters_CheckActive
	.type	 RunTextPrinters_CheckActive,function
	.thumb_func
RunTextPrinters_CheckActive:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	RunTextPrinters
	add	r0, r4, #0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 RunTextPrinters_CheckActive,.Lfe2-RunTextPrinters_CheckActive
	.align	2, 0
	.type	 Task_ContinueTaskAfterMessagePrints,function
	.thumb_func
Task_ContinueTaskAfterMessagePrints:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L9
	ldrb	r0, [r0]
	bl	RunTextPrinters_CheckActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L8	@cond_branch
	ldr	r0, .L9+0x4
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
.L8:
	pop	{r4}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	gUnknown_20399D0
	.word	gUnknown_20399CC
.Lfe3:
	.size	 Task_ContinueTaskAfterMessagePrints,.Lfe3-Task_ContinueTaskAfterMessagePrints
	.align	2, 0
	.type	 Task_CallYesOrNoCallback,function
	.thumb_func
Task_CallYesOrNoCallback:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Menu_ProcessInputNoWrapClearOnChoose
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L13	@cond_branch
	cmp	r1, #0
	bgt	.L18	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L15	@cond_branch
	b	.L12
.L18:
	cmp	r1, #0x1
	beq	.L15	@cond_branch
	b	.L12
.L13:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L20
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L20+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	b	.L19
.L21:
	.align	2, 0
.L20:
	.word	gTasks
	.word	gUnknown_20399C8
.L15:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L22
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L22+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
.L19:
	str	r1, [r0]
.L12:
	pop	{r4}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gTasks
	.word	gUnknown_20399C8
.Lfe4:
	.size	 Task_CallYesOrNoCallback,.Lfe4-Task_CallYesOrNoCallback
	.align	2, 0
	.globl	CreateYesNoMenuWithCallbacks
	.type	 CreateYesNoMenuWithCallbacks,function
	.thumb_func
CreateYesNoMenuWithCallbacks:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r6, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r2, r3, #0
	ldr	r3, [sp, #0x20]
	ldr	r4, [sp, #0x24]
	ldr	r5, [sp, #0x28]
	ldr	r7, [sp, #0x2c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	bl	CreateYesNoMenu
	ldr	r0, .L25
	str	r7, [r0]
	ldr	r1, .L25+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L25+0x8
	str	r1, [r0]
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gUnknown_20399C8
	.word	gTasks
	.word	Task_CallYesOrNoCallback
.Lfe5:
	.size	 CreateYesNoMenuWithCallbacks,.Lfe5-CreateYesNoMenuWithCallbacks
	.align	2, 0
	.globl	GetLRKeysState
	.type	 GetLRKeysState,function
	.thumb_func
GetLRKeysState:
	push	{lr}
	ldr	r0, .L32
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L28	@cond_branch
	ldr	r0, .L32+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L29	@cond_branch
	mov	r0, #0x1
	b	.L31
.L33:
	.align	2, 0
.L32:
	.word	gSaveBlock2Ptr
	.word	gMain
.L29:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L28	@cond_branch
	mov	r0, #0x2
	b	.L31
.L28:
	mov	r0, #0x0
.L31:
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 GetLRKeysState,.Lfe6-GetLRKeysState
	.align	2, 0
	.globl	GetLRKeysPressedAndHeld
	.type	 GetLRKeysPressedAndHeld,function
	.thumb_func
GetLRKeysPressedAndHeld:
	push	{lr}
	ldr	r0, .L39
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L35	@cond_branch
	ldr	r0, .L39+0x4
	ldrh	r1, [r0, #0x30]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L36	@cond_branch
	mov	r0, #0x1
	b	.L38
.L40:
	.align	2, 0
.L39:
	.word	gSaveBlock2Ptr
	.word	gMain
.L36:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L35	@cond_branch
	mov	r0, #0x2
	b	.L38
.L35:
	mov	r0, #0x0
.L38:
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 GetLRKeysPressedAndHeld,.Lfe7-GetLRKeysPressedAndHeld
	.align	2, 0
	.globl	itemid_link_can_give_berry
	.type	 itemid_link_can_give_berry,function
	.thumb_func
itemid_link_can_give_berry:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L46	@cond_branch
	ldr	r0, .L50
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L49	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L46	@cond_branch
.L49:
	mov	r0, #0x0
	b	.L48
.L51:
	.align	2, 0
.L50:
	.word	gSaveBlock1Ptr
.L46:
	mov	r0, #0x1
.L48:
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 itemid_link_can_give_berry,.Lfe8-itemid_link_can_give_berry
	.align	2, 0
	.globl	CanWriteMailHere
	.type	 CanWriteMailHere,function
	.thumb_func
CanWriteMailHere:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	beq	.L53	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L55	@cond_branch
.L53:
	add	r0, r4, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L55	@cond_branch
	mov	r0, #0x0
	b	.L57
.L55:
	mov	r0, #0x1
.L57:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 CanWriteMailHere,.Lfe9-CanWriteMailHere
	.align	2, 0
	.globl	MenuHelpers_LinkSomething
	.type	 MenuHelpers_LinkSomething,function
	.thumb_func
MenuHelpers_LinkSomething:
	push	{lr}
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	beq	.L60	@cond_branch
	ldr	r0, .L63
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L59	@cond_branch
.L60:
	mov	r0, #0x1
	b	.L62
.L64:
	.align	2, 0
.L63:
	.word	gReceivedRemoteLinkPlayers
.L59:
	mov	r0, #0x0
.L62:
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 MenuHelpers_LinkSomething,.Lfe10-MenuHelpers_LinkSomething
	.align	2, 0
	.globl	MenuHelpers_CallLinkSomething
	.type	 MenuHelpers_CallLinkSomething,function
	.thumb_func
MenuHelpers_CallLinkSomething:
	push	{lr}
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L66	@cond_branch
	bl	Overworld_LinkRecvQueueLengthMoreThan2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L68
.L66:
	mov	r0, #0x0
.L68:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 MenuHelpers_CallLinkSomething,.Lfe11-MenuHelpers_CallLinkSomething
	.align	2, 0
	.globl	sub_80BF748
	.type	 sub_80BF748,function
	.thumb_func
sub_80BF748:
	push	{lr}
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L75	@cond_branch
	bl	IsLinkRecvQueueAtOverworldMax
	cmp	r0, #0x1
	bne	.L72	@cond_branch
.L75:
	mov	r0, #0x1
	b	.L74
.L72:
	mov	r0, #0x0
.L74:
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 sub_80BF748,.Lfe12-sub_80BF748
	.align	2, 0
	.globl	SetVBlankHBlankCallbacksToNull
	.type	 SetVBlankHBlankCallbacksToNull,function
	.thumb_func
SetVBlankHBlankCallbacksToNull:
	push	{lr}
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 SetVBlankHBlankCallbacksToNull,.Lfe13-SetVBlankHBlankCallbacksToNull
	.align	2, 0
	.globl	ResetVramOamAndBgCntRegs
	.type	 ResetVramOamAndBgCntRegs,function
	.thumb_func
ResetVramOamAndBgCntRegs:
	push	{r4, lr}
	add	sp, sp, #-0xc
	bl	ResetAllBgsCoordinatesAndBgCntRegs
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L78
	mov	r0, sp
	bl	CpuSet
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	add	r0, sp, #0x4
	mov	r1, #0xe0
	lsl	r1, r1, #0x13
	ldr	r2, .L78+0x4
	bl	CpuSet
	add	r0, sp, #0x8
	strh	r4, [r0]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r2, .L78+0x8
	bl	CpuSet
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	0x100c000
	.word	0x5000100
	.word	0x1000200
.Lfe14:
	.size	 ResetVramOamAndBgCntRegs,.Lfe14-ResetVramOamAndBgCntRegs
	.align	2, 0
	.globl	ResetAllBgsCoordinatesAndBgCntRegs
	.type	 ResetAllBgsCoordinatesAndBgCntRegs,function
	.thumb_func
ResetAllBgsCoordinatesAndBgCntRegs:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xe
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xc
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0xa
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 ResetAllBgsCoordinatesAndBgCntRegs,.Lfe15-ResetAllBgsCoordinatesAndBgCntRegs
	.align	2, 0
	.globl	AdjustQuantityAccordingToDPadInput
	.type	 AdjustQuantityAccordingToDPadInput,function
	.thumb_func
AdjustQuantityAccordingToDPadInput:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r5, r1, #0
	ldrh	r4, [r2]
	add	r6, r4, #0
	ldr	r0, .L104
	ldrh	r0, [r0, #0x30]
	mov	r3, #0xf0
	and	r3, r3, r0
	cmp	r3, #0x40
	bne	.L82	@cond_branch
	add	r0, r4, #0x1
	strh	r0, [r2]
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	cmp	r0, r1
	ble	.L83	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L83:
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
.L102:
	lsl	r0, r4, #0x10
	b	.L103
.L105:
	.align	2, 0
.L104:
	.word	gMain
.L82:
	cmp	r3, #0x80
	bne	.L87	@cond_branch
	sub	r0, r4, #0x1
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L88	@cond_branch
	strh	r1, [r2]
.L88:
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	b	.L102
.L87:
	cmp	r3, #0x10
	bne	.L92	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0xa
	strh	r0, [r2]
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, r5
	ble	.L93	@cond_branch
	strh	r5, [r2]
.L93:
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	b	.L102
.L92:
	cmp	r3, #0x20
	bne	.L86	@cond_branch
	add	r0, r4, #0
	sub	r0, r0, #0xa
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L98	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L98:
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r0, r6, #0x10
.L103:
	asr	r0, r0, #0x10
	cmp	r1, r0
	beq	.L86	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	b	.L101
.L86:
	mov	r0, #0x0
.L101:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 AdjustQuantityAccordingToDPadInput,.Lfe16-AdjustQuantityAccordingToDPadInput
	.align	2, 0
	.globl	GetDialogBoxFontId
	.type	 GetDialogBoxFontId,function
	.thumb_func
GetDialogBoxFontId:
	push	{lr}
	bl	ContextNpcGetTextColor
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L107	@cond_branch
	mov	r0, #0x5
	b	.L109
.L107:
	mov	r0, #0x4
.L109:
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 GetDialogBoxFontId,.Lfe17-GetDialogBoxFontId
.text
	.align	2, 0 @ Don't pad with nop

