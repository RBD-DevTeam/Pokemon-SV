@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gWindows
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gWindows,object
	.size	 gWindows,384
gWindows:
	.byte	0x0
	.space	7
	.space	4
	.space	372
	.section .rodata
	.align	2, 0
	.type	 sDummyWindowTemplate,object
	.size	 sDummyWindowTemplate,8
sDummyWindowTemplate:
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
.text
	.align	2, 0
	.type	 nullsub_8,function
	.thumb_func
nullsub_8:
	bx	lr
.Lfe1:
	.size	 nullsub_8,.Lfe1-nullsub_8
	.align	2, 0
	.globl	InitWindows
	.type	 InitWindows,function
	.thumb_func
InitWindows:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	mov	r0, #0x0
	mov	r8, r0
	ldr	r4, .L38
.L7:
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	GetBgTilemapBuffer
	cmp	r0, #0
	beq	.L8	@cond_branch
	ldr	r0, .L38+0x4
.L8:
	str	r0, [r4]
	add	r4, r4, #0x4
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L7	@cond_branch
	ldr	r0, .L38+0x8
	ldr	r2, [r0]		@ created by thumb_load_double_from_address
	ldr	r3, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r1, .L38+0xc
	mov	r0, #0x0
	mov	r4, #0x1f
	mov	r8, r4
.L14:
	str	r2, [r1]
	str	r3, [r1, #0x4]
	str	r0, [r1, #0x8]
	add	r1, r1, #0xc
	mov	r4, #0x1
	neg	r4, r4
	add	r8, r8, r4
	mov	r4, r8
	cmp	r4, #0
	bge	.L14	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, #0x0
	str	r1, [sp]
	ldrb	r7, [r5]
	cmp	r7, #0xff
	bne	.LCB77
	b	.L17	@long jump
.LCB77:
	add	r6, r5, #0
	mov	r2, #0x0
	str	r2, [sp, #0x4]
.L19:
	ldr	r0, .L38+0x10
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L21	@cond_branch
	ldrb	r1, [r6, #0x3]
	ldrb	r0, [r6, #0x4]
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r3, #0x0
	bl	BgTileAllocOp
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	ldr	r4, [sp]
	cmp	r4, r0
	bne	.L21	@cond_branch
.L37:
	mov	r0, #0x0
	b	.L35
.L39:
	.align	2, 0
.L38:
	.word	gWindowBgTilemapBuffers
	.word	nullsub_8
	.word	sDummyWindowTemplate
	.word	gWindows
	.word	gWindowTileAutoAllocEnabled
.L21:
	ldr	r0, .L40
	mov	r9, r0
	lsl	r0, r7, #0x2
	mov	r2, r9
	add	r1, r0, r2
	ldr	r1, [r1]
	mov	sl, r0
	cmp	r1, #0
	bne	.L23	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x8
	bl	GetBgAttribute
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L40+0x4
	cmp	r5, r0
	beq	.L23	@cond_branch
	add	r0, r5, #0
	bl	Alloc
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L25	@cond_branch
	bl	FreeAllWindowBuffers
	b	.L37
.L41:
	.align	2, 0
.L40:
	.word	gWindowBgTilemapBuffers
	.word	0xffff
.L25:
	mov	r1, #0x0
	mov	r3, r9
	cmp	r1, r5
	bge	.L27	@cond_branch
	mov	r2, #0x0
.L29:
	add	r0, r4, r1
	strb	r2, [r0]
	add	r1, r1, #0x1
	cmp	r1, r5
	blt	.L29	@cond_branch
.L27:
	mov	r1, sl
	add	r0, r1, r3
	str	r4, [r0]
	add	r0, r7, #0
	add	r1, r4, #0
	bl	SetBgTilemapBuffer
.L23:
	ldrb	r1, [r6, #0x3]
	ldrb	r0, [r6, #0x4]
	mul	r0, r0, r1
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	bl	Alloc
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L31	@cond_branch
	add	r0, r7, #0
	bl	GetNumActiveWindowsOnBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L37	@cond_branch
	ldr	r0, .L42
	mov	r2, sl
	add	r5, r2, r0
	ldr	r1, [r5]
	ldr	r0, .L42+0x4
	cmp	r1, r0
	beq	.L37	@cond_branch
	add	r0, r1, #0
	bl	Free
	str	r4, [r5]
	b	.L37
.L43:
	.align	2, 0
.L42:
	.word	gWindowBgTilemapBuffers
	.word	nullsub_8
.L31:
	ldr	r1, .L44
	add	r0, r1, #0
	add	r0, r0, #0x8
	ldr	r2, [sp, #0x4]
	add	r0, r2, r0
	str	r4, [r0]
	add	r2, r2, r1
	ldr	r0, [r6]		@ created by thumb_load_double_from_address
	ldr	r1, [r6, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	ldr	r0, .L44+0x4
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L18	@cond_branch
	mov	r4, sp
	ldrh	r4, [r4]
	strh	r4, [r2, #0x6]
	ldrb	r0, [r6, #0x3]
	ldrb	r1, [r6, #0x4]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r7, #0
	ldr	r1, [sp]
	mov	r3, #0x1
	bl	BgTileAllocOp
.L18:
	add	r6, r6, #0x8
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0xc
	str	r0, [sp, #0x4]
	mov	r1, #0x1
	add	r8, r8, r1
	ldrb	r7, [r6]
	cmp	r7, #0xff
	beq	.L17	@cond_branch
	mov	r2, r8
	cmp	r2, #0x1f
	bgt	.LCB271
	b	.L19	@long jump
.LCB271:
.L17:
	ldr	r1, .L44+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x1
.L35:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L45:
	.align	2, 0
.L44:
	.word	gWindows
	.word	gWindowTileAutoAllocEnabled
	.word	gWindowClearTile
.Lfe2:
	.size	 InitWindows,.Lfe2-InitWindows
	.align	2, 0
	.globl	AddWindow
	.type	 AddWindow,function
	.thumb_func
AddWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r0
	mov	r6, #0x0
	ldr	r1, .L69
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L48	@cond_branch
.L49:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x1f
	bhi	.L48	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L49	@cond_branch
.L48:
	cmp	r6, #0x20
	beq	.L65	@cond_branch
	mov	r0, r8
	ldrb	r7, [r0]
	mov	r1, #0x0
	mov	r9, r1
	ldr	r0, .L69+0x4
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L54	@cond_branch
	mov	r2, r8
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r3, #0x0
	bl	BgTileAllocOp
	mov	r9, r0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r9, r0
	beq	.L65	@cond_branch
.L54:
	ldr	r3, .L69+0x8
	mov	sl, r3
	lsl	r0, r7, #0x2
	add	r1, r0, r3
	ldr	r1, [r1]
	str	r0, [sp]
	cmp	r1, #0
	bne	.L56	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x8
	bl	GetBgAttribute
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L69+0xc
	cmp	r5, r0
	beq	.L56	@cond_branch
	add	r0, r5, #0
	bl	Alloc
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L65	@cond_branch
	mov	r1, #0x0
	mov	r3, sl
	cmp	r1, r5
	bge	.L60	@cond_branch
	mov	r2, #0x0
.L62:
	add	r0, r4, r1
	strb	r2, [r0]
	add	r1, r1, #0x1
	cmp	r1, r5
	blt	.L62	@cond_branch
.L60:
	ldr	r1, [sp]
	add	r0, r1, r3
	str	r4, [r0]
	add	r0, r7, #0
	add	r1, r4, #0
	bl	SetBgTilemapBuffer
.L56:
	mov	r2, r8
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	mul	r0, r0, r1
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	bl	Alloc
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L64	@cond_branch
	add	r0, r7, #0
	bl	GetNumActiveWindowsOnBg
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldr	r0, .L69+0x8
	ldr	r3, [sp]
	add	r5, r3, r0
	ldr	r1, [r5]
	ldr	r0, .L69+0x10
	cmp	r1, r0
	beq	.L65	@cond_branch
	add	r0, r1, #0
	bl	Free
	str	r4, [r5]
.L65:
	mov	r0, #0xff
	b	.L67
.L70:
	.align	2, 0
.L69:
	.word	gWindows
	.word	gWindowTileAutoAllocEnabled
	.word	gWindowBgTilemapBuffers
	.word	0xffff
	.word	nullsub_8
.L64:
	ldr	r2, .L71
	lsl	r1, r6, #0x1
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	str	r4, [r0]
	add	r2, r1, r2
	mov	r3, r8
	ldr	r0, [r3]		@ created by thumb_load_double_from_address
	ldr	r1, [r3, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	ldr	r0, .L71+0x4
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L66	@cond_branch
	mov	r0, r9
	strh	r0, [r2, #0x6]
	ldrb	r0, [r2, #0x3]
	ldrb	r1, [r2, #0x4]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r7, #0
	mov	r1, r9
	mov	r3, #0x1
	bl	BgTileAllocOp
.L66:
	add	r0, r6, #0
.L67:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L72:
	.align	2, 0
.L71:
	.word	gWindows
	.word	gWindowTileAutoAllocEnabled
.Lfe3:
	.size	 AddWindow,.Lfe3-AddWindow
	.align	2, 0
	.globl	RemoveWindow
	.type	 RemoveWindow,function
	.thumb_func
RemoveWindow:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L78
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r3, [r4]
	add	r7, r3, #0
	ldr	r0, .L78+0x4
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L74	@cond_branch
	ldrh	r1, [r4, #0x6]
	ldrb	r2, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	mul	r2, r2, r0
	add	r0, r3, #0
	mov	r3, #0x2
	bl	BgTileAllocOp
.L74:
	ldr	r0, .L78+0x8
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r4]
	str	r1, [r4, #0x4]
	add	r0, r7, #0
	bl	GetNumActiveWindowsOnBg
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L75	@cond_branch
	ldr	r0, .L78+0xc
	lsl	r1, r7, #0x2
	add	r4, r1, r0
	ldr	r1, [r4]
	ldr	r0, .L78+0x10
	cmp	r1, r0
	beq	.L75	@cond_branch
	add	r0, r1, #0
	bl	Free
	str	r5, [r4]
.L75:
	ldr	r1, .L78
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r1, #0x8
	add	r4, r0, r1
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L77	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L77:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gWindows
	.word	gWindowTileAutoAllocEnabled
	.word	sDummyWindowTemplate
	.word	gWindowBgTilemapBuffers
	.word	nullsub_8
.Lfe4:
	.size	 RemoveWindow,.Lfe4-RemoveWindow
	.align	2, 0
	.globl	FreeAllWindowBuffers
	.type	 FreeAllWindowBuffers,function
	.thumb_func
FreeAllWindowBuffers:
	push	{r4, r5, r6, lr}
	ldr	r4, .L93
	mov	r5, #0x3
.L84:
	ldr	r1, [r4]
	cmp	r1, #0
	beq	.L83	@cond_branch
	ldr	r0, .L93+0x4
	cmp	r1, r0
	beq	.L83	@cond_branch
	add	r0, r1, #0
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L83:
	add	r4, r4, #0x4
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L84	@cond_branch
	ldr	r0, .L93+0x8
	add	r4, r0, #0
	add	r4, r4, #0x8
	mov	r6, #0x0
	mov	r5, #0x1f
.L90:
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L89	@cond_branch
	bl	Free
	str	r6, [r4]
.L89:
	add	r4, r4, #0xc
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L90	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gWindowBgTilemapBuffers
	.word	nullsub_8
	.word	gWindows
.Lfe5:
	.size	 FreeAllWindowBuffers,.Lfe5-FreeAllWindowBuffers
	.align	2, 0
	.globl	CopyWindowToVram
	.type	 CopyWindowToVram,function
	.thumb_func
CopyWindowToVram:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	add	r5, r3, #0
	ldr	r2, .L103
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, sp
	add	r1, r1, r2
	ldmia	r1!, {r2, r4, r6}
	stmia	r0!, {r2, r4, r6}
	mov	r0, sp
	ldrb	r1, [r0, #0x3]
	ldrb	r0, [r0, #0x4]
	mul	r0, r0, r1
	lsl	r0, r0, #0x15
	lsr	r4, r0, #0x10
	cmp	r3, #0x2
	beq	.L98	@cond_branch
	cmp	r3, #0x2
	bgt	.L102	@cond_branch
	cmp	r3, #0x1
	beq	.L97	@cond_branch
	b	.L96
.L104:
	.align	2, 0
.L103:
	.word	gWindows
.L102:
	cmp	r5, #0x3
	beq	.L99	@cond_branch
	b	.L96
.L97:
	mov	r0, sp
	ldrb	r0, [r0]
	bl	CopyBgTilemapBufferToVram
	b	.L96
.L98:
	mov	r0, sp
	ldrb	r0, [r0]
	ldr	r1, [sp, #0x8]
	mov	r2, sp
	ldrh	r3, [r2, #0x6]
	add	r2, r4, #0
	bl	LoadBgTiles
	b	.L96
.L99:
	mov	r0, sp
	ldrb	r0, [r0]
	ldr	r1, [sp, #0x8]
	mov	r2, sp
	ldrh	r3, [r2, #0x6]
	add	r2, r4, #0
	bl	LoadBgTiles
	mov	r0, sp
	ldrb	r0, [r0]
	bl	CopyBgTilemapBufferToVram
.L96:
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CopyWindowToVram,.Lfe6-CopyWindowToVram
	.align	2, 0
	.globl	PutWindowTilemap
	.type	 PutWindowTilemap,function
	.thumb_func
PutWindowTilemap:
	push	{r4, lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L106
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r0, sp, #0x10
	add	r1, r1, r2
	ldmia	r1!, {r2, r3, r4}
	stmia	r0!, {r2, r3, r4}
	add	r0, sp, #0x10
	ldrb	r0, [r0]
	mov	r1, #0xa
	bl	GetBgAttribute
	add	r1, r0, #0
	add	r0, sp, #0x10
	ldrh	r0, [r0, #0x6]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, sp, #0x10
	ldrb	r0, [r0]
	add	r2, sp, #0x10
	ldrb	r2, [r2, #0x1]
	add	r3, sp, #0x10
	ldrb	r3, [r3, #0x2]
	add	r4, sp, #0x10
	ldrb	r4, [r4, #0x3]
	str	r4, [sp]
	add	r4, sp, #0x10
	ldrb	r4, [r4, #0x4]
	str	r4, [sp, #0x4]
	add	r4, sp, #0x10
	ldrb	r4, [r4, #0x5]
	str	r4, [sp, #0x8]
	mov	r4, #0x1
	str	r4, [sp, #0xc]
	bl	WriteSequenceToBgTilemapBuffer
	add	sp, sp, #0x1c
	pop	{r4}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gWindows
.Lfe7:
	.size	 PutWindowTilemap,.Lfe7-PutWindowTilemap
	.align	2, 0
	.globl	PutWindowRectTilemapOverridePalette
	.type	 PutWindowRectTilemapOverridePalette,function
	.thumb_func
PutWindowRectTilemapOverridePalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	ldr	r4, [sp, #0x44]
	ldr	r5, [sp, #0x48]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x1c]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x20]
	ldr	r2, .L114
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r0, sp, #0x10
	add	r1, r1, r2
	ldmia	r1!, {r2, r3, r4}
	stmia	r0!, {r2, r3, r4}
	add	r0, sp, #0x10
	ldrb	r0, [r0]
	mov	r1, #0xa
	bl	GetBgAttribute
	add	r2, sp, #0x10
	add	r1, r2, #0
	ldrb	r1, [r1, #0x3]
	mov	r3, r9
	mul	r3, r3, r1
	add	r1, r3, #0
	ldrh	r2, [r2, #0x6]
	add	r1, r1, r2
	add	r1, r1, sl
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r5, #0x0
	cmp	r5, r8
	bge	.L110	@cond_branch
	add	r4, sp, #0x10
	mov	r7, #0x1
.L112:
	ldrb	r0, [r4]
	ldrb	r2, [r4, #0x1]
	add	r2, r2, sl
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r4, #0x2]
	add	r3, r3, r9
	add	r3, r3, r5
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, [sp, #0x1c]
	str	r1, [sp]
	str	r7, [sp, #0x4]
	ldr	r1, [sp, #0x20]
	str	r1, [sp, #0x8]
	str	r7, [sp, #0xc]
	add	r1, r6, #0
	bl	WriteSequenceToBgTilemapBuffer
	ldrb	r0, [r4, #0x3]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r5, r5, #0x1
	cmp	r5, r8
	blt	.L112	@cond_branch
.L110:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L115:
	.align	2, 0
.L114:
	.word	gWindows
.Lfe8:
	.size	 PutWindowRectTilemapOverridePalette,.Lfe8-PutWindowRectTilemapOverridePalette
	.align	2, 0
	.globl	ClearWindowTilemap
	.type	 ClearWindowTilemap,function
	.thumb_func
ClearWindowTilemap:
	push	{r4, lr}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L117
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r0, sp, #0xc
	add	r1, r1, r2
	ldmia	r1!, {r2, r3, r4}
	stmia	r0!, {r2, r3, r4}
	add	r0, sp, #0xc
	ldrb	r0, [r0]
	ldr	r1, .L117+0x4
	ldrb	r1, [r1]
	add	r2, sp, #0xc
	ldrb	r2, [r2, #0x1]
	add	r3, sp, #0xc
	ldrb	r3, [r3, #0x2]
	add	r4, sp, #0xc
	ldrb	r4, [r4, #0x3]
	str	r4, [sp]
	add	r4, sp, #0xc
	ldrb	r4, [r4, #0x4]
	str	r4, [sp, #0x4]
	add	r4, sp, #0xc
	ldrb	r4, [r4, #0x5]
	str	r4, [sp, #0x8]
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0x18
	pop	{r4}
	pop	{r0}
	bx	r0
.L118:
	.align	2, 0
.L117:
	.word	gWindows
	.word	gWindowClearTile
.Lfe9:
	.size	 ClearWindowTilemap,.Lfe9-ClearWindowTilemap
	.align	2, 0
	.globl	PutWindowRectTilemap
	.type	 PutWindowRectTilemap,function
	.thumb_func
PutWindowRectTilemap:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r4, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x1c]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	ldr	r2, .L125
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r0, sp, #0x10
	add	r1, r1, r2
	ldmia	r1!, {r2, r3, r4}
	stmia	r0!, {r2, r3, r4}
	add	r0, sp, #0x10
	ldrb	r0, [r0]
	mov	r1, #0xa
	bl	GetBgAttribute
	add	r2, sp, #0x10
	add	r1, r2, #0
	ldrb	r1, [r1, #0x3]
	mov	r3, r9
	mul	r3, r3, r1
	add	r1, r3, #0
	ldrh	r2, [r2, #0x6]
	add	r1, r1, r2
	add	r1, r1, sl
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r5, #0x0
	cmp	r5, r8
	bge	.L121	@cond_branch
	add	r4, sp, #0x10
	mov	r7, #0x1
.L123:
	ldrb	r0, [r4]
	ldrb	r2, [r4, #0x1]
	add	r2, r2, sl
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r4, #0x2]
	add	r3, r3, r9
	add	r3, r3, r5
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r1, [sp, #0x1c]
	str	r1, [sp]
	str	r7, [sp, #0x4]
	ldrb	r1, [r4, #0x5]
	str	r1, [sp, #0x8]
	str	r7, [sp, #0xc]
	add	r1, r6, #0
	bl	WriteSequenceToBgTilemapBuffer
	ldrb	r0, [r4, #0x3]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r5, r5, #0x1
	cmp	r5, r8
	blt	.L123	@cond_branch
.L121:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gWindows
.Lfe10:
	.size	 PutWindowRectTilemap,.Lfe10-PutWindowRectTilemap
	.align	2, 0
	.globl	BlitBitmapToWindow
	.type	 BlitBitmapToWindow,function
	.thumb_func
BlitBitmapToWindow:
	push	{r4, r5, lr}
	add	sp, sp, #-0x18
	ldr	r4, [sp, #0x24]
	ldr	r5, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r2, [sp, #0x8]
	str	r3, [sp, #0xc]
	str	r4, [sp, #0x10]
	str	r5, [sp, #0x14]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	BlitBitmapRectToWindow
	add	sp, sp, #0x18
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 BlitBitmapToWindow,.Lfe11-BlitBitmapToWindow
	.align	2, 0
	.globl	BlitBitmapRectToWindow
	.type	 BlitBitmapRectToWindow,function
	.thumb_func
BlitBitmapRectToWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	ldr	r4, [sp, #0x44]
	ldr	r5, [sp, #0x48]
	ldr	r6, [sp, #0x4c]
	mov	r8, r6
	ldr	r6, [sp, #0x50]
	mov	r9, r6
	ldr	r6, [sp, #0x54]
	mov	sl, r6
	ldr	r6, [sp, #0x58]
	mov	ip, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r4, r4, #0x10
	mov	r6, r8
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r8, r6
	mov	r6, r9
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r9, r6
	mov	r6, sl
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	sl, r6
	mov	r6, ip
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	ip, r6
	str	r1, [sp, #0x14]
	ldr	r7, .L129
	lsl	r5, r5, #0x10
	ldr	r6, .L129+0x4
	lsr	r4, r4, #0x10
	orr	r4, r4, r5
	str	r4, [sp, #0x18]
	ldr	r1, .L129+0x8
	lsl	r5, r0, #0x1
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	add	r0, r1, #0
	add	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r0, [r0]
	str	r0, [sp, #0x1c]
	add	r5, r5, r1
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x3
	add	r1, sp, #0x1c
	ldr	r4, [r1, #0x4]
	and	r4, r4, r7
	orr	r4, r4, r0
	str	r4, [r1, #0x4]
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x13
	and	r6, r6, r4
	orr	r6, r6, r0
	str	r6, [r1, #0x4]
	mov	r0, r8
	str	r0, [sp]
	mov	r6, r9
	str	r6, [sp, #0x4]
	mov	r0, sl
	str	r0, [sp, #0x8]
	mov	r6, ip
	str	r6, [sp, #0xc]
	mov	r0, #0x0
	str	r0, [sp, #0x10]
	add	r0, sp, #0x14
	bl	BlitBitmapRect4Bit
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	-0x10000
	.word	0xffff
	.word	gWindows
.Lfe12:
	.size	 BlitBitmapRectToWindow,.Lfe12-BlitBitmapRectToWindow
	.align	2, 0
	.globl	BlitBitmapRectToWindowWithColorKey
	.type	 BlitBitmapRectToWindowWithColorKey,function
	.thumb_func
BlitBitmapRectToWindowWithColorKey:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	ldr	r4, [sp, #0x48]
	ldr	r5, [sp, #0x4c]
	ldr	r6, [sp, #0x50]
	mov	r8, r6
	ldr	r7, [sp, #0x54]
	mov	r9, r7
	ldr	r6, [sp, #0x58]
	mov	sl, r6
	ldr	r7, [sp, #0x5c]
	mov	ip, r7
	ldr	r6, [sp, #0x60]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r4, r4, #0x10
	mov	r7, r8
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	mov	r8, r7
	mov	r7, r9
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	mov	r9, r7
	mov	r7, sl
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	mov	sl, r7
	mov	r7, ip
	lsl	r7, r7, #0x10
	lsr	r7, r7, #0x10
	mov	ip, r7
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x24]
	str	r1, [sp, #0x14]
	lsl	r5, r5, #0x10
	ldr	r6, .L132
	lsr	r4, r4, #0x10
	orr	r4, r4, r5
	str	r4, [sp, #0x18]
	ldr	r1, .L132+0x4
	lsl	r5, r0, #0x1
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	add	r0, r1, #0
	add	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r0, [r0]
	str	r0, [sp, #0x1c]
	add	r5, r5, r1
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x3
	add	r1, sp, #0x1c
	ldr	r4, [r1, #0x4]
	ldr	r7, .L132+0x8
	and	r4, r4, r7
	orr	r4, r4, r0
	str	r4, [r1, #0x4]
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x13
	and	r6, r6, r4
	orr	r6, r6, r0
	str	r6, [r1, #0x4]
	mov	r0, r8
	str	r0, [sp]
	mov	r6, r9
	str	r6, [sp, #0x4]
	mov	r7, sl
	str	r7, [sp, #0x8]
	mov	r0, ip
	str	r0, [sp, #0xc]
	ldr	r6, [sp, #0x24]
	str	r6, [sp, #0x10]
	add	r0, sp, #0x14
	bl	BlitBitmapRect4Bit
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	0xffff
	.word	gWindows
	.word	-0x10000
.Lfe13:
	.size	 BlitBitmapRectToWindowWithColorKey,.Lfe13-BlitBitmapRectToWindowWithColorKey
	.align	2, 0
	.globl	FillWindowPixelRect
	.type	 FillWindowPixelRect,function
	.thumb_func
FillWindowPixelRect:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	mov	r9, r3
	ldr	r3, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	mov	r8, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r4, r9
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r9, r4
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r4, r8
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r8, r4
	ldr	r5, .L135
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r4, r0
	ldr	r0, [r0]
	str	r0, [sp, #0x8]
	add	r4, r4, r5
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x3
	ldr	r6, .L135+0x4
	ldr	r5, [sp, #0xc]
	and	r5, r5, r6
	orr	r5, r5, r0
	str	r5, [sp, #0xc]
	ldrb	r4, [r4, #0x4]
	lsl	r4, r4, #0x13
	ldr	r0, .L135+0x8
	and	r0, r0, r5
	orr	r0, r0, r4
	str	r0, [sp, #0xc]
	mov	r0, r8
	str	r0, [sp]
	str	r1, [sp, #0x4]
	add	r0, sp, #0x8
	add	r1, r2, #0
	mov	r2, r9
	bl	FillBitmapRect4Bit
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	gWindows
	.word	-0x10000
	.word	0xffff
.Lfe14:
	.size	 FillWindowPixelRect,.Lfe14-FillWindowPixelRect
	.align	2, 0
	.globl	CopyToWindowPixelBuffer
	.type	 CopyToWindowPixelBuffer,function
	.thumb_func
CopyToWindowPixelBuffer:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r5, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r2, r3, #0x10
	cmp	r5, #0
	beq	.L138	@cond_branch
	ldr	r1, .L140
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r1, #0x8
	add	r0, r0, r1
	lsl	r2, r2, #0x5
	ldr	r1, [r0]
	add	r1, r1, r2
	lsr	r2, r5, #0x11
	add	r0, r6, #0
	bl	CpuSet
	b	.L139
.L141:
	.align	2, 0
.L140:
	.word	gWindows
.L138:
	ldr	r1, .L142
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r1, #0x8
	add	r0, r0, r1
	lsl	r2, r2, #0x5
	ldr	r1, [r0]
	add	r1, r1, r2
	add	r0, r6, #0
	bl	LZ77UnCompWram
.L139:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gWindows
.Lfe15:
	.size	 CopyToWindowPixelBuffer,.Lfe15-CopyToWindowPixelBuffer
	.align	2, 0
	.globl	FillWindowPixelBuffer
	.type	 FillWindowPixelBuffer,function
	.thumb_func
FillWindowPixelBuffer:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r5, .L145
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r0, r4, r5
	ldrb	r2, [r0, #0x3]
	ldrb	r0, [r0, #0x4]
	mul	r2, r2, r0
	lsl	r0, r1, #0x18
	lsl	r3, r1, #0x10
	orr	r0, r0, r3
	lsl	r3, r1, #0x8
	orr	r0, r0, r3
	orr	r0, r0, r1
	str	r0, [sp]
	add	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r1, [r4]
	lsl	r2, r2, #0x3
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	orr	r2, r2, r0
	mov	r0, sp
	bl	CpuFastSet
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L146:
	.align	2, 0
.L145:
	.word	gWindows
.Lfe16:
	.size	 FillWindowPixelBuffer,.Lfe16-FillWindowPixelBuffer
	.align	2, 0
	.globl	ScrollWindow
	.type	 ScrollWindow,function
	.thumb_func
ScrollWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r2, .L197
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r4, r1, r2
	add	r2, r2, #0x8
	add	r1, r1, r2
	ldr	r5, [r1]
	lsl	r7, r3, #0x18
	lsl	r0, r3, #0x10
	orr	r7, r7, r0
	lsl	r0, r3, #0x8
	orr	r7, r7, r0
	orr	r7, r7, r3
	ldr	r1, [r4]		@ created by thumb_load_double_from_address
	ldr	r2, [r4, #0x4]		@ created by thumb_load_double_from_address
	ldrb	r3, [r4, #0x4]
	lsr	r0, r1, #0x18
	mul	r0, r0, r3
	lsl	r6, r0, #0x5
	lsr	r1, r1, #0x18
	mov	ip, r1
	mov	r0, r8
	cmp	r0, #0x1
	bne	.LCB1637
	b	.L171	@long jump
.LCB1637:
	cmp	r0, #0x1
	ble	.LCB1639
	b	.L148	@long jump
.LCB1639:
	cmp	r0, #0
	beq	.LCB1641
	b	.L148	@long jump
.LCB1641:
	mov	r4, #0x0
	cmp	r4, r6
	blt	.LCB1646
	b	.L148	@long jump
.LCB1646:
	mov	r1, #0x8
	neg	r1, r1
	mov	r9, r1
	mov	r2, #0x7
	mov	r8, r2
	mov	sl, r5
.L153:
	ldr	r3, [sp]
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	add	r0, r3, #0
	mov	r2, r8
	and	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L154	@cond_branch
	add	r0, r5, r1
	ldr	r0, [r0]
	mov	r1, sl
	str	r0, [r1]
	b	.L155
.L198:
	.align	2, 0
.L197:
	.word	gWindows
.L154:
	mov	r2, sl
	str	r7, [r2]
.L155:
	add	r3, r3, #0x1
	add	r2, r4, #0x4
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L156	@cond_branch
	add	r0, r5, r2
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L157
.L156:
	add	r0, r5, r2
	str	r7, [r0]
.L157:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x8
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L158	@cond_branch
	add	r0, r5, r2
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L159
.L158:
	add	r0, r5, r2
	str	r7, [r0]
.L159:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0xc
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L160	@cond_branch
	add	r0, r5, r2
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L161
.L160:
	add	r0, r5, r2
	str	r7, [r0]
.L161:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x10
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L162	@cond_branch
	add	r0, r5, r2
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L163
.L162:
	add	r0, r5, r2
	str	r7, [r0]
.L163:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x14
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L164	@cond_branch
	add	r0, r5, r2
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L165
.L164:
	add	r0, r5, r2
	str	r7, [r0]
.L165:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x18
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L166	@cond_branch
	add	r0, r5, r2
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L167
.L166:
	add	r0, r5, r2
	str	r7, [r0]
.L167:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x1c
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	add	r0, r1, #0
	mov	r1, r8
	and	r3, r3, r1
	orr	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	cmp	r1, r6
	bge	.L168	@cond_branch
	add	r0, r5, r2
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L169
.L168:
	add	r0, r5, r2
	str	r7, [r0]
.L169:
	mov	r2, #0x20
	add	sl, sl, r2
	add	r4, r4, #0x20
	cmp	r4, r6
	bge	.LCB1893
	b	.L153	@long jump
.LCB1893:
	b	.L148
.L171:
	sub	r0, r6, #0x4
	add	r5, r5, r0
	mov	r4, #0x0
	cmp	r4, r6
	blt	.LCB1902
	b	.L148	@long jump
.LCB1902:
	mov	r0, #0x8
	neg	r0, r0
	mov	r9, r0
	mov	r1, #0x7
	mov	r8, r1
	mov	sl, r5
.L175:
	ldr	r3, [sp]
	add	r0, r3, #0
	mov	r2, r9
	and	r0, r0, r2
	mov	r1, ip
	mul	r1, r1, r0
	add	r0, r3, #0
	mov	r2, r8
	and	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L176	@cond_branch
	sub	r0, r5, r1
	ldr	r0, [r0]
	mov	r1, sl
	str	r0, [r1]
	b	.L177
.L176:
	mov	r2, sl
	str	r7, [r2]
.L177:
	add	r3, r3, #0x1
	add	r2, r4, #0x4
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L178	@cond_branch
	sub	r0, r5, r2
	sub	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L179
.L178:
	sub	r0, r5, r2
	str	r7, [r0]
.L179:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x8
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L180	@cond_branch
	sub	r0, r5, r2
	sub	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L181
.L180:
	sub	r0, r5, r2
	str	r7, [r0]
.L181:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0xc
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L182	@cond_branch
	sub	r0, r5, r2
	sub	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L183
.L182:
	sub	r0, r5, r2
	str	r7, [r0]
.L183:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x10
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L184	@cond_branch
	sub	r0, r5, r2
	sub	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L185
.L184:
	sub	r0, r5, r2
	str	r7, [r0]
.L185:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x14
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L186	@cond_branch
	sub	r0, r5, r2
	sub	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L187
.L186:
	sub	r0, r5, r2
	str	r7, [r0]
.L187:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x18
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	str	r1, [sp, #0x4]
	add	r0, r3, #0
	mov	r1, r8
	and	r0, r0, r1
	ldr	r1, [sp, #0x4]
	orr	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r4, r1
	cmp	r1, r6
	bge	.L188	@cond_branch
	sub	r0, r5, r2
	sub	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L189
.L188:
	sub	r0, r5, r2
	str	r7, [r0]
.L189:
	add	r3, r3, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x1c
	add	r0, r3, #0
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, ip
	mul	r1, r1, r0
	add	r0, r1, #0
	mov	r1, r8
	and	r3, r3, r1
	orr	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	cmp	r1, r6
	bge	.L190	@cond_branch
	sub	r0, r5, r2
	sub	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r0]
	b	.L191
.L190:
	sub	r0, r5, r2
	str	r7, [r0]
.L191:
	mov	r2, #0x20
	neg	r2, r2
	add	sl, sl, r2
	add	r4, r4, #0x20
	cmp	r4, r6
	bge	.LCB2144
	b	.L175	@long jump
.LCB2144:
.L148:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 ScrollWindow,.Lfe17-ScrollWindow
	.align	2, 0
	.globl	CallWindowFunction
	.type	 CallWindowFunction,function
	.thumb_func
CallWindowFunction:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x8
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L200
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r5, [r1]		@ created by thumb_load_double_from_address
	ldr	r6, [r1, #0x4]		@ created by thumb_load_double_from_address
	ldrb	r0, [r1]
	lsr	r1, r5, #0x8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsr	r2, r5, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsr	r3, r5, #0x18
	lsl	r4, r6, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	lsr	r4, r6, #0x8
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x4]
	bl	_call_via_r8
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L201:
	.align	2, 0
.L200:
	.word	gWindows
.Lfe18:
	.size	 CallWindowFunction,.Lfe18-CallWindowFunction
	.align	2, 0
	.globl	SetWindowAttribute
	.type	 SetWindowAttribute,function
	.thumb_func
SetWindowAttribute:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	cmp	r0, #0x7
	bhi	.L212	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L215
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L216:
	.align	2, 0
.L215:
	.word	.L213
	.align	2, 0
	.align	2, 0
.L213:
	.word	.L212
	.word	.L204
	.word	.L205
	.word	.L212
	.word	.L212
	.word	.L206
	.word	.L207
	.word	.L212
.L204:
	ldr	r1, .L217
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r2, [r0, #0x1]
	mov	r0, #0x0
	b	.L214
.L218:
	.align	2, 0
.L217:
	.word	gWindows
.L205:
	ldr	r1, .L219
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r2, [r0, #0x2]
	mov	r0, #0x0
	b	.L214
.L220:
	.align	2, 0
.L219:
	.word	gWindows
.L206:
	ldr	r1, .L221
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r2, [r0, #0x5]
	mov	r0, #0x0
	b	.L214
.L222:
	.align	2, 0
.L221:
	.word	gWindows
.L207:
	ldr	r1, .L223
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r2, [r0, #0x6]
	mov	r0, #0x0
	b	.L214
.L224:
	.align	2, 0
.L223:
	.word	gWindows
.L212:
	mov	r0, #0x1
.L214:
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 SetWindowAttribute,.Lfe19-SetWindowAttribute
	.align	2, 0
	.globl	GetWindowAttribute
	.type	 GetWindowAttribute,function
	.thumb_func
GetWindowAttribute:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	cmp	r0, #0x7
	bhi	.L235	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L238
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L239:
	.align	2, 0
.L238:
	.word	.L236
	.align	2, 0
	.align	2, 0
.L236:
	.word	.L227
	.word	.L228
	.word	.L229
	.word	.L230
	.word	.L231
	.word	.L232
	.word	.L233
	.word	.L234
.L227:
	ldr	r0, .L240
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	b	.L237
.L241:
	.align	2, 0
.L240:
	.word	gWindows
.L228:
	ldr	r0, .L242
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L237
.L243:
	.align	2, 0
.L242:
	.word	gWindows
.L229:
	ldr	r0, .L244
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	b	.L237
.L245:
	.align	2, 0
.L244:
	.word	gWindows
.L230:
	ldr	r0, .L246
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x3]
	b	.L237
.L247:
	.align	2, 0
.L246:
	.word	gWindows
.L231:
	ldr	r0, .L248
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	b	.L237
.L249:
	.align	2, 0
.L248:
	.word	gWindows
.L232:
	ldr	r0, .L250
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x5]
	b	.L237
.L251:
	.align	2, 0
.L250:
	.word	gWindows
.L233:
	ldr	r0, .L252
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x6]
	b	.L237
.L253:
	.align	2, 0
.L252:
	.word	gWindows
.L234:
	ldr	r0, .L254
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, #0x8
	add	r1, r1, r0
	ldr	r0, [r1]
	b	.L237
.L255:
	.align	2, 0
.L254:
	.word	gWindows
.L235:
	mov	r0, #0x0
.L237:
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 GetWindowAttribute,.Lfe20-GetWindowAttribute
	.align	2, 0
	.type	 GetNumActiveWindowsOnBg,function
	.thumb_func
GetNumActiveWindowsOnBg:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r3, #0x0
	ldr	r2, .L263
	mov	r1, #0x1f
.L260:
	ldrb	r0, [r2]
	cmp	r0, r4
	bne	.L259	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L259:
	add	r2, r2, #0xc
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L260	@cond_branch
	add	r0, r3, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L264:
	.align	2, 0
.L263:
	.word	gWindows
.Lfe21:
	.size	 GetNumActiveWindowsOnBg,.Lfe21-GetNumActiveWindowsOnBg
	.comm	gWindowBgTilemapBuffers, 16	@ 16
	.comm	gWindowClearTile, 4	@ 1
.text
	.align	2, 0 @ Don't pad with nop

