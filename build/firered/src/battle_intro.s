@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	1, 0
	.type	 sBgCnt,object
	.size	 sBgCnt,2
sBgCnt:
	.short	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattleIntroSlideFuncs,object
sBattleIntroSlideFuncs:
	.word	BattleIntroSlide1
	.word	BattleIntroSlide1
	.word	BattleIntroSlide2
	.word	BattleIntroSlide2
	.word	BattleIntroSlide2
	.word	BattleIntroSlide1
	.word	BattleIntroSlide1
	.word	BattleIntroSlide1
	.word	BattleIntroSlide3
	.word	BattleIntroSlide3
	.size	 sBattleIntroSlideFuncs,40
.text
	.align	2, 0
	.globl	SetAnimBgAttribute
	.type	 SetAnimBgAttribute,function
	.thumb_func
SetAnimBgAttribute:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r6, #0x3
	bls	.LCB16
	b	.L3	@long jump
.LCB16:
	ldr	r0, .L16
	add	r0, r6, r0
	ldrb	r0, [r0]
	bl	GetGpuReg
	ldr	r1, .L16+0x4
	strh	r0, [r1]
	cmp	r5, #0x6
	bhi	.L4	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L16+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L17:
	.align	2, 0
.L16:
	.word	gBattleAnimRegOffsBgCnt
	.word	sBgCnt
	.word	.L12
	.align	2, 0
	.align	2, 0
.L12:
	.word	.L5
	.word	.L6
	.word	.L7
	.word	.L8
	.word	.L9
	.word	.L10
	.word	.L11
.L5:
	ldr	r2, .L18
	lsl	r3, r4, #0x6
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2, #0x1]
	b	.L4
.L19:
	.align	2, 0
.L18:
	.word	sBgCnt
.L6:
	ldr	r3, .L20
	mov	r0, #0x1
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x5
	ldrb	r2, [r3, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	b	.L14
.L21:
	.align	2, 0
.L20:
	.word	sBgCnt
.L7:
	ldr	r3, .L22
	mov	r0, #0x1
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldrb	r2, [r3]
	mov	r0, #0x41
	neg	r0, r0
	b	.L15
.L23:
	.align	2, 0
.L22:
	.word	sBgCnt
.L8:
	ldr	r3, .L24
	mov	r0, #0x3
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0xd
	neg	r0, r0
	b	.L15
.L25:
	.align	2, 0
.L24:
	.word	sBgCnt
.L9:
	ldr	r3, .L26
	mov	r0, #0x3
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x4
	neg	r0, r0
.L15:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L4
.L27:
	.align	2, 0
.L26:
	.word	sBgCnt
.L10:
	ldr	r2, .L28
	lsl	r3, r4, #0x7
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
	b	.L4
.L29:
	.align	2, 0
.L28:
	.word	sBgCnt
.L11:
	ldr	r3, .L30
	mov	r0, #0x1f
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r2, [r3, #0x1]
	mov	r0, #0x20
	neg	r0, r0
.L14:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x1]
.L4:
	ldr	r0, .L30+0x4
	add	r0, r6, r0
	ldrb	r0, [r0]
	ldr	r1, .L30
	ldrh	r1, [r1]
	bl	SetGpuReg
.L3:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	sBgCnt
	.word	gBattleAnimRegOffsBgCnt
.Lfe1:
	.size	 SetAnimBgAttribute,.Lfe1-SetAnimBgAttribute
	.align	2, 0
	.globl	GetAnimBgAttribute
	.type	 GetAnimBgAttribute,function
	.thumb_func
GetAnimBgAttribute:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	cmp	r2, #0x3
	bhi	.L33	@cond_branch
	ldr	r0, .L45
	add	r0, r2, r0
	ldrb	r0, [r0]
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	cmp	r4, #0x6
	bhi	.L33	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L45+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L46:
	.align	2, 0
.L45:
	.word	gBattleIntroRegOffsBgCnt
	.word	.L42
	.align	2, 0
	.align	2, 0
.L42:
	.word	.L35
	.word	.L36
	.word	.L37
	.word	.L38
	.word	.L39
	.word	.L40
	.word	.L41
.L35:
	ldr	r0, [sp]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x1e
	b	.L44
.L36:
	ldr	r0, [sp]
	lsl	r0, r0, #0x12
	lsr	r0, r0, #0x1f
	b	.L44
.L37:
	ldr	r0, [sp]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1f
	b	.L44
.L38:
	ldr	r0, [sp]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	b	.L44
.L39:
	ldr	r0, [sp]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	b	.L44
.L40:
	ldr	r0, [sp]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x1f
	b	.L44
.L41:
	ldr	r0, [sp]
	lsl	r0, r0, #0x13
	lsr	r0, r0, #0x1b
	b	.L44
.L33:
	mov	r0, #0x0
.L44:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 GetAnimBgAttribute,.Lfe2-GetAnimBgAttribute
	.align	2, 0
	.globl	HandleIntroSlide
	.type	 HandleIntroSlide,function
	.thumb_func
HandleIntroSlide:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L53
	ldr	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L48	@cond_branch
	ldr	r0, .L53+0x4
	b	.L52
.L54:
	.align	2, 0
.L53:
	.word	gBattleTypeFlags
	.word	BattleIntroSlideLink
.L48:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L50	@cond_branch
	ldr	r0, .L55
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L50	@cond_branch
	mov	r4, #0x3
	ldr	r0, .L55+0x4
	b	.L52
.L56:
	.align	2, 0
.L55:
	.word	gGameVersion
	.word	BattleIntroSlide2
.L50:
	ldr	r1, .L57
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
.L52:
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L57+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	strh	r4, [r1, #0xa]
	strh	r0, [r1, #0xc]
	strh	r0, [r1, #0xe]
	strh	r0, [r1, #0x10]
	strh	r0, [r1, #0x12]
	strh	r0, [r1, #0x14]
	pop	{r4}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	sBattleIntroSlideFuncs
	.word	gTasks
.Lfe3:
	.size	 HandleIntroSlide,.Lfe3-HandleIntroSlide
	.align	2, 0
	.globl	BattleIntroSlideEnd
	.type	 BattleIntroSlideEnd,function
	.thumb_func
BattleIntroSlideEnd:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	ldr	r0, .L60
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L60+0x4
	strh	r1, [r0]
	ldr	r0, .L60+0x8
	strh	r1, [r0]
	ldr	r0, .L60+0xc
	strh	r1, [r0]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r4, .L60+0x10
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	0x3f3f
.Lfe4:
	.size	 BattleIntroSlideEnd,.Lfe4-BattleIntroSlideEnd
	.align	2, 0
	.type	 BattleIntroSlide1,function
	.thumb_func
BattleIntroSlide1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L96
	ldrh	r0, [r1]
	add	r0, r0, #0x6
	strh	r0, [r1]
	ldr	r1, .L96+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	mov	r8, r1
	cmp	r0, #0x4
	bls	.LCB473
	b	.L63	@long jump
.LCB473:
	lsl	r0, r0, #0x2
	ldr	r1, .L96+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L97:
	.align	2, 0
.L96:
	.word	gBattle_BG1_X
	.word	gTasks
	.word	.L91
	.align	2, 0
	.align	2, 0
.L91:
	.word	.L64
	.word	.L67
	.word	.L69
	.word	.L71
	.word	.L90
.L64:
	ldr	r0, .L98
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L65	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	mov	r1, #0x10
	b	.L94
.L99:
	.align	2, 0
.L98:
	.word	gBattleTypeFlags
.L65:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	mov	r1, #0x1
.L94:
	strh	r1, [r0, #0xc]
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L63
.L67:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	mov	r3, r8
	add	r1, r0, r3
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB543
	b	.L63	@long jump
.LCB543:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	b	.L63
.L69:
	ldr	r1, .L100
	ldrh	r0, [r1]
	sub	r0, r0, #0xff
	strh	r0, [r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x6
	cmp	r0, r1
	beq	.LCB569
	b	.L63	@long jump
.LCB569:
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0xf0
	strh	r0, [r1, #0xc]
	mov	r0, #0x20
	strh	r0, [r1, #0xe]
	ldr	r2, .L100+0x4
	ldrh	r1, [r2]
	ldr	r0, .L100+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	b	.L63
.L101:
	.align	2, 0
.L100:
	.word	gBattle_WIN0V
	.word	gIntroSlideFlags
	.word	0xfffe
.L71:
	lsl	r0, r4, #0x2
	add	r1, r0, r4
	lsl	r1, r1, #0x3
	mov	r5, r8
	add	r2, r1, r5
	ldrh	r3, [r2, #0xe]
	mov	r5, #0xe
	ldrsh	r1, [r2, r5]
	mov	ip, r0
	cmp	r1, #0
	beq	.L72	@cond_branch
	sub	r0, r3, #0x1
	strh	r0, [r2, #0xe]
	b	.L73
.L72:
	mov	r1, #0xa
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	bne	.L74	@cond_branch
	ldr	r2, .L102
	ldrh	r1, [r2]
	ldr	r0, .L102+0x4
	cmp	r1, r0
	beq	.L73	@cond_branch
	sub	r0, r1, #0x2
	b	.L95
.L103:
	.align	2, 0
.L102:
	.word	gBattle_BG1_Y
	.word	0xffb0
.L74:
	ldr	r2, .L104
	ldrh	r1, [r2]
	ldr	r0, .L104+0x4
	cmp	r1, r0
	beq	.L73	@cond_branch
	sub	r0, r1, #0x1
.L95:
	strh	r0, [r2]
.L73:
	ldr	r2, .L104+0x8
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L78	@cond_branch
	ldr	r3, .L104+0xc
	add	r0, r1, r3
	strh	r0, [r2]
.L78:
	mov	r5, ip
	add	r0, r5, r4
	lsl	r0, r0, #0x3
	mov	r2, r8
	add	r1, r0, r2
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L79	@cond_branch
	sub	r0, r2, #0x2
	strh	r0, [r1, #0xc]
.L79:
	mov	r3, #0x0
	ldr	r5, .L104+0x10
	mov	r9, r5
	ldr	r7, .L104+0x14
	mov	r6, r9
	add	r5, r1, #0
.L83:
	lsl	r2, r3, #0x1
	ldrb	r1, [r6, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	ldrh	r0, [r5, #0xc]
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x4f
	ble	.L83	@cond_branch
	cmp	r3, #0x9f
	bgt	.L93	@cond_branch
	ldr	r7, .L104+0x14
	ldr	r6, .L104+0x10
	ldr	r1, .L104+0x18
	mov	r2, ip
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r5, r0, r1
.L87:
	lsl	r2, r3, #0x1
	ldrb	r1, [r6, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	ldrh	r0, [r5, #0xc]
	neg	r0, r0
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x9f
	ble	.L87	@cond_branch
.L93:
	mov	r3, ip
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	mov	r5, r8
	add	r1, r0, r5
	mov	r0, #0xc
	ldrsh	r2, [r1, r0]
	cmp	r2, #0
	bne	.L63	@cond_branch
	mov	r0, #0x3
	mov	r3, r9
	strb	r0, [r3, #0x15]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	str	r2, [sp]
	ldr	r1, .L104+0x1c
	ldr	r2, .L104+0x20
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r1, #0x9c
	lsl	r1, r1, #0x8
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r1, #0xbc
	lsl	r1, r1, #0x7
	mov	r0, #0xc
	bl	SetGpuReg
	b	.L63
.L105:
	.align	2, 0
.L104:
	.word	gBattle_BG1_Y
	.word	0xffc8
	.word	gBattle_WIN0V
	.word	-0x3fc
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	gTasks
	.word	0x600e000
	.word	0x5000200
.L90:
	add	r0, r4, #0
	bl	BattleIntroSlideEnd
.L63:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 BattleIntroSlide1,.Lfe5-BattleIntroSlide1
	.align	2, 0
	.type	 BattleIntroSlide2,function
	.thumb_func
BattleIntroSlide2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L152
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x3
	beq	.L110	@cond_branch
	cmp	r0, #0x3
	bgt	.L113	@cond_branch
	cmp	r0, #0x2
	beq	.L109	@cond_branch
	b	.L107
.L153:
	.align	2, 0
.L152:
	.word	gTasks
.L113:
	cmp	r0, #0x4
	bne	.L107	@cond_branch
.L109:
	ldr	r1, .L154
	ldrh	r0, [r1]
	add	r0, r0, #0x8
	b	.L149
.L155:
	.align	2, 0
.L154:
	.word	gBattle_BG1_X
.L110:
	ldr	r1, .L156
	ldrh	r0, [r1]
	add	r0, r0, #0x6
.L149:
	strh	r0, [r1]
.L107:
	lsl	r0, r5, #0x2
	add	r1, r0, r5
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	mov	r3, #0xa
	ldrsh	r1, [r4, r3]
	add	r6, r0, #0
	cmp	r1, #0x4
	bne	.L114	@cond_branch
	ldr	r7, .L156+0x4
	ldrh	r0, [r4, #0x14]
	bl	Cos2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L115	@cond_branch
	ldr	r1, .L156+0x8
	add	r0, r0, r1
.L115:
	asr	r0, r0, #0x9
	sub	r0, r0, #0x8
	strh	r0, [r7]
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xb3
	bgt	.L116	@cond_branch
	add	r0, r1, #0x4
	b	.L150
.L157:
	.align	2, 0
.L156:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	0x1ff
.L116:
	add	r0, r1, #0x6
.L150:
	strh	r0, [r4, #0x14]
	ldr	r2, .L158
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	mov	r0, #0x14
	ldrsh	r1, [r3, r0]
	mov	r0, #0xb4
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L114	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x14]
.L114:
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x4
	bls	.LCB951
	b	.L119	@long jump
.LCB951:
	lsl	r0, r0, #0x2
	ldr	r1, .L158+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L159:
	.align	2, 0
.L158:
	.word	gTasks
	.word	.L145
	.align	2, 0
	.align	2, 0
.L145:
	.word	.L120
	.word	.L123
	.word	.L125
	.word	.L127
	.word	.L144
.L120:
	ldr	r1, .L160
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r3, #0x10
	strh	r3, [r2, #0x10]
	ldr	r0, .L160+0x4
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L121	@cond_branch
	strh	r3, [r2, #0xc]
	b	.L151
.L161:
	.align	2, 0
.L160:
	.word	gTasks
	.word	gBattleTypeFlags
.L121:
	mov	r0, #0x1
	strh	r0, [r2, #0xc]
.L151:
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L119
.L123:
	ldr	r0, .L162
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1017
	b	.L119	@long jump
.LCB1017:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	b	.L119
.L163:
	.align	2, 0
.L162:
	.word	gTasks
.L125:
	ldr	r1, .L164
	ldrh	r0, [r1]
	sub	r0, r0, #0xff
	strh	r0, [r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x6
	cmp	r0, r1
	beq	.LCB1049
	b	.L119	@long jump
.LCB1049:
	ldr	r0, .L164+0x4
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0xf0
	strh	r0, [r1, #0xc]
	mov	r0, #0x20
	strh	r0, [r1, #0xe]
	mov	r0, #0x1
	strh	r0, [r1, #0x12]
	ldr	r2, .L164+0x8
	ldrh	r1, [r2]
	ldr	r0, .L164+0xc
	and	r0, r0, r1
	strh	r0, [r2]
	b	.L119
.L165:
	.align	2, 0
.L164:
	.word	gBattle_WIN0V
	.word	gTasks
	.word	gIntroSlideFlags
	.word	0xfffe
.L127:
	ldr	r0, .L166
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L128	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L130	@cond_branch
	ldr	r1, .L166+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0xf
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	b	.L130
.L167:
	.align	2, 0
.L166:
	.word	gTasks
	.word	0x1842
.L128:
	ldrh	r2, [r1, #0x10]
	mov	r0, #0x1f
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L130	@cond_branch
	ldrh	r0, [r1, #0x12]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L130	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xff
	strh	r0, [r1, #0x10]
	mov	r0, #0x4
	strh	r0, [r1, #0x12]
.L130:
	ldr	r2, .L168
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L132	@cond_branch
	ldr	r3, .L168+0x4
	add	r0, r1, r3
	strh	r0, [r2]
.L132:
	ldr	r0, .L168+0x8
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L133	@cond_branch
	sub	r0, r2, #0x2
	strh	r0, [r1, #0xc]
.L133:
	mov	r3, #0x0
	ldr	r0, .L168+0xc
	mov	r8, r0
	ldr	r2, .L168+0x10
	mov	ip, r2
	mov	r7, r8
	add	r4, r1, #0
.L137:
	lsl	r2, r3, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, ip
	ldrh	r0, [r4, #0xc]
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x4f
	ble	.L137	@cond_branch
	cmp	r3, #0x9f
	bgt	.L148	@cond_branch
	ldr	r0, .L168+0x10
	mov	ip, r0
	ldr	r7, .L168+0xc
	ldr	r1, .L168+0x8
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
.L141:
	lsl	r2, r3, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, ip
	ldrh	r0, [r4, #0xc]
	neg	r0, r0
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x9f
	ble	.L141	@cond_branch
.L148:
	ldr	r1, .L168+0x8
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r3, #0xc
	ldrsh	r2, [r1, r3]
	cmp	r2, #0
	bne	.L119	@cond_branch
	mov	r0, #0x3
	mov	r3, r8
	strb	r0, [r3, #0x15]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	str	r2, [sp]
	ldr	r1, .L168+0x14
	ldr	r2, .L168+0x18
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r1, #0x9c
	lsl	r1, r1, #0x8
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r1, #0xbc
	lsl	r1, r1, #0x7
	mov	r0, #0xc
	bl	SetGpuReg
	b	.L119
.L169:
	.align	2, 0
.L168:
	.word	gBattle_WIN0V
	.word	-0x3fc
	.word	gTasks
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	0x600e000
	.word	0x5000200
.L144:
	add	r0, r5, #0
	bl	BattleIntroSlideEnd
.L119:
	ldr	r0, .L170
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x4
	beq	.L147	@cond_branch
	ldrh	r1, [r1, #0x10]
	mov	r0, #0x52
	bl	SetGpuReg
.L147:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	gTasks
.Lfe6:
	.size	 BattleIntroSlide2,.Lfe6-BattleIntroSlide2
	.align	2, 0
	.type	 BattleIntroSlide3,function
	.thumb_func
BattleIntroSlide3:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L203
	ldrh	r0, [r1]
	add	r0, r0, #0x8
	strh	r0, [r1]
	ldr	r1, .L203+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r4, r1, #0
	cmp	r0, #0x4
	bls	.LCB1345
	b	.L173	@long jump
.LCB1345:
	lsl	r0, r0, #0x2
	ldr	r1, .L203+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L204:
	.align	2, 0
.L203:
	.word	gBattle_BG1_X
	.word	gTasks
	.word	.L198
	.align	2, 0
	.align	2, 0
.L198:
	.word	.L174
	.word	.L177
	.word	.L179
	.word	.L181
	.word	.L197
.L174:
	ldr	r1, .L205
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r4, .L205+0x4
	mov	r0, #0x52
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L205+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	strh	r4, [r2, #0x10]
	ldr	r0, .L205+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L175	@cond_branch
	mov	r0, #0x10
	b	.L202
.L206:
	.align	2, 0
.L205:
	.word	0x1842
	.word	0x808
	.word	gTasks
	.word	gBattleTypeFlags
.L175:
	mov	r0, #0x1
.L202:
	strh	r0, [r2, #0xc]
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L173
.L177:
	ldr	r0, .L207
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1424
	b	.L173	@long jump
.LCB1424:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	b	.L173
.L208:
	.align	2, 0
.L207:
	.word	gTasks
.L179:
	ldr	r1, .L209
	ldrh	r0, [r1]
	sub	r0, r0, #0xff
	strh	r0, [r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x6
	cmp	r0, r1
	beq	.LCB1456
	b	.L173	@long jump
.LCB1456:
	ldr	r0, .L209+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0xf0
	strh	r0, [r1, #0xc]
	mov	r0, #0x20
	strh	r0, [r1, #0xe]
	mov	r0, #0x1
	strh	r0, [r1, #0x12]
	ldr	r2, .L209+0x8
	ldrh	r1, [r2]
	ldr	r0, .L209+0xc
	and	r0, r0, r1
	strh	r0, [r2]
	b	.L173
.L210:
	.align	2, 0
.L209:
	.word	gBattle_WIN0V
	.word	gTasks
	.word	gIntroSlideFlags
	.word	0xfffe
.L181:
	lsl	r0, r5, #0x2
	add	r1, r0, r5
	lsl	r1, r1, #0x3
	add	r2, r1, r4
	ldrh	r3, [r2, #0xe]
	mov	r6, #0xe
	ldrsh	r1, [r2, r6]
	mov	ip, r0
	cmp	r1, #0
	beq	.L182	@cond_branch
	sub	r0, r3, #0x1
	strh	r0, [r2, #0xe]
	b	.L183
.L182:
	ldrh	r1, [r2, #0x10]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
	ldrh	r0, [r2, #0x12]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x12]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L183	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0xff
	strh	r0, [r2, #0x10]
	mov	r0, #0x6
	strh	r0, [r2, #0x12]
.L183:
	ldr	r2, .L211
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L185	@cond_branch
	ldr	r3, .L211+0x4
	add	r0, r1, r3
	strh	r0, [r2]
.L185:
	mov	r6, ip
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L186	@cond_branch
	sub	r0, r2, #0x2
	strh	r0, [r1, #0xc]
.L186:
	mov	r3, #0x0
	ldr	r6, .L211+0x8
	mov	r8, r6
	ldr	r7, .L211+0xc
	add	r4, r1, #0
.L190:
	lsl	r2, r3, #0x1
	ldrb	r1, [r6, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	ldrh	r0, [r4, #0xc]
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x4f
	ble	.L190	@cond_branch
	cmp	r3, #0x9f
	bgt	.L201	@cond_branch
	ldr	r7, .L211+0xc
	ldr	r6, .L211+0x8
	ldr	r1, .L211+0x10
	mov	r2, ip
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
.L194:
	lsl	r2, r3, #0x1
	ldrb	r1, [r6, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	ldrh	r0, [r4, #0xc]
	neg	r0, r0
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x9f
	ble	.L194	@cond_branch
.L201:
	ldr	r1, .L211+0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r3, #0xc
	ldrsh	r2, [r1, r3]
	cmp	r2, #0
	bne	.L173	@cond_branch
	mov	r0, #0x3
	mov	r6, r8
	strb	r0, [r6, #0x15]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	str	r2, [sp]
	ldr	r1, .L211+0x14
	ldr	r2, .L211+0x18
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r1, #0x9c
	lsl	r1, r1, #0x8
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r1, #0xbc
	lsl	r1, r1, #0x7
	mov	r0, #0xc
	bl	SetGpuReg
	b	.L173
.L212:
	.align	2, 0
.L211:
	.word	gBattle_WIN0V
	.word	-0x3fc
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	gTasks
	.word	0x600e000
	.word	0x5000200
.L197:
	add	r0, r5, #0
	bl	BattleIntroSlideEnd
.L173:
	ldr	r0, .L213
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x4
	beq	.L200	@cond_branch
	ldrh	r1, [r1, #0x10]
	mov	r0, #0x52
	bl	SetGpuReg
.L200:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	gTasks
.Lfe7:
	.size	 BattleIntroSlide3,.Lfe7-BattleIntroSlide3
	.align	2, 0
	.type	 BattleIntroSlideLink,function
	.thumb_func
BattleIntroSlideLink:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L243
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r7, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x1
	ble	.L216	@cond_branch
	mov	r2, #0x10
	ldrsh	r0, [r7, r2]
	cmp	r0, #0
	bne	.L216	@cond_branch
	ldr	r2, .L243+0x4
	ldrh	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0
	bne	.L218	@cond_branch
	cmp	r1, #0x4f
	bhi	.L217	@cond_branch
.L218:
	add	r0, r1, #0x3
	strh	r0, [r2]
	ldr	r1, .L243+0x8
	ldrh	r0, [r1]
	sub	r0, r0, #0x3
	strh	r0, [r1]
	b	.L216
.L244:
	.align	2, 0
.L243:
	.word	gTasks
	.word	gBattle_BG1_X
	.word	gBattle_BG2_X
.L217:
	str	r5, [sp]
	ldr	r1, .L245
	ldr	r4, .L245+0x4
	mov	r0, sp
	add	r2, r4, #0
	bl	CpuSet
	str	r5, [sp, #0x4]
	add	r0, sp, #0x4
	ldr	r1, .L245+0x8
	add	r2, r4, #0
	bl	CpuSet
	mov	r0, #0x1
	strh	r0, [r7, #0x10]
.L216:
	ldr	r0, .L245+0xc
	lsl	r2, r6, #0x2
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x8
	ldrsh	r1, [r1, r3]
	mov	r9, r0
	add	r5, r2, #0
	cmp	r1, #0x4
	bls	.LCB1799
	b	.L220	@long jump
.LCB1799:
	lsl	r0, r1, #0x2
	ldr	r1, .L245+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L246:
	.align	2, 0
.L245:
	.word	0x600e000
	.word	0x5000200
	.word	0x600f000
	.word	gTasks
	.word	.L240
	.align	2, 0
	.align	2, 0
.L240:
	.word	.L221
	.word	.L222
	.word	.L224
	.word	.L226
	.word	.L239
.L221:
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	mov	r1, #0x20
	strh	r1, [r0, #0xc]
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L220
.L222:
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	mov	r2, r9
	add	r1, r0, r2
	ldrh	r0, [r1, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1847
	b	.L220	@long jump
.LCB1847:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	ldr	r4, .L247
	ldr	r5, .L247+0x4
	ldr	r0, [r5]
	add	r0, r0, #0x7d
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r3, [r1, #0x1]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	mov	r3, #0x8
	mov	r9, r3
	mov	r3, r9
	orr	r0, r0, r3
	strb	r0, [r1, #0x1]
	ldr	r3, [r5]
	add	r0, r3, #0
	add	r0, r0, #0x7d
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0x1c
	add	r1, r1, r4
	mov	r8, r1
	add	r0, r0, r8
	ldr	r6, .L247+0x8
	str	r6, [r0]
	add	r3, r3, #0x7e
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	and	r2, r2, r1
	mov	r3, r9
	orr	r2, r2, r3
	strb	r2, [r0, #0x1]
	ldr	r0, [r5]
	add	r0, r0, #0x7e
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	str	r6, [r0]
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	ldr	r1, .L247+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	b	.L220
.L248:
	.align	2, 0
.L247:
	.word	gSprites
	.word	gBattleStruct
	.word	SpriteCB_VsLetterInit
	.word	0x3f06
.L224:
	ldr	r1, .L249
	ldrh	r0, [r1]
	sub	r0, r0, #0xff
	strh	r0, [r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x6
	cmp	r0, r1
	beq	.LCB1939
	b	.L220	@long jump
.LCB1939:
	add	r1, r5, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r9
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0xf0
	strh	r0, [r1, #0xc]
	mov	r0, #0x20
	strh	r0, [r1, #0xe]
	ldr	r2, .L249+0x4
	ldrh	r1, [r2]
	ldr	r0, .L249+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	b	.L220
.L250:
	.align	2, 0
.L249:
	.word	gBattle_WIN0V
	.word	gIntroSlideFlags
	.word	0xfffe
.L226:
	ldr	r2, .L251
	ldrh	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L227	@cond_branch
	ldr	r3, .L251+0x4
	add	r0, r1, r3
	strh	r0, [r2]
.L227:
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	mov	r2, r9
	add	r1, r0, r2
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L228	@cond_branch
	sub	r0, r2, #0x2
	strh	r0, [r1, #0xc]
.L228:
	mov	r3, #0x0
	ldr	r0, .L251+0x8
	mov	ip, r0
	ldr	r2, .L251+0xc
	mov	r8, r2
	mov	r7, ip
	add	r4, r1, #0
.L232:
	lsl	r2, r3, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r8
	ldrh	r0, [r4, #0xc]
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x4f
	ble	.L232	@cond_branch
	cmp	r3, #0x9f
	bgt	.L242	@cond_branch
	ldr	r0, .L251+0xc
	mov	r8, r0
	ldr	r7, .L251+0x8
	ldr	r1, .L251+0x10
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
.L236:
	lsl	r2, r3, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r8
	ldrh	r0, [r4, #0xc]
	neg	r0, r0
	strh	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x9f
	ble	.L236	@cond_branch
.L242:
	add	r0, r5, r6
	lsl	r0, r0, #0x3
	mov	r2, r9
	add	r1, r0, r2
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L220	@cond_branch
	mov	r0, #0x3
	mov	r2, ip
	strb	r0, [r2, #0x15]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r1, #0x9c
	lsl	r1, r1, #0x8
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r1, #0xbc
	lsl	r1, r1, #0x7
	mov	r0, #0xc
	bl	SetGpuReg
	b	.L220
.L252:
	.align	2, 0
.L251:
	.word	gBattle_WIN0V
	.word	-0x3fc
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	gTasks
.L239:
	add	r0, r6, #0
	bl	BattleIntroSlideEnd
.L220:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 BattleIntroSlideLink,.Lfe8-BattleIntroSlideLink
	.align	2, 0
	.globl	CopyBattlerSpriteToBg
	.type	 CopyBattlerSpriteToBg,function
	.thumb_func
CopyBattlerSpriteToBg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	str	r0, [sp]
	add	r6, r2, #0
	add	r4, r3, #0
	ldr	r0, [sp, #0x24]
	ldr	r7, [sp, #0x28]
	ldr	r2, [sp, #0x2c]
	mov	r9, r2
	ldr	r5, [sp, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r4, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L264
	ldr	r2, [r1]
	lsl	r4, r4, #0x2
	add	r2, r2, #0x4
	add	r2, r2, r4
	ldr	r1, .L264+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0xb
	ldr	r0, [r2]
	add	r0, r0, r1
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r1, r7, #0
	bl	CpuSet
	ldr	r1, [sp]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r1, r7, #0
	add	r3, r5, #0
	bl	LoadBgTiles
	add	r0, r6, #0
	add	r0, r0, #0x8
	cmp	r6, r0
	bge	.L255	@cond_branch
	mov	ip, r0
	mov	r2, r8
	lsl	r7, r2, #0x1
.L257:
	mov	r1, r8
	add	r2, r1, #0
	add	r2, r2, #0x8
	add	r4, r6, #0x1
	cmp	r1, r2
	bge	.L256	@cond_branch
	mov	r0, sl
	lsl	r3, r0, #0xc
	lsl	r0, r6, #0x6
	add	r0, r0, r9
	add	r6, r7, r0
	sub	r1, r2, r1
.L261:
	add	r0, r5, #0
	orr	r0, r0, r3
	strh	r0, [r6]
	add	r5, r5, #0x1
	add	r6, r6, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L261	@cond_branch
.L256:
	add	r6, r4, #0
	cmp	r6, ip
	blt	.L257	@cond_branch
.L255:
	ldr	r1, [sp]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r1, r9
	mov	r3, #0x0
	bl	LoadBgTilemap
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	gMonSpritesGfxPtr
	.word	gBattleMonForms
.Lfe9:
	.size	 CopyBattlerSpriteToBg,.Lfe9-CopyBattlerSpriteToBg
	.align	2, 0
	.type	 DrawBattlerOnBgDMA,function
	.thumb_func
DrawBattlerOnBgDMA:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x24]
	ldr	r5, [sp, #0x28]
	mov	r8, r5
	ldr	r5, [sp, #0x2c]
	ldr	r6, [sp, #0x30]
	mov	r9, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	mov	r7, r8
	lsl	r7, r7, #0x10
	lsr	r6, r7, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, r9
	lsl	r0, r0, #0x18
	mov	r9, r0
	ldr	r4, .L277
	ldr	r0, .L277+0x4
	ldr	r0, [r0]
	lsr	r2, r2, #0x16
	add	r0, r0, #0x4
	add	r0, r0, r2
	lsr	r3, r3, #0xd
	ldr	r0, [r0]
	add	r0, r0, r3
	str	r0, [r4]
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	add	r6, r6, r0
	str	r6, [r4, #0x4]
	ldr	r0, .L277+0x8
	str	r0, [r4, #0x8]
	ldr	r0, [r4, #0x8]
	add	r2, r7, #0
	lsr	r2, r2, #0x15
	mov	r6, r9
	lsr	r6, r6, #0xf
	sub	r4, r2, r6
	lsr	r0, r1, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x8
	cmp	r0, r1
	bge	.L268	@cond_branch
	mov	r9, r1
	mov	r7, ip
	lsl	r7, r7, #0x1
	mov	r8, r7
	lsl	r5, r5, #0xb
	str	r5, [sp]
.L270:
	mov	r2, ip
	add	r3, r2, #0
	add	r3, r3, #0x8
	add	r5, r0, #0x1
	cmp	r2, r3
	bge	.L269	@cond_branch
	mov	r1, sl
	lsl	r6, r1, #0xc
	lsl	r0, r0, #0x6
	mov	r7, #0xc0
	lsl	r7, r7, #0x13
	add	r0, r0, r7
	ldr	r1, [sp]
	add	r0, r1, r0
	mov	r7, r8
	add	r1, r7, r0
	sub	r2, r3, r2
.L274:
	add	r0, r4, #0
	orr	r0, r0, r6
	strh	r0, [r1]
	add	r4, r4, #0x1
	add	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L274	@cond_branch
.L269:
	add	r0, r5, #0
	cmp	r0, r9
	blt	.L270	@cond_branch
.L268:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L278:
	.align	2, 0
.L277:
	.word	0x40000d4
	.word	gMonSpritesGfxPtr
	.word	-0x7ffffc00
.Lfe10:
	.size	 DrawBattlerOnBgDMA,.Lfe10-DrawBattlerOnBgDMA
.text
	.align	2, 0 @ Don't pad with nop

