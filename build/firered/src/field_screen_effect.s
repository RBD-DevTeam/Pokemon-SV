@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	1, 0
	.type	 sFlashLevelToRadius,object
sFlashLevelToRadius:
	.short	0xc8
	.short	0x48
	.short	0x38
	.short	0x28
	.short	0x18
	.size	 sFlashLevelToRadius,10
	.globl	gMaxFlashLevel
	.align	2, 0
	.type	 gMaxFlashLevel,object
	.size	 gMaxFlashLevel,4
gMaxFlashLevel:
	.word	0x4
	.align	2, 0
	.type	 sWindowTemplate_WhiteoutText,object
	.size	 sWindowTemplate_WhiteoutText,8
sWindowTemplate_WhiteoutText:
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x1e
	.byte	0xb
	.byte	0xf
	.short	0x1
	.type	 sWhiteoutTextColors,object
sWhiteoutTextColors:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.size	 sWhiteoutTextColors,3
.text
	.align	2, 0
	.type	 SetFlashScanlineEffectWindowBoundary,function
	.thumb_func
SetFlashScanlineEffectWindowBoundary:
	push	{lr}
	cmp	r1, #0xa0
	bhi	.L3	@cond_branch
	cmp	r2, #0
	bge	.L4	@cond_branch
	mov	r2, #0x0
.L4:
	cmp	r2, #0xff
	ble	.L5	@cond_branch
	mov	r2, #0xff
.L5:
	cmp	r3, #0
	bge	.L6	@cond_branch
	mov	r3, #0x0
.L6:
	cmp	r3, #0xff
	ble	.L7	@cond_branch
	mov	r3, #0xff
.L7:
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	lsl	r0, r2, #0x8
	orr	r0, r0, r3
	strh	r0, [r1]
.L3:
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 SetFlashScanlineEffectWindowBoundary,.Lfe1-SetFlashScanlineEffectWindowBoundary
	.align	2, 0
	.globl	SetFlashScanlineEffectWindowBoundaries
	.type	 SetFlashScanlineEffectWindowBoundaries,function
	.thumb_func
SetFlashScanlineEffectWindowBoundaries:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	str	r0, [sp]
	mov	sl, r1
	mov	r9, r2
	add	r6, r3, #0
	mov	r8, r6
	mov	r7, #0x0
	cmp	r6, #0
	blt	.L10	@cond_branch
.L11:
	mov	r0, r9
	sub	r1, r0, r7
	mov	r0, sl
	sub	r4, r0, r6
	add	r5, r0, r6
	ldr	r0, [sp]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	SetFlashScanlineEffectWindowBoundary
	mov	r0, r9
	add	r1, r0, r7
	ldr	r0, [sp]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	SetFlashScanlineEffectWindowBoundary
	mov	r0, r9
	sub	r1, r0, r6
	mov	r0, sl
	sub	r4, r0, r7
	add	r5, r0, r7
	ldr	r0, [sp]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	SetFlashScanlineEffectWindowBoundary
	mov	r0, r9
	add	r1, r0, r6
	ldr	r0, [sp]
	add	r2, r4, #0
	add	r3, r5, #0
	bl	SetFlashScanlineEffectWindowBoundary
	mov	r1, r8
	add	r1, r1, #0x1
	lsl	r0, r7, #0x1
	sub	r1, r1, r0
	mov	r8, r1
	add	r7, r7, #0x1
	cmp	r1, #0
	bge	.L9	@cond_branch
	sub	r1, r6, #0x1
	lsl	r0, r1, #0x1
	add	r8, r8, r0
	add	r6, r1, #0
.L9:
	cmp	r6, r7
	bge	.L11	@cond_branch
.L10:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 SetFlashScanlineEffectWindowBoundaries,.Lfe2-SetFlashScanlineEffectWindowBoundaries
	.align	2, 0
	.type	 UpdateFlashLevelEffect,function
	.thumb_func
UpdateFlashLevelEffect:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L25
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L17	@cond_branch
	cmp	r0, #0x1
	bgt	.L24	@cond_branch
	cmp	r0, #0
	beq	.L16	@cond_branch
	b	.L15
.L26:
	.align	2, 0
.L25:
	.word	gTasks+0x8
.L24:
	cmp	r0, #0x2
	beq	.L21	@cond_branch
	b	.L15
.L16:
	ldr	r0, .L27
	ldrb	r1, [r0, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	ldr	r1, .L27+0x4
	add	r0, r0, r1
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	mov	r3, #0x4
	ldrsh	r2, [r4, r3]
	mov	r5, #0x6
	ldrsh	r3, [r4, r5]
	bl	SetFlashScanlineEffectWindowBoundaries
	mov	r0, #0x1
	strh	r0, [r4]
	b	.L15
.L28:
	.align	2, 0
.L27:
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
.L17:
	ldr	r0, .L29
	ldrb	r1, [r0, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	ldr	r1, .L29+0x4
	add	r0, r0, r1
	mov	r6, #0x2
	ldrsh	r1, [r4, r6]
	mov	r3, #0x4
	ldrsh	r2, [r4, r3]
	mov	r6, #0x6
	ldrsh	r3, [r4, r6]
	bl	SetFlashScanlineEffectWindowBoundaries
	mov	r0, #0x0
	strh	r0, [r4]
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r4, #0x6]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	ble	.L15	@cond_branch
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x1
	bne	.L19	@cond_branch
	bl	ScanlineEffect_Stop
	mov	r0, #0x2
	strh	r0, [r4]
	b	.L15
.L30:
	.align	2, 0
.L29:
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
.L19:
	add	r0, r5, #0
	bl	DestroyTask
	b	.L15
.L21:
	bl	ScanlineEffect_Clear
	add	r0, r5, #0
	bl	DestroyTask
.L15:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 UpdateFlashLevelEffect,.Lfe3-UpdateFlashLevelEffect
	.align	2, 0
	.type	 Task_WaitForFlashUpdate,function
	.thumb_func
Task_WaitForFlashUpdate:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L33
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L32	@cond_branch
	bl	ScriptContext_Enable
	add	r0, r4, #0
	bl	DestroyTask
.L32:
	pop	{r4}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	UpdateFlashLevelEffect
.Lfe4:
	.size	 Task_WaitForFlashUpdate,.Lfe4-Task_WaitForFlashUpdate
	.align	2, 0
	.type	 StartWaitForFlashUpdate,function
	.thumb_func
StartWaitForFlashUpdate:
	push	{r4, lr}
	ldr	r4, .L37
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L36	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x50
	bl	CreateTask
.L36:
	pop	{r4}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	Task_WaitForFlashUpdate
.Lfe5:
	.size	 StartWaitForFlashUpdate,.Lfe5-StartWaitForFlashUpdate
	.align	2, 0
	.type	 StartUpdateFlashLevelEffect,function
	.thumb_func
StartUpdateFlashLevelEffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r0
	mov	r9, r1
	add	r5, r2, #0
	add	r4, r3, #0
	ldr	r6, [sp, #0x1c]
	ldr	r0, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L42
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L42+0x4
	add	r1, r0, r1
	strh	r5, [r1, #0x6]
	strh	r4, [r1, #0x8]
	mov	r0, r8
	strh	r0, [r1, #0x2]
	mov	r0, r9
	strh	r0, [r1, #0x4]
	strh	r6, [r1, #0xc]
	cmp	r5, r4
	bge	.L40	@cond_branch
	strh	r7, [r1, #0xa]
	b	.L41
.L43:
	.align	2, 0
.L42:
	.word	UpdateFlashLevelEffect
	.word	gTasks+0x8
.L40:
	neg	r0, r7
	strh	r0, [r1, #0xa]
.L41:
	add	r0, r2, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 StartUpdateFlashLevelEffect,.Lfe6-StartUpdateFlashLevelEffect
	.align	2, 0
	.globl	AnimateFlash
	.type	 AnimateFlash,function
	.thumb_func
AnimateFlash:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	bl	Overworld_GetFlashLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	cmp	r4, #0
	bne	.L45	@cond_branch
	mov	r5, #0x1
.L45:
	ldr	r1, .L46
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r2, [r0]
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r3, [r0]
	str	r5, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x78
	mov	r1, #0x50
	bl	StartUpdateFlashLevelEffect
	bl	StartWaitForFlashUpdate
	bl	LockPlayerFieldControls
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	sFlashLevelToRadius
.Lfe7:
	.size	 AnimateFlash,.Lfe7-AnimateFlash
	.align	2, 0
	.globl	WriteFlashScanlineEffectBuffer
	.type	 WriteFlashScanlineEffectBuffer,function
	.thumb_func
WriteFlashScanlineEffectBuffer:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L49	@cond_branch
	ldr	r4, .L50
	ldr	r1, .L50+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r3, [r0]
	add	r0, r4, #0
	mov	r1, #0x78
	mov	r2, #0x50
	bl	SetFlashScanlineEffectWindowBoundaries
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r1, r4, r0
	mov	r2, #0xf0
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	bl	CpuFastSet
.L49:
	pop	{r4}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gScanlineEffectRegBuffers
	.word	sFlashLevelToRadius
.Lfe8:
	.size	 WriteFlashScanlineEffectBuffer,.Lfe8-WriteFlashScanlineEffectBuffer
	.align	2, 0
	.globl	Script_FadeOutMapMusic
	.type	 Script_FadeOutMapMusic,function
	.thumb_func
Script_FadeOutMapMusic:
	push	{lr}
	bl	Overworld_FadeOutMapMusic
	ldr	r0, .L53
	mov	r1, #0x50
	bl	CreateTask
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	Task_EnableScriptAfterMusicFade
.Lfe9:
	.size	 Script_FadeOutMapMusic,.Lfe9-Script_FadeOutMapMusic
	.align	2, 0
	.type	 Task_EnableScriptAfterMusicFade,function
	.thumb_func
Task_EnableScriptAfterMusicFade:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	BGMusicStopped
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L56	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
	bl	ScriptContext_Enable
.L56:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 Task_EnableScriptAfterMusicFade,.Lfe10-Task_EnableScriptAfterMusicFade
	.align	2, 0
	.type	 DoInwardBarnDoorFade,function
	.thumb_func
DoInwardBarnDoorFade:
	push	{lr}
	ldr	r0, .L58
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L58+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	Task_BarnDoorWipe
	.word	gTasks
.Lfe11:
	.size	 DoInwardBarnDoorFade,.Lfe11-DoInwardBarnDoorFade
	.align	2, 0
	.globl	DoOutwardBarnDoorWipe
	.type	 DoOutwardBarnDoorWipe,function
	.thumb_func
DoOutwardBarnDoorWipe:
	push	{lr}
	ldr	r0, .L61
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L61+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x1
	strh	r0, [r1, #0x1c]
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	Task_BarnDoorWipe
	.word	gTasks
.Lfe12:
	.size	 DoOutwardBarnDoorWipe,.Lfe12-DoOutwardBarnDoorWipe
	.align	2, 0
	.type	 BarnDoorWipeSaveGpuRegs,function
	.thumb_func
BarnDoorWipeSaveGpuRegs:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L64
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetGpuReg
	strh	r0, [r4]
	mov	r0, #0x48
	bl	GetGpuReg
	strh	r0, [r4, #0x2]
	mov	r0, #0x4a
	bl	GetGpuReg
	strh	r0, [r4, #0x4]
	mov	r0, #0x50
	bl	GetGpuReg
	strh	r0, [r4, #0x6]
	mov	r0, #0x52
	bl	GetGpuReg
	strh	r0, [r4, #0x8]
	mov	r0, #0x40
	bl	GetGpuReg
	strh	r0, [r4, #0xa]
	mov	r0, #0x44
	bl	GetGpuReg
	strh	r0, [r4, #0xc]
	mov	r0, #0x42
	bl	GetGpuReg
	strh	r0, [r4, #0xe]
	mov	r0, #0x46
	bl	GetGpuReg
	strh	r0, [r4, #0x10]
	pop	{r4}
	pop	{r0}
	bx	r0
.L65:
	.align	2, 0
.L64:
	.word	gTasks+0x8
.Lfe13:
	.size	 BarnDoorWipeSaveGpuRegs,.Lfe13-BarnDoorWipeSaveGpuRegs
	.align	2, 0
	.type	 BarnDoorWipeLoadGpuRegs,function
	.thumb_func
BarnDoorWipeLoadGpuRegs:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L67
	add	r4, r4, r0
	ldrh	r1, [r4]
	mov	r0, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2]
	mov	r0, #0x48
	bl	SetGpuReg
	ldrh	r1, [r4, #0x4]
	mov	r0, #0x4a
	bl	SetGpuReg
	ldrh	r1, [r4, #0x6]
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x8]
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r1, [r4, #0xa]
	mov	r0, #0x40
	bl	SetGpuReg
	ldrh	r1, [r4, #0xc]
	mov	r0, #0x44
	bl	SetGpuReg
	ldrh	r1, [r4, #0xe]
	mov	r0, #0x42
	bl	SetGpuReg
	ldrh	r1, [r4, #0x10]
	mov	r0, #0x46
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gTasks+0x8
.Lfe14:
	.size	 BarnDoorWipeLoadGpuRegs,.Lfe14-BarnDoorWipeLoadGpuRegs
	.align	2, 0
	.globl	Task_BarnDoorWipe
	.type	 Task_BarnDoorWipe,function
	.thumb_func
Task_BarnDoorWipe:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L81
	add	r5, r0, r1
	mov	r1, #0x12
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L74	@cond_branch
	cmp	r0, #0x1
	bgt	.L80	@cond_branch
	cmp	r0, #0
	beq	.L71	@cond_branch
	b	.L70
.L82:
	.align	2, 0
.L81:
	.word	gTasks+0x8
.L80:
	cmp	r0, #0x2
	beq	.L75	@cond_branch
	cmp	r0, #0x3
	beq	.L77	@cond_branch
	b	.L70
.L71:
	add	r0, r4, #0
	bl	BarnDoorWipeSaveGpuRegs
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuRegBits
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	mov	r0, #0x0
	bl	SetGpuRegBits
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L72	@cond_branch
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L83
	mov	r0, #0x42
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0xff
	bl	SetGpuReg
	mov	r0, #0x46
	mov	r1, #0xff
	bl	SetGpuReg
	b	.L73
.L84:
	.align	2, 0
.L83:
	.word	0xf0ff
.L72:
	mov	r0, #0x40
	mov	r1, #0x78
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0xff
	bl	SetGpuReg
	ldr	r1, .L85
	mov	r0, #0x42
	bl	SetGpuReg
	mov	r0, #0x46
	mov	r1, #0xff
	bl	SetGpuReg
.L73:
	mov	r0, #0x48
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	mov	r0, #0x1
	strh	r0, [r5, #0x12]
	b	.L70
.L86:
	.align	2, 0
.L85:
	.word	0x78ff
.L74:
	ldr	r0, .L87
	mov	r1, #0x50
	bl	CreateTask
	mov	r0, #0x2
	strh	r0, [r5, #0x12]
	b	.L70
.L88:
	.align	2, 0
.L87:
	.word	Task_BarnDoorWipeChild
.L75:
	ldr	r0, .L89
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L70	@cond_branch
	mov	r0, #0x3
	strh	r0, [r5, #0x12]
	b	.L70
.L90:
	.align	2, 0
.L89:
	.word	Task_BarnDoorWipeChild
.L77:
	add	r0, r4, #0
	bl	BarnDoorWipeLoadGpuRegs
	add	r0, r4, #0
	bl	DestroyTask
.L70:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 Task_BarnDoorWipe,.Lfe15-Task_BarnDoorWipe
	.align	2, 0
	.type	 Task_BarnDoorWipeChild,function
	.thumb_func
Task_BarnDoorWipeChild:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r8, r5
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r4, .L99
	add	r6, r0, r4
	ldr	r0, .L99+0x4
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r4, r1
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L92	@cond_branch
	ldrh	r4, [r6]
	mov	r0, #0xf0
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x78
	ble	.L94	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	b	.L91
.L100:
	.align	2, 0
.L99:
	.word	gTasks+0x8
	.word	Task_BarnDoorWipe
.L92:
	ldrh	r0, [r6]
	mov	r1, #0x78
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	add	r0, r0, #0x78
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	lsr	r4, r1, #0x10
	cmp	r1, #0
	bge	.L94	@cond_branch
	mov	r0, r8
	bl	DestroyTask
	b	.L91
.L94:
	lsl	r4, r4, #0x10
	lsr	r1, r4, #0x10
	mov	r0, #0x40
	bl	SetGpuReg
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x8
	mov	r0, #0xf0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x42
	bl	SetGpuReg
	asr	r4, r4, #0x10
	cmp	r4, #0x59
	bgt	.L96	@cond_branch
	ldrh	r0, [r6]
	add	r0, r0, #0x4
	b	.L98
.L96:
	ldrh	r0, [r6]
	add	r0, r0, #0x2
.L98:
	strh	r0, [r6]
.L91:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 Task_BarnDoorWipeChild,.Lfe16-Task_BarnDoorWipeChild
	.align	2, 0
	.type	 PrintWhiteOutRecoveryMessage,function
	.thumb_func
PrintWhiteOutRecoveryMessage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	ldr	r2, .L109
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrb	r7, [r4, #0xa]
	mov	r0, #0xc
	ldrsh	r6, [r4, r0]
	cmp	r6, #0
	beq	.L103	@cond_branch
	cmp	r6, #0x1
	beq	.L104	@cond_branch
	b	.L102
.L110:
	.align	2, 0
.L109:
	.word	gTasks
.L103:
	add	r0, r7, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r5, .L111
	add	r0, r5, #0
	mov	r1, r8
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r8, r0
	str	r0, [sp]
	str	r6, [sp, #0x4]
	ldr	r0, .L111+0x4
	str	r0, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	str	r5, [sp, #0x10]
	add	r0, r7, #0
	mov	r1, #0x2
	mov	r2, sl
	mov	r3, r9
	bl	AddTextPrinterParameterized4
	ldr	r2, .L111+0x8
	ldrb	r1, [r2]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, r8
	strh	r0, [r4, #0xc]
	b	.L102
.L112:
	.align	2, 0
.L111:
	.word	gStringVar4
	.word	sWhiteoutTextColors
	.word	gTextFlags
.L104:
	bl	RunTextPrinters
	add	r0, r7, #0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L102	@cond_branch
	strh	r0, [r4, #0xc]
	mov	r0, #0x1
	b	.L108
.L102:
	mov	r0, #0x0
.L108:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 PrintWhiteOutRecoveryMessage,.Lfe17-PrintWhiteOutRecoveryMessage
	.align	2, 0
	.type	 Task_RushInjuredPokemonToCenter,function
	.thumb_func
Task_RushInjuredPokemonToCenter:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L131
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x6
	bls	.LCB1071
	b	.L114	@long jump
.LCB1071:
	lsl	r0, r0, #0x2
	ldr	r1, .L131+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L132:
	.align	2, 0
.L131:
	.word	gTasks
	.word	.L128
	.align	2, 0
	.align	2, 0
.L128:
	.word	.L115
	.word	.L118
	.word	.L123
	.word	.L124
	.word	.L120
	.word	.L123
	.word	.L126
.L115:
	ldr	r0, .L133
	bl	AddWindow
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L133+0x4
	lsl	r4, r6, #0x2
	add	r0, r4, r6
	lsl	r0, r0, #0x3
	add	r7, r0, r1
	strh	r5, [r7, #0xa]
	mov	r0, #0xf0
	bl	Menu_LoadStdPalAt
	add	r0, r5, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	mov	r0, #0x1
	bl	GetHealLocation
	add	r3, r0, #0
	ldr	r0, .L133+0x8
	ldr	r2, [r0]
	ldrh	r0, [r2, #0x1c]
	ldrh	r5, [r3]
	cmp	r0, r5
	bne	.L116	@cond_branch
	mov	r1, #0x1e
	ldrsb	r1, [r2, r1]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L116	@cond_branch
	mov	r0, #0x20
	ldrsh	r1, [r2, r0]
	mov	r5, #0x2
	ldrsh	r0, [r3, r5]
	cmp	r1, r0
	bne	.L116	@cond_branch
	mov	r0, #0x22
	ldrsh	r1, [r2, r0]
	mov	r2, #0x4
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	bne	.L116	@cond_branch
	mov	r0, #0x4
	strh	r0, [r7, #0x8]
	b	.L114
.L134:
	.align	2, 0
.L133:
	.word	sWindowTemplate_WhiteoutText
	.word	gTasks
	.word	gSaveBlock1Ptr
.L116:
	ldr	r0, .L135
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L114
.L136:
	.align	2, 0
.L135:
	.word	gTasks
.L118:
	ldr	r1, .L137
	b	.L130
.L138:
	.align	2, 0
.L137:
	.word	gText_PlayerScurriedToCenter
.L120:
	ldr	r1, .L139
.L130:
	add	r0, r6, #0
	mov	r2, #0x2
	mov	r3, #0x8
	bl	PrintWhiteOutRecoveryMessage
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L114	@cond_branch
	ldr	r0, .L139+0x4
	ldrb	r1, [r0, #0x5]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L139+0x8
	add	r0, r0, r1
	mov	r1, #0x2
	bl	ObjectEventTurn
	ldr	r1, .L139+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L114
.L140:
	.align	2, 0
.L139:
	.word	gText_PlayerScurriedBackHome
	.word	gPlayerAvatar
	.word	gObjectEvents
	.word	gTasks
.L123:
	lsl	r4, r6, #0x2
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	add	r4, r4, r2
	ldrb	r5, [r4, #0xa]
	add	r0, r5, #0
	bl	ClearWindowTilemap
	add	r0, r5, #0
	mov	r1, #0x1
	bl	CopyWindowToVram
	add	r0, r5, #0
	bl	RemoveWindow
	bl	palette_bg_faded_fill_black
	bl	FadeInFromBlack
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L114
.L124:
	bl	FieldFadeTransitionBackgroundEffectIsFinished
	cmp	r0, #0x1
	bne	.L114	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r0, .L141
	bl	ScriptContext_SetupScript
	b	.L114
.L142:
	.align	2, 0
.L141:
	.word	EventScript_AfterWhiteOutHeal
.L126:
	bl	FieldFadeTransitionBackgroundEffectIsFinished
	cmp	r0, #0x1
	bne	.L114	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r0, .L143
	bl	ScriptContext_SetupScript
.L114:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	EventScript_AfterWhiteOutMomHeal
.Lfe18:
	.size	 Task_RushInjuredPokemonToCenter,.Lfe18-Task_RushInjuredPokemonToCenter
	.align	2, 0
	.globl	FieldCB_RushInjuredPokemonToCenter
	.type	 FieldCB_RushInjuredPokemonToCenter,function
	.thumb_func
FieldCB_RushInjuredPokemonToCenter:
	push	{lr}
	bl	LockPlayerFieldControls
	bl	palette_bg_faded_fill_black
	ldr	r0, .L146
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L146+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L147:
	.align	2, 0
.L146:
	.word	Task_RushInjuredPokemonToCenter
	.word	gTasks
.Lfe19:
	.size	 FieldCB_RushInjuredPokemonToCenter,.Lfe19-FieldCB_RushInjuredPokemonToCenter
.text
	.align	2, 0 @ Don't pad with nop

