@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sCurrentSceneNum,object
	.size	 sCurrentSceneNum,1
sCurrentSceneNum:
	.byte	0x0
	.type	 sNumScenes,object
	.size	 sNumScenes,1
sNumScenes:
	.byte	0x0
	.globl	gQuestLogState
	.type	 gQuestLogState,object
	.size	 gQuestLogState,1
gQuestLogState:
	.byte	0x0
	.align	1, 0
	.type	 gUnknown_203ADFC,object
	.size	 gUnknown_203ADFC,2
gUnknown_203ADFC:
	.short	0x0
	.type	 sQuestLogHeaderWindowIds,object
	.size	 sQuestLogHeaderWindowIds,3
sQuestLogHeaderWindowIds:
	.byte	0x0
	.space	2
	.globl	gUnknown_203AE04
	.align	2, 0
	.type	 gUnknown_203AE04,object
	.size	 gUnknown_203AE04,4
gUnknown_203AE04:
	.word	0x0
	.globl	sEventRecordingPointer
	.align	2, 0
	.type	 sEventRecordingPointer,object
	.size	 sEventRecordingPointer,4
sEventRecordingPointer:
	.word	0x0
	.align	2, 0
	.type	 gUnknown_203AE0C,object
	.size	 gUnknown_203AE0C,128
gUnknown_203AE0C:
	.word	0x0
	.space	124
	.align	2, 0
	.type	 sQuestLogCB,object
	.size	 sQuestLogCB,4
sQuestLogCB:
	.word	0x0
	.align	2, 0
	.type	 sPalettesBackup,object
	.size	 sPalettesBackup,4
sPalettesBackup:
	.word	0x0
	.align	2, 0
	.type	 sQuestLogCurrentScene,object
	.size	 sQuestLogCurrentScene,4
sQuestLogCurrentScene:
	.byte	0x0
	.space	3
	.align	2, 0
	.type	 sQuestLogSceneRecordBuffer,object
	.size	 sQuestLogSceneRecordBuffer,256
sQuestLogSceneRecordBuffer:
	.byte	0x0
	.space	7
	.space	248
	.globl	sQuestLogCursor
	.align	1, 0
	.type	 sQuestLogCursor,object
	.size	 sQuestLogCursor,2
sQuestLogCursor:
	.short	0x0
	.type	 sMovementScripts,object
	.size	 sMovementScripts,128
sMovementScripts:
	.byte	0x0
	.space	1
	.space	126
	.align	1, 0
	.type	 sNextStepDelay,object
	.size	 sNextStepDelay,2
sNextStepDelay:
	.short	0x0
	.align	1, 0
	.type	 sLastQuestLogCursor,object
	.size	 sLastQuestLogCursor,2
sLastQuestLogCursor:
	.short	0x0
	.align	1, 0
	.type	 sFlagOrVarPlayhead,object
	.size	 sFlagOrVarPlayhead,2
sFlagOrVarPlayhead:
	.short	0x0
	.section .rodata
	.align	2, 0
	.type	 sQuestLogHeaderWindowTemplates,object
	.size	 sQuestLogHeaderWindowTemplates,24
sQuestLogHeaderWindowTemplates:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1e
	.byte	0x2
	.byte	0xf
	.short	0xe9
	.byte	0x0
	.byte	0x0
	.byte	0x12
	.byte	0x1e
	.byte	0x2
	.byte	0xf
	.short	0xad
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x1e
	.byte	0x6
	.byte	0xf
	.short	0x14c
	.type	 sTextColors,object
	.size	 sTextColors,3
sTextColors:
	.byte	0xf
	.byte	0x1
	.byte	0xc
	.align	1, 0
	.type	 sUnknown_8456638,object
sUnknown_8456638:
	.short	0xbbbb
	.short	0xbbbb
	.short	0xcccc
	.short	0xcccc
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.short	0xcccc
	.short	0xcccc
	.short	0xbbbb
	.short	0xbbbb
	.size	 sUnknown_8456638,96
	.type	 sQuestLogTextLineYCoords,object
sQuestLogTextLineYCoords:
	.byte	0x11
	.byte	0xa
	.byte	0x3
	.size	 sQuestLogTextLineYCoords,3
.text
	.align	2, 0
	.globl	SetQuestLogRecordAndPlaybackPointers
	.type	 SetQuestLogRecordAndPlaybackPointers,function
	.thumb_func
SetQuestLogRecordAndPlaybackPointers:
	push	{lr}
	ldr	r1, .L13
	ldr	r1, [r1]
	sub	r1, r1, r0
	ldr	r2, .L13+0x4
	ldr	r0, [r2]
	cmp	r0, #0
	beq	.L3	@cond_branch
	add	r0, r0, r1
	str	r0, [r2]
.L3:
	ldr	r0, .L13+0x8
	ldrb	r2, [r0]
	cmp	r2, #0
	beq	.L4	@cond_branch
	ldr	r3, .L13+0xc
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L5	@cond_branch
	add	r0, r0, r1
	str	r0, [r3]
.L5:
	cmp	r2, #0x2
	bne	.L4	@cond_branch
	ldr	r2, .L13+0x10
	mov	r3, #0x1f
.L10:
	ldr	r0, [r2]
	cmp	r0, #0
	beq	.L9	@cond_branch
	add	r0, r0, r1
	str	r0, [r2]
.L9:
	add	r2, r2, #0x4
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L10	@cond_branch
.L4:
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gSaveBlock1Ptr
	.word	gUnknown_203AE04
	.word	gQuestLogState
	.word	sEventRecordingPointer
	.word	gUnknown_203AE0C
.Lfe1:
	.size	 SetQuestLogRecordAndPlaybackPointers,.Lfe1-SetQuestLogRecordAndPlaybackPointers
	.align	2, 0
	.globl	ResetQuestLog
	.type	 ResetQuestLog,function
	.thumb_func
ResetQuestLog:
	push	{lr}
	ldr	r0, .L16
	ldr	r0, [r0]
	mov	r1, #0x98
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	mov	r2, #0xcd
	lsl	r2, r2, #0x5
	mov	r1, #0x0
	bl	memset
	ldr	r0, .L16+0x4
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L16+0x8
	strb	r1, [r0]
	ldr	r0, .L16+0xc
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L16+0x10
	str	r1, [r0]
	ldr	r0, .L16+0x14
	str	r1, [r0]
	bl	sub_8113BD8
	bl	ResetDeferredLinkEvent
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
	.word	gQuestLogState
	.word	sQuestLogCB
	.word	sEventRecordingPointer
	.word	gUnknown_203AE04
.Lfe2:
	.size	 ResetQuestLog,.Lfe2-ResetQuestLog
	.align	2, 0
	.type	 DestroySav1QuestLogEntry,function
	.thumb_func
DestroySav1QuestLogEntry:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L19
	ldr	r1, [r1]
	mov	r2, #0xcd
	lsl	r2, r2, #0x3
	mul	r0, r0, r2
	add	r0, r0, r1
	mov	r1, #0x98
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	mov	r1, #0x0
	bl	memset
	ldr	r1, .L19+0x4
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gSaveBlock1Ptr
	.word	gUnknown_203AE04
.Lfe3:
	.size	 DestroySav1QuestLogEntry,.Lfe3-DestroySav1QuestLogEntry
	.align	2, 0
	.globl	sub_8110920
	.type	 sub_8110920,function
	.thumb_func
sub_8110920:
	ldr	r1, .L22
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L23:
	.align	2, 0
.L22:
	.word	gUnknown_203AE04
.Lfe4:
	.size	 sub_8110920,.Lfe4-sub_8110920
	.align	2, 0
	.globl	RunQuestLogCB
	.type	 RunQuestLogCB,function
	.thumb_func
RunQuestLogCB:
	push	{lr}
	ldr	r0, .L26
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L25	@cond_branch
	bl	_call_via_r0
.L25:
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	sQuestLogCB
.Lfe5:
	.size	 RunQuestLogCB,.Lfe5-RunQuestLogCB
	.align	2, 0
	.globl	sub_8110944
	.type	 sub_8110944,function
	.thumb_func
sub_8110944:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L32
	ldr	r0, .L32+0x4
	ldrb	r0, [r0]
	mov	r3, #0xcd
	lsl	r3, r3, #0x3
	mov	r2, r0
	mul	r2, r2, r3
	mov	r0, #0x98
	lsl	r0, r0, #0x5
	add	r2, r2, r0
	ldr	r0, [r4]
	add	r0, r0, r2
	mov	r4, #0xad
	lsl	r4, r4, #0x3
	add	r2, r0, r4
	add	r0, r0, r3
	sub	r0, r0, r1
	cmp	r5, r2
	bcc	.L30	@cond_branch
	cmp	r5, r0
	bls	.L29	@cond_branch
.L30:
	mov	r0, #0x0
	b	.L31
.L33:
	.align	2, 0
.L32:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
.L29:
	mov	r0, #0x1
.L31:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 sub_8110944,.Lfe6-sub_8110944
	.align	2, 0
	.globl	WillCommandOfSizeFitInSav1Record
	.type	 WillCommandOfSizeFitInSav1Record,function
	.thumb_func
WillCommandOfSizeFitInSav1Record:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L38
	ldr	r0, .L38+0x4
	ldrb	r0, [r0]
	mov	r3, #0xcd
	lsl	r3, r3, #0x3
	mov	r2, r0
	mul	r2, r2, r3
	mov	r0, #0x98
	lsl	r0, r0, #0x5
	add	r2, r2, r0
	ldr	r0, [r4]
	add	r0, r0, r2
	mov	r4, #0xad
	lsl	r4, r4, #0x3
	add	r2, r0, r4
	add	r0, r0, r3
	sub	r0, r0, r1
	cmp	r5, r2
	bcc	.L36	@cond_branch
	cmp	r5, r0
	bls	.L35	@cond_branch
.L36:
	mov	r0, #0x0
	b	.L37
.L39:
	.align	2, 0
.L38:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
.L35:
	mov	r0, #0x1
.L37:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 WillCommandOfSizeFitInSav1Record,.Lfe7-WillCommandOfSizeFitInSav1Record
	.align	2, 0
	.type	 SetQuestLogState,function
	.thumb_func
SetQuestLogState:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L44
	strb	r0, [r1]
	cmp	r0, #0x1
	bne	.L41	@cond_branch
	ldr	r1, .L44+0x4
	ldr	r0, .L44+0x8
	b	.L43
.L45:
	.align	2, 0
.L44:
	.word	gQuestLogState
	.word	sQuestLogCB
	.word	QLogCB_Recording
.L41:
	ldr	r1, .L46
	ldr	r0, .L46+0x4
.L43:
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	sQuestLogCB
	.word	QLogCB_Playback
.Lfe8:
	.size	 SetQuestLogState,.Lfe8-SetQuestLogState
	.align	2, 0
	.type	 QLogCB_Recording,function
	.thumb_func
QLogCB_Recording:
	push	{r4, lr}
	ldr	r0, .L50
	bl	TryRecordQuestLogEntrySequence
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L49	@cond_branch
	ldr	r0, .L50+0x4
	mov	r4, #0x0
	strb	r4, [r0]
	bl	TryRecordEvent39_GoToNextScene
	ldr	r0, .L50+0x8
	strb	r4, [r0]
	ldr	r1, .L50+0xc
	mov	r0, #0x0
	str	r0, [r1]
.L49:
	pop	{r4}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	sQuestLogSceneRecordBuffer
	.word	gQuestLogPlaybackState
	.word	gQuestLogState
	.word	sQuestLogCB
.Lfe9:
	.size	 QLogCB_Recording,.Lfe9-QLogCB_Recording
	.align	2, 0
	.type	 QLogCB_Playback,function
	.thumb_func
QLogCB_Playback:
	push	{r4, lr}
	ldr	r1, .L58
	ldrb	r2, [r1]
	mov	r4, #0xf
	add	r0, r4, #0
	and	r0, r0, r2
	add	r3, r1, #0
	cmp	r0, #0x2
	bne	.L53	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3]
.L53:
	ldrb	r1, [r3]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L54	@cond_branch
	ldr	r0, .L58+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L56	@cond_branch
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L56	@cond_branch
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0x1f
	bhi	.L55	@cond_branch
	ldr	r0, .L58+0x8
	ldrb	r1, [r3, #0x1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L55	@cond_branch
.L56:
	bl	QuestLog_PlayCurrentEvent
	b	.L54
.L59:
	.align	2, 0
.L58:
	.word	sQuestLogCurrentScene
	.word	gQuestLogPlaybackState
	.word	gUnknown_203AE0C
.L55:
	ldrb	r0, [r3]
	mov	r1, #0x3f
	and	r1, r1, r0
	mov	r0, #0x80
	orr	r1, r1, r0
	strb	r1, [r3]
	bl	LockPlayerFieldControls
	mov	r0, #0x0
	bl	QuestLog_BeginFadeAtEndOfScene
.L54:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 QLogCB_Playback,.Lfe10-QLogCB_Playback
	.align	2, 0
	.globl	GetQuestLogState
	.type	 GetQuestLogState,function
	.thumb_func
GetQuestLogState:
	ldr	r0, .L61
	ldr	r1, .L61+0x4
	ldrb	r1, [r1]
	strh	r1, [r0]
	bx	lr
.L62:
	.align	2, 0
.L61:
	.word	gSpecialVar_Result
	.word	gQuestLogState
.Lfe11:
	.size	 GetQuestLogState,.Lfe11-GetQuestLogState
	.align	2, 0
	.globl	GetQuestLogStartType
	.type	 GetQuestLogStartType,function
	.thumb_func
GetQuestLogStartType:
	ldr	r0, .L64
	ldr	r1, [r0]
	ldr	r0, .L64+0x4
	ldrb	r2, [r0]
	mov	r0, #0xcd
	lsl	r0, r0, #0x3
	mul	r0, r0, r2
	add	r1, r1, r0
	mov	r0, #0x98
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldrb	r0, [r1]
	bx	lr
.L65:
	.align	2, 0
.L64:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
.Lfe12:
	.size	 GetQuestLogStartType,.Lfe12-GetQuestLogStartType
	.align	2, 0
	.globl	StartRecordingQuestLogEntry
	.type	 StartRecordingQuestLogEntry,function
	.thumb_func
StartRecordingQuestLogEntry:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r4, .L72
	ldrb	r0, [r4]
	cmp	r0, #0x3
	bls	.L67	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
.L67:
	ldrb	r0, [r4]
	bl	DestroySav1QuestLogEntry
	bl	ResetUnk203B044
	ldr	r2, .L72+0x4
	ldr	r1, .L72+0x8
	ldrb	r0, [r4]
	mov	r3, #0xcd
	lsl	r3, r3, #0x3
	mul	r0, r0, r3
	mov	r5, #0x98
	lsl	r5, r5, #0x5
	add	r0, r0, r5
	ldr	r1, [r1]
	add	r0, r1, r0
	mov	r7, #0xad
	lsl	r7, r7, #0x3
	add	r0, r0, r7
	str	r0, [r2]
	add	r0, r6, #0
	sub	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7
	bls	.L69	@cond_branch
	cmp	r6, #0x23
	bne	.L68	@cond_branch
.L69:
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r1, r0
	add	r0, r0, r5
	mov	r1, #0x2
	b	.L71
.L73:
	.align	2, 0
.L72:
	.word	sCurrentSceneNum
	.word	sEventRecordingPointer
	.word	gSaveBlock1Ptr
.L68:
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r1, r0
	add	r0, r0, r5
	mov	r1, #0x1
.L71:
	strb	r1, [r0]
	bl	QuestLog_GetSaneMonCounts
	ldr	r4, .L74
	ldrb	r0, [r4]
	bl	SetPlayerInitialCoordsAtScene
	ldrb	r0, [r4]
	bl	SetNPCInitialCoordsAtScene
	bl	BackUpTrainerRematchesToVars
	bl	BackUpMapLayoutToVar
	ldrb	r0, [r4]
	bl	SetGameStateAtScene
	ldr	r1, .L74+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, .L74+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x2
	add	r1, r4, #0
	bl	SetUpQuestLogEntry
	add	r0, r4, #0
	bl	TryRecordQuestLogEntrySequence
	mov	r0, #0x1
	bl	SetQuestLogState
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	sCurrentSceneNum
	.word	gUnknown_203ADFC
	.word	sQuestLogSceneRecordBuffer
.Lfe13:
	.size	 StartRecordingQuestLogEntry,.Lfe13-StartRecordingQuestLogEntry
	.align	2, 0
	.type	 SetPlayerInitialCoordsAtScene,function
	.thumb_func
SetPlayerInitialCoordsAtScene:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L77
	mov	r1, #0xcd
	lsl	r1, r1, #0x3
	mul	r1, r1, r0
	mov	r0, #0x98
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r0, [r2]
	add	r1, r0, r1
	ldrb	r0, [r0, #0x4]
	strb	r0, [r1, #0x1]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x5]
	strb	r0, [r1, #0x2]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x6]
	strb	r0, [r1, #0x3]
	ldr	r2, [r2]
	ldrh	r0, [r2]
	strh	r0, [r1, #0x4]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0x6]
	bx	lr
.L78:
	.align	2, 0
.L77:
	.word	gSaveBlock1Ptr
.Lfe14:
	.size	 SetPlayerInitialCoordsAtScene,.Lfe14-SetPlayerInitialCoordsAtScene
	.align	2, 0
	.type	 SetNPCInitialCoordsAtScene,function
	.thumb_func
SetNPCInitialCoordsAtScene:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L91
	mov	r1, #0xcd
	lsl	r1, r1, #0x3
	mul	r0, r0, r1
	mov	r1, #0x98
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, [r4]
	add	r7, r1, r0
	add	r0, r7, #0
	bl	SetQuestLogObjectEventsData
	mov	r6, #0x0
	mov	r9, r4
	mov	r2, #0x8d
	lsl	r2, r2, #0x3
	mov	r8, r2
	ldr	r3, .L91+0x4
	mov	sl, r3
.L83:
	mov	r4, r9
	ldr	r1, [r4]
	lsl	r2, r6, #0x1
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldr	r0, .L91+0x8
	add	r1, r1, r0
	ldrh	r4, [r1]
	mov	r3, #0x0
	ldrsh	r0, [r1, r3]
	mov	ip, r2
	cmp	r0, #0
	bge	.L84	@cond_branch
	lsl	r3, r6, #0x2
	add	r2, r7, r3
	neg	r0, r0
	mov	r4, r8
	add	r1, r2, r4
	strb	r0, [r1]
	ldr	r0, .L91+0xc
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L89
.L92:
	.align	2, 0
.L91:
	.word	gSaveBlock1Ptr
	.word	0x46a
	.word	0x8e4
	.word	0x469
.L84:
	lsl	r3, r6, #0x2
	add	r1, r7, r3
	mov	r2, r8
	add	r0, r1, r2
	strb	r4, [r0]
	ldr	r4, .L93
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L89:
	add	r5, r3, #0
	mov	r1, r9
	ldr	r0, [r1]
	mov	r2, ip
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r3, .L93+0x4
	add	r1, r0, r3
	ldrh	r2, [r1]
	mov	r4, #0x0
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bge	.L86	@cond_branch
	add	r3, r7, r5
	add	r1, r0, #0
	neg	r1, r1
	lsl	r1, r1, #0x18
	mov	r2, r8
	add	r4, r3, r2
	lsr	r1, r1, #0xf
	ldr	r0, [r4]
	ldr	r2, .L93+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [r4]
	add	r3, r3, sl
	ldrb	r0, [r3]
	mov	r1, #0x2
	orr	r0, r0, r1
	b	.L90
.L94:
	.align	2, 0
.L93:
	.word	0x469
	.word	0x8e6
	.word	-0x1fe01
.L86:
	add	r3, r7, r5
	lsl	r2, r2, #0x18
	mov	r0, r8
	add	r4, r3, r0
	lsr	r2, r2, #0xf
	ldr	r0, [r4]
	ldr	r1, .L95
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [r4]
	add	r3, r3, sl
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
.L90:
	strb	r0, [r3]
	add	r5, r7, r5
	mov	r1, r9
	ldr	r0, [r1]
	mov	r2, ip
	add	r3, r2, r6
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	ldr	r4, .L95+0x4
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, sl
	add	r4, r5, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4]
	mov	r0, #0x3
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4]
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, r3
	ldr	r2, .L95+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	ldr	r3, .L95+0xc
	add	r5, r5, r3
	strb	r0, [r5]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x3f
	bhi	.LCB857
	b	.L83	@long jump
.LCB857:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	-0x1fe01
	.word	0x8e8
	.word	0x8e9
	.word	0x46b
.Lfe15:
	.size	 SetNPCInitialCoordsAtScene,.Lfe15-SetNPCInitialCoordsAtScene
	.align	2, 0
	.type	 SetGameStateAtScene,function
	.thumb_func
SetGameStateAtScene:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L98
	mov	r1, #0xcd
	lsl	r1, r1, #0x3
	mul	r1, r1, r0
	mov	r0, #0x98
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldr	r0, [r4]
	add	r5, r0, r1
	mov	r1, #0xee
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	mov	r2, #0xa4
	lsl	r2, r2, #0x1
	add	r1, r5, r2
	mov	r2, #0x90
	bl	CpuSet
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	mov	r2, #0x9a
	lsl	r2, r2, #0x2
	add	r1, r5, r2
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	CpuSet
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L99:
	.align	2, 0
.L98:
	.word	gSaveBlock1Ptr
.Lfe16:
	.size	 SetGameStateAtScene,.Lfe16-SetGameStateAtScene
	.align	2, 0
	.type	 BackUpTrainerRematchesToVars,function
	.thumb_func
BackUpTrainerRematchesToVars:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r4, #0x0
	ldr	r0, .L112
	mov	sl, r0
	ldr	r1, .L112+0x4
	mov	r9, r1
	mov	r2, #0x1
	mov	r8, r2
.L104:
	lsl	r1, r4, #0x1
	mov	r7, sp
	add	r2, r7, r1
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r3, #0x0
	add	r6, r1, #0
	add	r0, r4, #0x1
	str	r0, [sp, #0x8]
	mov	r1, sl
	ldr	r0, [r1]
	mov	r7, r9
	add	r5, r0, r7
	lsl	r1, r4, #0x4
.L108:
	add	r0, r1, r3
	add	r0, r5, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L107	@cond_branch
	mov	r0, r8
	lsl	r0, r0, r3
	ldrh	r7, [r2]
	add	r0, r0, r7
	strh	r0, [r2]
.L107:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0xf
	bls	.L108	@cond_branch
	ldr	r1, .L112+0x8
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r2, sp
	add	r1, r2, r6
	ldrh	r1, [r1]
	bl	VarSet
	ldr	r7, [sp, #0x8]
	lsl	r0, r7, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L104	@cond_branch
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gSaveBlock1Ptr
	.word	0x63a
	.word	0x40aa
.Lfe17:
	.size	 BackUpTrainerRematchesToVars,.Lfe17-BackUpTrainerRematchesToVars
	.align	2, 0
	.type	 BackUpMapLayoutToVar,function
	.thumb_func
BackUpMapLayoutToVar:
	push	{lr}
	ldr	r0, .L115
	ldr	r1, .L115+0x4
	ldr	r1, [r1]
	ldrh	r1, [r1, #0x32]
	bl	VarSet
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	0x40ae
	.word	gSaveBlock1Ptr
.Lfe18:
	.size	 BackUpMapLayoutToVar,.Lfe18-BackUpMapLayoutToVar
	.align	2, 0
	.type	 TryRecordEvent39_GoToNextScene,function
	.thumb_func
TryRecordEvent39_GoToNextScene:
	push	{lr}
	ldr	r0, .L119
	ldr	r0, [r0]
	bl	TryRecordEvent39_NoParams
	ldr	r1, .L119+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L118	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L118:
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	sEventRecordingPointer
	.word	sCurrentSceneNum
.Lfe19:
	.size	 TryRecordEvent39_GoToNextScene,.Lfe19-TryRecordEvent39_GoToNextScene
	.align	2, 0
	.type	 TryRecordQuestLogEntrySequence,function
	.thumb_func
TryRecordQuestLogEntrySequence:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	ldr	r0, .L140
	ldrh	r5, [r0]
	ldr	r0, .L140+0x4
	mov	r8, r0
	ldrh	r0, [r0]
	cmp	r5, r0
	bcs	.L123	@cond_branch
	ldr	r6, .L140+0x8
.L125:
	ldr	r4, [r6]
	cmp	r4, #0
	beq	.L139	@cond_branch
	lsl	r0, r5, #0x3
	add	r1, r0, r7
	ldrb	r2, [r1, #0x6]
	add	r3, r0, #0
	cmp	r2, #0x1
	bgt	.L130	@cond_branch
	cmp	r2, #0
	blt	.L130	@cond_branch
	add	r0, r4, #0
	bl	sub_8113D48
	b	.L138
.L141:
	.align	2, 0
.L140:
	.word	gUnknown_203ADFC
	.word	sQuestLogCursor
	.word	sEventRecordingPointer
.L130:
	ldr	r0, [r6]
	add	r1, r7, r3
	bl	sub_8113CC8
.L138:
	str	r0, [r6]
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L137	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L142
	ldrh	r0, [r0]
	cmp	r5, r0
	bcc	.L125	@cond_branch
.L123:
	ldr	r0, .L142+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L134	@cond_branch
	ldr	r1, .L142+0x8
	mov	r2, r8
	ldrh	r0, [r2]
	strh	r0, [r1]
	mov	r0, #0x1
	b	.L135
.L143:
	.align	2, 0
.L142:
	.word	sQuestLogCursor
	.word	gQuestLogPlaybackState
	.word	gUnknown_203ADFC
.L137:
	ldr	r0, .L144
	strb	r1, [r0]
	b	.L139
.L145:
	.align	2, 0
.L144:
	.word	gQuestLogPlaybackState
.L134:
	ldr	r4, .L146
	ldr	r0, [r4]
	bl	TryRecordEvent39_NoParams
	str	r0, [r4]
.L139:
	mov	r0, #0x0
.L135:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L147:
	.align	2, 0
.L146:
	.word	sEventRecordingPointer
.Lfe20:
	.size	 TryRecordQuestLogEntrySequence,.Lfe20-TryRecordQuestLogEntrySequence
	.align	2, 0
	.globl	TrySetUpQuestLogScenes_ElseContinueFromSave
	.type	 TrySetUpQuestLogScenes_ElseContinueFromSave,function
	.thumb_func
TrySetUpQuestLogScenes_ElseContinueFromSave:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	QL_EnableRecordingSteps
	ldr	r1, .L157
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r2, #0x0
	ldr	r0, .L157+0x4
	ldr	r5, [r0]
	mov	r7, #0xcd
	lsl	r7, r7, #0x3
	mov	r6, #0x98
	lsl	r6, r6, #0x5
.L152:
	mov	r0, r2
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, r6
	ldrb	r0, [r0]
	ldr	r3, .L157
	cmp	r0, #0
	beq	.L151	@cond_branch
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L151:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L152	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L155	@cond_branch
	ldr	r1, .L157+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r4, #0
	bl	Task_BeginQuestLogPlayback
	add	r0, r4, #0
	bl	DestroyTask
	b	.L156
.L158:
	.align	2, 0
.L157:
	.word	sNumScenes
	.word	gSaveBlock1Ptr
	.word	gHelpSystemEnabled
.L155:
	ldr	r0, .L159
	bl	SetMainCallback2
	add	r0, r4, #0
	bl	DestroyTask
.L156:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	CB2_ContinueSavedGame
.Lfe21:
	.size	 TrySetUpQuestLogScenes_ElseContinueFromSave,.Lfe21-TrySetUpQuestLogScenes_ElseContinueFromSave
	.align	2, 0
	.type	 Task_BeginQuestLogPlayback,function
	.thumb_func
Task_BeginQuestLogPlayback:
	push	{lr}
	ldr	r1, .L162
	ldr	r2, [r1]
	mov	r3, #0x0
	mov	r0, #0x3
	strb	r0, [r2, #0x4]
	ldr	r2, [r1]
	mov	r0, #0x13
	strb	r0, [r2, #0x5]
	ldr	r1, [r1]
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	ldr	r0, .L162+0x4
	strb	r3, [r0]
	ldr	r1, .L162+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x1
	bl	DisableWildEncounters
	bl	QLPlayback_InitOverworldState
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
	.word	gDisableMapMusicChangeOnMapLoad
.Lfe22:
	.size	 Task_BeginQuestLogPlayback,.Lfe22-Task_BeginQuestLogPlayback
	.align	2, 0
	.globl	sub_8110FCC
	.type	 sub_8110FCC,function
	.thumb_func
sub_8110FCC:
	push	{r4, r5, lr}
	ldr	r5, .L165
	ldrb	r0, [r5]
	ldr	r4, .L165+0x4
	add	r1, r4, #0
	bl	ReadQuestLogScriptFromSav1
	bl	ResetUnk203B044
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x1
	add	r1, r4, #0
	bl	SetUpQuestLogEntry
	ldrb	r0, [r5]
	bl	QuestLogPlaybackSetObjectEventTemplates
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	sCurrentSceneNum
	.word	sQuestLogSceneRecordBuffer
.Lfe23:
	.size	 sub_8110FCC,.Lfe23-sub_8110FCC
	.align	2, 0
	.type	 FieldCB2_QuestLogStartPlaybackWithWarpExit,function
	.thumb_func
FieldCB2_QuestLogStartPlaybackWithWarpExit:
	push	{lr}
	mov	r0, #0x4
	bl	GetTextWindowPalette
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x2
	bl	SetQuestLogState
	bl	FieldCB_DefaultWarpExit
	ldr	r2, .L168
	mov	r0, #0x0
	str	r0, [r2]
	ldrb	r1, [r2]
	sub	r0, r0, #0x10
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L169:
	.align	2, 0
.L168:
	.word	sQuestLogCurrentScene
.Lfe24:
	.size	 FieldCB2_QuestLogStartPlaybackWithWarpExit,.Lfe24-FieldCB2_QuestLogStartPlaybackWithWarpExit
	.align	2, 0
	.type	 FieldCB2_QuestLogStartPlaybackStandingInPlace,function
	.thumb_func
FieldCB2_QuestLogStartPlaybackStandingInPlace:
	push	{lr}
	mov	r0, #0x4
	bl	GetTextWindowPalette
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x2
	bl	SetQuestLogState
	bl	FieldCB_WarpExitFadeFromBlack
	ldr	r2, .L171
	mov	r0, #0x0
	str	r0, [r2]
	ldrb	r1, [r2]
	sub	r0, r0, #0x10
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L172:
	.align	2, 0
.L171:
	.word	sQuestLogCurrentScene
.Lfe25:
	.size	 FieldCB2_QuestLogStartPlaybackStandingInPlace,.Lfe25-FieldCB2_QuestLogStartPlaybackStandingInPlace
	.align	2, 0
	.globl	DrawPreviouslyOnQuestHeader
	.type	 DrawPreviouslyOnQuestHeader,function
	.thumb_func
DrawPreviouslyOnQuestHeader:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r5, #0x0
.L177:
	lsl	r4, r5, #0x3
	ldr	r0, .L180
	add	r4, r4, r0
	add	r0, r4, #0
	bl	AddWindow
	ldr	r6, .L180+0x4
	add	r1, r5, r6
	strb	r0, [r1]
	ldrb	r0, [r1]
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	ldrb	r1, [r4, #0x4]
	lsl	r1, r1, #0x3
	str	r1, [sp, #0x4]
	mov	r1, #0xf
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L177	@cond_branch
	ldr	r5, .L180+0x8
	ldr	r1, .L180+0xc
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	cmp	r7, #0
	beq	.L179	@cond_branch
	ldr	r4, .L180+0x10
	add	r0, r4, #0
	add	r1, r7, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringAppend
.L179:
	ldrb	r0, [r6]
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0x2
	str	r1, [sp, #0x4]
	ldr	r1, .L180+0x14
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	str	r5, [sp, #0x10]
	mov	r1, #0x2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	AddTextPrinterParameterized4
	ldrb	r0, [r6]
	bl	PutWindowTilemap
	ldrb	r0, [r6, #0x1]
	bl	PutWindowTilemap
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r6, #0x2]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r6, #0x1]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	sQuestLogHeaderWindowTemplates
	.word	sQuestLogHeaderWindowIds
	.word	gStringVar4
	.word	gText_QuestLog_PreviouslyOnYourQuest
	.word	gStringVar1
	.word	sTextColors
.Lfe26:
	.size	 DrawPreviouslyOnQuestHeader,.Lfe26-DrawPreviouslyOnQuestHeader
	.align	2, 0
	.globl	CommitQuestLogWindow1
	.type	 CommitQuestLogWindow1,function
	.thumb_func
CommitQuestLogWindow1:
	push	{r4, lr}
	ldr	r4, .L183
	ldrb	r0, [r4, #0x1]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x1]
	mov	r1, #0x1
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L184:
	.align	2, 0
.L183:
	.word	sQuestLogHeaderWindowIds
.Lfe27:
	.size	 CommitQuestLogWindow1,.Lfe27-CommitQuestLogWindow1
	.align	2, 0
	.type	 QuestLogPlaybackSetObjectEventTemplates,function
	.thumb_func
QuestLogPlaybackSetObjectEventTemplates:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L197
	mov	r1, #0xcd
	lsl	r1, r1, #0x3
	mul	r0, r0, r1
	mov	r1, #0x98
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, [r2]
	add	r5, r1, r0
	mov	r4, #0x0
	mov	r9, r2
	mov	r6, r9
	mov	r2, #0x8d
	lsl	r2, r2, #0x3
	mov	ip, r2
	ldr	r7, .L197+0x4
	mov	r8, r7
.L189:
	lsl	r0, r4, #0x2
	add	r3, r5, r0
	ldr	r2, .L197+0x8
	add	r1, r3, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1f
	mov	sl, r0
	cmp	r1, #0
	beq	.L190	@cond_branch
	ldr	r1, [r6]
	lsl	r2, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r7, ip
	add	r0, r3, r7
	ldrb	r0, [r0]
	neg	r0, r0
	b	.L195
.L198:
	.align	2, 0
.L197:
	.word	gSaveBlock1Ptr
	.word	0x8e4
	.word	0x469
.L190:
	ldr	r1, [r6]
	lsl	r2, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r7, ip
	add	r0, r3, r7
	ldrb	r0, [r0]
.L195:
	add	r1, r1, r8
	strh	r0, [r1]
	add	r3, r2, #0
	mov	r0, sl
	add	r2, r5, r0
	ldr	r1, .L199
	add	r0, r2, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L192	@cond_branch
	ldr	r1, [r6]
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r7, ip
	add	r0, r2, r7
	ldr	r0, [r0]
	lsl	r0, r0, #0xf
	lsr	r0, r0, #0x18
	neg	r0, r0
	b	.L196
.L200:
	.align	2, 0
.L199:
	.word	0x46a
.L192:
	ldr	r1, [r6]
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r7, ip
	add	r0, r2, r7
	ldr	r0, [r0]
	lsl	r0, r0, #0xf
	lsr	r0, r0, #0x18
.L196:
	ldr	r2, .L201
	add	r1, r1, r2
	strh	r0, [r1]
	ldr	r1, [r6]
	add	r3, r3, r4
	lsl	r3, r3, #0x3
	add	r1, r1, r3
	mov	r7, sl
	add	r2, r5, r7
	ldr	r7, .L201+0x4
	add	r0, r2, r7
	ldrb	r0, [r0]
	lsr	r0, r0, #0x2
	ldr	r7, .L201+0x8
	add	r1, r1, r7
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, r3
	ldr	r1, .L201+0xc
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldr	r2, .L201+0x10
	add	r0, r0, r2
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3f
	bls	.L189	@cond_branch
	mov	r7, r9
	ldr	r1, [r7]
	mov	r0, #0x8e
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r0, r5, #0
	bl	SetSav1ObjectEventsFromQuestLog
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L202:
	.align	2, 0
.L201:
	.word	0x8e6
	.word	0x46a
	.word	0x8e8
	.word	0x46b
	.word	0x8e9
.Lfe28:
	.size	 QuestLogPlaybackSetObjectEventTemplates,.Lfe28-QuestLogPlaybackSetObjectEventTemplates
	.align	2, 0
	.type	 QLPlayback_SetInitialPlayerPosition,function
	.thumb_func
QLPlayback_SetInitialPlayerPosition:
	push	{r4, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L204	@cond_branch
	ldr	r3, .L206
	ldr	r2, [r3]
	mov	r0, #0xcd
	lsl	r0, r0, #0x3
	mov	r1, r4
	mul	r1, r1, r0
	add	r0, r2, r1
	ldr	r4, .L206+0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	strb	r0, [r2, #0x4]
	ldr	r2, [r3]
	add	r0, r2, r1
	add	r4, r4, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	strb	r0, [r2, #0x5]
	ldr	r2, [r3]
	add	r0, r2, r1
	add	r4, r4, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	strb	r0, [r2, #0x6]
	ldr	r2, [r3]
	add	r1, r2, r1
	ldr	r3, .L206+0x8
	add	r0, r1, r3
	ldrh	r0, [r0]
	strh	r0, [r2]
	add	r4, r4, #0x3
	add	r1, r1, r4
	ldrh	r0, [r1]
	strh	r0, [r2, #0x2]
	b	.L205
.L207:
	.align	2, 0
.L206:
	.word	gSaveBlock1Ptr
	.word	0x1301
	.word	0x1304
.L204:
	ldr	r0, .L208
	ldr	r3, [r0]
	mov	r0, #0xcd
	lsl	r0, r0, #0x3
	mul	r0, r0, r4
	add	r3, r3, r0
	ldr	r1, .L208+0x4
	add	r0, r3, r1
	ldrb	r2, [r0]
	ldr	r0, .L208+0x8
	ldr	r1, [sp]
	and	r1, r1, r0
	orr	r1, r1, r2
	str	r1, [sp]
	ldr	r2, .L208+0xc
	add	r0, r3, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	ldr	r2, .L208+0x10
	and	r2, r2, r1
	orr	r2, r2, r0
	str	r2, [sp]
	ldr	r4, .L208+0x14
	add	r0, r3, r4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, .L208+0x18
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp]
	ldr	r1, .L208+0x1c
	add	r0, r3, r1
	ldrh	r1, [r0]
	ldr	r0, .L208+0x20
	ldr	r2, [sp, #0x4]
	and	r2, r2, r0
	orr	r2, r2, r1
	str	r2, [sp, #0x4]
	add	r4, r4, #0x3
	add	r3, r3, r4
	ldrh	r1, [r3]
	lsl	r1, r1, #0x10
	ldr	r0, .L208+0x24
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	Overworld_SetWarpDestinationFromWarp
.L205:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	gSaveBlock1Ptr
	.word	0x1301
	.word	-0x100
	.word	0x1302
	.word	-0xff01
	.word	0x1303
	.word	-0xff0001
	.word	0x1304
	.word	-0x10000
	.word	0xffff
.Lfe29:
	.size	 QLPlayback_SetInitialPlayerPosition,.Lfe29-QLPlayback_SetInitialPlayerPosition
	.align	2, 0
	.type	 QLPlayback_InitOverworldState,function
	.thumb_func
QLPlayback_InitOverworldState:
	push	{lr}
	ldr	r1, .L213
	mov	r0, #0x2
	strb	r0, [r1]
	bl	ResetSpecialVars
	bl	ClearBag
	bl	ClearPCItemSlots
	bl	GetQuestLogStartType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L211	@cond_branch
	ldr	r0, .L213+0x4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	QLPlayback_SetInitialPlayerPosition
	ldr	r1, .L213+0x8
	ldr	r0, .L213+0xc
	str	r0, [r1]
	ldr	r0, .L213+0x10
	bl	SetMainCallback2
	b	.L212
.L214:
	.align	2, 0
.L213:
	.word	gQuestLogState
	.word	sCurrentSceneNum
	.word	gFieldCallback2
	.word	FieldCB2_QuestLogStartPlaybackStandingInPlace
	.word	CB2_SetUpOverworldForQLPlayback
.L211:
	ldr	r0, .L215
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	QLPlayback_SetInitialPlayerPosition
	bl	WarpIntoMap
	ldr	r1, .L215+0x4
	ldr	r0, .L215+0x8
	str	r0, [r1]
	ldr	r0, .L215+0xc
	bl	SetMainCallback2
.L212:
	pop	{r0}
	bx	r0
.L216:
	.align	2, 0
.L215:
	.word	sCurrentSceneNum
	.word	gFieldCallback2
	.word	FieldCB2_QuestLogStartPlaybackWithWarpExit
	.word	CB2_SetUpOverworldForQLPlaybackWithWarpExit
.Lfe30:
	.size	 QLPlayback_InitOverworldState,.Lfe30-QLPlayback_InitOverworldState
	.align	2, 0
	.globl	sub_81113E4
	.type	 sub_81113E4,function
	.thumb_func
sub_81113E4:
	push	{r4, r5, lr}
	ldr	r4, .L218
	ldr	r0, .L218+0x4
	ldrb	r1, [r0]
	mov	r0, #0xcd
	lsl	r0, r0, #0x3
	mul	r0, r0, r1
	mov	r1, #0x98
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, [r4]
	add	r5, r1, r0
	mov	r2, #0xa4
	lsl	r2, r2, #0x1
	add	r0, r5, r2
	mov	r2, #0xee
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	mov	r2, #0x90
	bl	CpuSet
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r5, r1
	ldr	r1, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r1, r1, r2
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	CpuSet
	bl	sub_8111688
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L219:
	.align	2, 0
.L218:
	.word	gSaveBlock1Ptr
	.word	sCurrentSceneNum
.Lfe31:
	.size	 sub_81113E4,.Lfe31-sub_81113E4
	.align	2, 0
	.globl	sub_8111438
	.type	 sub_8111438,function
	.thumb_func
sub_8111438:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r0, #0x68
	bl	AllocZeroed
	mov	r9, r0
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r0, r9
	mov	r1, #0x13
	mov	r2, #0x1
	mov	r3, #0x20
	bl	CreateMon
	ldr	r0, .L268
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x1c
	mov	r6, r9
	add	r6, r6, #0x64
	strh	r1, [r6]
	lsl	r0, r0, #0x4
	lsr	r0, r0, #0x14
	mov	r4, r9
	add	r4, r4, #0x66
	strh	r0, [r4]
	bl	QuestLog_GetSanePartyCount
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r6]
	cmp	r5, r0
	bls	.L221	@cond_branch
	mov	r3, #0x0
	sub	r0, r5, r0
	mov	r8, r4
	cmp	r3, r0
	bge	.L227	@cond_branch
.L225:
	mov	r0, #0x5
	sub	r0, r0, r3
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L268+0x4
	add	r0, r0, r1
	str	r3, [sp, #0x10]
	bl	ZeroMonData
	ldr	r3, [sp, #0x10]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r0, r9
	add	r0, r0, #0x64
	ldrh	r0, [r0]
	sub	r0, r5, r0
	cmp	r3, r0
	blt	.L225	@cond_branch
	b	.L227
.L269:
	.align	2, 0
.L268:
	.word	0x4027
	.word	gPlayerParty
.L221:
	mov	r8, r4
	cmp	r5, r0
	bcs	.L227	@cond_branch
	mov	r3, #0x0
	add	r4, r6, #0
.L232:
	lsl	r1, r3, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	str	r3, [sp, #0x10]
	bl	ZeroBoxMonAt
	ldr	r3, [sp, #0x10]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x4
	bls	.L232	@cond_branch
	add	r3, r5, #0
	ldrh	r0, [r4]
	cmp	r3, r0
	bcs	.L227	@cond_branch
.L237:
	mov	r0, #0x64
	mul	r0, r0, r3
	ldr	r1, .L270
	add	r0, r0, r1
	mov	r1, r9
	mov	r2, #0x64
	str	r3, [sp, #0x10]
	bl	CopyMon
	ldr	r3, [sp, #0x10]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrh	r1, [r4]
	cmp	r3, r1
	bcc	.L237	@cond_branch
.L227:
	bl	QuestLog_GetSaneBoxCount
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r1, r8
	ldrh	r0, [r1]
	cmp	r5, r0
	bls	.L239	@cond_branch
	mov	r3, #0x0
.L243:
	mov	r6, #0x0
	lsl	r7, r3, #0x18
	lsr	r7, r7, #0x18
.L247:
	lsl	r0, r6, #0x18
	lsr	r4, r0, #0x18
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, #0x5
	str	r3, [sp, #0x10]
	bl	GetBoxMonDataAt
	ldr	r3, [sp, #0x10]
	cmp	r0, #0
	beq	.L246	@cond_branch
	add	r0, r7, #0
	add	r1, r4, #0
	bl	ZeroBoxMonAt
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r3, [sp, #0x10]
	mov	r0, r8
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L253	@cond_branch
.L246:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x1d
	bls	.L247	@cond_branch
	mov	r1, r8
	ldrh	r1, [r1]
	cmp	r5, r1
	beq	.L253	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0xd
	bls	.L243	@cond_branch
	b	.L253
.L271:
	.align	2, 0
.L270:
	.word	gPlayerParty
.L239:
	cmp	r5, r0
	bcs	.L253	@cond_branch
	mov	r3, #0x0
.L258:
	mov	r6, #0x0
	lsl	r7, r3, #0x18
.L262:
	lsl	r1, r6, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r7, #0x18
	str	r3, [sp, #0x10]
	bl	GetBoxedMonPtr
	add	r4, r0, #0
	mov	r1, #0x5
	bl	GetBoxMonData
	ldr	r3, [sp, #0x10]
	cmp	r0, #0
	bne	.L261	@cond_branch
	add	r0, r4, #0
	mov	r1, r9
	mov	r2, #0x50
	bl	CopyMon
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r3, [sp, #0x10]
	mov	r0, r8
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L253	@cond_branch
.L261:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x1d
	bls	.L262	@cond_branch
	mov	r1, r8
	ldrh	r1, [r1]
	cmp	r5, r1
	beq	.L253	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0xd
	bls	.L258	@cond_branch
.L253:
	mov	r0, r9
	bl	Free
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 sub_8111438,.Lfe32-sub_8111438
	.align	2, 0
	.type	 QuestLog_GetSaneMonCounts,function
	.thumb_func
QuestLog_GetSaneMonCounts:
	push	{r4, lr}
	bl	QuestLog_GetSanePartyCount
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	QuestLog_GetSaneBoxCount
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L273
	lsl	r4, r4, #0xc
	add	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	VarSet
	pop	{r4}
	pop	{r0}
	bx	r0
.L274:
	.align	2, 0
.L273:
	.word	0x4027
.Lfe33:
	.size	 QuestLog_GetSaneMonCounts,.Lfe33-QuestLog_GetSaneMonCounts
	.align	2, 0
	.type	 QuestLog_GetSanePartyCount,function
	.thumb_func
QuestLog_GetSanePartyCount:
	push	{r4, r5, lr}
	mov	r5, #0x0
	mov	r4, #0x0
.L279:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L282
	add	r0, r0, r1
	mov	r1, #0x5
	bl	GetMonData
	cmp	r0, #0
	beq	.L278	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L278:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x5
	bls	.L279	@cond_branch
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L283:
	.align	2, 0
.L282:
	.word	gPlayerParty
.Lfe34:
	.size	 QuestLog_GetSanePartyCount,.Lfe34-QuestLog_GetSanePartyCount
	.align	2, 0
	.type	 QuestLog_GetSaneBoxCount,function
	.thumb_func
QuestLog_GetSaneBoxCount:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	mov	r0, #0x0
.L288:
	mov	r4, #0x0
	lsl	r5, r0, #0x18
	add	r7, r0, #0x1
.L292:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r5, #0x18
	mov	r2, #0x5
	bl	GetBoxMonDataAt
	cmp	r0, #0
	beq	.L291	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L291:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x1d
	bls	.L292	@cond_branch
	lsl	r0, r7, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xd
	bls	.L288	@cond_branch
	add	r0, r6, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 QuestLog_GetSaneBoxCount,.Lfe35-QuestLog_GetSaneBoxCount
	.align	2, 0
	.type	 sub_8111688,function
	.thumb_func
sub_8111688:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r5, #0x0
	ldr	r0, .L309
	mov	r8, r0
	ldr	r7, .L309+0x4
.L300:
	ldr	r1, .L309+0x8
	add	r0, r5, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r1, r5, #0x1
	add	r1, r1, sp
	strh	r0, [r1]
	mov	r4, #0x0
	add	r6, r5, #0x1
	add	r3, r1, #0
	lsl	r5, r5, #0x4
.L304:
	ldrh	r0, [r3]
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L305	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	add	r1, r5, r4
	add	r0, r0, r7
	add	r0, r0, r1
	mov	r1, #0x1e
	strb	r1, [r0]
	b	.L306
.L310:
	.align	2, 0
.L309:
	.word	gSaveBlock1Ptr
	.word	0x63a
	.word	0x40aa
.L305:
	mov	r1, r8
	ldr	r0, [r1]
	add	r1, r5, r4
	add	r0, r0, r7
	add	r0, r0, r1
	strb	r2, [r0]
.L306:
	ldrh	r0, [r3]
	lsr	r0, r0, #0x1
	strh	r0, [r3]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xf
	bls	.L304	@cond_branch
	lsl	r0, r6, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bls	.L300	@cond_branch
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 sub_8111688,.Lfe36-sub_8111688
	.align	2, 0
	.globl	sub_8111708
	.type	 sub_8111708,function
	.thumb_func
sub_8111708:
	push	{r4, r5, lr}
	add	sp, sp, #-0x1c
	ldr	r0, .L313
	bl	VarGet
	ldr	r4, .L313+0x4
	ldr	r1, [r4]
	strh	r0, [r1, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L312	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	mov	r1, sp
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r1, [r4]
	mov	r0, sp
	ldrh	r0, [r0, #0x12]
	strh	r0, [r1, #0x32]
.L312:
	add	sp, sp, #0x1c
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	0x40ae
	.word	gSaveBlock1Ptr
.Lfe37:
	.size	 sub_8111708,.Lfe37-sub_8111708
	.align	2, 0
	.type	 ReadQuestLogScriptFromSav1,function
	.thumb_func
ReadQuestLogScriptFromSav1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r6, #0x0
	mov	r9, r6
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, r8
	mov	r1, #0x0
	bl	memset
	mov	r7, #0x0
	ldr	r2, .L337
	mov	r1, #0x0
.L319:
	lsl	r0, r7, #0x2
	add	r0, r0, r2
	str	r1, [r0]
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x1f
	bls	.L319	@cond_branch
	ldr	r1, .L337+0x4
	mov	r0, #0xcd
	lsl	r0, r0, #0x3
	mul	r0, r0, r4
	ldr	r1, [r1]
	add	r0, r0, r1
	ldr	r1, .L337+0x8
	add	r4, r0, r1
	mov	r7, #0x0
.L324:
	ldrh	r0, [r4]
	ldr	r1, .L337+0xc
	and	r1, r1, r0
	cmp	r1, #0x29
	bls	.LCB2738
	b	.L331	@long jump
.LCB2738:
	lsl	r0, r1, #0x2
	ldr	r1, .L337+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L338:
	.align	2, 0
.L337:
	.word	gUnknown_203AE0C
	.word	gSaveBlock1Ptr
	.word	0x1868
	.word	0xfff
	.word	.L333
	.align	2, 0
	.align	2, 0
.L333:
	.word	.L326
	.word	.L328
	.word	.L328
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L331
	.word	.L329
	.word	.L331
	.word	.L330
.L326:
	lsl	r1, r6, #0x3
	add	r1, r1, r8
	add	r0, r4, #0
	bl	sub_8113D08
	b	.L336
.L328:
	lsl	r1, r6, #0x3
	add	r1, r1, r8
	add	r0, r4, #0
	bl	sub_8113D94
	b	.L336
.L329:
	lsl	r1, r6, #0x3
	add	r1, r1, r8
	add	r0, r4, #0
	bl	sub_8113C20
	b	.L336
.L330:
	lsl	r1, r6, #0x3
	add	r1, r1, r8
	add	r0, r4, #0
	bl	sub_8113C8C
.L336:
	add	r4, r0, #0
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	b	.L325
.L331:
	mov	r0, r9
	lsl	r1, r0, #0x2
	ldr	r5, .L339
	add	r1, r1, r5
	add	r0, r4, #0
	bl	QuestLog_SkipCommand
	add	r4, r0, #0
	mov	r1, r9
	cmp	r1, #0
	bne	.L332	@cond_branch
	ldr	r0, [r5]
	bl	sub_8113ABC
.L332:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
.L325:
	cmp	r4, #0
	beq	.L322	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x1f
	bhi	.LCB2830
	b	.L324	@long jump
.LCB2830:
.L322:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L340:
	.align	2, 0
.L339:
	.word	gUnknown_203AE0C
.Lfe38:
	.size	 ReadQuestLogScriptFromSav1,.Lfe38-ReadQuestLogScriptFromSav1
	.align	2, 0
	.type	 QuestLog_BeginFadeAtEndOfScene,function
	.thumb_func
QuestLog_BeginFadeAtEndOfScene:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x1
	bl	FadeScreen
	ldr	r1, .L342
	ldr	r0, .L342+0x4
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	sQuestLogCB
	.word	QuestLog_AdvancePlayhead
.Lfe39:
	.size	 QuestLog_BeginFadeAtEndOfScene,.Lfe39-QuestLog_BeginFadeAtEndOfScene
	.align	2, 0
	.type	 QuestLog_AdvancePlayhead,function
	.thumb_func
QuestLog_AdvancePlayhead:
	push	{lr}
	ldr	r0, .L348
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L345	@cond_branch
	bl	LockPlayerFieldControls
	ldr	r1, .L348+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L346	@cond_branch
	ldr	r0, .L348+0x8
	ldr	r0, [r0]
	ldrb	r2, [r1]
	mov	r1, #0xcd
	lsl	r1, r1, #0x3
	mul	r1, r1, r2
	add	r0, r0, r1
	mov	r1, #0x98
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L346	@cond_branch
	ldr	r1, .L348+0xc
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	bl	QLPlayback_InitOverworldState
	b	.L345
.L349:
	.align	2, 0
.L348:
	.word	gPaletteFade
	.word	sCurrentSceneNum
	.word	gSaveBlock1Ptr
	.word	sNumScenes
.L346:
	ldr	r1, .L350
	mov	r0, #0x0
	strb	r0, [r1]
	bl	QuestLog_StartFinalScene
.L345:
	pop	{r0}
	bx	r0
.L351:
	.align	2, 0
.L350:
	.word	gQuestLogPlaybackState
.Lfe40:
	.size	 QuestLog_AdvancePlayhead,.Lfe40-QuestLog_AdvancePlayhead
	.align	2, 0
	.type	 QuestLog_StartFinalScene,function
	.thumb_func
QuestLog_StartFinalScene:
	push	{lr}
	bl	ResetSpecialVars
	bl	Save_ResetSaveCounters
	mov	r0, #0x0
	bl	LoadGameSave
	ldr	r0, .L353
	bl	SetMainCallback2
	ldr	r1, .L353+0x4
	ldr	r0, .L353+0x8
	str	r0, [r1]
	bl	FreeAllWindowBuffers
	ldr	r1, .L353+0xc
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r1, .L353+0x10
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L354:
	.align	2, 0
.L353:
	.word	CB2_EnterFieldFromQuestLog
	.word	gFieldCallback2
	.word	FieldCB2_FinalScene
	.word	gQuestLogState
	.word	sQuestLogCB
.Lfe41:
	.size	 QuestLog_StartFinalScene,.Lfe41-QuestLog_StartFinalScene
	.align	2, 0
	.globl	QuestLog_AdvancePlayhead_
	.type	 QuestLog_AdvancePlayhead_,function
	.thumb_func
QuestLog_AdvancePlayhead_:
	push	{lr}
	bl	QuestLog_AdvancePlayhead
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 QuestLog_AdvancePlayhead_,.Lfe42-QuestLog_AdvancePlayhead_
	.align	2, 0
	.globl	QuestLog_SchedulePlaybackCB
	.type	 QuestLog_SchedulePlaybackCB,function
	.thumb_func
QuestLog_SchedulePlaybackCB:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L363
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L358	@cond_branch
	cmp	r0, #0x2
	beq	.L359	@cond_branch
	b	.L357
.L364:
	.align	2, 0
.L363:
	.word	gQuestLogState
.L358:
	bl	QuestLog_CutRecording
	b	.L357
.L359:
	ldr	r1, .L365
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r0, .L365+0x4
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L365+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	strh	r2, [r1, #0xa]
	mov	r1, #0xe
	add	r2, r4, #0
	bl	SetWordTaskArg
	mov	r0, #0x1
	b	.L362
.L366:
	.align	2, 0
.L365:
	.word	gQuestLogPlaybackState
	.word	Task_RunPlaybackCB
	.word	gTasks
.L357:
	mov	r0, #0x0
.L362:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 QuestLog_SchedulePlaybackCB,.Lfe43-QuestLog_SchedulePlaybackCB
	.align	2, 0
	.type	 Task_RunPlaybackCB,function
	.thumb_func
Task_RunPlaybackCB:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L376
	add	r4, r0, r1
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L369	@cond_branch
	cmp	r1, #0x1
	beq	.L371	@cond_branch
	b	.L368
.L377:
	.align	2, 0
.L376:
	.word	gTasks+0x8
.L369:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7f
	bne	.L368	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r2, .L378
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	b	.L368
.L379:
	.align	2, 0
.L378:
	.word	sQuestLogCurrentScene
.L371:
	ldr	r0, .L380
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L368	@cond_branch
	ldr	r0, .L380+0x4
	strb	r1, [r0]
	add	r0, r5, #0
	mov	r1, #0xe
	bl	GetWordTaskArg
	cmp	r0, #0
	beq	.L373	@cond_branch
	bl	_call_via_r0
.L373:
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r1, .L380+0x8
	ldr	r0, .L380+0xc
	str	r0, [r1]
.L368:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L381:
	.align	2, 0
.L380:
	.word	gPaletteFade
	.word	gQuestLogPlaybackState
	.word	sQuestLogCB
	.word	QuestLog_AdvancePlayhead
.Lfe44:
	.size	 Task_RunPlaybackCB,.Lfe44-Task_RunPlaybackCB
	.align	2, 0
	.type	 QuestLog_PlayCurrentEvent,function
	.thumb_func
QuestLog_PlayCurrentEvent:
	push	{r4, r5, lr}
	ldr	r4, .L391
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L383	@cond_branch
	ldrb	r0, [r4, #0x2]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x2]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L382	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x31
	neg	r1, r1
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x2
	bl	TogglePlaybackStateForOverworldLock
.L383:
	ldrb	r1, [r4]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L385	@cond_branch
	ldrb	r0, [r4, #0x3]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xf
	bls	.L385	@cond_branch
	bl	QuestLog_CloseTextWindow
	ldrb	r0, [r4]
	mov	r1, #0x31
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r4, #0x3]
.L385:
	ldr	r4, .L391
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1f
	bhi	.L382	@cond_branch
	ldr	r5, .L391+0x4
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	sub_8113B44
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L388	@cond_branch
	bl	HandleShowQuestLogMessage
	b	.L382
.L392:
	.align	2, 0
.L391:
	.word	sQuestLogCurrentScene
	.word	gUnknown_203AE0C
.L388:
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	sub_8113AE8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L382	@cond_branch
	bl	HandleShowQuestLogMessage
.L382:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 QuestLog_PlayCurrentEvent,.Lfe45-QuestLog_PlayCurrentEvent
	.align	2, 0
	.type	 HandleShowQuestLogMessage,function
	.thumb_func
HandleShowQuestLogMessage:
	push	{r4, lr}
	ldr	r4, .L397
	ldrb	r1, [r4]
	mov	r2, #0xf
	and	r2, r2, r1
	cmp	r2, #0
	bne	.L394	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	mov	r1, #0x31
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r4]
	strb	r2, [r4, #0x3]
	bl	GetQuestLogTextDisplayDuration
	strb	r0, [r4, #0x2]
	ldr	r0, .L397+0x4
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L395	@cond_branch
	ldrb	r0, [r4, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x1]
.L395:
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x20
	bhi	.L393	@cond_branch
	bl	DrawQuestLogSceneDescription
.L394:
	mov	r0, #0x1
	bl	TogglePlaybackStateForOverworldLock
.L393:
	pop	{r4}
	pop	{r0}
	bx	r0
.L398:
	.align	2, 0
.L397:
	.word	sQuestLogCurrentScene
	.word	gUnknown_203B044
.Lfe46:
	.size	 HandleShowQuestLogMessage,.Lfe46-HandleShowQuestLogMessage
	.align	2, 0
	.type	 GetQuestLogTextDisplayDuration,function
	.thumb_func
GetQuestLogTextDisplayDuration:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r3, .L411
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L401	@cond_branch
	ldr	r4, .L411+0x4
.L403:
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0xfe
	beq	.L402	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L402:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, r4
	bhi	.L401	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L403	@cond_branch
.L401:
	cmp	r2, #0x13
	bhi	.L407	@cond_branch
	mov	r0, #0x5f
	b	.L410
.L412:
	.align	2, 0
.L411:
	.word	gStringVar4
	.word	0x3ff
.L407:
	cmp	r2, #0x23
	bhi	.L408	@cond_branch
	mov	r0, #0x7f
	b	.L410
.L408:
	cmp	r2, #0x2d
	bls	.L409	@cond_branch
	mov	r0, #0xff
	b	.L410
.L409:
	mov	r0, #0xbf
.L410:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetQuestLogTextDisplayDuration,.Lfe47-GetQuestLogTextDisplayDuration
	.align	2, 0
	.globl	sub_8111C2C
	.type	 sub_8111C2C,function
	.thumb_func
sub_8111C2C:
	push	{lr}
	ldr	r0, .L418
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L415	@cond_branch
	ldr	r0, .L418+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L416	@cond_branch
	ldr	r0, .L418+0x8
	ldrb	r0, [r0]
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L416	@cond_branch
	cmp	r1, #0x2
	bne	.L415	@cond_branch
.L416:
	mov	r0, #0x1
	b	.L417
.L419:
	.align	2, 0
.L418:
	.word	gQuestLogState
	.word	gQuestLogPlaybackState
	.word	sQuestLogCurrentScene
.L415:
	mov	r0, #0x0
.L417:
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 sub_8111C2C,.Lfe48-sub_8111C2C
	.align	2, 0
	.globl	sub_8111C68
	.type	 sub_8111C68,function
	.thumb_func
sub_8111C68:
	push	{r4, r5, lr}
	ldr	r5, .L425
	ldrb	r2, [r5]
	mov	r4, #0xc0
	and	r4, r4, r2
	cmp	r4, #0
	bne	.L421	@cond_branch
	ldr	r0, .L425+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r3, #0x1
	and	r3, r3, r1
	cmp	r3, #0
	beq	.L422	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r2
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r5]
	ldr	r0, .L425+0x8
	strb	r4, [r0]
	mov	r0, #0x3
	neg	r0, r0
	bl	QuestLog_BeginFadeAtEndOfScene
	b	.L421
.L426:
	.align	2, 0
.L425:
	.word	sQuestLogCurrentScene
	.word	gMain
	.word	gQuestLogPlaybackState
.L422:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L421	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r2
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r5]
	ldr	r0, .L427
	strb	r3, [r0]
	mov	r0, #0x3
	neg	r0, r0
	bl	QuestLog_SkipToEndOfPlayback
.L421:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L428:
	.align	2, 0
.L427:
	.word	gQuestLogPlaybackState
.Lfe49:
	.size	 sub_8111C68,.Lfe49-sub_8111C68
	.align	2, 0
	.globl	QuestLogScenePlaybackIsEnding
	.type	 QuestLogScenePlaybackIsEnding,function
	.thumb_func
QuestLogScenePlaybackIsEnding:
	push	{lr}
	ldr	r0, .L432
	ldrb	r1, [r0]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L430	@cond_branch
	mov	r0, #0x0
	b	.L431
.L433:
	.align	2, 0
.L432:
	.word	sQuestLogCurrentScene
.L430:
	mov	r0, #0x1
.L431:
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 QuestLogScenePlaybackIsEnding,.Lfe50-QuestLogScenePlaybackIsEnding
	.align	2, 0
	.globl	QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode
	.type	 QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode,function
	.thumb_func
QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode:
	push	{lr}
	ldr	r0, .L436
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L435	@cond_branch
	ldr	r0, .L436+0x4
	ldrb	r0, [r0]
	bl	DrawPreviouslyOnQuestHeader
.L435:
	pop	{r0}
	bx	r0
.L437:
	.align	2, 0
.L436:
	.word	gQuestLogState
	.word	sNumScenes
.Lfe51:
	.size	 QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode,.Lfe51-QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode
	.align	2, 0
	.type	 DrawQuestLogSceneDescription,function
	.thumb_func
DrawQuestLogSceneDescription:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	mov	r4, #0x0
	mov	r1, #0x0
	ldr	r2, .L446
	ldrb	r0, [r2]
	ldr	r5, .L446+0x4
	cmp	r0, #0xff
	beq	.L440	@cond_branch
.L442:
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0xfe
	bne	.L441	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L441:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xff
	bhi	.L440	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L442	@cond_branch
.L440:
	ldrb	r0, [r5, #0x2]
	bl	PutWindowTilemap
	ldrb	r0, [r5, #0x2]
	bl	sub_8111D90
	ldrb	r0, [r5, #0x2]
	ldr	r1, .L446+0x8
	add	r1, r4, r1
	ldrb	r3, [r1]
	mov	r1, #0x1
	str	r1, [sp]
	mov	r2, #0x0
	str	r2, [sp, #0x4]
	ldr	r1, .L446+0xc
	str	r1, [sp, #0x8]
	str	r2, [sp, #0xc]
	ldr	r1, .L446
	str	r1, [sp, #0x10]
	mov	r1, #0x2
	mov	r2, #0x2
	bl	AddTextPrinterParameterized4
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L447:
	.align	2, 0
.L446:
	.word	gStringVar4
	.word	sQuestLogHeaderWindowIds
	.word	sQuestLogTextLineYCoords
	.word	sTextColors
.Lfe52:
	.size	 DrawQuestLogSceneDescription,.Lfe52-DrawQuestLogSceneDescription
	.align	2, 0
	.type	 sub_8111D90,function
	.thumb_func
sub_8111D90:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L465
	mov	r9, r0
	mov	r0, #0xb4
	lsl	r0, r0, #0x5
	bl	Alloc
	mov	r8, r0
	cmp	r0, #0
	beq	.L449	@cond_branch
	mov	r1, #0x0
.L453:
	cmp	r1, #0
	beq	.L456	@cond_branch
	cmp	r1, #0x5
	beq	.L457	@cond_branch
	mov	r0, #0x1
	b	.L454
.L466:
	.align	2, 0
.L465:
	.word	sUnknown_8456638
.L456:
	mov	r0, #0x0
	b	.L454
.L457:
	mov	r0, #0x2
.L454:
	mov	r4, #0x0
	lsl	r6, r0, #0x5
	lsl	r0, r1, #0x4
	add	r7, r1, #0x1
	sub	r0, r0, r1
	lsl	r5, r0, #0x1
.L462:
	add	r1, r5, r4
	lsl	r1, r1, #0x5
	add	r1, r1, r8
	mov	r2, r9
	add	r0, r2, r6
	ldr	r2, .L467
	bl	CpuSet
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1d
	bls	.L462	@cond_branch
	lsl	r0, r7, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x5
	bls	.L453	@cond_branch
	mov	r2, #0xb4
	lsl	r2, r2, #0x5
	mov	r0, sl
	mov	r1, r8
	mov	r3, #0x0
	bl	CopyToWindowPixelBuffer
	mov	r0, r8
	bl	Free
.L449:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	0x4000008
.Lfe53:
	.size	 sub_8111D90,.Lfe53-sub_8111D90
	.align	2, 0
	.type	 QuestLog_CloseTextWindow,function
	.thumb_func
QuestLog_CloseTextWindow:
	push	{r4, lr}
	add	sp, sp, #-0x8
	ldr	r4, .L470
	ldrb	r0, [r4, #0x2]
	bl	ClearWindowTilemap
	ldrb	r0, [r4, #0x2]
	mov	r1, #0xf0
	str	r1, [sp]
	mov	r1, #0x30
	str	r1, [sp, #0x4]
	mov	r1, #0xf
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	ldrb	r0, [r4, #0x2]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r4, #0x1]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x1]
	mov	r1, #0x1
	bl	CopyWindowToVram
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L471:
	.align	2, 0
.L470:
	.word	sQuestLogHeaderWindowIds
.Lfe54:
	.size	 QuestLog_CloseTextWindow,.Lfe54-QuestLog_CloseTextWindow
	.align	2, 0
	.type	 QuestLog_SkipToEndOfPlayback,function
	.thumb_func
QuestLog_SkipToEndOfPlayback:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x1
	bl	FadeScreen
	ldr	r1, .L473
	ldr	r0, .L473+0x4
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L474:
	.align	2, 0
.L473:
	.word	sQuestLogCB
	.word	QuestLog_WaitFadeAndCancelPlayback
.Lfe55:
	.size	 QuestLog_SkipToEndOfPlayback,.Lfe55-QuestLog_SkipToEndOfPlayback
	.align	2, 0
	.type	 QuestLog_WaitFadeAndCancelPlayback,function
	.thumb_func
QuestLog_WaitFadeAndCancelPlayback:
	push	{r4, lr}
	ldr	r0, .L483
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L476	@cond_branch
	bl	LockPlayerFieldControls
	ldr	r3, .L483+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L478	@cond_branch
	ldr	r0, .L483+0x8
	ldr	r0, [r0]
	ldrb	r2, [r3]
	mov	r1, #0xcd
	lsl	r1, r1, #0x3
	mul	r1, r1, r2
	add	r0, r0, r1
	mov	r1, #0x98
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L478	@cond_branch
	add	r4, r3, #0
.L481:
	ldrb	r0, [r4]
	ldr	r1, .L483+0xc
	bl	ReadQuestLogScriptFromSav1
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L478	@cond_branch
	ldr	r0, .L483+0x8
	ldr	r1, [r0]
	ldrb	r2, [r4]
	mov	r0, #0xcd
	lsl	r0, r0, #0x3
	mul	r0, r0, r2
	add	r1, r1, r0
	mov	r0, #0x98
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L481	@cond_branch
.L478:
	ldr	r1, .L483+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	bl	QuestLog_StartFinalScene
.L476:
	pop	{r4}
	pop	{r0}
	bx	r0
.L484:
	.align	2, 0
.L483:
	.word	gPaletteFade
	.word	sCurrentSceneNum
	.word	gSaveBlock1Ptr
	.word	sQuestLogSceneRecordBuffer
	.word	gQuestLogPlaybackState
.Lfe56:
	.size	 QuestLog_WaitFadeAndCancelPlayback,.Lfe56-QuestLog_WaitFadeAndCancelPlayback
	.align	2, 0
	.globl	QuestLog_InitPalettesBackup
	.type	 QuestLog_InitPalettesBackup,function
	.thumb_func
QuestLog_InitPalettesBackup:
	push	{r4, lr}
	ldr	r0, .L487
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.L486	@cond_branch
	ldr	r4, .L487+0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	AllocZeroed
	str	r0, [r4]
.L486:
	pop	{r4}
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	gQuestLogState
	.word	sPalettesBackup
.Lfe57:
	.size	 QuestLog_InitPalettesBackup,.Lfe57-QuestLog_InitPalettesBackup
	.align	2, 0
	.globl	QuestLog_BackUpPalette
	.type	 QuestLog_BackUpPalette,function
	.thumb_func
QuestLog_BackUpPalette:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsr	r3, r3, #0xf
	ldr	r0, .L490
	add	r0, r3, r0
	ldr	r1, .L490+0x4
	ldr	r1, [r1]
	add	r1, r1, r3
	bl	CpuSet
	pop	{r0}
	bx	r0
.L491:
	.align	2, 0
.L490:
	.word	gPlttBufferUnfaded
	.word	sPalettesBackup
.Lfe58:
	.size	 QuestLog_BackUpPalette,.Lfe58-QuestLog_BackUpPalette
	.align	2, 0
	.type	 FieldCB2_FinalScene,function
	.thumb_func
FieldCB2_FinalScene:
	push	{lr}
	mov	r0, #0x4
	bl	GetTextWindowPalette
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	bl	DrawPreviouslyOnQuestHeader
	bl	FieldCB_WarpExitFadeFromBlack
	ldr	r0, .L493
	mov	r1, #0xff
	bl	CreateTask
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L494:
	.align	2, 0
.L493:
	.word	Task_FinalScene_WaitFade
.Lfe59:
	.size	 FieldCB2_FinalScene,.Lfe59-FieldCB2_FinalScene
	.align	2, 0
	.type	 Task_FinalScene_WaitFade,function
	.thumb_func
Task_FinalScene_WaitFade:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L497
	add	r4, r1, r0
	bl	ArePlayerFieldControlsLocked
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L496	@cond_branch
	bl	FreezeObjectEvents
	bl	HandleEnforcedLookDirectionOnPlayerStopMoving
	bl	StopPlayerAvatar
	bl	LockPlayerFieldControls
	ldr	r0, .L497+0x4
	str	r0, [r4]
.L496:
	pop	{r4}
	pop	{r0}
	bx	r0
.L498:
	.align	2, 0
.L497:
	.word	gTasks
	.word	Task_QuestLogScene_SavedGame
.Lfe60:
	.size	 Task_FinalScene_WaitFade,.Lfe60-Task_FinalScene_WaitFade
	.align	2, 0
	.type	 Task_QuestLogScene_SavedGame,function
	.thumb_func
Task_QuestLogScene_SavedGame:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L502
	add	r5, r1, r0
	ldr	r0, .L502+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L500	@cond_branch
	ldr	r0, .L502+0x8
	ldrb	r1, [r0]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	beq	.L501	@cond_branch
	ldr	r0, .L502+0xc
	ldr	r1, .L502+0x10
	ldrb	r1, [r1, #0x14]
	bl	GetMapNameGeneric
	ldr	r0, .L502+0x14
	ldr	r1, .L502+0x18
	bl	StringExpandPlaceholders
	bl	DrawQuestLogSceneDescription
.L501:
	strh	r4, [r5, #0x8]
	strh	r4, [r5, #0xa]
	ldr	r0, .L502+0x1c
	str	r0, [r5]
	bl	FreezeObjectEvents
	bl	LockPlayerFieldControls
.L500:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L503:
	.align	2, 0
.L502:
	.word	gTasks
	.word	gPaletteFade
	.word	sQuestLogCurrentScene
	.word	gStringVar1
	.word	gMapHeader
	.word	gStringVar4
	.word	gText_QuestLog_SavedGameAtLocation
	.word	Task_WaitAtEndOfQuestLog
.Lfe61:
	.size	 Task_QuestLogScene_SavedGame,.Lfe61-Task_QuestLogScene_SavedGame
	.align	2, 0
	.type	 Task_WaitAtEndOfQuestLog,function
	.thumb_func
Task_WaitAtEndOfQuestLog:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L508
	add	r4, r1, r0
	ldr	r0, .L508+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L506	@cond_branch
	ldrh	r2, [r4, #0x8]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7e
	bgt	.L506	@cond_branch
	ldr	r0, .L508+0x8
	ldrb	r1, [r0]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L505	@cond_branch
.L506:
	bl	QuestLog_CloseTextWindow
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L508+0xc
	str	r0, [r4]
	ldr	r0, .L508+0x10
	strb	r1, [r0]
	b	.L507
.L509:
	.align	2, 0
.L508:
	.word	gTasks
	.word	gMain
	.word	sQuestLogCurrentScene
	.word	Task_EndQuestLog
	.word	gQuestLogState
.L505:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x8]
.L507:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 Task_WaitAtEndOfQuestLog,.Lfe62-Task_WaitAtEndOfQuestLog
	.align	2, 0
	.type	 Task_EndQuestLog,function
	.thumb_func
Task_EndQuestLog:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L527
	add	r6, r0, r1
	mov	r0, #0x0
	ldrsh	r1, [r6, r0]
	cmp	r1, #0x1
	beq	.L513	@cond_branch
	cmp	r1, #0x1
	bgt	.L526	@cond_branch
	cmp	r1, #0
	beq	.L512	@cond_branch
	b	.L523
.L528:
	.align	2, 0
.L527:
	.word	gTasks+0x8
.L526:
	cmp	r1, #0x2
	beq	.L520	@cond_branch
	b	.L523
.L512:
	ldr	r0, .L529
	strb	r1, [r0]
	bl	Overworld_PlaySpecialMapMusic
	bl	QL_SlightlyDarkenSomePals
	ldr	r0, .L529+0x4
	ldrb	r0, [r0]
	ldr	r2, .L529+0x8
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x3
	str	r1, [sp, #0x4]
	mov	r1, #0xf
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	b	.L521
.L530:
	.align	2, 0
.L529:
	.word	gDisableMapMusicChangeOnMapLoad
	.word	sQuestLogHeaderWindowIds
	.word	sQuestLogHeaderWindowTemplates
.L513:
	add	r0, r5, #0
	bl	sub_81121D8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L511	@cond_branch
	mov	r5, #0x0
.L518:
	ldr	r4, .L531
	add	r4, r5, r4
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	bl	RemoveWindow
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L518	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0x2]
	b	.L521
.L532:
	.align	2, 0
.L531:
	.word	sQuestLogHeaderWindowIds
.L520:
	ldrh	r1, [r6, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r6, r2]
	cmp	r0, #0x1f
	bgt	.L521	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r6, #0x2]
	b	.L511
.L521:
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
	b	.L511
.L523:
	ldr	r6, .L533
	ldrb	r1, [r6]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L524	@cond_branch
	mov	r0, #0x1
	bl	ShowMapNamePopup
.L524:
	ldr	r4, .L533+0x4
	ldr	r0, [r4]
	ldr	r1, .L533+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	bl	CpuSet
	ldr	r0, [r4]
	bl	Free
	mov	r4, #0x0
	str	r4, [r6]
	bl	ClearPlayerHeldMovementAndUnfreezeObjectEvents
	bl	UnlockPlayerFieldControls
	ldr	r2, .L533+0xc
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L533+0x10
	strb	r4, [r0]
	mov	r0, #0x0
	bl	DisableWildEncounters
	ldr	r1, .L533+0x14
	mov	r0, #0x1
	strb	r0, [r1]
	add	r0, r5, #0
	bl	DestroyTask
.L511:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	sQuestLogCurrentScene
	.word	sPalettesBackup
	.word	gPlttBufferUnfaded
	.word	gTextFlags
	.word	gGlobalFieldTintMode
	.word	gHelpSystemEnabled
.Lfe63:
	.size	 Task_EndQuestLog,.Lfe63-Task_EndQuestLog
	.align	2, 0
	.type	 sub_81121D8,function
	.thumb_func
sub_81121D8:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L538
	add	r7, r1, r0
	ldrh	r1, [r7, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r7, r2]
	cmp	r0, #0xf
	bgt	.L536	@cond_branch
	ldr	r5, .L538+0x4
	ldr	r6, .L538+0x8
	mov	r4, #0xf
	sub	r3, r4, r1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0xdf
	bl	CopyPaletteInvertedTint
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	add	r6, r6, r0
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrb	r0, [r7, #0x2]
	sub	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r6, #0
	add	r3, r4, #0
	bl	CopyPaletteInvertedTint
	ldr	r5, .L538+0xc
	ldrb	r0, [r5]
	ldr	r4, .L538+0x10
	ldrb	r3, [r4, #0x4]
	lsl	r3, r3, #0x3
	sub	r3, r3, #0x1
	ldrh	r1, [r7, #0x2]
	sub	r3, r3, r1
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	mov	r6, #0x1
	str	r6, [sp, #0x4]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	FillWindowPixelRect
	ldrb	r0, [r5, #0x1]
	ldrh	r3, [r7, #0x2]
	ldrb	r1, [r4, #0xb]
	lsl	r1, r1, #0x3
	str	r1, [sp]
	str	r6, [sp, #0x4]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	FillWindowPixelRect
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r5, #0x1]
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrh	r0, [r7, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x2]
	mov	r0, #0x0
	b	.L537
.L539:
	.align	2, 0
.L538:
	.word	gTasks+0x8
	.word	gPlttBufferUnfaded+0x2
	.word	gPlttBufferFaded+0x2
	.word	sQuestLogHeaderWindowIds
	.word	sQuestLogHeaderWindowTemplates
.L536:
	mov	r0, #0x1
.L537:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 sub_81121D8,.Lfe64-sub_81121D8
	.align	2, 0
	.type	 QL_SlightlyDarkenSomePals,function
	.thumb_func
QL_SlightlyDarkenSomePals:
	push	{r4, r5, r6, lr}
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	bl	Alloc
	add	r6, r0, #0
	ldr	r4, .L541
	ldr	r0, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x2
	add	r1, r6, #0
	add	r2, r5, #0
	bl	CpuSet
	ldr	r1, [r4]
	add	r0, r1, #0
	mov	r2, #0xd0
	bl	SlightlyDarkenPalsInWeather
	ldr	r1, [r4]
	mov	r0, #0x88
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r0, r1, #0
	mov	r2, #0x10
	bl	SlightlyDarkenPalsInWeather
	ldr	r1, [r4]
	mov	r0, #0xb0
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r0, r1, #0
	mov	r2, #0x40
	bl	SlightlyDarkenPalsInWeather
	ldr	r1, [r4]
	mov	r0, #0xd8
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r0, r1, #0
	mov	r2, #0x50
	bl	SlightlyDarkenPalsInWeather
	ldr	r0, [r4]
	ldr	r1, .L541+0x4
	add	r2, r5, #0
	bl	CpuSet
	ldr	r1, [r4]
	add	r0, r6, #0
	add	r2, r5, #0
	bl	CpuSet
	add	r0, r6, #0
	bl	Free
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L542:
	.align	2, 0
.L541:
	.word	sPalettesBackup
	.word	gPlttBufferUnfaded
.Lfe65:
	.size	 QL_SlightlyDarkenSomePals,.Lfe65-QL_SlightlyDarkenSomePals
	.align	2, 0
	.globl	FinishRecordingQuestLogScene
	.type	 FinishRecordingQuestLogScene,function
	.thumb_func
FinishRecordingQuestLogScene:
	push	{r4, lr}
	ldr	r4, .L545
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L544	@cond_branch
	ldr	r0, .L545+0x4
	bl	TryRecordQuestLogEntrySequence
	bl	TryRecordEvent39_GoToNextScene
	mov	r0, #0x0
	strb	r0, [r4]
	ldr	r0, .L545+0x8
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L545+0xc
	str	r1, [r0]
	ldr	r0, .L545+0x10
	str	r1, [r0]
	ldr	r0, .L545+0x14
	strb	r1, [r0]
.L544:
	pop	{r4}
	pop	{r0}
	bx	r0
.L546:
	.align	2, 0
.L545:
	.word	gQuestLogState
	.word	sQuestLogSceneRecordBuffer
	.word	sQuestLogCB
	.word	gUnknown_203AE04
	.word	sEventRecordingPointer
	.word	gQuestLogPlaybackState
.Lfe66:
	.size	 FinishRecordingQuestLogScene,.Lfe66-FinishRecordingQuestLogScene
	.align	2, 0
	.globl	QuestLog_CutRecording
	.type	 QuestLog_CutRecording,function
	.thumb_func
QuestLog_CutRecording:
	push	{r4, r5, lr}
	ldr	r5, .L549
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L548	@cond_branch
	ldr	r4, .L549+0x4
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L548	@cond_branch
	ldr	r0, .L549+0x8
	bl	TryRecordQuestLogEntrySequence
	mov	r0, #0x1
	bl	TryRecordEvent41_IncCursor
	bl	TryRecordEvent39_GoToNextScene
	mov	r0, #0x0
	strb	r0, [r5]
	strb	r0, [r4]
	ldr	r1, .L549+0xc
	mov	r0, #0x0
	str	r0, [r1]
.L548:
	ldr	r0, .L549+0x10
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L549+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L550:
	.align	2, 0
.L549:
	.word	gQuestLogPlaybackState
	.word	gQuestLogState
	.word	sQuestLogSceneRecordBuffer
	.word	sQuestLogCB
	.word	gUnknown_203AE04
	.word	sEventRecordingPointer
.Lfe67:
	.size	 QuestLog_CutRecording,.Lfe67-QuestLog_CutRecording
	.align	2, 0
	.type	 SortQuestLogInSav1,function
	.thumb_func
SortQuestLogInSav1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r0, #0xcd
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	mov	r8, r0
	ldr	r0, .L559
	ldrb	r4, [r0]
	mov	r5, #0x0
	mov	r6, #0x0
.L555:
	cmp	r4, #0x3
	bls	.L556	@cond_branch
	mov	r4, #0x0
.L556:
	ldr	r3, .L559+0x4
	ldr	r0, [r3]
	mov	r2, #0xcd
	lsl	r2, r2, #0x3
	mov	r1, r4
	mul	r1, r1, r2
	add	r0, r0, r1
	mov	r7, #0x98
	lsl	r7, r7, #0x5
	add	r1, r0, r7
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L557	@cond_branch
	mov	r0, r5
	mul	r0, r0, r2
	add	r0, r0, r8
	str	r3, [sp]
	bl	memcpy
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, [sp]
.L557:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L555	@cond_branch
	ldr	r1, .L559
	mov	r0, #0x3
	and	r5, r5, r0
	strb	r5, [r1]
	ldr	r1, [r3]
	mov	r0, #0x98
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r2, #0xcd
	lsl	r2, r2, #0x4
	mov	r0, r8
	bl	CpuSet
	mov	r0, r8
	bl	Free
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L560:
	.align	2, 0
.L559:
	.word	sCurrentSceneNum
	.word	gSaveBlock1Ptr
.Lfe68:
	.size	 SortQuestLogInSav1,.Lfe68-SortQuestLogInSav1
	.align	2, 0
	.globl	SaveQuestLogData
	.type	 SaveQuestLogData,function
	.thumb_func
SaveQuestLogData:
	push	{lr}
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L562	@cond_branch
	bl	QuestLog_CutRecording
	bl	SortQuestLogInSav1
.L562:
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 SaveQuestLogData,.Lfe69-SaveQuestLogData
	.align	2, 0
	.globl	sub_811246C
	.type	 sub_811246C,function
	.thumb_func
sub_811246C:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L569
	add	r4, r0, r1
	ldrb	r0, [r4, #0x8]
	cmp	r0, #0xff
	bne	.L564	@cond_branch
	ldr	r5, .L569+0x4
	ldrb	r0, [r5]
	cmp	r0, #0xff
	beq	.L565	@cond_branch
	add	r1, r0, #0
	add	r0, r4, #0
	bl	ObjectEventSetHeldMovement
	mov	r0, #0xff
	strb	r0, [r5]
.L565:
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0xff
	beq	.L566	@cond_branch
	bl	QuestLogUpdatePlayerSprite
	mov	r0, #0xff
	strb	r0, [r5, #0x1]
.L566:
	add	r0, r4, #0
	add	r1, r6, #0
	bl	UpdateQuestLogObjectEventCurrentMovement
	b	.L567
.L570:
	.align	2, 0
.L569:
	.word	gObjectEvents
	.word	sMovementScripts
.L564:
	ldr	r5, .L571
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x1
	add	r1, r0, r5
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L568	@cond_branch
	add	r1, r0, #0
	add	r0, r4, #0
	bl	ObjectEventSetHeldMovement
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	mov	r1, #0xff
	strb	r1, [r0]
.L568:
	add	r0, r4, #0
	add	r1, r6, #0
	bl	UpdateQuestLogObjectEventCurrentMovement
.L567:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L572:
	.align	2, 0
.L571:
	.word	sMovementScripts
.Lfe70:
	.size	 sub_811246C,.Lfe70-sub_811246C
	.align	2, 0
	.globl	QuestLogRecordNPCStep
	.type	 QuestLogRecordNPCStep,function
	.thumb_func
QuestLogRecordNPCStep:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	bl	RecordHeadAtEndOfEntryOrScriptContext2Enabled
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L574	@cond_branch
	ldr	r2, .L575
	ldrh	r0, [r2]
	ldr	r3, .L575+0x4
	ldr	r5, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r1, .L575+0x8
	mov	ip, r1
	ldrh	r1, [r1]
	mov	r4, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strb	r4, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r6, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, r8
	strb	r4, [r0, #0x1]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r9
	strb	r1, [r0, #0x2]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, sl
	strb	r4, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	mov	r0, ip
	strh	r7, [r0]
.L574:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L576:
	.align	2, 0
.L575:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
	.word	sNextStepDelay
.Lfe71:
	.size	 QuestLogRecordNPCStep,.Lfe71-QuestLogRecordNPCStep
	.align	2, 0
	.globl	QuestLogRecordNPCStepWithDuration
	.type	 QuestLogRecordNPCStepWithDuration,function
	.thumb_func
QuestLogRecordNPCStepWithDuration:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	bl	RecordHeadAtEndOfEntry
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L578	@cond_branch
	ldr	r2, .L579
	ldrh	r0, [r2]
	ldr	r3, .L579+0x4
	ldr	r5, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r1, .L579+0x8
	mov	ip, r1
	ldrh	r1, [r1]
	mov	r4, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strb	r4, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r7, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r6, [r0, #0x1]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, r8
	strb	r4, [r0, #0x2]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r9
	strb	r1, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	mov	r0, sl
	mov	r4, ip
	strh	r0, [r4]
.L578:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L580:
	.align	2, 0
.L579:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
	.word	sNextStepDelay
.Lfe72:
	.size	 QuestLogRecordNPCStepWithDuration,.Lfe72-QuestLogRecordNPCStepWithDuration
	.align	2, 0
	.globl	QuestLogRecordPlayerStep
	.type	 QuestLogRecordPlayerStep,function
	.thumb_func
QuestLogRecordPlayerStep:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r8, r4
	bl	RecordHeadAtEndOfEntryOrScriptContext2Enabled
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L582	@cond_branch
	ldr	r0, .L585
	mov	ip, r0
	ldrh	r0, [r0]
	ldr	r6, .L585+0x4
	ldr	r5, [r6]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	cmp	r4, r0
	bne	.L584	@cond_branch
	cmp	r4, #0x3
	bls	.L582	@cond_branch
.L584:
	ldr	r2, .L585+0x8
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r4, .L585+0xc
	ldrh	r1, [r4]
	mov	r3, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strb	r3, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r6]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r3, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r6]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r8
	strb	r1, [r0, #0x3]
	ldrh	r0, [r2]
	mov	r1, ip
	strh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r2]
	strh	r7, [r4]
.L582:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L586:
	.align	2, 0
.L585:
	.word	sLastQuestLogCursor
	.word	sCurQuestLogEntry
	.word	sQuestLogCursor
	.word	sNextStepDelay
.Lfe73:
	.size	 QuestLogRecordPlayerStep,.Lfe73-QuestLogRecordPlayerStep
	.align	2, 0
	.globl	QuestLogRecordPlayerStepWithDuration
	.type	 QuestLogRecordPlayerStepWithDuration,function
	.thumb_func
QuestLogRecordPlayerStepWithDuration:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	bl	RecordHeadAtEndOfEntry
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L588	@cond_branch
	ldr	r2, .L589
	ldrh	r0, [r2]
	ldr	r3, .L589+0x4
	ldr	r4, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r6, .L589+0x8
	ldrh	r1, [r6]
	mov	r5, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strb	r5, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r7, [r0, #0x3]
	ldr	r1, .L589+0xc
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r2]
	mov	r0, r8
	strh	r0, [r6]
.L588:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L590:
	.align	2, 0
.L589:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
	.word	sNextStepDelay
	.word	sLastQuestLogCursor
.Lfe74:
	.size	 QuestLogRecordPlayerStepWithDuration,.Lfe74-QuestLogRecordPlayerStepWithDuration
	.align	2, 0
	.globl	QuestLogRecordPlayerAvatarGfxTransition
	.type	 QuestLogRecordPlayerAvatarGfxTransition,function
	.thumb_func
QuestLogRecordPlayerAvatarGfxTransition:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	RecordHeadAtEndOfEntry
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L592	@cond_branch
	ldr	r2, .L593
	ldrh	r0, [r2]
	ldr	r3, .L593+0x4
	ldr	r4, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r6, .L593+0x8
	ldrh	r1, [r6]
	mov	r5, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x1
	strb	r1, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r8
	strb	r1, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	strh	r7, [r6]
.L592:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L594:
	.align	2, 0
.L593:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
	.word	sNextStepDelay
.Lfe75:
	.size	 QuestLogRecordPlayerAvatarGfxTransition,.Lfe75-QuestLogRecordPlayerAvatarGfxTransition
	.align	2, 0
	.globl	QuestLogRecordPlayerAvatarGfxTransitionWithDuration
	.type	 QuestLogRecordPlayerAvatarGfxTransitionWithDuration,function
	.thumb_func
QuestLogRecordPlayerAvatarGfxTransitionWithDuration:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	bl	RecordHeadAtEndOfEntry
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L596	@cond_branch
	ldr	r2, .L597
	ldrh	r0, [r2]
	ldr	r3, .L597+0x4
	ldr	r4, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r6, .L597+0x8
	ldrh	r1, [r6]
	mov	r5, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x1
	strb	r1, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r7, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	mov	r0, r8
	strh	r0, [r6]
.L596:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L598:
	.align	2, 0
.L597:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
	.word	sNextStepDelay
.Lfe76:
	.size	 QuestLogRecordPlayerAvatarGfxTransitionWithDuration,.Lfe76-QuestLogRecordPlayerAvatarGfxTransitionWithDuration
	.align	2, 0
	.globl	sub_81127F8
	.type	 sub_81127F8,function
	.thumb_func
sub_81127F8:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	ldr	r5, .L603
	ldr	r1, .L603+0x4
	ldrh	r0, [r5]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L600	@cond_branch
	ldr	r2, [r2]
	ldr	r0, .L603+0x8
	and	r2, r2, r0
	ldrh	r1, [r5]
	ldr	r3, .L603+0xc
	ldr	r4, [r3]
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldr	r6, .L603+0x10
	ldrh	r0, [r6]
	strh	r0, [r1, #0x4]
	ldrh	r0, [r5]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x2
	strb	r1, [r0, #0x6]
	ldrh	r0, [r5]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r2, [r0]
	ldrh	r0, [r5]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsr	r1, r2, #0x8
	strb	r1, [r0, #0x1]
	ldrh	r0, [r5]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsr	r1, r2, #0x10
	strb	r1, [r0, #0x2]
	ldrh	r0, [r5]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsr	r2, r2, #0x18
	strb	r2, [r0, #0x3]
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	bl	ArePlayerFieldControlsLocked
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L601	@cond_branch
	mov	r0, #0x1
.L601:
	strh	r0, [r6]
.L600:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L604:
	.align	2, 0
.L603:
	.word	sQuestLogCursor
	.word	sNumEventsInLogEntry
	.word	0xff00f3
	.word	sCurQuestLogEntry
	.word	sNextStepDelay
.Lfe77:
	.size	 sub_81127F8,.Lfe77-sub_81127F8
	.align	2, 0
	.type	 TogglePlaybackStateForOverworldLock,function
	.thumb_func
TogglePlaybackStateForOverworldLock:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L607	@cond_branch
	cmp	r0, #0x2
	beq	.L609	@cond_branch
	b	.L606
.L607:
	ldr	r1, .L614
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bne	.L606	@cond_branch
	mov	r0, #0x3
	b	.L613
.L615:
	.align	2, 0
.L614:
	.word	gQuestLogPlaybackState
.L609:
	ldr	r1, .L616
	ldrb	r0, [r1]
	cmp	r0, #0x3
	bne	.L606	@cond_branch
	mov	r0, #0x1
.L613:
	strb	r0, [r1]
.L606:
	pop	{r0}
	bx	r0
.L617:
	.align	2, 0
.L616:
	.word	gQuestLogPlaybackState
.Lfe78:
	.size	 TogglePlaybackStateForOverworldLock,.Lfe78-TogglePlaybackStateForOverworldLock
	.align	2, 0
	.globl	QuestLog_OnEscalatorWarp
	.type	 QuestLog_OnEscalatorWarp,function
	.thumb_func
QuestLog_OnEscalatorWarp:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	sub_8112CAC
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r4, #0x1
	beq	.L620	@cond_branch
	cmp	r4, #0x2
	beq	.L624	@cond_branch
	b	.L619
.L620:
	cmp	r1, #0x1
	bne	.L621	@cond_branch
	ldr	r1, .L631
	mov	r0, #0x3
	strb	r0, [r1]
	b	.L619
.L632:
	.align	2, 0
.L631:
	.word	gQuestLogPlaybackState
.L621:
	cmp	r1, #0x2
	bne	.L619	@cond_branch
	ldr	r2, .L633
	ldrh	r1, [r2]
	ldr	r0, .L633+0x4
	ldr	r3, [r0]
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldr	r4, .L633+0x8
	ldrh	r0, [r4]
	mov	r5, #0x0
	strh	r0, [r1, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	mov	r1, #0x3
	strb	r1, [r0, #0x6]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	strh	r5, [r4]
	ldr	r1, .L633+0xc
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L619
.L634:
	.align	2, 0
.L633:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
	.word	sNextStepDelay
	.word	gQuestLogPlaybackState
.L624:
	cmp	r1, #0x1
	beq	.L630	@cond_branch
	cmp	r1, #0x2
	bne	.L619	@cond_branch
.L630:
	ldr	r0, .L635
	strb	r1, [r0]
.L619:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L636:
	.align	2, 0
.L635:
	.word	gQuestLogPlaybackState
.Lfe79:
	.size	 QuestLog_OnEscalatorWarp,.Lfe79-QuestLog_OnEscalatorWarp
	.section .rodata
	.align	2, 0
.LC255:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0xffff
	.byte	0xff
	.space	1
.text
	.align	2, 0
	.type	 SetUpQuestLogEntry,function
	.thumb_func
SetUpQuestLogEntry:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r2, #0x10
	cmp	r0, #0x1
	beq	.L640	@cond_branch
	cmp	r0, #0x2
	beq	.L646	@cond_branch
	ldr	r1, .L662
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L638
.L663:
	.align	2, 0
.L662:
	.word	gQuestLogPlaybackState
.L640:
	ldr	r2, .L664
	str	r3, [r2]
	ldr	r1, .L664+0x4
	lsr	r0, r4, #0x13
	strh	r0, [r1]
	ldr	r0, .L664+0x8
	mov	r9, r0
	add	r1, r2, #0
	ldr	r6, .L664+0xc
	ldr	r2, .L664+0x10
	ldr	r7, .L664+0x14
	ldr	r0, .L664+0x18
	mov	ip, r0
	ldr	r0, .L664+0x1c
	mov	r8, r0
	mov	r5, #0xff
	add	r3, r6, #0
	mov	r4, #0x3f
.L644:
	ldrb	r0, [r3]
	orr	r0, r0, r5
	strb	r0, [r3]
	ldrb	r0, [r3, #0x1]
	orr	r0, r0, r5
	strb	r0, [r3, #0x1]
	add	r3, r3, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L644	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2]
	strh	r0, [r7]
	mov	r0, #0x0
	mov	r2, ip
	str	r0, [r2]
	ldr	r1, [r1]
	ldrh	r0, [r1, #0x4]
	mov	r2, r8
	strh	r0, [r2]
	ldrb	r0, [r1, #0x3]
	strb	r0, [r6]
	mov	r0, #0xff
	strb	r0, [r6, #0x1]
	mov	r0, #0x1
	mov	r1, r9
	strb	r0, [r1]
	b	.L638
.L665:
	.align	2, 0
.L664:
	.word	sCurQuestLogEntry
	.word	sNumEventsInLogEntry
	.word	gQuestLogPlaybackState
	.word	sMovementScripts
	.word	sQuestLogCursor
	.word	sLastQuestLogCursor
	.word	gQuestLogFieldInput
	.word	sNextStepDelay
.L646:
	ldr	r1, .L666
	str	r3, [r1]
	ldr	r5, .L666+0x4
	lsr	r0, r4, #0x13
	strh	r0, [r5]
	mov	r4, #0x0
	ldr	r2, .L666+0x8
	mov	r8, r2
	cmp	r4, r0
	bge	.L648	@cond_branch
	add	r6, r1, #0
	ldr	r0, .L666+0xc
	ldr	r2, [r0]		@ created by thumb_load_double_from_address
	ldr	r3, [r0, #0x4]		@ created by thumb_load_double_from_address
.L650:
	ldr	r1, [r6]
	lsl	r0, r4, #0x3
	add	r0, r0, r1
	str	r2, [r0]
	str	r3, [r0, #0x4]
	add	r4, r4, #0x1
	ldrh	r0, [r5]
	cmp	r4, r0
	blt	.L650	@cond_branch
.L648:
	ldr	r4, .L666+0x10
	mov	r2, #0x0
	strh	r2, [r4]
	mov	r1, r8
	strh	r2, [r1]
	mov	r1, #0x0
	ldr	r3, .L666
	ldr	r0, [r3]
	strh	r1, [r0, #0x4]
	strb	r2, [r0, #0x6]
	ldrh	r0, [r4]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r2, [r0]
	bl	GetPlayerFacingDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L652	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L666+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L667:
	.align	2, 0
.L666:
	.word	sCurQuestLogEntry
	.word	sNumEventsInLogEntry
	.word	sNextStepDelay
	.word	.LC255
	.word	sQuestLogCursor
	.word	.L658
	.align	2, 0
	.align	2, 0
.L658:
	.word	.L654
	.word	.L654
	.word	.L656
	.word	.L657
	.word	.L655
.L654:
	ldr	r0, .L668
	ldrh	r0, [r0]
	ldr	r1, .L668+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L661
.L669:
	.align	2, 0
.L668:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
.L655:
	ldr	r0, .L670
	ldrh	r0, [r0]
	ldr	r1, .L670+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3
	b	.L661
.L671:
	.align	2, 0
.L670:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
.L656:
	ldr	r0, .L672
	ldrh	r0, [r0]
	ldr	r1, .L672+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L661
.L673:
	.align	2, 0
.L672:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
.L657:
	ldr	r0, .L674
	ldrh	r0, [r0]
	ldr	r1, .L674+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x2
.L661:
	strb	r1, [r0, #0x3]
.L652:
	ldr	r0, .L674+0x8
	mov	r5, #0x0
	strh	r5, [r0]
	ldr	r2, .L674
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	ldrh	r0, [r2]
	ldr	r3, .L674+0x4
	ldr	r4, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0x4]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r4, #0x2
	strb	r4, [r0, #0x6]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0, #0x1]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0, #0x2]
	ldrh	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strb	r5, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	ldr	r0, .L674+0xc
	strb	r4, [r0]
.L638:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L675:
	.align	2, 0
.L674:
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
	.word	sLastQuestLogCursor
	.word	gQuestLogPlaybackState
.Lfe80:
	.size	 SetUpQuestLogEntry,.Lfe80-SetUpQuestLogEntry
	.align	2, 0
	.globl	sub_8112B3C
	.type	 sub_8112B3C,function
	.thumb_func
sub_8112B3C:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L715
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bls	.LCB5933
	b	.L677	@long jump
.LCB5933:
	lsl	r0, r0, #0x2
	ldr	r1, .L715+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L716:
	.align	2, 0
.L715:
	.word	gQuestLogPlaybackState
	.word	.L709
	.align	2, 0
	.align	2, 0
.L709:
	.word	.L677
	.word	.L679
	.word	.L704
	.word	.L677
	.word	.L677
.L679:
	bl	RecordHeadAtEndOfEntryOrScriptContext2Enabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5958
	b	.L714	@long jump
.LCB5958:
	ldr	r0, .L717
	ldrh	r1, [r0]
	add	r7, r0, #0
	cmp	r1, #0
	beq	.L681	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r7]
	b	.L677
.L718:
	.align	2, 0
.L717:
	.word	sNextStepDelay
.L681:
	ldr	r5, .L719
	ldr	r4, .L719+0x4
	ldr	r6, .L719+0x8
	b	.L683
.L720:
	.align	2, 0
.L719:
	.word	gQuestLogPlaybackState
	.word	sQuestLogCursor
	.word	sCurQuestLogEntry
.L697:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	ldr	r1, .L721
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L711	@cond_branch
	ldrh	r0, [r4]
	ldr	r1, [r6]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	strh	r0, [r7]
	cmp	r2, #0x3
	beq	.L677	@cond_branch
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L683	@cond_branch
	ldr	r0, .L721+0x4
	cmp	r1, r0
	bne	.L677	@cond_branch
.L683:
	ldrh	r0, [r4]
	ldr	r1, [r6]
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrb	r0, [r3, #0x6]
	cmp	r0, #0x2
	beq	.L689	@cond_branch
	cmp	r0, #0x2
	bgt	.L695	@cond_branch
	cmp	r0, #0
	beq	.L687	@cond_branch
	cmp	r0, #0x1
	beq	.L688	@cond_branch
	b	.L686
.L722:
	.align	2, 0
.L721:
	.word	sNumEventsInLogEntry
	.word	0xffff
.L695:
	cmp	r0, #0xfe
	beq	.L686	@cond_branch
	cmp	r0, #0xfe
	bgt	.L696	@cond_branch
	cmp	r0, #0x3
	beq	.L713	@cond_branch
	b	.L686
.L696:
	cmp	r0, #0xff
	beq	.L692	@cond_branch
	b	.L686
.L687:
	ldr	r0, .L723
	ldrb	r1, [r3]
	lsl	r1, r1, #0x1
	b	.L712
.L724:
	.align	2, 0
.L723:
	.word	sMovementScripts
.L688:
	ldr	r0, .L725
	ldrb	r1, [r3]
	lsl	r1, r1, #0x1
	add	r0, r0, #0x1
.L712:
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	strb	r0, [r1]
	b	.L686
.L726:
	.align	2, 0
.L725:
	.word	sMovementScripts
.L689:
	ldr	r2, .L727
	ldrb	r1, [r3, #0x3]
	lsl	r1, r1, #0x18
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3]
	orr	r1, r1, r0
	str	r1, [r2]
	b	.L686
.L728:
	.align	2, 0
.L727:
	.word	gQuestLogFieldInput
.L692:
	mov	r0, #0x0
.L713:
	strb	r0, [r5]
.L686:
	ldrb	r2, [r5]
	cmp	r2, #0
	bne	.L697	@cond_branch
	b	.L677
.L711:
	mov	r0, #0x0
	strb	r0, [r5]
	b	.L677
.L704:
	bl	ArePlayerFieldControlsLocked
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L677	@cond_branch
	ldr	r1, .L729
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L714:
	ldr	r0, .L729+0x4
	ldr	r1, .L729+0x8
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcc	.L677	@cond_branch
	ldr	r1, .L729+0xc
	mov	r0, #0x0
	strb	r0, [r1]
.L677:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L730:
	.align	2, 0
.L729:
	.word	sNextStepDelay
	.word	sQuestLogCursor
	.word	sNumEventsInLogEntry
	.word	gQuestLogPlaybackState
.Lfe81:
	.size	 sub_8112B3C,.Lfe81-sub_8112B3C
	.align	2, 0
	.globl	QL_AfterRecordFishActionSuccessful
	.type	 QL_AfterRecordFishActionSuccessful,function
	.thumb_func
QL_AfterRecordFishActionSuccessful:
	ldr	r1, .L732
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	bx	lr
.L733:
	.align	2, 0
.L732:
	.word	sNextStepDelay
.Lfe82:
	.size	 QL_AfterRecordFishActionSuccessful,.Lfe82-QL_AfterRecordFishActionSuccessful
	.align	2, 0
	.globl	sub_8112CAC
	.type	 sub_8112CAC,function
	.thumb_func
sub_8112CAC:
	push	{lr}
	ldr	r0, .L744
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bhi	.L737	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L744+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L745:
	.align	2, 0
.L744:
	.word	gQuestLogPlaybackState
	.word	.L742
	.align	2, 0
	.align	2, 0
.L742:
	.word	.L737
	.word	.L739
	.word	.L741
	.word	.L739
	.word	.L741
.L737:
	mov	r0, #0x0
	b	.L743
.L739:
	mov	r0, #0x1
	b	.L743
.L741:
	mov	r0, #0x2
.L743:
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 sub_8112CAC,.Lfe83-sub_8112CAC
	.align	2, 0
	.type	 RecordHeadAtEndOfEntryOrScriptContext2Enabled,function
	.thumb_func
RecordHeadAtEndOfEntryOrScriptContext2Enabled:
	push	{lr}
	ldr	r0, .L750
	ldr	r1, .L750+0x4
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L748	@cond_branch
	bl	ArePlayerFieldControlsLocked
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L747	@cond_branch
.L748:
	mov	r0, #0x1
	b	.L749
.L751:
	.align	2, 0
.L750:
	.word	sQuestLogCursor
	.word	sNumEventsInLogEntry
.L747:
	mov	r0, #0x0
.L749:
	pop	{r1}
	bx	r1
.Lfe84:
	.size	 RecordHeadAtEndOfEntryOrScriptContext2Enabled,.Lfe84-RecordHeadAtEndOfEntryOrScriptContext2Enabled
	.align	2, 0
	.type	 RecordHeadAtEndOfEntry,function
	.thumb_func
RecordHeadAtEndOfEntry:
	push	{lr}
	ldr	r0, .L755
	ldr	r1, .L755+0x4
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L753	@cond_branch
	mov	r0, #0x0
	b	.L754
.L756:
	.align	2, 0
.L755:
	.word	sQuestLogCursor
	.word	sNumEventsInLogEntry
.L753:
	mov	r0, #0x1
.L754:
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 RecordHeadAtEndOfEntry,.Lfe85-RecordHeadAtEndOfEntry
	.section .rodata
	.align	2, 0
	.type	 sDummyFlagOrVarRecord,object
	.size	 sDummyFlagOrVarRecord,4
sDummyFlagOrVarRecord:
	.byte	0x0
	.byte	0x0
	.short	0x7fff
.text
	.align	2, 0
	.globl	QuestLogGetFlagOrVarPtr
	.type	 QuestLogGetFlagOrVarPtr,function
	.thumb_func
QuestLogGetFlagOrVarPtr:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r0, .L765
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L764	@cond_branch
	ldr	r0, .L765+0x4
	ldrh	r0, [r0]
	cmp	r1, r0
	bcs	.L764	@cond_branch
	ldr	r4, .L765+0x8
	ldr	r1, .L765+0xc
	ldrh	r0, [r4]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcc	.L760	@cond_branch
.L764:
	mov	r0, #0x0
	b	.L763
.L766:
	.align	2, 0
.L765:
	.word	sQuestLogCursor
	.word	sNumEventsInLogEntry
	.word	sFlagOrVarPlayhead
	.word	sNumFlagsOrVars
.L760:
	ldrh	r3, [r4]
	ldr	r0, .L767
	ldr	r1, [r0]
	lsl	r0, r3, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	lsl	r0, r1, #0x11
	lsr	r0, r0, #0x11
	cmp	r0, r5
	bne	.L761	@cond_branch
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x1f
	cmp	r0, r6
	bne	.L761	@cond_branch
	add	r1, r2, #0x2
	add	r0, r3, #0x1
	strh	r0, [r4]
	b	.L762
.L768:
	.align	2, 0
.L767:
	.word	sFlagOrVarRecords
.L761:
	mov	r1, #0x0
.L762:
	add	r0, r1, #0
.L763:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 QuestLogGetFlagOrVarPtr,.Lfe86-QuestLogGetFlagOrVarPtr
	.align	2, 0
	.globl	QuestLogSetFlagOrVar
	.type	 QuestLogSetFlagOrVar,function
	.thumb_func
QuestLogSetFlagOrVar:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	ip, r2
	ldr	r0, .L773
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L769	@cond_branch
	ldr	r0, .L773+0x4
	ldrh	r0, [r0]
	cmp	r1, r0
	bcs	.L769	@cond_branch
	ldr	r6, .L773+0x8
	ldr	r1, .L773+0xc
	ldrh	r0, [r6]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L769	@cond_branch
	add	r2, r0, #0
	ldr	r5, .L773+0x10
	ldr	r4, [r5]
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r1, .L773+0x14
	and	r1, r1, r3
	ldrh	r3, [r2]
	ldr	r0, .L773+0x18
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r7, #0x7
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x1]
	ldrh	r0, [r6]
	ldr	r1, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, ip
	strh	r1, [r0, #0x2]
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
.L769:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L774:
	.align	2, 0
.L773:
	.word	sQuestLogCursor
	.word	sNumEventsInLogEntry
	.word	sFlagOrVarPlayhead
	.word	sNumFlagsOrVars
	.word	sFlagOrVarRecords
	.word	0x7fff
	.word	-0x8000
.Lfe87:
	.size	 QuestLogSetFlagOrVar,.Lfe87-QuestLogSetFlagOrVar
	.align	2, 0
	.globl	sub_8112E3C
	.type	 sub_8112E3C,function
	.thumb_func
sub_8112E3C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r3, r0, #0x18
	mov	r4, #0xff
	lsl	r4, r4, #0x18
	add	r0, r0, r4
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L776	@cond_branch
	ldr	r1, .L784
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L777
.L785:
	.align	2, 0
.L784:
	.word	gQuestLogPlaybackState
.L776:
	ldr	r5, .L786
	str	r1, [r5]
	ldr	r1, .L786+0x4
	lsr	r0, r2, #0x12
	strh	r0, [r1]
	ldr	r1, .L786+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	cmp	r3, #0x2
	bne	.L777	@cond_branch
	mov	r2, #0x0
	ldr	r4, .L786+0xc
	ldrh	r0, [r4]
	cmp	r2, r0
	bge	.L777	@cond_branch
	ldr	r0, .L786+0x10
	ldr	r3, [r0]
.L782:
	ldr	r1, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	str	r3, [r0]
	add	r2, r2, #0x1
	ldrh	r0, [r4]
	cmp	r2, r0
	blt	.L782	@cond_branch
.L777:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L787:
	.align	2, 0
.L786:
	.word	sFlagOrVarRecords
	.word	sNumFlagsOrVars
	.word	sFlagOrVarPlayhead
	.word	sNumEventsInLogEntry
	.word	sDummyFlagOrVarRecord
.Lfe88:
	.size	 sub_8112E3C,.Lfe88-sub_8112E3C
	.comm	gQuestLogPlaybackState, 4	@ 1
	.comm	gQuestLogFieldInput, 4	@ 4
	.comm	sNumEventsInLogEntry, 4	@ 2
	.comm	sCurQuestLogEntry, 4	@ 4

	.lcomm	sFlagOrVarRecords,4

	.lcomm	sNumFlagsOrVars,2
.text
	.align	2, 0 @ Don't pad with nop

