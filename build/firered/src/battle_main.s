@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBattle_BG0_X
	.section ewram_data,"aw"
	.align	1, 0
	.type	 gBattle_BG0_X,object
	.size	 gBattle_BG0_X,2
gBattle_BG0_X:
	.short	0x0
	.globl	gBattle_BG0_Y
	.align	1, 0
	.type	 gBattle_BG0_Y,object
	.size	 gBattle_BG0_Y,2
gBattle_BG0_Y:
	.short	0x0
	.globl	gBattle_BG1_X
	.align	1, 0
	.type	 gBattle_BG1_X,object
	.size	 gBattle_BG1_X,2
gBattle_BG1_X:
	.short	0x0
	.globl	gBattle_BG1_Y
	.align	1, 0
	.type	 gBattle_BG1_Y,object
	.size	 gBattle_BG1_Y,2
gBattle_BG1_Y:
	.short	0x0
	.globl	gBattle_BG2_X
	.align	1, 0
	.type	 gBattle_BG2_X,object
	.size	 gBattle_BG2_X,2
gBattle_BG2_X:
	.short	0x0
	.globl	gBattle_BG2_Y
	.align	1, 0
	.type	 gBattle_BG2_Y,object
	.size	 gBattle_BG2_Y,2
gBattle_BG2_Y:
	.short	0x0
	.globl	gBattle_BG3_X
	.align	1, 0
	.type	 gBattle_BG3_X,object
	.size	 gBattle_BG3_X,2
gBattle_BG3_X:
	.short	0x0
	.globl	gBattle_BG3_Y
	.align	1, 0
	.type	 gBattle_BG3_Y,object
	.size	 gBattle_BG3_Y,2
gBattle_BG3_Y:
	.short	0x0
	.globl	gBattle_WIN0H
	.align	1, 0
	.type	 gBattle_WIN0H,object
	.size	 gBattle_WIN0H,2
gBattle_WIN0H:
	.short	0x0
	.globl	gBattle_WIN0V
	.align	1, 0
	.type	 gBattle_WIN0V,object
	.size	 gBattle_WIN0V,2
gBattle_WIN0V:
	.short	0x0
	.globl	gBattle_WIN1H
	.align	1, 0
	.type	 gBattle_WIN1H,object
	.size	 gBattle_WIN1H,2
gBattle_WIN1H:
	.short	0x0
	.globl	gBattle_WIN1V
	.align	1, 0
	.type	 gBattle_WIN1V,object
	.size	 gBattle_WIN1V,2
gBattle_WIN1V:
	.short	0x0
	.globl	gDisplayedStringBattle
	.type	 gDisplayedStringBattle,object
	.size	 gDisplayedStringBattle,300
gDisplayedStringBattle:
	.byte	0x0
	.space	299
	.globl	gBattleTextBuff1
	.type	 gBattleTextBuff1,object
	.size	 gBattleTextBuff1,16
gBattleTextBuff1:
	.byte	0x0
	.space	15
	.globl	gBattleTextBuff2
	.type	 gBattleTextBuff2,object
	.size	 gBattleTextBuff2,16
gBattleTextBuff2:
	.byte	0x0
	.space	15
	.globl	gBattleTextBuff3
	.type	 gBattleTextBuff3,object
	.size	 gBattleTextBuff3,16
gBattleTextBuff3:
	.byte	0x0
	.space	15
	.align	2, 0
	.type	 sFlickerArray,object
	.size	 sFlickerArray,100
sFlickerArray:
	.word	0x0
	.space	96
	.globl	gBattleTypeFlags
	.align	2, 0
	.type	 gBattleTypeFlags,object
	.size	 gBattleTypeFlags,4
gBattleTypeFlags:
	.word	0x0
	.globl	gBattleTerrain
	.type	 gBattleTerrain,object
	.size	 gBattleTerrain,1
gBattleTerrain:
	.byte	0x0
	.globl	gUnusedFirstBattleVar1
	.align	2, 0
	.type	 gUnusedFirstBattleVar1,object
	.size	 gUnusedFirstBattleVar1,4
gUnusedFirstBattleVar1:
	.word	0x0
	.globl	gMultiPartnerParty
	.align	2, 0
	.type	 gMultiPartnerParty,object
	.size	 gMultiPartnerParty,96
gMultiPartnerParty:
	.short	0x0
	.space	30
	.space	64
	.globl	gBattleAnimBgTileBuffer
	.align	2, 0
	.type	 gBattleAnimBgTileBuffer,object
	.size	 gBattleAnimBgTileBuffer,4
gBattleAnimBgTileBuffer:
	.word	0x0
	.globl	gBattleAnimBgTilemapBuffer
	.align	2, 0
	.type	 gBattleAnimBgTilemapBuffer,object
	.size	 gBattleAnimBgTilemapBuffer,4
gBattleAnimBgTilemapBuffer:
	.word	0x0
	.align	2, 0
	.type	 sUnknownDebugSpriteDataBuffer,object
	.size	 sUnknownDebugSpriteDataBuffer,4
sUnknownDebugSpriteDataBuffer:
	.word	0x0
	.globl	gBattleBufferA
	.type	 gBattleBufferA,object
	.size	 gBattleBufferA,2048
gBattleBufferA:
	.byte	0x0
	.space	511
	.space	1536
	.globl	gBattleBufferB
	.type	 gBattleBufferB,object
	.size	 gBattleBufferB,2048
gBattleBufferB:
	.byte	0x0
	.space	511
	.space	1536
	.globl	gActiveBattler
	.type	 gActiveBattler,object
	.size	 gActiveBattler,1
gActiveBattler:
	.byte	0x0
	.globl	gBattleControllerExecFlags
	.align	2, 0
	.type	 gBattleControllerExecFlags,object
	.size	 gBattleControllerExecFlags,4
gBattleControllerExecFlags:
	.word	0x0
	.globl	gBattlersCount
	.type	 gBattlersCount,object
	.size	 gBattlersCount,1
gBattlersCount:
	.byte	0x0
	.globl	gBattlerPartyIndexes
	.align	1, 0
	.type	 gBattlerPartyIndexes,object
	.size	 gBattlerPartyIndexes,8
gBattlerPartyIndexes:
	.short	0x0
	.space	6
	.globl	gBattlerPositions
	.type	 gBattlerPositions,object
	.size	 gBattlerPositions,4
gBattlerPositions:
	.byte	0x0
	.space	3
	.globl	gActionsByTurnOrder
	.type	 gActionsByTurnOrder,object
	.size	 gActionsByTurnOrder,4
gActionsByTurnOrder:
	.byte	0x0
	.space	3
	.globl	gBattlerByTurnOrder
	.type	 gBattlerByTurnOrder,object
	.size	 gBattlerByTurnOrder,4
gBattlerByTurnOrder:
	.byte	0x0
	.space	3
	.globl	gCurrentTurnActionNumber
	.type	 gCurrentTurnActionNumber,object
	.size	 gCurrentTurnActionNumber,1
gCurrentTurnActionNumber:
	.byte	0x0
	.globl	gCurrentActionFuncId
	.type	 gCurrentActionFuncId,object
	.size	 gCurrentActionFuncId,1
gCurrentActionFuncId:
	.byte	0x0
	.globl	gBattleMons
	.align	2, 0
	.type	 gBattleMons,object
	.size	 gBattleMons,352
gBattleMons:
	.short	0x0
	.space	86
	.space	264
	.globl	gBattlerSpriteIds
	.type	 gBattlerSpriteIds,object
	.size	 gBattlerSpriteIds,4
gBattlerSpriteIds:
	.byte	0x0
	.space	3
	.globl	gCurrMovePos
	.type	 gCurrMovePos,object
	.size	 gCurrMovePos,1
gCurrMovePos:
	.byte	0x0
	.globl	gChosenMovePos
	.type	 gChosenMovePos,object
	.size	 gChosenMovePos,1
gChosenMovePos:
	.byte	0x0
	.globl	gCurrentMove
	.align	1, 0
	.type	 gCurrentMove,object
	.size	 gCurrentMove,2
gCurrentMove:
	.short	0x0
	.globl	gChosenMove
	.align	1, 0
	.type	 gChosenMove,object
	.size	 gChosenMove,2
gChosenMove:
	.short	0x0
	.globl	gCalledMove
	.align	1, 0
	.type	 gCalledMove,object
	.size	 gCalledMove,2
gCalledMove:
	.short	0x0
	.globl	gBattleMoveDamage
	.align	2, 0
	.type	 gBattleMoveDamage,object
	.size	 gBattleMoveDamage,4
gBattleMoveDamage:
	.word	0x0
	.globl	gHpDealt
	.align	2, 0
	.type	 gHpDealt,object
	.size	 gHpDealt,4
gHpDealt:
	.word	0x0
	.globl	gTakenDmg
	.align	2, 0
	.type	 gTakenDmg,object
	.size	 gTakenDmg,16
gTakenDmg:
	.word	0x0
	.space	12
	.globl	gLastUsedItem
	.align	1, 0
	.type	 gLastUsedItem,object
	.size	 gLastUsedItem,2
gLastUsedItem:
	.short	0x0
	.globl	gLastUsedAbility
	.type	 gLastUsedAbility,object
	.size	 gLastUsedAbility,1
gLastUsedAbility:
	.byte	0x0
	.globl	gBattlerAttacker
	.type	 gBattlerAttacker,object
	.size	 gBattlerAttacker,1
gBattlerAttacker:
	.byte	0x0
	.globl	gBattlerTarget
	.type	 gBattlerTarget,object
	.size	 gBattlerTarget,1
gBattlerTarget:
	.byte	0x0
	.globl	gBattlerFainted
	.type	 gBattlerFainted,object
	.size	 gBattlerFainted,1
gBattlerFainted:
	.byte	0x0
	.globl	gEffectBattler
	.type	 gEffectBattler,object
	.size	 gEffectBattler,1
gEffectBattler:
	.byte	0x0
	.globl	gPotentialItemEffectBattler
	.type	 gPotentialItemEffectBattler,object
	.size	 gPotentialItemEffectBattler,1
gPotentialItemEffectBattler:
	.byte	0x0
	.globl	gAbsentBattlerFlags
	.type	 gAbsentBattlerFlags,object
	.size	 gAbsentBattlerFlags,1
gAbsentBattlerFlags:
	.byte	0x0
	.globl	gCritMultiplier
	.type	 gCritMultiplier,object
	.size	 gCritMultiplier,1
gCritMultiplier:
	.byte	0x0
	.globl	gMultiHitCounter
	.type	 gMultiHitCounter,object
	.size	 gMultiHitCounter,1
gMultiHitCounter:
	.byte	0x0
	.globl	gBattlescriptCurrInstr
	.align	2, 0
	.type	 gBattlescriptCurrInstr,object
	.size	 gBattlescriptCurrInstr,4
gBattlescriptCurrInstr:
	.word	0x0
	.globl	gUnusedBattleMainVar
	.align	2, 0
	.type	 gUnusedBattleMainVar,object
	.size	 gUnusedBattleMainVar,4
gUnusedBattleMainVar:
	.word	0x0
	.globl	gChosenActionByBattler
	.type	 gChosenActionByBattler,object
	.size	 gChosenActionByBattler,4
gChosenActionByBattler:
	.byte	0x0
	.space	3
	.globl	gSelectionBattleScripts
	.align	2, 0
	.type	 gSelectionBattleScripts,object
	.size	 gSelectionBattleScripts,16
gSelectionBattleScripts:
	.word	0x0
	.space	12
	.globl	gLastPrintedMoves
	.align	1, 0
	.type	 gLastPrintedMoves,object
	.size	 gLastPrintedMoves,8
gLastPrintedMoves:
	.short	0x0
	.space	6
	.globl	gLastMoves
	.align	1, 0
	.type	 gLastMoves,object
	.size	 gLastMoves,8
gLastMoves:
	.short	0x0
	.space	6
	.globl	gLastLandedMoves
	.align	1, 0
	.type	 gLastLandedMoves,object
	.size	 gLastLandedMoves,8
gLastLandedMoves:
	.short	0x0
	.space	6
	.globl	gLastHitByType
	.align	1, 0
	.type	 gLastHitByType,object
	.size	 gLastHitByType,8
gLastHitByType:
	.short	0x0
	.space	6
	.globl	gLastResultingMoves
	.align	1, 0
	.type	 gLastResultingMoves,object
	.size	 gLastResultingMoves,8
gLastResultingMoves:
	.short	0x0
	.space	6
	.globl	gLockedMoves
	.align	1, 0
	.type	 gLockedMoves,object
	.size	 gLockedMoves,8
gLockedMoves:
	.short	0x0
	.space	6
	.globl	gLastHitBy
	.type	 gLastHitBy,object
	.size	 gLastHitBy,4
gLastHitBy:
	.byte	0x0
	.space	3
	.globl	gChosenMoveByBattler
	.align	1, 0
	.type	 gChosenMoveByBattler,object
	.size	 gChosenMoveByBattler,8
gChosenMoveByBattler:
	.short	0x0
	.space	6
	.globl	gMoveResultFlags
	.type	 gMoveResultFlags,object
	.size	 gMoveResultFlags,1
gMoveResultFlags:
	.byte	0x0
	.globl	gHitMarker
	.align	2, 0
	.type	 gHitMarker,object
	.size	 gHitMarker,4
gHitMarker:
	.word	0x0
	.type	 sUnusedBattlersArray,object
	.size	 sUnusedBattlersArray,4
sUnusedBattlersArray:
	.byte	0x0
	.space	3
	.globl	gTakenDmgByBattler
	.type	 gTakenDmgByBattler,object
	.size	 gTakenDmgByBattler,4
gTakenDmgByBattler:
	.byte	0x0
	.space	3
	.globl	gUnusedFirstBattleVar2
	.type	 gUnusedFirstBattleVar2,object
	.size	 gUnusedFirstBattleVar2,1
gUnusedFirstBattleVar2:
	.byte	0x0
	.globl	gSideStatuses
	.align	1, 0
	.type	 gSideStatuses,object
	.size	 gSideStatuses,4
gSideStatuses:
	.short	0x0
	.space	2
	.globl	gSideTimers
	.align	2, 0
	.type	 gSideTimers,object
	.size	 gSideTimers,24
gSideTimers:
	.byte	0x0
	.space	11
	.space	12
	.globl	gStatuses3
	.align	2, 0
	.type	 gStatuses3,object
	.size	 gStatuses3,16
gStatuses3:
	.word	0x0
	.space	12
	.globl	gDisableStructs
	.align	2, 0
	.type	 gDisableStructs,object
	.size	 gDisableStructs,112
gDisableStructs:
	.word	0x0
	.space	24
	.space	84
	.globl	gPauseCounterBattle
	.align	1, 0
	.type	 gPauseCounterBattle,object
	.size	 gPauseCounterBattle,2
gPauseCounterBattle:
	.short	0x0
	.globl	gPaydayMoney
	.align	1, 0
	.type	 gPaydayMoney,object
	.size	 gPaydayMoney,2
gPaydayMoney:
	.short	0x0
	.globl	gRandomTurnNumber
	.align	1, 0
	.type	 gRandomTurnNumber,object
	.size	 gRandomTurnNumber,2
gRandomTurnNumber:
	.short	0x0
	.globl	gBattleCommunication
	.type	 gBattleCommunication,object
	.size	 gBattleCommunication,8
gBattleCommunication:
	.byte	0x0
	.space	7
	.globl	gBattleOutcome
	.type	 gBattleOutcome,object
	.size	 gBattleOutcome,1
gBattleOutcome:
	.byte	0x0
	.globl	gProtectStructs
	.align	2, 0
	.type	 gProtectStructs,object
	.size	 gProtectStructs,64
gProtectStructs:
	.byte	0x0
	.space	15
	.space	48
	.globl	gSpecialStatuses
	.align	2, 0
	.type	 gSpecialStatuses,object
	.size	 gSpecialStatuses,80
gSpecialStatuses:
	.byte	0x0
	.space	19
	.space	60
	.globl	gBattleWeather
	.align	1, 0
	.type	 gBattleWeather,object
	.size	 gBattleWeather,2
gBattleWeather:
	.short	0x0
	.globl	gWishFutureKnock
	.align	2, 0
	.type	 gWishFutureKnock,object
	.size	 gWishFutureKnock,44
gWishFutureKnock:
	.byte	0x0
	.space	3
	.space	40
	.globl	gIntroSlideFlags
	.align	1, 0
	.type	 gIntroSlideFlags,object
	.size	 gIntroSlideFlags,2
gIntroSlideFlags:
	.short	0x0
	.globl	gSentPokesToOpponent
	.type	 gSentPokesToOpponent,object
	.size	 gSentPokesToOpponent,2
gSentPokesToOpponent:
	.byte	0x0
	.space	1
	.globl	gDynamicBasePower
	.align	1, 0
	.type	 gDynamicBasePower,object
	.size	 gDynamicBasePower,2
gDynamicBasePower:
	.short	0x0
	.globl	gExpShareExp
	.align	1, 0
	.type	 gExpShareExp,object
	.size	 gExpShareExp,2
gExpShareExp:
	.short	0x0
	.globl	gEnigmaBerries
	.align	2, 0
	.type	 gEnigmaBerries,object
	.size	 gEnigmaBerries,112
gEnigmaBerries:
	.byte	0x0
	.space	6
	.space	21
	.space	84
	.globl	gBattleScripting
	.align	2, 0
	.type	 gBattleScripting,object
	.size	 gBattleScripting,36
gBattleScripting:
	.word	0x0
	.space	32
	.globl	gBattleStruct
	.align	2, 0
	.type	 gBattleStruct,object
	.size	 gBattleStruct,4
gBattleStruct:
	.word	0x0
	.globl	gLinkBattleSendBuffer
	.align	2, 0
	.type	 gLinkBattleSendBuffer,object
	.size	 gLinkBattleSendBuffer,4
gLinkBattleSendBuffer:
	.word	0x0
	.globl	gLinkBattleRecvBuffer
	.align	2, 0
	.type	 gLinkBattleRecvBuffer,object
	.size	 gLinkBattleRecvBuffer,4
gLinkBattleRecvBuffer:
	.word	0x0
	.globl	gBattleResources
	.align	2, 0
	.type	 gBattleResources,object
	.size	 gBattleResources,4
gBattleResources:
	.word	0x0
	.globl	gActionSelectionCursor
	.type	 gActionSelectionCursor,object
	.size	 gActionSelectionCursor,4
gActionSelectionCursor:
	.byte	0x0
	.space	3
	.globl	gMoveSelectionCursor
	.type	 gMoveSelectionCursor,object
	.size	 gMoveSelectionCursor,4
gMoveSelectionCursor:
	.byte	0x0
	.space	3
	.globl	gBattlerStatusSummaryTaskId
	.type	 gBattlerStatusSummaryTaskId,object
	.size	 gBattlerStatusSummaryTaskId,4
gBattlerStatusSummaryTaskId:
	.byte	0x0
	.space	3
	.globl	gBattlerInMenuId
	.type	 gBattlerInMenuId,object
	.size	 gBattlerInMenuId,1
gBattlerInMenuId:
	.byte	0x0
	.globl	gDoingBattleAnim
	.type	 gDoingBattleAnim,object
	.size	 gDoingBattleAnim,1
gDoingBattleAnim:
	.byte	0x0
	.globl	gTransformedPersonalities
	.align	2, 0
	.type	 gTransformedPersonalities,object
	.size	 gTransformedPersonalities,16
gTransformedPersonalities:
	.word	0x0
	.space	12
	.globl	gBattleSpritesDataPtr
	.align	2, 0
	.type	 gBattleSpritesDataPtr,object
	.size	 gBattleSpritesDataPtr,4
gBattleSpritesDataPtr:
	.word	0x0
	.globl	gMonSpritesGfxPtr
	.align	2, 0
	.type	 gMonSpritesGfxPtr,object
	.size	 gMonSpritesGfxPtr,4
gMonSpritesGfxPtr:
	.word	0x0
	.globl	gBattleMovePower
	.align	1, 0
	.type	 gBattleMovePower,object
	.size	 gBattleMovePower,2
gBattleMovePower:
	.short	0x0
	.globl	gMoveToLearn
	.align	1, 0
	.type	 gMoveToLearn,object
	.size	 gMoveToLearn,2
gMoveToLearn:
	.short	0x0
	.globl	gBattleMonForms
	.type	 gBattleMonForms,object
	.size	 gBattleMonForms,4
gBattleMonForms:
	.byte	0x0
	.space	3
	.section .rodata
	.align	2, 0
	.type	 sIntroScanlineParams16Bit,object
	.size	 sIntroScanlineParams16Bit,12
sIntroScanlineParams16Bit:
	.word	0x400001c
	.word	-0x5d9fffff
	.byte	0x1
	.space	3
	.globl	gUnknownDebugSprite
	.align	2, 0
	.type	 gUnknownDebugSprite,object
	.size	 gUnknownDebugSprite,24
gUnknownDebugSprite:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_UnusedDebugSprite
	.type	 sText_ShedinjaJpnName,object
sText_ShedinjaJpnName:
	.byte	0x67
	.byte	0x59
	.byte	0x66
	.byte	0x7e
	.byte	0xff
	.size	 sText_ShedinjaJpnName,5
	.globl	gOamData_BattlerOpponent
	.align	2, 0
	.type	 gOamData_BattlerOpponent,object
	.size	 gOamData_BattlerOpponent,8
gOamData_BattlerOpponent:
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x8
	.short	0x0
	.globl	gOamData_BattlerPlayer
	.align	2, 0
	.type	 gOamData_BattlerPlayer,object
	.size	 gOamData_BattlerPlayer,8
gOamData_BattlerPlayer:
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x28
	.short	0x0
	.align	2, 0
	.type	 gUnknown_824F020,object
gUnknown_824F020:
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_824F020,8
	.align	2, 0
	.type	 gUnknown_824F028,object
gUnknown_824F028:
	.word	gUnknown_824F020
	.size	 gUnknown_824F028,4
	.align	2, 0
	.type	 gUnknown_824F02C,object
gUnknown_824F02C:
	.short	-0x10
	.short	0x0
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x3c
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_824F02C,24
	.align	2, 0
	.type	 gUnknown_824F044,object
gUnknown_824F044:
	.word	gUnknown_824F02C
	.size	 gUnknown_824F044,4
	.type	 sPlayerThrowXTranslation,object
sPlayerThrowXTranslation:
	.byte	-0x20
	.byte	-0x10
	.byte	-0x10
	.byte	-0x20
	.byte	-0x20
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sPlayerThrowXTranslation,8
	.globl	gTypeEffectiveness
	.type	 gTypeEffectiveness,object
	.size	 gTypeEffectiveness,336
gTypeEffectiveness:
	.byte	0x0
	.byte	0x5
	.byte	0x5
	.byte	0x0
	.byte	0x8
	.byte	0x5
	.byte	0xa
	.byte	0xa
	.byte	0x5
	.byte	0xa
	.byte	0xb
	.byte	0x5
	.byte	0xa
	.byte	0xc
	.byte	0x14
	.byte	0xa
	.byte	0xf
	.byte	0x14
	.byte	0xa
	.byte	0x6
	.byte	0x14
	.byte	0xa
	.byte	0x5
	.byte	0x5
	.byte	0xa
	.byte	0x10
	.byte	0x5
	.byte	0xa
	.byte	0x8
	.byte	0x14
	.byte	0xb
	.byte	0xa
	.byte	0x14
	.byte	0xb
	.byte	0xb
	.byte	0x5
	.byte	0xb
	.byte	0xc
	.byte	0x5
	.byte	0xb
	.byte	0x4
	.byte	0x14
	.byte	0xb
	.byte	0x5
	.byte	0x14
	.byte	0xb
	.byte	0x10
	.byte	0x5
	.byte	0xd
	.byte	0xb
	.byte	0x14
	.byte	0xd
	.byte	0xd
	.byte	0x5
	.byte	0xd
	.byte	0xc
	.byte	0x5
	.byte	0xd
	.byte	0x4
	.byte	0x0
	.byte	0xd
	.byte	0x2
	.byte	0x14
	.byte	0xd
	.byte	0x10
	.byte	0x5
	.byte	0xc
	.byte	0xa
	.byte	0x5
	.byte	0xc
	.byte	0xb
	.byte	0x14
	.byte	0xc
	.byte	0xc
	.byte	0x5
	.byte	0xc
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x4
	.byte	0x14
	.byte	0xc
	.byte	0x2
	.byte	0x5
	.byte	0xc
	.byte	0x6
	.byte	0x5
	.byte	0xc
	.byte	0x5
	.byte	0x14
	.byte	0xc
	.byte	0x10
	.byte	0x5
	.byte	0xc
	.byte	0x8
	.byte	0x5
	.byte	0xf
	.byte	0xb
	.byte	0x5
	.byte	0xf
	.byte	0xc
	.byte	0x14
	.byte	0xf
	.byte	0xf
	.byte	0x5
	.byte	0xf
	.byte	0x4
	.byte	0x14
	.byte	0xf
	.byte	0x2
	.byte	0x14
	.byte	0xf
	.byte	0x10
	.byte	0x14
	.byte	0xf
	.byte	0x8
	.byte	0x5
	.byte	0xf
	.byte	0xa
	.byte	0x5
	.byte	0x1
	.byte	0x0
	.byte	0x14
	.byte	0x1
	.byte	0xf
	.byte	0x14
	.byte	0x1
	.byte	0x3
	.byte	0x5
	.byte	0x1
	.byte	0x2
	.byte	0x5
	.byte	0x1
	.byte	0xe
	.byte	0x5
	.byte	0x1
	.byte	0x6
	.byte	0x5
	.byte	0x1
	.byte	0x5
	.byte	0x14
	.byte	0x1
	.byte	0x11
	.byte	0x14
	.byte	0x1
	.byte	0x8
	.byte	0x14
	.byte	0x3
	.byte	0xc
	.byte	0x14
	.byte	0x3
	.byte	0x3
	.byte	0x5
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x3
	.byte	0x5
	.byte	0x5
	.byte	0x3
	.byte	0x7
	.byte	0x5
	.byte	0x3
	.byte	0x8
	.byte	0x0
	.byte	0x4
	.byte	0xa
	.byte	0x14
	.byte	0x4
	.byte	0xd
	.byte	0x14
	.byte	0x4
	.byte	0xc
	.byte	0x5
	.byte	0x4
	.byte	0x3
	.byte	0x14
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	0x4
	.byte	0x6
	.byte	0x5
	.byte	0x4
	.byte	0x5
	.byte	0x14
	.byte	0x4
	.byte	0x8
	.byte	0x14
	.byte	0x2
	.byte	0xd
	.byte	0x5
	.byte	0x2
	.byte	0xc
	.byte	0x14
	.byte	0x2
	.byte	0x1
	.byte	0x14
	.byte	0x2
	.byte	0x6
	.byte	0x14
	.byte	0x2
	.byte	0x5
	.byte	0x5
	.byte	0x2
	.byte	0x8
	.byte	0x5
	.byte	0xe
	.byte	0x1
	.byte	0x14
	.byte	0xe
	.byte	0x3
	.byte	0x14
	.byte	0xe
	.byte	0xe
	.byte	0x5
	.byte	0xe
	.byte	0x11
	.byte	0x0
	.byte	0xe
	.byte	0x8
	.byte	0x5
	.byte	0x6
	.byte	0xa
	.byte	0x5
	.byte	0x6
	.byte	0xc
	.byte	0x14
	.byte	0x6
	.byte	0x1
	.byte	0x5
	.byte	0x6
	.byte	0x3
	.byte	0x5
	.byte	0x6
	.byte	0x2
	.byte	0x5
	.byte	0x6
	.byte	0xe
	.byte	0x14
	.byte	0x6
	.byte	0x7
	.byte	0x5
	.byte	0x6
	.byte	0x11
	.byte	0x14
	.byte	0x6
	.byte	0x8
	.byte	0x5
	.byte	0x5
	.byte	0xa
	.byte	0x14
	.byte	0x5
	.byte	0xf
	.byte	0x14
	.byte	0x5
	.byte	0x1
	.byte	0x5
	.byte	0x5
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.byte	0x2
	.byte	0x14
	.byte	0x5
	.byte	0x6
	.byte	0x14
	.byte	0x5
	.byte	0x8
	.byte	0x5
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0xe
	.byte	0x14
	.byte	0x7
	.byte	0x11
	.byte	0x5
	.byte	0x7
	.byte	0x8
	.byte	0x5
	.byte	0x7
	.byte	0x7
	.byte	0x14
	.byte	0x10
	.byte	0x10
	.byte	0x14
	.byte	0x10
	.byte	0x8
	.byte	0x5
	.byte	0x11
	.byte	0x1
	.byte	0x5
	.byte	0x11
	.byte	0xe
	.byte	0x14
	.byte	0x11
	.byte	0x7
	.byte	0x14
	.byte	0x11
	.byte	0x11
	.byte	0x5
	.byte	0x11
	.byte	0x8
	.byte	0x5
	.byte	0x8
	.byte	0xa
	.byte	0x5
	.byte	0x8
	.byte	0xb
	.byte	0x5
	.byte	0x8
	.byte	0xd
	.byte	0x5
	.byte	0x8
	.byte	0xf
	.byte	0x14
	.byte	0x8
	.byte	0x5
	.byte	0x14
	.byte	0x8
	.byte	0x8
	.byte	0x5
	.byte	0xfe
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x0
	.byte	0x1
	.byte	0x7
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.globl	gTypeNames
	.type	 gTypeNames,object
	.size	 gTypeNames,126
gTypeNames:
	.byte	0xc8
	.byte	0xc9
	.byte	0xcc
	.byte	0xc7
	.byte	0xbb
	.byte	0xc6
	.byte	0xff
	.byte	0xc0
	.byte	0xc3
	.byte	0xc1
	.byte	0xc2
	.byte	0xce
	.byte	0xff
	.space	1
	.byte	0xc0
	.byte	0xc6
	.byte	0xd3
	.byte	0xc3
	.byte	0xc8
	.byte	0xc1
	.byte	0xff
	.byte	0xca
	.byte	0xc9
	.byte	0xc3
	.byte	0xcd
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.byte	0xc1
	.byte	0xcc
	.byte	0xc9
	.byte	0xcf
	.byte	0xc8
	.byte	0xbe
	.byte	0xff
	.byte	0xcc
	.byte	0xc9
	.byte	0xbd
	.byte	0xc5
	.byte	0xff
	.space	2
	.byte	0xbc
	.byte	0xcf
	.byte	0xc1
	.byte	0xff
	.space	3
	.byte	0xc1
	.byte	0xc2
	.byte	0xc9
	.byte	0xcd
	.byte	0xce
	.byte	0xff
	.space	1
	.byte	0xcd
	.byte	0xce
	.byte	0xbf
	.byte	0xbf
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0xac
	.byte	0xac
	.byte	0xac
	.byte	0xff
	.space	3
	.byte	0xc0
	.byte	0xc3
	.byte	0xcc
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xd1
	.byte	0xbb
	.byte	0xce
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.space	1
	.byte	0xc1
	.byte	0xcc
	.byte	0xbb
	.byte	0xcd
	.byte	0xcd
	.byte	0xff
	.space	1
	.byte	0xbf
	.byte	0xc6
	.byte	0xbf
	.byte	0xbd
	.byte	0xce
	.byte	0xcc
	.byte	0xff
	.byte	0xca
	.byte	0xcd
	.byte	0xd3
	.byte	0xbd
	.byte	0xc2
	.byte	0xbd
	.byte	0xff
	.byte	0xc3
	.byte	0xbd
	.byte	0xbf
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xcc
	.byte	0xbb
	.byte	0xc1
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.byte	0xbe
	.byte	0xbb
	.byte	0xcc
	.byte	0xc5
	.byte	0xff
	.space	2
	.globl	gTrainerMoneyTable
	.align	2, 0
	.type	 gTrainerMoneyTable,object
gTrainerMoneyTable:
	.byte	0x54
	.byte	0x19
	.space	2
	.byte	0x57
	.byte	0x19
	.space	2
	.byte	0x61
	.byte	0x19
	.space	2
	.byte	0x51
	.byte	0x4
	.space	2
	.byte	0x59
	.byte	0x9
	.space	2
	.byte	0x5a
	.byte	0x19
	.space	2
	.byte	0x39
	.byte	0x4
	.space	2
	.byte	0x3a
	.byte	0x3
	.space	2
	.byte	0x41
	.byte	0x9
	.space	2
	.byte	0x4f
	.byte	0x6
	.space	2
	.byte	0x3e
	.byte	0x5
	.space	2
	.byte	0x40
	.byte	0x6
	.space	2
	.byte	0x45
	.byte	0x9
	.space	2
	.byte	0x55
	.byte	0x8
	.space	2
	.byte	0x3b
	.byte	0x4
	.space	2
	.byte	0x49
	.byte	0x12
	.space	2
	.byte	0x50
	.byte	0x6
	.space	2
	.byte	0x47
	.byte	0x6
	.space	2
	.byte	0x5b
	.byte	0x8
	.space	2
	.byte	0x4c
	.byte	0x6
	.space	2
	.byte	0x58
	.byte	0x12
	.space	2
	.byte	0x43
	.byte	0x16
	.space	2
	.byte	0x46
	.byte	0x1
	.space	2
	.byte	0x44
	.byte	0xc
	.space	2
	.byte	0x4d
	.byte	0xa
	.space	2
	.byte	0x3c
	.byte	0x8
	.space	2
	.byte	0x56
	.byte	0x9
	.space	2
	.byte	0x3f
	.byte	0xc
	.space	2
	.byte	0x4e
	.byte	0xa
	.space	2
	.byte	0x3d
	.byte	0x5
	.space	2
	.byte	0x4b
	.byte	0x5
	.space	2
	.byte	0x42
	.byte	0x5
	.space	2
	.byte	0x48
	.byte	0x12
	.space	2
	.byte	0x52
	.byte	0xc
	.space	2
	.byte	0x63
	.byte	0x6
	.space	2
	.byte	0x64
	.byte	0x1
	.space	2
	.byte	0x65
	.byte	0x7
	.space	2
	.byte	0x66
	.byte	0x9
	.space	2
	.byte	0x67
	.byte	0x7
	.space	2
	.byte	0x68
	.byte	0xc
	.space	2
	.byte	0x69
	.byte	0x32
	.space	2
	.byte	0x6a
	.byte	0x4
	.space	2
	.byte	0x5c
	.byte	0x3
	.space	2
	.byte	0x5e
	.byte	0x7
	.space	2
	.byte	0x60
	.byte	0x1
	.space	2
	.byte	0x5d
	.byte	0x6
	.space	2
	.byte	0x5f
	.byte	0x6
	.space	2
	.byte	0x4a
	.byte	0x1
	.space	2
	.byte	0x62
	.byte	0x1
	.space	2
	.byte	0x18
	.byte	0x19
	.space	2
	.byte	0x17
	.byte	0x19
	.space	2
	.byte	0x31
	.byte	0x4
	.space	2
	.byte	0x1d
	.byte	0x4
	.space	2
	.byte	0x2c
	.byte	0xf
	.space	2
	.byte	0x33
	.byte	0xa
	.space	2
	.byte	0xc
	.byte	0x14
	.space	2
	.byte	0x1f
	.byte	0xa
	.space	2
	.byte	0xb
	.byte	0x32
	.space	2
	.byte	0x20
	.byte	0xa
	.space	2
	.byte	0x3
	.byte	0x5
	.space	2
	.byte	0x28
	.byte	0x3
	.space	2
	.byte	0x26
	.byte	0x2
	.space	2
	.byte	0x32
	.byte	0x4
	.space	2
	.byte	0x19
	.byte	0x5
	.space	2
	.byte	0xd
	.byte	0x32
	.space	2
	.byte	0x1a
	.byte	0x4
	.space	2
	.byte	0x10
	.byte	0x8
	.space	2
	.byte	0x7
	.byte	0x1
	.space	2
	.byte	0xa
	.byte	0x6
	.space	2
	.byte	0x2d
	.byte	0xa
	.space	2
	.byte	0x30
	.byte	0x5
	.space	2
	.byte	0x6
	.byte	0xc
	.space	2
	.byte	0x8
	.byte	0x1
	.space	2
	.byte	0x34
	.byte	0x8
	.space	2
	.byte	0x11
	.byte	0x8
	.space	2
	.byte	0x16
	.byte	0x14
	.space	2
	.byte	0x1e
	.byte	0x32
	.space	2
	.byte	0x2f
	.byte	0x14
	.space	2
	.byte	0x24
	.byte	0x6
	.space	2
	.byte	0xf
	.byte	0x2
	.space	2
	.byte	0x1b
	.byte	0x14
	.space	2
	.byte	0x1c
	.byte	0xa
	.space	2
	.byte	0x21
	.byte	0xc
	.space	2
	.byte	0x22
	.byte	0x8
	.space	2
	.byte	0x23
	.byte	0x3
	.space	2
	.byte	0x25
	.byte	0xa
	.space	2
	.byte	0x14
	.byte	0xf
	.space	2
	.byte	0x29
	.byte	0x8
	.space	2
	.byte	0x2b
	.byte	0xf
	.space	2
	.byte	0x2e
	.byte	0xc
	.space	2
	.byte	0x38
	.byte	0xa
	.space	2
	.byte	0x4
	.byte	0xa
	.space	2
	.byte	0x5
	.byte	0xf
	.space	2
	.byte	0x9
	.byte	0xc
	.space	2
	.byte	0xe
	.byte	0xf
	.space	2
	.byte	0x12
	.byte	0x8
	.space	2
	.byte	0x13
	.byte	0x4
	.space	2
	.byte	0x27
	.byte	0x4
	.space	2
	.byte	0x15
	.byte	0x6
	.space	2
	.byte	0x36
	.byte	0x3
	.space	2
	.byte	0x35
	.byte	0xa
	.space	2
	.byte	0x37
	.byte	0xa
	.space	2
	.byte	0x2
	.byte	0x14
	.space	2
	.byte	0x53
	.byte	0x19
	.space	2
	.byte	0xff
	.byte	0x5
	.space	2
	.size	 gTrainerMoneyTable,420
	.type	 sNoneDescription,object
sNoneDescription:
	.byte	0xc8
	.byte	0xe3
	.byte	0x0
	.byte	0xe7
	.byte	0xe4
	.byte	0xd9
	.byte	0xd7
	.byte	0xdd
	.byte	0xd5
	.byte	0xe0
	.byte	0x0
	.byte	0xd5
	.byte	0xd6
	.byte	0xdd
	.byte	0xe0
	.byte	0xdd
	.byte	0xe8
	.byte	0xed
	.byte	0xad
	.byte	0xff
	.size	 sNoneDescription,20
	.type	 sStenchDescription,object
sStenchDescription:
	.byte	0xc2
	.byte	0xd9
	.byte	0xe0
	.byte	0xe4
	.byte	0xe7
	.byte	0x0
	.byte	0xe6
	.byte	0xd9
	.byte	0xe4
	.byte	0xd9
	.byte	0xe0
	.byte	0x0
	.byte	0xeb
	.byte	0xdd
	.byte	0xe0
	.byte	0xd8
	.byte	0x0
	.byte	0xca
	.byte	0xc9
	.byte	0xc5
	.byte	0x1b
	.byte	0xc7
	.byte	0xc9
	.byte	0xc8
	.byte	0xad
	.byte	0xff
	.size	 sStenchDescription,26
	.type	 sDrizzleDescription,object
sDrizzleDescription:
	.byte	0xcd
	.byte	0xe9
	.byte	0xe1
	.byte	0xe1
	.byte	0xe3
	.byte	0xe2
	.byte	0xe7
	.byte	0x0
	.byte	0xe6
	.byte	0xd5
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xd6
	.byte	0xd5
	.byte	0xe8
	.byte	0xe8
	.byte	0xe0
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.size	 sDrizzleDescription,24
	.type	 sSpeedBoostDescription,object
sSpeedBoostDescription:
	.byte	0xc1
	.byte	0xe6
	.byte	0xd5
	.byte	0xd8
	.byte	0xe9
	.byte	0xd5
	.byte	0xe0
	.byte	0xe0
	.byte	0xed
	.byte	0x0
	.byte	0xd6
	.byte	0xe3
	.byte	0xe3
	.byte	0xe7
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xcd
	.byte	0xca
	.byte	0xbf
	.byte	0xbf
	.byte	0xbe
	.byte	0xad
	.byte	0xff
	.size	 sSpeedBoostDescription,24
	.type	 sBattleArmorDescription,object
sBattleArmorDescription:
	.byte	0xbc
	.byte	0xe0
	.byte	0xe3
	.byte	0xd7
	.byte	0xdf
	.byte	0xe7
	.byte	0x0
	.byte	0xd7
	.byte	0xe6
	.byte	0xdd
	.byte	0xe8
	.byte	0xdd
	.byte	0xd7
	.byte	0xd5
	.byte	0xe0
	.byte	0x0
	.byte	0xdc
	.byte	0xdd
	.byte	0xe8
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sBattleArmorDescription,22
	.type	 sSturdyDescription,object
sSturdyDescription:
	.byte	0xc8
	.byte	0xd9
	.byte	0xdb
	.byte	0xd5
	.byte	0xe8
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xa2
	.byte	0xae
	.byte	0xdc
	.byte	0xdd
	.byte	0xe8
	.byte	0x0
	.byte	0xc5
	.byte	0xc9
	.byte	0x0
	.byte	0xd5
	.byte	0xe8
	.byte	0xe8
	.byte	0xd5
	.byte	0xd7
	.byte	0xdf
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sSturdyDescription,26
	.type	 sDampDescription,object
sDampDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xd9
	.byte	0xe0
	.byte	0xda
	.byte	0xae
	.byte	0xd8
	.byte	0xd9
	.byte	0xe7
	.byte	0xe8
	.byte	0xe6
	.byte	0xe9
	.byte	0xd7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe3
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.size	 sDampDescription,27
	.type	 sLimberDescription,object
sLimberDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xe4
	.byte	0xd5
	.byte	0xe6
	.byte	0xd5
	.byte	0xe0
	.byte	0xed
	.byte	0xe7
	.byte	0xdd
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sLimberDescription,20
	.type	 sSandVeilDescription,object
sSandVeilDescription:
	.byte	0xcf
	.byte	0xe4
	.byte	0xe7
	.byte	0x0
	.byte	0xd9
	.byte	0xea
	.byte	0xd5
	.byte	0xe7
	.byte	0xdd
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xe7
	.byte	0xd5
	.byte	0xe2
	.byte	0xd8
	.byte	0xe7
	.byte	0xe8
	.byte	0xe3
	.byte	0xe6
	.byte	0xe1
	.byte	0xad
	.byte	0xff
	.size	 sSandVeilDescription,28
	.type	 sStaticDescription,object
sStaticDescription:
	.byte	0xca
	.byte	0xd5
	.byte	0xe6
	.byte	0xd5
	.byte	0xe0
	.byte	0xed
	.byte	0xee
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xd7
	.byte	0xe3
	.byte	0xe2
	.byte	0xe8
	.byte	0xd5
	.byte	0xd7
	.byte	0xe8
	.byte	0xad
	.byte	0xff
	.size	 sStaticDescription,22
	.type	 sVoltAbsorbDescription,object
sVoltAbsorbDescription:
	.byte	0xce
	.byte	0xe9
	.byte	0xe6
	.byte	0xe2
	.byte	0xe7
	.byte	0x0
	.byte	0xd9
	.byte	0xe0
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xe6
	.byte	0xdd
	.byte	0xd7
	.byte	0xdd
	.byte	0xe8
	.byte	0xed
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xc2
	.byte	0xca
	.byte	0xad
	.byte	0xff
	.size	 sVoltAbsorbDescription,27
	.type	 sWaterAbsorbDescription,object
sWaterAbsorbDescription:
	.byte	0xbd
	.byte	0xdc
	.byte	0xd5
	.byte	0xe2
	.byte	0xdb
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xeb
	.byte	0xd5
	.byte	0xe8
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xc2
	.byte	0xca
	.byte	0xad
	.byte	0xff
	.size	 sWaterAbsorbDescription,23
	.type	 sObliviousDescription,object
sObliviousDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0xe8
	.byte	0xe8
	.byte	0xe6
	.byte	0xd5
	.byte	0xd7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe3
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.size	 sObliviousDescription,21
	.type	 sCloudNineDescription,object
sCloudNineDescription:
	.byte	0xc8
	.byte	0xd9
	.byte	0xdb
	.byte	0xd5
	.byte	0xe8
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xeb
	.byte	0xd9
	.byte	0xd5
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xd9
	.byte	0xda
	.byte	0xda
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sCloudNineDescription,25
	.type	 sCompoundEyesDescription,object
sCompoundEyesDescription:
	.byte	0xcc
	.byte	0xd5
	.byte	0xdd
	.byte	0xe7
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0xd7
	.byte	0xd7
	.byte	0xe9
	.byte	0xe6
	.byte	0xd5
	.byte	0xd7
	.byte	0xed
	.byte	0xad
	.byte	0xff
	.size	 sCompoundEyesDescription,17
	.type	 sInsomniaDescription,object
sInsomniaDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xe0
	.byte	0xd9
	.byte	0xd9
	.byte	0xe4
	.byte	0xad
	.byte	0xff
	.size	 sInsomniaDescription,16
	.type	 sColorChangeDescription,object
sColorChangeDescription:
	.byte	0xbd
	.byte	0xdc
	.byte	0xd5
	.byte	0xe2
	.byte	0xdb
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xed
	.byte	0xe4
	.byte	0xd9
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xd9
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.size	 sColorChangeDescription,28
	.type	 sImmunityDescription,object
sImmunityDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xe4
	.byte	0xe3
	.byte	0xdd
	.byte	0xe7
	.byte	0xe3
	.byte	0xe2
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xad
	.byte	0xff
	.size	 sImmunityDescription,20
	.type	 sFlashFireDescription,object
sFlashFireDescription:
	.byte	0xca
	.byte	0xe3
	.byte	0xeb
	.byte	0xd9
	.byte	0xe6
	.byte	0xe7
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0x0
	.byte	0xdd
	.byte	0xda
	.byte	0x0
	.byte	0xdc
	.byte	0xdd
	.byte	0xe8
	.byte	0x0
	.byte	0xd6
	.byte	0xed
	.byte	0x0
	.byte	0xda
	.byte	0xdd
	.byte	0xe6
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.size	 sFlashFireDescription,26
	.type	 sShieldDustDescription,object
sShieldDustDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0xd8
	.byte	0xd8
	.byte	0xd9
	.byte	0xd8
	.byte	0x0
	.byte	0xd9
	.byte	0xda
	.byte	0xda
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sShieldDustDescription,24
	.type	 sOwnTempoDescription,object
sOwnTempoDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xd7
	.byte	0xe3
	.byte	0xe2
	.byte	0xda
	.byte	0xe9
	.byte	0xe7
	.byte	0xdd
	.byte	0xe3
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.size	 sOwnTempoDescription,20
	.type	 sSuctionCupsDescription,object
sSuctionCupsDescription:
	.byte	0xc0
	.byte	0xdd
	.byte	0xe6
	.byte	0xe1
	.byte	0xe0
	.byte	0xed
	.byte	0x0
	.byte	0xd5
	.byte	0xe2
	.byte	0xd7
	.byte	0xdc
	.byte	0xe3
	.byte	0xe6
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0x0
	.byte	0xd6
	.byte	0xe3
	.byte	0xd8
	.byte	0xed
	.byte	0xad
	.byte	0xff
	.size	 sSuctionCupsDescription,25
	.type	 sIntimidateDescription,object
sIntimidateDescription:
	.byte	0xc6
	.byte	0xe3
	.byte	0xeb
	.byte	0xd9
	.byte	0xe6
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xd9
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xbb
	.byte	0xce
	.byte	0xce
	.byte	0xbb
	.byte	0xbd
	.byte	0xc5
	.byte	0xad
	.byte	0xff
	.size	 sIntimidateDescription,25
	.type	 sShadowTagDescription,object
sShadowTagDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xd9
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xd9
	.byte	0xe7
	.byte	0xd7
	.byte	0xd5
	.byte	0xe4
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.size	 sShadowTagDescription,27
	.type	 sRoughSkinDescription,object
sRoughSkinDescription:
	.byte	0xc2
	.byte	0xe9
	.byte	0xe6
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0xe9
	.byte	0xd7
	.byte	0xdc
	.byte	0xad
	.byte	0xff
	.size	 sRoughSkinDescription,16
	.type	 sWonderGuardDescription,object
sWonderGuardDescription:
	.byte	0xb1
	.byte	0xcd
	.byte	0xe9
	.byte	0xe4
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xd9
	.byte	0xda
	.byte	0xda
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xdd
	.byte	0xea
	.byte	0xd9
	.byte	0xb2
	.byte	0x0
	.byte	0xdc
	.byte	0xdd
	.byte	0xe8
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sWonderGuardDescription,24
	.type	 sLevitateDescription,object
sLevitateDescription:
	.byte	0xc8
	.byte	0xe3
	.byte	0xe8
	.byte	0x0
	.byte	0xdc
	.byte	0xdd
	.byte	0xe8
	.byte	0x0
	.byte	0xd6
	.byte	0xed
	.byte	0x0
	.byte	0xc1
	.byte	0xcc
	.byte	0xc9
	.byte	0xcf
	.byte	0xc8
	.byte	0xbe
	.byte	0x0
	.byte	0xd5
	.byte	0xe8
	.byte	0xe8
	.byte	0xd5
	.byte	0xd7
	.byte	0xdf
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sLevitateDescription,27
	.type	 sEffectSporeDescription,object
sEffectSporeDescription:
	.byte	0xc6
	.byte	0xd9
	.byte	0xd5
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xe4
	.byte	0xe3
	.byte	0xe6
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xd7
	.byte	0xe3
	.byte	0xe2
	.byte	0xe8
	.byte	0xd5
	.byte	0xd7
	.byte	0xe8
	.byte	0xad
	.byte	0xff
	.size	 sEffectSporeDescription,26
	.type	 sSynchronizeDescription,object
sSynchronizeDescription:
	.byte	0xca
	.byte	0xd5
	.byte	0xe7
	.byte	0xe7
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xe7
	.byte	0xe8
	.byte	0xd5
	.byte	0xe8
	.byte	0xe9
	.byte	0xe7
	.byte	0x0
	.byte	0xe4
	.byte	0xe6
	.byte	0xe3
	.byte	0xd6
	.byte	0xe0
	.byte	0xd9
	.byte	0xe1
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sSynchronizeDescription,27
	.type	 sClearBodyDescription,object
sClearBodyDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0xd6
	.byte	0xdd
	.byte	0xe0
	.byte	0xdd
	.byte	0xe8
	.byte	0xed
	.byte	0x0
	.byte	0xe6
	.byte	0xd9
	.byte	0xd8
	.byte	0xe9
	.byte	0xd7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe3
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.size	 sClearBodyDescription,28
	.type	 sNaturalCureDescription,object
sNaturalCureDescription:
	.byte	0xc2
	.byte	0xd9
	.byte	0xd5
	.byte	0xe0
	.byte	0xe7
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xe7
	.byte	0xeb
	.byte	0xdd
	.byte	0xe8
	.byte	0xd7
	.byte	0xdc
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0x0
	.byte	0xe3
	.byte	0xe9
	.byte	0xe8
	.byte	0xad
	.byte	0xff
	.size	 sNaturalCureDescription,26
	.type	 sLightningRodDescription,object
sLightningRodDescription:
	.byte	0xbe
	.byte	0xe6
	.byte	0xd5
	.byte	0xeb
	.byte	0xe7
	.byte	0x0
	.byte	0xd9
	.byte	0xe0
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xe6
	.byte	0xdd
	.byte	0xd7
	.byte	0xd5
	.byte	0xe0
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sLightningRodDescription,24
	.type	 sSereneGraceDescription,object
sSereneGraceDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xe3
	.byte	0xe1
	.byte	0xe3
	.byte	0xe8
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0xd8
	.byte	0xd8
	.byte	0xd9
	.byte	0xd8
	.byte	0x0
	.byte	0xd9
	.byte	0xda
	.byte	0xda
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sSereneGraceDescription,24
	.type	 sSwiftSwimDescription,object
sSwiftSwimDescription:
	.byte	0xcc
	.byte	0xd5
	.byte	0xdd
	.byte	0xe7
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xcd
	.byte	0xca
	.byte	0xbf
	.byte	0xbf
	.byte	0xbe
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xe6
	.byte	0xd5
	.byte	0xdd
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.size	 sSwiftSwimDescription,22
	.type	 sChlorophyllDescription,object
sChlorophyllDescription:
	.byte	0xcc
	.byte	0xd5
	.byte	0xdd
	.byte	0xe7
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xcd
	.byte	0xca
	.byte	0xbf
	.byte	0xbf
	.byte	0xbe
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xe7
	.byte	0xe9
	.byte	0xe2
	.byte	0xe7
	.byte	0xdc
	.byte	0xdd
	.byte	0xe2
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.size	 sChlorophyllDescription,26
	.type	 sIlluminateDescription,object
sIlluminateDescription:
	.byte	0xbf
	.byte	0xe2
	.byte	0xd7
	.byte	0xe3
	.byte	0xe9
	.byte	0xe2
	.byte	0xe8
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xe6
	.byte	0xd5
	.byte	0xe8
	.byte	0xd9
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0xd7
	.byte	0xe6
	.byte	0xd9
	.byte	0xd5
	.byte	0xe7
	.byte	0xd9
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sIlluminateDescription,26
	.type	 sTraceDescription,object
sTraceDescription:
	.byte	0xbd
	.byte	0xe3
	.byte	0xe4
	.byte	0xdd
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xe4
	.byte	0xd9
	.byte	0xd7
	.byte	0xdd
	.byte	0xd5
	.byte	0xe0
	.byte	0x0
	.byte	0xd5
	.byte	0xd6
	.byte	0xdd
	.byte	0xe0
	.byte	0xdd
	.byte	0xe8
	.byte	0xed
	.byte	0xad
	.byte	0xff
	.size	 sTraceDescription,24
	.type	 sHugePowerDescription,object
sHugePowerDescription:
	.byte	0xcc
	.byte	0xd5
	.byte	0xdd
	.byte	0xe7
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xbb
	.byte	0xce
	.byte	0xce
	.byte	0xbb
	.byte	0xbd
	.byte	0xc5
	.byte	0xad
	.byte	0xff
	.size	 sHugePowerDescription,15
	.type	 sPoisonPointDescription,object
sPoisonPointDescription:
	.byte	0xca
	.byte	0xe3
	.byte	0xdd
	.byte	0xe7
	.byte	0xe3
	.byte	0xe2
	.byte	0xe7
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xd9
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xd7
	.byte	0xe3
	.byte	0xe2
	.byte	0xe8
	.byte	0xd5
	.byte	0xd7
	.byte	0xe8
	.byte	0xad
	.byte	0xff
	.size	 sPoisonPointDescription,24
	.type	 sInnerFocusDescription,object
sInnerFocusDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xda
	.byte	0xe0
	.byte	0xdd
	.byte	0xe2
	.byte	0xd7
	.byte	0xdc
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xad
	.byte	0xff
	.size	 sInnerFocusDescription,20
	.type	 sMagmaArmorDescription,object
sMagmaArmorDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xda
	.byte	0xe6
	.byte	0xd9
	.byte	0xd9
	.byte	0xee
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xad
	.byte	0xff
	.size	 sMagmaArmorDescription,19
	.type	 sWaterVeilDescription,object
sWaterVeilDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xd6
	.byte	0xe9
	.byte	0xe6
	.byte	0xe2
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sWaterVeilDescription,16
	.type	 sMagnetPullDescription,object
sMagnetPullDescription:
	.byte	0xce
	.byte	0xe6
	.byte	0xd5
	.byte	0xe4
	.byte	0xe7
	.byte	0x0
	.byte	0xcd
	.byte	0xce
	.byte	0xbf
	.byte	0xbf
	.byte	0xc6
	.byte	0xae
	.byte	0xe8
	.byte	0xed
	.byte	0xe4
	.byte	0xd9
	.byte	0x0
	.byte	0xca
	.byte	0xc9
	.byte	0xc5
	.byte	0x1b
	.byte	0xc7
	.byte	0xc9
	.byte	0xc8
	.byte	0xad
	.byte	0xff
	.size	 sMagnetPullDescription,26
	.type	 sSoundproofDescription,object
sSoundproofDescription:
	.byte	0xbb
	.byte	0xea
	.byte	0xe3
	.byte	0xdd
	.byte	0xd8
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0xe9
	.byte	0xe2
	.byte	0xd8
	.byte	0xae
	.byte	0xd6
	.byte	0xd5
	.byte	0xe7
	.byte	0xd9
	.byte	0xd8
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sSoundproofDescription,26
	.type	 sRainDishDescription,object
sRainDishDescription:
	.byte	0xcd
	.byte	0xe0
	.byte	0xdd
	.byte	0xdb
	.byte	0xdc
	.byte	0xe8
	.byte	0x0
	.byte	0xc2
	.byte	0xca
	.byte	0x0
	.byte	0xe6
	.byte	0xd9
	.byte	0xd7
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe6
	.byte	0xed
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xe6
	.byte	0xd5
	.byte	0xdd
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.size	 sRainDishDescription,28
	.type	 sSandStreamDescription,object
sSandStreamDescription:
	.byte	0xcd
	.byte	0xe9
	.byte	0xe1
	.byte	0xe1
	.byte	0xe3
	.byte	0xe2
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xe7
	.byte	0xd5
	.byte	0xe2
	.byte	0xd8
	.byte	0xe7
	.byte	0xe8
	.byte	0xe3
	.byte	0xe6
	.byte	0xe1
	.byte	0xad
	.byte	0xff
	.size	 sSandStreamDescription,21
	.type	 sPressureDescription,object
sPressureDescription:
	.byte	0xcc
	.byte	0xd5
	.byte	0xdd
	.byte	0xe7
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xd9
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xca
	.byte	0xca
	.byte	0x0
	.byte	0xe9
	.byte	0xe7
	.byte	0xd5
	.byte	0xdb
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.size	 sPressureDescription,23
	.type	 sThickFatDescription,object
sThickFatDescription:
	.byte	0xc2
	.byte	0xd9
	.byte	0xd5
	.byte	0xe8
	.byte	0xae
	.byte	0xd5
	.byte	0xe2
	.byte	0xd8
	.byte	0xae
	.byte	0xd7
	.byte	0xe3
	.byte	0xe0
	.byte	0xd8
	.byte	0x0
	.byte	0xe4
	.byte	0xe6
	.byte	0xe3
	.byte	0xe8
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe3
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.size	 sThickFatDescription,26
	.type	 sEarlyBirdDescription,object
sEarlyBirdDescription:
	.byte	0xbb
	.byte	0xeb
	.byte	0xd5
	.byte	0xdf
	.byte	0xd9
	.byte	0xe2
	.byte	0xe7
	.byte	0x0
	.byte	0xe5
	.byte	0xe9
	.byte	0xdd
	.byte	0xd7
	.byte	0xdf
	.byte	0xe0
	.byte	0xed
	.byte	0x0
	.byte	0xda
	.byte	0xe6
	.byte	0xe3
	.byte	0xe1
	.byte	0x0
	.byte	0xe7
	.byte	0xe0
	.byte	0xd9
	.byte	0xd9
	.byte	0xe4
	.byte	0xad
	.byte	0xff
	.size	 sEarlyBirdDescription,28
	.type	 sFlameBodyDescription,object
sFlameBodyDescription:
	.byte	0xbc
	.byte	0xe9
	.byte	0xe6
	.byte	0xe2
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xd9
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xd7
	.byte	0xe3
	.byte	0xe2
	.byte	0xe8
	.byte	0xd5
	.byte	0xd7
	.byte	0xe8
	.byte	0xad
	.byte	0xff
	.size	 sFlameBodyDescription,26
	.type	 sRunAwayDescription,object
sRunAwayDescription:
	.byte	0xc7
	.byte	0xd5
	.byte	0xdf
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xd9
	.byte	0xe7
	.byte	0xd7
	.byte	0xd5
	.byte	0xe4
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0x0
	.byte	0xd9
	.byte	0xd5
	.byte	0xe7
	.byte	0xdd
	.byte	0xd9
	.byte	0xe6
	.byte	0xad
	.byte	0xff
	.size	 sRunAwayDescription,23
	.type	 sKeenEyeDescription,object
sKeenEyeDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xe0
	.byte	0xe3
	.byte	0xe7
	.byte	0xe7
	.byte	0x0
	.byte	0xe3
	.byte	0xda
	.byte	0x0
	.byte	0xd5
	.byte	0xd7
	.byte	0xd7
	.byte	0xe9
	.byte	0xe6
	.byte	0xd5
	.byte	0xd7
	.byte	0xed
	.byte	0xad
	.byte	0xff
	.size	 sKeenEyeDescription,27
	.type	 sHyperCutterDescription,object
sHyperCutterDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xbb
	.byte	0xce
	.byte	0xce
	.byte	0xbb
	.byte	0xbd
	.byte	0xc5
	.byte	0x0
	.byte	0xe6
	.byte	0xd9
	.byte	0xd8
	.byte	0xe9
	.byte	0xd7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe3
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.size	 sHyperCutterDescription,27
	.type	 sPickupDescription,object
sPickupDescription:
	.byte	0xc7
	.byte	0xd5
	.byte	0xed
	.byte	0x0
	.byte	0xe4
	.byte	0xdd
	.byte	0xd7
	.byte	0xdf
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0x0
	.byte	0xdd
	.byte	0xe8
	.byte	0xd9
	.byte	0xe1
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sPickupDescription,19
	.type	 sTruantDescription,object
sTruantDescription:
	.byte	0xc7
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0xe0
	.byte	0xed
	.byte	0x0
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe6
	.byte	0xed
	.byte	0x0
	.byte	0xe8
	.byte	0xeb
	.byte	0xe3
	.byte	0x0
	.byte	0xe8
	.byte	0xe9
	.byte	0xe6
	.byte	0xe2
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sTruantDescription,28
	.type	 sHustleDescription,object
sHustleDescription:
	.byte	0xce
	.byte	0xe6
	.byte	0xd5
	.byte	0xd8
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0xd7
	.byte	0xd7
	.byte	0xe9
	.byte	0xe6
	.byte	0xd5
	.byte	0xd7
	.byte	0xed
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xe6
	.byte	0x0
	.byte	0xe4
	.byte	0xe3
	.byte	0xeb
	.byte	0xd9
	.byte	0xe6
	.byte	0xad
	.byte	0xff
	.size	 sHustleDescription,27
	.type	 sCuteCharmDescription,object
sCuteCharmDescription:
	.byte	0xc3
	.byte	0xe2
	.byte	0xda
	.byte	0xd5
	.byte	0xe8
	.byte	0xe9
	.byte	0xd5
	.byte	0xe8
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xd7
	.byte	0xe3
	.byte	0xe2
	.byte	0xe8
	.byte	0xd5
	.byte	0xd7
	.byte	0xe8
	.byte	0xad
	.byte	0xff
	.size	 sCuteCharmDescription,23
	.type	 sPlusDescription,object
sPlusDescription:
	.byte	0xca
	.byte	0xe3
	.byte	0xeb
	.byte	0xd9
	.byte	0xe6
	.byte	0xe7
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0x0
	.byte	0xeb
	.byte	0xdd
	.byte	0xe8
	.byte	0xdc
	.byte	0x0
	.byte	0xc7
	.byte	0xc3
	.byte	0xc8
	.byte	0xcf
	.byte	0xcd
	.byte	0xad
	.byte	0xff
	.size	 sPlusDescription,22
	.type	 sMinusDescription,object
sMinusDescription:
	.byte	0xca
	.byte	0xe3
	.byte	0xeb
	.byte	0xd9
	.byte	0xe6
	.byte	0xe7
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0x0
	.byte	0xeb
	.byte	0xdd
	.byte	0xe8
	.byte	0xdc
	.byte	0x0
	.byte	0xca
	.byte	0xc6
	.byte	0xcf
	.byte	0xcd
	.byte	0xad
	.byte	0xff
	.size	 sMinusDescription,21
	.type	 sForecastDescription,object
sForecastDescription:
	.byte	0xbd
	.byte	0xdc
	.byte	0xd5
	.byte	0xe2
	.byte	0xdb
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xeb
	.byte	0xdd
	.byte	0xe8
	.byte	0xdc
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0x0
	.byte	0xeb
	.byte	0xd9
	.byte	0xd5
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0xe6
	.byte	0xad
	.byte	0xff
	.size	 sForecastDescription,26
	.type	 sStickyHoldDescription,object
sStickyHoldDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xdd
	.byte	0xe8
	.byte	0xd9
	.byte	0xe1
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0xda
	.byte	0xe8
	.byte	0xad
	.byte	0xff
	.size	 sStickyHoldDescription,21
	.type	 sShedSkinDescription,object
sShedSkinDescription:
	.byte	0xc2
	.byte	0xd9
	.byte	0xd5
	.byte	0xe0
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0x0
	.byte	0xd6
	.byte	0xe3
	.byte	0xd8
	.byte	0xed
	.byte	0x0
	.byte	0xd6
	.byte	0xed
	.byte	0x0
	.byte	0xe7
	.byte	0xdc
	.byte	0xd9
	.byte	0xd8
	.byte	0xd8
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xad
	.byte	0xff
	.size	 sShedSkinDescription,28
	.type	 sGutsDescription,object
sGutsDescription:
	.byte	0xcf
	.byte	0xe4
	.byte	0xe7
	.byte	0x0
	.byte	0xbb
	.byte	0xce
	.byte	0xce
	.byte	0xbb
	.byte	0xbd
	.byte	0xc5
	.byte	0x0
	.byte	0xdd
	.byte	0xda
	.byte	0x0
	.byte	0xe7
	.byte	0xe9
	.byte	0xda
	.byte	0xda
	.byte	0xd9
	.byte	0xe6
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xad
	.byte	0xff
	.size	 sGutsDescription,25
	.type	 sMarvelScaleDescription,object
sMarvelScaleDescription:
	.byte	0xcf
	.byte	0xe4
	.byte	0xe7
	.byte	0x0
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xbf
	.byte	0xc8
	.byte	0xcd
	.byte	0xbf
	.byte	0x0
	.byte	0xdd
	.byte	0xda
	.byte	0x0
	.byte	0xe7
	.byte	0xe9
	.byte	0xda
	.byte	0xda
	.byte	0xd9
	.byte	0xe6
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xad
	.byte	0xff
	.size	 sMarvelScaleDescription,26
	.type	 sLiquidOozeDescription,object
sLiquidOozeDescription:
	.byte	0xbe
	.byte	0xe6
	.byte	0xd5
	.byte	0xdd
	.byte	0xe2
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0x0
	.byte	0xd7
	.byte	0xd5
	.byte	0xe9
	.byte	0xe7
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0xde
	.byte	0xe9
	.byte	0xe6
	.byte	0xed
	.byte	0xad
	.byte	0xff
	.size	 sLiquidOozeDescription,24
	.type	 sOvergrowDescription,object
sOvergrowDescription:
	.byte	0xcf
	.byte	0xe4
	.byte	0xe7
	.byte	0x0
	.byte	0xc1
	.byte	0xcc
	.byte	0xbb
	.byte	0xcd
	.byte	0xcd
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xe4
	.byte	0xdd
	.byte	0xe2
	.byte	0xd7
	.byte	0xdc
	.byte	0xad
	.byte	0xff
	.size	 sOvergrowDescription,28
	.type	 sBlazeDescription,object
sBlazeDescription:
	.byte	0xcf
	.byte	0xe4
	.byte	0xe7
	.byte	0x0
	.byte	0xc0
	.byte	0xc3
	.byte	0xcc
	.byte	0xbf
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xe4
	.byte	0xdd
	.byte	0xe2
	.byte	0xd7
	.byte	0xdc
	.byte	0xad
	.byte	0xff
	.size	 sBlazeDescription,27
	.type	 sTorrentDescription,object
sTorrentDescription:
	.byte	0xcf
	.byte	0xe4
	.byte	0xe7
	.byte	0x0
	.byte	0xd1
	.byte	0xbb
	.byte	0xce
	.byte	0xbf
	.byte	0xcc
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xe4
	.byte	0xdd
	.byte	0xe2
	.byte	0xd7
	.byte	0xdc
	.byte	0xad
	.byte	0xff
	.size	 sTorrentDescription,28
	.type	 sSwarmDescription,object
sSwarmDescription:
	.byte	0xcf
	.byte	0xe4
	.byte	0xe7
	.byte	0x0
	.byte	0xbc
	.byte	0xcf
	.byte	0xc1
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xe4
	.byte	0xdd
	.byte	0xe2
	.byte	0xd7
	.byte	0xdc
	.byte	0xad
	.byte	0xff
	.size	 sSwarmDescription,26
	.type	 sRockHeadDescription,object
sRockHeadDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xe6
	.byte	0xd9
	.byte	0xd7
	.byte	0xe3
	.byte	0xdd
	.byte	0xe0
	.byte	0x0
	.byte	0xd8
	.byte	0xd5
	.byte	0xe1
	.byte	0xd5
	.byte	0xdb
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.size	 sRockHeadDescription,24
	.type	 sDroughtDescription,object
sDroughtDescription:
	.byte	0xcd
	.byte	0xe9
	.byte	0xe1
	.byte	0xe1
	.byte	0xe3
	.byte	0xe2
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xe9
	.byte	0xe2
	.byte	0xe0
	.byte	0xdd
	.byte	0xdb
	.byte	0xdc
	.byte	0xe8
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xd6
	.byte	0xd5
	.byte	0xe8
	.byte	0xe8
	.byte	0xe0
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.size	 sDroughtDescription,28
	.type	 sArenaTrapDescription,object
sArenaTrapDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xda
	.byte	0xe0
	.byte	0xd9
	.byte	0xd9
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xad
	.byte	0xff
	.size	 sArenaTrapDescription,18
	.type	 sVitalSpiritDescription,object
sVitalSpiritDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xe0
	.byte	0xd9
	.byte	0xd9
	.byte	0xe4
	.byte	0xad
	.byte	0xff
	.size	 sVitalSpiritDescription,16
	.type	 sWhiteSmokeDescription,object
sWhiteSmokeDescription:
	.byte	0xca
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xe8
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0xd6
	.byte	0xdd
	.byte	0xe0
	.byte	0xdd
	.byte	0xe8
	.byte	0xed
	.byte	0x0
	.byte	0xe6
	.byte	0xd9
	.byte	0xd8
	.byte	0xe9
	.byte	0xd7
	.byte	0xe8
	.byte	0xdd
	.byte	0xe3
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.size	 sWhiteSmokeDescription,28
	.type	 sPurePowerDescription,object
sPurePowerDescription:
	.byte	0xcc
	.byte	0xd5
	.byte	0xdd
	.byte	0xe7
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xbb
	.byte	0xce
	.byte	0xce
	.byte	0xbb
	.byte	0xbd
	.byte	0xc5
	.byte	0xad
	.byte	0xff
	.size	 sPurePowerDescription,15
	.type	 sShellArmorDescription,object
sShellArmorDescription:
	.byte	0xbc
	.byte	0xe0
	.byte	0xe3
	.byte	0xd7
	.byte	0xdf
	.byte	0xe7
	.byte	0x0
	.byte	0xd7
	.byte	0xe6
	.byte	0xdd
	.byte	0xe8
	.byte	0xdd
	.byte	0xd7
	.byte	0xd5
	.byte	0xe0
	.byte	0x0
	.byte	0xdc
	.byte	0xdd
	.byte	0xe8
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sShellArmorDescription,22
	.type	 sCacophonyDescription,object
sCacophonyDescription:
	.byte	0xbb
	.byte	0xea
	.byte	0xe3
	.byte	0xdd
	.byte	0xd8
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0xe9
	.byte	0xe2
	.byte	0xd8
	.byte	0xae
	.byte	0xd6
	.byte	0xd5
	.byte	0xe7
	.byte	0xd9
	.byte	0xd8
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sCacophonyDescription,26
	.type	 sAirLockDescription,object
sAirLockDescription:
	.byte	0xc8
	.byte	0xd9
	.byte	0xdb
	.byte	0xd5
	.byte	0xe8
	.byte	0xd9
	.byte	0xe7
	.byte	0x0
	.byte	0xeb
	.byte	0xd9
	.byte	0xd5
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xd9
	.byte	0xda
	.byte	0xda
	.byte	0xd9
	.byte	0xd7
	.byte	0xe8
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.size	 sAirLockDescription,25
	.globl	gAbilityDescriptionPointers
	.align	2, 0
	.type	 gAbilityDescriptionPointers,object
	.size	 gAbilityDescriptionPointers,312
gAbilityDescriptionPointers:
	.word	sNoneDescription
	.word	sStenchDescription
	.word	sDrizzleDescription
	.word	sSpeedBoostDescription
	.word	sBattleArmorDescription
	.word	sSturdyDescription
	.word	sDampDescription
	.word	sLimberDescription
	.word	sSandVeilDescription
	.word	sStaticDescription
	.word	sVoltAbsorbDescription
	.word	sWaterAbsorbDescription
	.word	sObliviousDescription
	.word	sCloudNineDescription
	.word	sCompoundEyesDescription
	.word	sInsomniaDescription
	.word	sColorChangeDescription
	.word	sImmunityDescription
	.word	sFlashFireDescription
	.word	sShieldDustDescription
	.word	sOwnTempoDescription
	.word	sSuctionCupsDescription
	.word	sIntimidateDescription
	.word	sShadowTagDescription
	.word	sRoughSkinDescription
	.word	sWonderGuardDescription
	.word	sLevitateDescription
	.word	sEffectSporeDescription
	.word	sSynchronizeDescription
	.word	sClearBodyDescription
	.word	sNaturalCureDescription
	.word	sLightningRodDescription
	.word	sSereneGraceDescription
	.word	sSwiftSwimDescription
	.word	sChlorophyllDescription
	.word	sIlluminateDescription
	.word	sTraceDescription
	.word	sHugePowerDescription
	.word	sPoisonPointDescription
	.word	sInnerFocusDescription
	.word	sMagmaArmorDescription
	.word	sWaterVeilDescription
	.word	sMagnetPullDescription
	.word	sSoundproofDescription
	.word	sRainDishDescription
	.word	sSandStreamDescription
	.word	sPressureDescription
	.word	sThickFatDescription
	.word	sEarlyBirdDescription
	.word	sFlameBodyDescription
	.word	sRunAwayDescription
	.word	sKeenEyeDescription
	.word	sHyperCutterDescription
	.word	sPickupDescription
	.word	sTruantDescription
	.word	sHustleDescription
	.word	sCuteCharmDescription
	.word	sPlusDescription
	.word	sMinusDescription
	.word	sForecastDescription
	.word	sStickyHoldDescription
	.word	sShedSkinDescription
	.word	sGutsDescription
	.word	sMarvelScaleDescription
	.word	sLiquidOozeDescription
	.word	sOvergrowDescription
	.word	sBlazeDescription
	.word	sTorrentDescription
	.word	sSwarmDescription
	.word	sRockHeadDescription
	.word	sDroughtDescription
	.word	sArenaTrapDescription
	.word	sVitalSpiritDescription
	.word	sWhiteSmokeDescription
	.word	sPurePowerDescription
	.word	sShellArmorDescription
	.word	sCacophonyDescription
	.word	sAirLockDescription
	.globl	gAbilityNames
	.type	 gAbilityNames,object
	.size	 gAbilityNames,1014
gAbilityNames:
	.byte	0xae
	.byte	0xae
	.byte	0xae
	.byte	0xae
	.byte	0xae
	.byte	0xae
	.byte	0xae
	.byte	0xff
	.space	5
	.byte	0xcd
	.byte	0xce
	.byte	0xbf
	.byte	0xc8
	.byte	0xbd
	.byte	0xc2
	.byte	0xff
	.space	6
	.byte	0xbe
	.byte	0xcc
	.byte	0xc3
	.byte	0xd4
	.byte	0xd4
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.space	5
	.byte	0xcd
	.byte	0xca
	.byte	0xbf
	.byte	0xbf
	.byte	0xbe
	.byte	0x0
	.byte	0xbc
	.byte	0xc9
	.byte	0xc9
	.byte	0xcd
	.byte	0xce
	.byte	0xff
	.space	1
	.byte	0xbc
	.byte	0xbb
	.byte	0xce
	.byte	0xce
	.byte	0xc6
	.byte	0xbf
	.byte	0x0
	.byte	0xbb
	.byte	0xcc
	.byte	0xc7
	.byte	0xc9
	.byte	0xcc
	.byte	0xff
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xcc
	.byte	0xbe
	.byte	0xd3
	.byte	0xff
	.space	6
	.byte	0xbe
	.byte	0xbb
	.byte	0xc7
	.byte	0xca
	.byte	0xff
	.space	8
	.byte	0xc6
	.byte	0xc3
	.byte	0xc7
	.byte	0xbc
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.space	6
	.byte	0xcd
	.byte	0xbb
	.byte	0xc8
	.byte	0xbe
	.byte	0x0
	.byte	0xd0
	.byte	0xbf
	.byte	0xc3
	.byte	0xc6
	.byte	0xff
	.space	3
	.byte	0xcd
	.byte	0xce
	.byte	0xbb
	.byte	0xce
	.byte	0xc3
	.byte	0xbd
	.byte	0xff
	.space	6
	.byte	0xd0
	.byte	0xc9
	.byte	0xc6
	.byte	0xce
	.byte	0x0
	.byte	0xbb
	.byte	0xbc
	.byte	0xcd
	.byte	0xc9
	.byte	0xcc
	.byte	0xbc
	.byte	0xff
	.space	1
	.byte	0xd1
	.byte	0xbb
	.byte	0xce
	.byte	0xbf
	.byte	0xcc
	.byte	0x0
	.byte	0xbb
	.byte	0xbc
	.byte	0xcd
	.byte	0xc9
	.byte	0xcc
	.byte	0xbc
	.byte	0xff
	.byte	0xc9
	.byte	0xbc
	.byte	0xc6
	.byte	0xc3
	.byte	0xd0
	.byte	0xc3
	.byte	0xc9
	.byte	0xcf
	.byte	0xcd
	.byte	0xff
	.space	3
	.byte	0xbd
	.byte	0xc6
	.byte	0xc9
	.byte	0xcf
	.byte	0xbe
	.byte	0x0
	.byte	0xc8
	.byte	0xc3
	.byte	0xc8
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbd
	.byte	0xc9
	.byte	0xc7
	.byte	0xca
	.byte	0xc9
	.byte	0xcf
	.byte	0xc8
	.byte	0xbe
	.byte	0xbf
	.byte	0xd3
	.byte	0xbf
	.byte	0xcd
	.byte	0xff
	.byte	0xc3
	.byte	0xc8
	.byte	0xcd
	.byte	0xc9
	.byte	0xc7
	.byte	0xc8
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.space	4
	.byte	0xbd
	.byte	0xc9
	.byte	0xc6
	.byte	0xc9
	.byte	0xcc
	.byte	0x0
	.byte	0xbd
	.byte	0xc2
	.byte	0xbb
	.byte	0xc8
	.byte	0xc1
	.byte	0xbf
	.byte	0xff
	.byte	0xc3
	.byte	0xc7
	.byte	0xc7
	.byte	0xcf
	.byte	0xc8
	.byte	0xc3
	.byte	0xce
	.byte	0xd3
	.byte	0xff
	.space	4
	.byte	0xc0
	.byte	0xc6
	.byte	0xbb
	.byte	0xcd
	.byte	0xc2
	.byte	0x0
	.byte	0xc0
	.byte	0xc3
	.byte	0xcc
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xcd
	.byte	0xc2
	.byte	0xc3
	.byte	0xbf
	.byte	0xc6
	.byte	0xbe
	.byte	0x0
	.byte	0xbe
	.byte	0xcf
	.byte	0xcd
	.byte	0xce
	.byte	0xff
	.space	1
	.byte	0xc9
	.byte	0xd1
	.byte	0xc8
	.byte	0x0
	.byte	0xce
	.byte	0xbf
	.byte	0xc7
	.byte	0xca
	.byte	0xc9
	.byte	0xff
	.space	3
	.byte	0xcd
	.byte	0xcf
	.byte	0xbd
	.byte	0xce
	.byte	0xc3
	.byte	0xc9
	.byte	0xc8
	.byte	0x0
	.byte	0xbd
	.byte	0xcf
	.byte	0xca
	.byte	0xcd
	.byte	0xff
	.byte	0xc3
	.byte	0xc8
	.byte	0xce
	.byte	0xc3
	.byte	0xc7
	.byte	0xc3
	.byte	0xbe
	.byte	0xbb
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xcd
	.byte	0xc2
	.byte	0xbb
	.byte	0xbe
	.byte	0xc9
	.byte	0xd1
	.byte	0x0
	.byte	0xce
	.byte	0xbb
	.byte	0xc1
	.byte	0xff
	.space	2
	.byte	0xcc
	.byte	0xc9
	.byte	0xcf
	.byte	0xc1
	.byte	0xc2
	.byte	0x0
	.byte	0xcd
	.byte	0xc5
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0xd1
	.byte	0xc9
	.byte	0xc8
	.byte	0xbe
	.byte	0xbf
	.byte	0xcc
	.byte	0x0
	.byte	0xc1
	.byte	0xcf
	.byte	0xbb
	.byte	0xcc
	.byte	0xbe
	.byte	0xff
	.byte	0xc6
	.byte	0xbf
	.byte	0xd0
	.byte	0xc3
	.byte	0xce
	.byte	0xbb
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	4
	.byte	0xbf
	.byte	0xc0
	.byte	0xc0
	.byte	0xbf
	.byte	0xbd
	.byte	0xce
	.byte	0x0
	.byte	0xcd
	.byte	0xca
	.byte	0xc9
	.byte	0xcc
	.byte	0xbf
	.byte	0xff
	.byte	0xcd
	.byte	0xd3
	.byte	0xc8
	.byte	0xbd
	.byte	0xc2
	.byte	0xcc
	.byte	0xc9
	.byte	0xc8
	.byte	0xc3
	.byte	0xd4
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xbd
	.byte	0xc6
	.byte	0xbf
	.byte	0xbb
	.byte	0xcc
	.byte	0x0
	.byte	0xbc
	.byte	0xc9
	.byte	0xbe
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0xc8
	.byte	0xbb
	.byte	0xce
	.byte	0xcf
	.byte	0xcc
	.byte	0xbb
	.byte	0xc6
	.byte	0x0
	.byte	0xbd
	.byte	0xcf
	.byte	0xcc
	.byte	0xbf
	.byte	0xff
	.byte	0xc6
	.byte	0xc3
	.byte	0xc1
	.byte	0xc2
	.byte	0xce
	.byte	0xc8
	.byte	0xc3
	.byte	0xc8
	.byte	0xc1
	.byte	0xcc
	.byte	0xc9
	.byte	0xbe
	.byte	0xff
	.byte	0xcd
	.byte	0xbf
	.byte	0xcc
	.byte	0xbf
	.byte	0xc8
	.byte	0xbf
	.byte	0x0
	.byte	0xc1
	.byte	0xcc
	.byte	0xbb
	.byte	0xbd
	.byte	0xbf
	.byte	0xff
	.byte	0xcd
	.byte	0xd1
	.byte	0xc3
	.byte	0xc0
	.byte	0xce
	.byte	0x0
	.byte	0xcd
	.byte	0xd1
	.byte	0xc3
	.byte	0xc7
	.byte	0xff
	.space	2
	.byte	0xbd
	.byte	0xc2
	.byte	0xc6
	.byte	0xc9
	.byte	0xcc
	.byte	0xc9
	.byte	0xca
	.byte	0xc2
	.byte	0xd3
	.byte	0xc6
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0xc3
	.byte	0xc6
	.byte	0xc6
	.byte	0xcf
	.byte	0xc7
	.byte	0xc3
	.byte	0xc8
	.byte	0xbb
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xce
	.byte	0xcc
	.byte	0xbb
	.byte	0xbd
	.byte	0xbf
	.byte	0xff
	.space	7
	.byte	0xc2
	.byte	0xcf
	.byte	0xc1
	.byte	0xbf
	.byte	0x0
	.byte	0xca
	.byte	0xc9
	.byte	0xd1
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.space	2
	.byte	0xca
	.byte	0xc9
	.byte	0xc3
	.byte	0xcd
	.byte	0xc9
	.byte	0xc8
	.byte	0x0
	.byte	0xca
	.byte	0xc9
	.byte	0xc3
	.byte	0xc8
	.byte	0xce
	.byte	0xff
	.byte	0xc3
	.byte	0xc8
	.byte	0xc8
	.byte	0xbf
	.byte	0xcc
	.byte	0x0
	.byte	0xc0
	.byte	0xc9
	.byte	0xbd
	.byte	0xcf
	.byte	0xcd
	.byte	0xff
	.space	1
	.byte	0xc7
	.byte	0xbb
	.byte	0xc1
	.byte	0xc7
	.byte	0xbb
	.byte	0x0
	.byte	0xbb
	.byte	0xcc
	.byte	0xc7
	.byte	0xc9
	.byte	0xcc
	.byte	0xff
	.space	1
	.byte	0xd1
	.byte	0xbb
	.byte	0xce
	.byte	0xbf
	.byte	0xcc
	.byte	0x0
	.byte	0xd0
	.byte	0xbf
	.byte	0xc3
	.byte	0xc6
	.byte	0xff
	.space	2
	.byte	0xc7
	.byte	0xbb
	.byte	0xc1
	.byte	0xc8
	.byte	0xbf
	.byte	0xce
	.byte	0x0
	.byte	0xca
	.byte	0xcf
	.byte	0xc6
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0xcd
	.byte	0xc9
	.byte	0xcf
	.byte	0xc8
	.byte	0xbe
	.byte	0xca
	.byte	0xcc
	.byte	0xc9
	.byte	0xc9
	.byte	0xc0
	.byte	0xff
	.space	2
	.byte	0xcc
	.byte	0xbb
	.byte	0xc3
	.byte	0xc8
	.byte	0x0
	.byte	0xbe
	.byte	0xc3
	.byte	0xcd
	.byte	0xc2
	.byte	0xff
	.space	3
	.byte	0xcd
	.byte	0xbb
	.byte	0xc8
	.byte	0xbe
	.byte	0x0
	.byte	0xcd
	.byte	0xce
	.byte	0xcc
	.byte	0xbf
	.byte	0xbb
	.byte	0xc7
	.byte	0xff
	.space	1
	.byte	0xca
	.byte	0xcc
	.byte	0xbf
	.byte	0xcd
	.byte	0xcd
	.byte	0xcf
	.byte	0xcc
	.byte	0xbf
	.byte	0xff
	.space	4
	.byte	0xce
	.byte	0xc2
	.byte	0xc3
	.byte	0xbd
	.byte	0xc5
	.byte	0x0
	.byte	0xc0
	.byte	0xbb
	.byte	0xce
	.byte	0xff
	.space	3
	.byte	0xbf
	.byte	0xbb
	.byte	0xcc
	.byte	0xc6
	.byte	0xd3
	.byte	0x0
	.byte	0xbc
	.byte	0xc3
	.byte	0xcc
	.byte	0xbe
	.byte	0xff
	.space	2
	.byte	0xc0
	.byte	0xc6
	.byte	0xbb
	.byte	0xc7
	.byte	0xbf
	.byte	0x0
	.byte	0xbc
	.byte	0xc9
	.byte	0xbe
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0xcc
	.byte	0xcf
	.byte	0xc8
	.byte	0x0
	.byte	0xbb
	.byte	0xd1
	.byte	0xbb
	.byte	0xd3
	.byte	0xff
	.space	4
	.byte	0xc5
	.byte	0xbf
	.byte	0xbf
	.byte	0xc8
	.byte	0x0
	.byte	0xbf
	.byte	0xd3
	.byte	0xbf
	.byte	0xff
	.space	4
	.byte	0xc2
	.byte	0xd3
	.byte	0xca
	.byte	0xbf
	.byte	0xcc
	.byte	0x0
	.byte	0xbd
	.byte	0xcf
	.byte	0xce
	.byte	0xce
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.byte	0xca
	.byte	0xc3
	.byte	0xbd
	.byte	0xc5
	.byte	0xcf
	.byte	0xca
	.byte	0xff
	.space	6
	.byte	0xce
	.byte	0xcc
	.byte	0xcf
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xff
	.space	6
	.byte	0xc2
	.byte	0xcf
	.byte	0xcd
	.byte	0xce
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.space	6
	.byte	0xbd
	.byte	0xcf
	.byte	0xce
	.byte	0xbf
	.byte	0x0
	.byte	0xbd
	.byte	0xc2
	.byte	0xbb
	.byte	0xcc
	.byte	0xc7
	.byte	0xff
	.space	2
	.byte	0xca
	.byte	0xc6
	.byte	0xcf
	.byte	0xcd
	.byte	0xff
	.space	8
	.byte	0xc7
	.byte	0xc3
	.byte	0xc8
	.byte	0xcf
	.byte	0xcd
	.byte	0xff
	.space	7
	.byte	0xc0
	.byte	0xc9
	.byte	0xcc
	.byte	0xbf
	.byte	0xbd
	.byte	0xbb
	.byte	0xcd
	.byte	0xce
	.byte	0xff
	.space	4
	.byte	0xcd
	.byte	0xce
	.byte	0xc3
	.byte	0xbd
	.byte	0xc5
	.byte	0xd3
	.byte	0x0
	.byte	0xc2
	.byte	0xc9
	.byte	0xc6
	.byte	0xbe
	.byte	0xff
	.space	1
	.byte	0xcd
	.byte	0xc2
	.byte	0xbf
	.byte	0xbe
	.byte	0x0
	.byte	0xcd
	.byte	0xc5
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	3
	.byte	0xc1
	.byte	0xcf
	.byte	0xce
	.byte	0xcd
	.byte	0xff
	.space	8
	.byte	0xc7
	.byte	0xbb
	.byte	0xcc
	.byte	0xd0
	.byte	0xbf
	.byte	0xc6
	.byte	0x0
	.byte	0xcd
	.byte	0xbd
	.byte	0xbb
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.byte	0xc6
	.byte	0xc3
	.byte	0xcb
	.byte	0xcf
	.byte	0xc3
	.byte	0xbe
	.byte	0x0
	.byte	0xc9
	.byte	0xc9
	.byte	0xd4
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xc9
	.byte	0xd0
	.byte	0xbf
	.byte	0xcc
	.byte	0xc1
	.byte	0xcc
	.byte	0xc9
	.byte	0xd1
	.byte	0xff
	.space	4
	.byte	0xbc
	.byte	0xc6
	.byte	0xbb
	.byte	0xd4
	.byte	0xbf
	.byte	0xff
	.space	7
	.byte	0xce
	.byte	0xc9
	.byte	0xcc
	.byte	0xcc
	.byte	0xbf
	.byte	0xc8
	.byte	0xce
	.byte	0xff
	.space	5
	.byte	0xcd
	.byte	0xd1
	.byte	0xbb
	.byte	0xcc
	.byte	0xc7
	.byte	0xff
	.space	7
	.byte	0xcc
	.byte	0xc9
	.byte	0xbd
	.byte	0xc5
	.byte	0x0
	.byte	0xc2
	.byte	0xbf
	.byte	0xbb
	.byte	0xbe
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xcc
	.byte	0xc9
	.byte	0xcf
	.byte	0xc1
	.byte	0xc2
	.byte	0xce
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xcc
	.byte	0xbf
	.byte	0xc8
	.byte	0xbb
	.byte	0x0
	.byte	0xce
	.byte	0xcc
	.byte	0xbb
	.byte	0xca
	.byte	0xff
	.space	2
	.byte	0xd0
	.byte	0xc3
	.byte	0xce
	.byte	0xbb
	.byte	0xc6
	.byte	0x0
	.byte	0xcd
	.byte	0xca
	.byte	0xc3
	.byte	0xcc
	.byte	0xc3
	.byte	0xce
	.byte	0xff
	.byte	0xd1
	.byte	0xc2
	.byte	0xc3
	.byte	0xce
	.byte	0xbf
	.byte	0x0
	.byte	0xcd
	.byte	0xc7
	.byte	0xc9
	.byte	0xc5
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xca
	.byte	0xcf
	.byte	0xcc
	.byte	0xbf
	.byte	0x0
	.byte	0xca
	.byte	0xc9
	.byte	0xd1
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.space	2
	.byte	0xcd
	.byte	0xc2
	.byte	0xbf
	.byte	0xc6
	.byte	0xc6
	.byte	0x0
	.byte	0xbb
	.byte	0xcc
	.byte	0xc7
	.byte	0xc9
	.byte	0xcc
	.byte	0xff
	.space	1
	.byte	0xbd
	.byte	0xbb
	.byte	0xbd
	.byte	0xc9
	.byte	0xca
	.byte	0xc2
	.byte	0xc9
	.byte	0xc8
	.byte	0xd3
	.byte	0xff
	.space	3
	.byte	0xbb
	.byte	0xc3
	.byte	0xcc
	.byte	0x0
	.byte	0xc6
	.byte	0xc9
	.byte	0xbd
	.byte	0xc5
	.byte	0xff
	.space	4
	.align	2, 0
	.type	 sTurnActionsFuncsTable,object
sTurnActionsFuncsTable:
	.word	HandleAction_UseMove
	.word	HandleAction_UseItem
	.word	HandleAction_Switch
	.word	HandleAction_Run
	.word	HandleAction_WatchesCarefully
	.word	HandleAction_SafariZoneBallThrow
	.word	HandleAction_ThrowBait
	.word	HandleAction_ThrowRock
	.word	HandleAction_SafariZoneRun
	.word	HandleAction_OldManBallThrow
	.word	HandleAction_RunBattleScript
	.word	HandleAction_TryFinish
	.word	HandleAction_ActionFinished
	.word	HandleAction_NothingIsFainted
	.size	 sTurnActionsFuncsTable,56
	.align	2, 0
	.type	 sEndTurnFuncsTable,object
sEndTurnFuncsTable:
	.word	HandleEndTurn_ContinueBattle
	.word	HandleEndTurn_BattleWon
	.word	HandleEndTurn_BattleLost
	.word	HandleEndTurn_BattleLost
	.word	HandleEndTurn_RanFromBattle
	.word	HandleEndTurn_FinishBattle
	.word	HandleEndTurn_MonFled
	.word	HandleEndTurn_FinishBattle
	.word	HandleEndTurn_FinishBattle
	.size	 sEndTurnFuncsTable,36
	.globl	gStatusConditionString_PoisonJpn
	.type	 gStatusConditionString_PoisonJpn,object
	.size	 gStatusConditionString_PoisonJpn,8
gStatusConditionString_PoisonJpn:
	.byte	0x45
	.byte	0x8
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.globl	gStatusConditionString_SleepJpn
	.type	 gStatusConditionString_SleepJpn,object
	.size	 gStatusConditionString_SleepJpn,8
gStatusConditionString_SleepJpn:
	.byte	0x18
	.byte	0x21
	.byte	0x28
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.globl	gStatusConditionString_ParalysisJpn
	.type	 gStatusConditionString_ParalysisJpn,object
	.size	 gStatusConditionString_ParalysisJpn,8
gStatusConditionString_ParalysisJpn:
	.byte	0x1f
	.byte	0x1b
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.globl	gStatusConditionString_BurnJpn
	.type	 gStatusConditionString_BurnJpn,object
	.size	 gStatusConditionString_BurnJpn,8
gStatusConditionString_BurnJpn:
	.byte	0x24
	.byte	0x9
	.byte	0x45
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.globl	gStatusConditionString_IceJpn
	.type	 gStatusConditionString_IceJpn,object
	.size	 gStatusConditionString_IceJpn,8
gStatusConditionString_IceJpn:
	.byte	0xa
	.byte	0x5
	.byte	0x28
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.globl	gStatusConditionString_ConfusionJpn
	.type	 gStatusConditionString_ConfusionJpn,object
	.size	 gStatusConditionString_ConfusionJpn,8
gStatusConditionString_ConfusionJpn:
	.byte	0xa
	.byte	0x2e
	.byte	0x27
	.byte	0x2e
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.globl	gStatusConditionString_LoveJpn
	.type	 gStatusConditionString_LoveJpn,object
	.size	 gStatusConditionString_LoveJpn,8
gStatusConditionString_LoveJpn:
	.byte	0x72
	.byte	0x7b
	.byte	0x72
	.byte	0x7b
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.globl	gStatusConditionStringsTable
	.align	2, 0
	.type	 gStatusConditionStringsTable,object
	.size	 gStatusConditionStringsTable,56
gStatusConditionStringsTable:
	.word	gStatusConditionString_PoisonJpn
	.word	gText_Poison
	.word	gStatusConditionString_SleepJpn
	.word	gText_Sleep
	.word	gStatusConditionString_ParalysisJpn
	.word	gText_Paralysis
	.word	gStatusConditionString_BurnJpn
	.word	gText_Burn
	.word	gStatusConditionString_IceJpn
	.word	gText_Ice
	.word	gStatusConditionString_ConfusionJpn
	.word	gText_Confusion
	.word	gStatusConditionString_LoveJpn
	.word	gText_Love
.text
	.align	2, 0
	.globl	CB2_InitBattle
	.type	 CB2_InitBattle,function
	.thumb_func
CB2_InitBattle:
	push	{r4, lr}
	bl	MoveSaveBlocks_ResetHeap
	bl	AllocateBattleResources
	bl	AllocateBattleSpritesData
	bl	AllocateMonSpritesGfx
	ldr	r4, .L12
	ldr	r0, [r4]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3	@cond_branch
	bl	HandleLinkBattleSetup
	ldr	r0, .L12+0x4
	bl	SetMainCallback2
	ldr	r1, .L12+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L4
.L13:
	.align	2, 0
.L12:
	.word	gBattleTypeFlags
	.word	CB2_PreInitMultiBattle
	.word	gBattleCommunication
.L3:
	bl	CB2_InitBattleInternal
	ldr	r1, [r4]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L6	@cond_branch
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	mov	r0, #0x19
	bl	SetHelpContext
	b	.L4
.L7:
	mov	r0, #0x18
	bl	SetHelpContext
	b	.L4
.L6:
	mov	r0, #0x80
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L10	@cond_branch
	mov	r0, #0x1a
	bl	SetHelpContext
	b	.L4
.L10:
	mov	r0, #0x17
	bl	SetHelpContext
.L4:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 CB2_InitBattle,.Lfe1-CB2_InitBattle
	.align	2, 0
	.type	 CB2_InitBattleInternal,function
	.thumb_func
CB2_InitBattleInternal:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	str	r0, [sp]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L34
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	ldr	r4, .L34+0x4
	mov	r0, #0x44
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L34+0x8
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r0, .L34+0xc
	strh	r4, [r0]
	bl	ScanlineEffect_Clear
	ldr	r0, .L34+0x10
	mov	r3, #0xf0
	mov	r1, #0xf0
	lsl	r1, r1, #0x3
	add	r2, r0, r1
	mov	r1, #0x4f
.L18:
	strh	r3, [r0]
	strh	r3, [r2]
	add	r2, r2, #0x2
	add	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L18	@cond_branch
	mov	r1, #0x50
	ldr	r4, .L34+0x14
	ldr	r0, .L34+0x10
	ldr	r3, .L34+0x18
	mov	r5, #0x82
	lsl	r5, r5, #0x4
	add	r2, r0, r5
	add	r0, r0, #0xa0
.L23:
	strh	r3, [r0]
	strh	r3, [r2]
	add	r2, r2, #0x2
	add	r0, r0, #0x2
	add	r1, r1, #0x1
	cmp	r1, #0x9f
	ble	.L23	@cond_branch
	ldr	r0, [r4]
	ldr	r1, [r4, #0x4]
	ldr	r2, [r4, #0x8]
	bl	ScanlineEffect_SetParams
	bl	ResetPaletteFade
	ldr	r0, .L34+0x1c
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L34+0x20
	strh	r1, [r0]
	ldr	r0, .L34+0x24
	strh	r1, [r0]
	ldr	r0, .L34+0x28
	strh	r1, [r0]
	ldr	r0, .L34+0x2c
	strh	r1, [r0]
	ldr	r0, .L34+0x30
	strh	r1, [r0]
	ldr	r0, .L34+0x34
	strh	r1, [r0]
	ldr	r0, .L34+0x38
	strh	r1, [r0]
	bl	BattleSetup_GetTerrainId
	ldr	r1, .L34+0x3c
	strb	r0, [r1]
	bl	InitBattleBgsVideo
	bl	LoadBattleTextboxAndBackground
	bl	ResetSpriteData
	bl	ResetTasks
	bl	DrawBattleEntryBackground
	bl	FreeAllSpritePalettes
	ldr	r1, .L34+0x40
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, .L34+0x44
	bl	SetVBlankCallback
	bl	SetUpBattleVars
	ldr	r0, .L34+0x48
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
	ldr	r0, .L34+0x4c
	bl	SetMainCallback2
	b	.L26
.L35:
	.align	2, 0
.L34:
	.word	0x5006000
	.word	0x5051
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gScanlineEffectRegBuffers
	.word	sIntroScanlineParams16Bit
	.word	0xff10
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattleTerrain
	.word	gReservedSpritePaletteCount
	.word	VBlankCB_Battle
	.word	gBattleTypeFlags
	.word	CB2_HandleStartMultiBattle
.L25:
	ldr	r0, .L36
	bl	SetMainCallback2
.L26:
	ldr	r0, .L36+0x4
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L27	@cond_branch
	ldr	r0, .L36+0x8
	ldr	r1, .L36+0xc
	ldrh	r1, [r1]
	bl	CreateNPCTrainerParty
	bl	SetWildMonHeldItem
.L27:
	ldr	r0, .L36+0x10
	ldr	r1, .L36+0x14
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r4, .L36+0x18
	mov	r0, #0xfa
	lsl	r0, r0, #0x1
	add	r5, r4, r0
.L31:
	add	r0, r4, #0
	mov	r1, #0x3
	bl	AdjustFriendship
	add	r4, r4, #0x64
	cmp	r4, r5
	ble	.L31	@cond_branch
	mov	r1, #0x0
	ldr	r0, .L36+0x1c
	strb	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	CB2_HandleStartBattle
	.word	gBattleTypeFlags
	.word	gEnemyParty
	.word	gTrainerBattleOpponent_A
	.word	gMain
	.word	0x439
	.word	gPlayerParty
	.word	gBattleCommunication
.Lfe2:
	.size	 CB2_InitBattleInternal,.Lfe2-CB2_InitBattleInternal
	.align	2, 0
	.type	 BufferPartyVsScreenHealth_AtStart,function
	.thumb_func
BufferPartyVsScreenHealth_AtStart:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r9, r6
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	mov	sl, r0
	mov	r8, r6
.L42:
	mov	r0, #0x64
	mov	r4, r9
	mul	r4, r4, r0
	ldr	r0, .L51
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L41	@cond_branch
	cmp	r5, sl
	beq	.L44	@cond_branch
	cmp	r7, #0
	beq	.L44	@cond_branch
	cmp	r1, #0
	bne	.L44	@cond_branch
	mov	r0, #0x1
	mov	r2, r8
	lsl	r0, r0, r2
	orr	r6, r6, r0
	lsl	r0, r6, #0x10
	lsr	r6, r0, #0x10
.L44:
	cmp	r5, #0
	beq	.L41	@cond_branch
	cmp	r7, #0
	beq	.L46	@cond_branch
	cmp	r5, sl
	beq	.L47	@cond_branch
	cmp	r1, #0
	beq	.L46	@cond_branch
.L47:
	mov	r0, #0x2
	mov	r1, r8
	lsl	r0, r0, r1
	orr	r6, r6, r0
	lsl	r0, r6, #0x10
	lsr	r6, r0, #0x10
.L46:
	cmp	r5, #0
	beq	.L41	@cond_branch
	cmp	r5, sl
	beq	.L41	@cond_branch
	cmp	r7, #0
	bne	.L41	@cond_branch
	mov	r0, #0x3
	mov	r2, r8
	lsl	r0, r0, r2
	orr	r6, r6, r0
	lsl	r0, r6, #0x10
	lsr	r6, r0, #0x10
.L41:
	mov	r0, #0x2
	add	r8, r8, r0
	mov	r1, #0x1
	add	r9, r9, r1
	mov	r2, r9
	cmp	r2, #0x5
	ble	.L42	@cond_branch
	ldr	r1, .L51+0x4
	ldr	r0, [r1]
	mov	r2, #0xc3
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	strb	r6, [r0]
	ldr	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r0, r2
	lsr	r0, r6, #0x8
	strb	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gPlayerParty
	.word	gBattleStruct
.Lfe3:
	.size	 BufferPartyVsScreenHealth_AtStart,.Lfe3-BufferPartyVsScreenHealth_AtStart
	.align	2, 0
	.type	 SetPlayerBerryDataInBattleStruct,function
	.thumb_func
SetPlayerBerryDataInBattleStruct:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L77
	ldr	r5, [r0]
	mov	r0, #0xc4
	lsl	r0, r0, #0x1
	add	r4, r5, r0
	bl	IsEnigmaBerryValid
	cmp	r0, #0x1
	bne	.L54	@cond_branch
	mov	r2, #0x0
	ldr	r7, .L77+0x4
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r5, r5, r1
	add	r6, r7, #0
	ldr	r3, .L77+0x8
.L58:
	add	r0, r4, r2
	ldr	r1, [r6]
	add	r1, r1, r3
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x5
	ble	.L58	@cond_branch
	add	r1, r4, r2
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r2, #0x0
	add	r3, r5, #0
	ldr	r6, .L77+0x4
	ldr	r5, .L77+0xc
.L63:
	add	r0, r3, r2
	ldr	r1, [r6]
	add	r1, r1, r5
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x11
	ble	.L63	@cond_branch
	ldr	r0, [r7]
	ldr	r1, .L77+0x10
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r4, #0x7]
	ldr	r0, [r7]
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	b	.L76
.L78:
	.align	2, 0
.L77:
	.word	gBattleStruct
	.word	gSaveBlock1Ptr
	.word	0x30ec
	.word	0x3108
	.word	0x311a
.L54:
	mov	r0, #0xaf
	bl	ItemIdToBerryType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBerryInfo
	add	r3, r0, #0
	mov	r2, #0x0
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r5, r5, r0
.L69:
	add	r0, r4, r2
	add	r1, r3, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x5
	ble	.L69	@cond_branch
	add	r1, r4, r2
	mov	r0, #0xff
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r2, #0x0
	add	r1, r0, #0
	add	r1, r1, #0x11
.L74:
	strb	r2, [r1]
	sub	r1, r1, #0x1
	cmp	r1, r0
	bge	.L74	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x7]
.L76:
	strb	r0, [r4, #0x1a]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 SetPlayerBerryDataInBattleStruct,.Lfe4-SetPlayerBerryDataInBattleStruct
	.align	2, 0
	.type	 SetAllPlayersBerryData,function
	.thumb_func
SetAllPlayersBerryData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L136
	ldr	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB611
	b	.L80	@long jump
.LCB611:
	bl	IsEnigmaBerryValid
	cmp	r0, #0x1
	bne	.L81	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L136+0x4
	ldr	r0, .L136+0x8
	mov	r8, r0
	add	r6, r3, #0
	mov	r4, r8
	ldr	r2, .L136+0xc
	add	r7, r3, #0
	add	r7, r7, #0x38
.L85:
	add	r1, r5, r6
	ldr	r0, [r4]
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r5, r7
	ldr	r0, [r4]
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L85	@cond_branch
	add	r1, r5, r3
	mov	r0, #0xff
	strb	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x38
	add	r0, r5, r0
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	mov	r5, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x8
	ldr	r4, .L136+0x8
	ldr	r2, .L136+0x10
	add	r6, r3, #0
	add	r6, r6, #0x40
.L90:
	add	r1, r5, r7
	ldr	r0, [r4]
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r5, r6
	ldr	r0, [r4]
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r5, r5, #0x1
	cmp	r5, #0x11
	ble	.L90	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L136+0x14
	add	r0, r0, r2
	ldrb	r1, [r0]
	strb	r1, [r3, #0x7]
	ldrb	r0, [r0]
	add	r1, r3, #0
	add	r1, r1, #0x3f
	strb	r0, [r1]
	mov	r4, r8
	ldr	r0, [r4]
	ldr	r1, .L136+0x18
	add	r0, r0, r1
	ldrb	r1, [r0]
	strb	r1, [r3, #0x1a]
	ldrb	r1, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x52
	strb	r1, [r0]
	b	.L103
.L137:
	.align	2, 0
.L136:
	.word	gBattleTypeFlags
	.word	gEnigmaBerries
	.word	gSaveBlock1Ptr
	.word	0x30ec
	.word	0x3108
	.word	0x311a
	.word	0x311b
.L81:
	mov	r0, #0xaf
	bl	ItemIdToBerryType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBerryInfo
	add	r6, r0, #0
	mov	r5, #0x0
	ldr	r4, .L138
	add	r7, r4, #0
	add	r7, r7, #0x38
	add	r3, r4, #0
.L96:
	add	r1, r5, r4
	add	r2, r6, r5
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r1, r5, r7
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L96	@cond_branch
	add	r1, r5, r3
	mov	r0, #0xff
	strb	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x38
	add	r0, r5, r0
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	mov	r5, #0x0
	add	r4, r3, #0
	add	r4, r4, #0x8
	mov	r1, #0x0
	add	r2, r3, #0
	add	r2, r2, #0x40
.L101:
	add	r0, r5, r4
	strb	r1, [r0]
	add	r0, r5, r2
	strb	r1, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x11
	ble	.L101	@cond_branch
	mov	r1, #0x0
	strb	r1, [r3, #0x7]
	add	r0, r3, #0
	add	r0, r0, #0x3f
	strb	r1, [r0]
	strb	r1, [r3, #0x1a]
	add	r0, r0, #0x13
	strb	r1, [r0]
	b	.L103
.L139:
	.align	2, 0
.L138:
	.word	gEnigmaBerries
.L80:
	mov	r0, #0x40
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L104	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L140
	ldr	r2, .L140+0x4
	mov	r9, r2
	add	r6, r3, #0
	mov	r4, #0x8
	add	r4, r4, r6
	mov	r8, r4
.L108:
	lsl	r0, r5, #0x8
	ldr	r1, .L140+0x8
	add	r7, r0, r1
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r3, [r0, #0x18]
	mov	r4, #0x0
	add	r5, r5, #0x1
	mov	sl, r5
	lsl	r1, r3, #0x3
	sub	r0, r1, r3
	add	r5, r1, #0
	lsl	r0, r0, #0x2
	add	r1, r0, r6
.L112:
	add	r0, r7, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r1, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L112	@cond_branch
	sub	r0, r5, r3
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	add	r1, r1, r6
	mov	r2, #0xff
	strb	r2, [r1]
	mov	r4, #0x0
	mov	r2, r8
	add	r1, r0, r2
	add	r2, r7, #0
	add	r2, r2, #0x8
.L117:
	add	r0, r2, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r1, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x11
	ble	.L117	@cond_branch
	sub	r0, r5, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r7, #0x7]
	strb	r1, [r0, #0x7]
	ldrb	r1, [r7, #0x1a]
	strb	r1, [r0, #0x1a]
	mov	r5, sl
	cmp	r5, #0x3
	ble	.L108	@cond_branch
	b	.L103
.L141:
	.align	2, 0
.L140:
	.word	gEnigmaBerries
	.word	gLinkPlayers
	.word	gBlockRecvBuffer+0x4
.L104:
	mov	r5, #0x0
	ldr	r4, .L142
	mov	r9, r4
.L124:
	lsl	r0, r5, #0x8
	ldr	r1, .L142+0x4
	add	r7, r0, r1
	mov	r4, #0x0
	add	r2, r5, #0x1
	mov	sl, r2
	lsl	r0, r5, #0x3
	mov	r8, r0
	add	r1, r5, #0x2
	mov	ip, r1
	sub	r1, r0, r5
	mov	r2, ip
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	mov	r2, r9
	add	r3, r0, r2
	lsl	r1, r1, #0x2
	add	r2, r1, r2
.L128:
	add	r0, r7, r4
	ldrb	r1, [r0]
	strb	r1, [r2]
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L128	@cond_branch
	mov	r0, r8
	sub	r3, r0, r5
	lsl	r3, r3, #0x2
	add	r1, r4, r3
	add	r1, r1, r9
	ldrb	r0, [r1]
	mov	r2, #0xff
	orr	r0, r0, r2
	strb	r0, [r1]
	mov	r0, ip
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	add	r1, r1, r9
	ldrb	r0, [r1]
	mov	r4, #0xff
	orr	r0, r0, r4
	strb	r0, [r1]
	mov	r4, #0x0
	ldr	r0, .L142
	add	r0, r0, #0x8
	add	r2, r2, r0
	add	r3, r3, r0
	add	r6, r7, #0
	add	r6, r6, #0x8
.L133:
	add	r0, r6, r4
	ldrb	r1, [r0]
	strb	r1, [r3]
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x11
	ble	.L133	@cond_branch
	mov	r0, r8
	sub	r2, r0, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrb	r0, [r7, #0x7]
	strb	r0, [r2, #0x7]
	mov	r1, ip
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r1, [r7, #0x7]
	strb	r1, [r0, #0x7]
	ldrb	r1, [r7, #0x1a]
	strb	r1, [r2, #0x1a]
	ldrb	r1, [r7, #0x1a]
	strb	r1, [r0, #0x1a]
	mov	r5, sl
	cmp	r5, #0x1
	ble	.L124	@cond_branch
.L103:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gEnigmaBerries
	.word	gBlockRecvBuffer+0x4
.Lfe5:
	.size	 SetAllPlayersBerryData,.Lfe5-SetAllPlayersBerryData
	.align	2, 0
	.type	 LinkBattleComputeBattleTypeFlags,function
	.thumb_func
LinkBattleComputeBattleTypeFlags:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	mov	r6, #0x0
	ldr	r0, .L173
	ldrh	r2, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	mov	ip, r0
	cmp	r2, r1
	bne	.L145	@cond_branch
	cmp	r3, #0
	bne	.L146	@cond_branch
	ldr	r0, .L173+0x4
	ldr	r1, [r0]
	mov	r2, #0xc
	b	.L169
.L174:
	.align	2, 0
.L173:
	.word	gBlockRecvBuffer
	.word	gBattleTypeFlags
.L146:
	ldr	r0, .L175
	ldr	r1, [r0]
	mov	r2, #0x8
.L169:
	orr	r1, r1, r2
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L145:
	cmp	r6, #0
	bne	.L148	@cond_branch
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L150	@cond_branch
	ldr	r1, .L175+0x4
	mov	r8, r1
	mov	r5, #0x80
	lsl	r5, r5, #0x1
.L151:
	add	r1, r1, r5
	add	r2, r2, #0x1
	cmp	r2, r4
	bge	.L150	@cond_branch
	mov	r7, r8
	ldrh	r0, [r7]
	ldrh	r7, [r1]
	cmp	r0, r7
	beq	.L151	@cond_branch
.L150:
	cmp	r2, r4
	bne	.L155	@cond_branch
	cmp	r3, #0
	bne	.L156	@cond_branch
	ldr	r0, .L175
	ldr	r1, [r0]
	mov	r2, #0xc
	b	.L170
.L176:
	.align	2, 0
.L175:
	.word	gBattleTypeFlags
	.word	gBlockRecvBuffer
.L156:
	ldr	r0, .L177
	ldr	r1, [r0]
	mov	r2, #0x8
.L170:
	orr	r1, r1, r2
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L155:
	cmp	r6, #0
	bne	.L148	@cond_branch
	mov	r2, #0x0
	ldr	r5, .L177
	cmp	r2, r4
	bge	.L160	@cond_branch
	mov	r0, ip
	ldrh	r1, [r0]
	ldr	r0, .L177+0x4
	cmp	r1, r0
	beq	.L171	@cond_branch
.L163:
	lsl	r0, r2, #0x8
	add	r0, r0, ip
	ldrh	r0, [r0]
	ldr	r1, .L177+0x4
	cmp	r0, r1
	bls	.L161	@cond_branch
	cmp	r2, r3
	bne	.L160	@cond_branch
.L161:
	add	r2, r2, #0x1
	cmp	r2, r4
	bge	.L160	@cond_branch
	lsl	r0, r2, #0x8
	add	r0, r0, ip
	ldrh	r0, [r0]
	cmp	r0, r1
	bne	.L163	@cond_branch
.L171:
	cmp	r2, r3
	beq	.L163	@cond_branch
	cmp	r2, r3
	bge	.L163	@cond_branch
.L160:
	cmp	r2, r4
	bne	.L167	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0xc
	b	.L172
.L178:
	.align	2, 0
.L177:
	.word	gBattleTypeFlags
	.word	0x201
.L167:
	ldr	r0, [r5]
	mov	r1, #0x8
.L172:
	orr	r0, r0, r1
	str	r0, [r5]
.L148:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 LinkBattleComputeBattleTypeFlags,.Lfe6-LinkBattleComputeBattleTypeFlags
	.align	2, 0
	.type	 CB2_HandleStartBattle,function
	.thumb_func
CB2_HandleStartBattle:
	push	{r4, r5, r6, lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L218
	ldr	r0, [r0]
	add	r0, r0, #0xb5
	strb	r4, [r0]
	mov	r0, #0x1
	add	r5, r4, #0
	eor	r5, r5, r0
	ldr	r0, .L218+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x10
	bls	.LCB1308
	b	.L180	@long jump
.LCB1308:
	lsl	r0, r0, #0x2
	ldr	r1, .L218+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L219:
	.align	2, 0
.L218:
	.word	gBattleStruct
	.word	gBattleCommunication
	.word	.L215
	.align	2, 0
	.align	2, 0
.L215:
	.word	.L181
	.word	.L184
	.word	.L190
	.word	.L192
	.word	.L194
	.word	.L210
	.word	.L213
	.word	.L196
	.word	.L198
	.word	.L210
	.word	.L213
	.word	.L200
	.word	.L202
	.word	.L210
	.word	.L213
	.word	.L204
	.word	.L205
.L181:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L182	@cond_branch
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	bl	BattleInterfaceSetWindowPals
	ldr	r1, .L220
	mov	r0, #0x1
	strb	r0, [r1]
.L182:
	ldr	r0, .L220+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB1354
	b	.L180	@long jump
.LCB1354:
	bl	LoadWirelessStatusIndicatorSpriteGfx
	b	.L180
.L221:
	.align	2, 0
.L220:
	.word	gBattleCommunication
	.word	gWirelessCommType
.L184:
	ldr	r2, .L222
	ldr	r1, [r2]
	mov	r6, #0x2
	add	r0, r1, #0
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L185	@cond_branch
	ldr	r0, .L222+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB1379
	b	.L180	@long jump
.LCB1379:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L187	@cond_branch
	ldr	r4, .L222+0x8
	ldr	r0, [r4]
	mov	r5, #0xc2
	lsl	r5, r5, #0x1
	add	r0, r0, r5
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r4]
	ldr	r1, .L222+0xc
	add	r0, r0, r1
	strb	r6, [r0]
	bl	BufferPartyVsScreenHealth_AtStart
	bl	SetPlayerBerryDataInBattleStruct
	bl	BitmaskAllOtherLinkPlayers
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	add	r1, r1, r5
	mov	r2, #0x20
	bl	SendBlock
	ldr	r0, .L222+0x10
	strb	r6, [r0]
.L187:
	ldr	r0, .L222+0x14
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB1420
	b	.L180	@long jump
.LCB1420:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	CreateWirelessStatusIndicatorSprite
	b	.L180
.L223:
	.align	2, 0
.L222:
	.word	gBattleTypeFlags
	.word	gReceivedRemoteLinkPlayers
	.word	gBattleStruct
	.word	0x185
	.word	gBattleCommunication
	.word	gWirelessCommType
.L185:
	mov	r0, #0x4
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L224
	mov	r0, #0xf
	strb	r0, [r1]
	bl	SetAllPlayersBerryData
	b	.L180
.L225:
	.align	2, 0
.L224:
	.word	gBattleCommunication
.L190:
	bl	GetBlockReceivedStatus
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0x3
	beq	.LCB1462
	b	.L180	@long jump
.LCB1462:
	bl	ResetBlockReceivedFlags
	mov	r0, #0x2
	add	r1, r4, #0
	bl	LinkBattleComputeBattleTypeFlags
	bl	SetAllPlayersBerryData
	ldr	r0, .L226
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L226+0x4
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	mov	r1, #0x0
	mov	r0, #0x87
	lsl	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	mov	r0, #0x5a
	strh	r0, [r2, #0xc]
	strh	r1, [r2, #0x12]
	ldr	r0, .L226+0x8
	ldr	r3, [r0]
	mov	r4, #0xc3
	lsl	r4, r4, #0x1
	add	r0, r3, r4
	ldrb	r1, [r0]
	add	r4, r4, #0x1
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r2, #0xe]
	ldr	r0, .L226+0xc
	lsl	r1, r5, #0x8
	add	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	strh	r0, [r2, #0x10]
	bl	SetDeoxysStats
	ldr	r1, .L226+0x10
	b	.L217
.L227:
	.align	2, 0
.L226:
	.word	InitLinkBattleVsScreen
	.word	gTasks
	.word	gBattleStruct
	.word	gBlockRecvBuffer
	.word	gBattleCommunication
.L192:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1529
	b	.L180	@long jump
.LCB1529:
	bl	BitmaskAllOtherLinkPlayers
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L228
	mov	r2, #0xc8
	bl	SendBlock
	ldr	r1, .L228+0x4
	b	.L217
.L229:
	.align	2, 0
.L228:
	.word	gPlayerParty
	.word	gBattleCommunication
.L194:
	bl	GetBlockReceivedStatus
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0x3
	beq	.LCB1558
	b	.L180	@long jump
.LCB1558:
	bl	ResetBlockReceivedFlags
	ldr	r0, .L230
	lsl	r1, r5, #0x8
	ldr	r2, .L230+0x4
	add	r1, r1, r2
	mov	r2, #0xc8
	bl	memcpy
	ldr	r1, .L230+0x8
	b	.L217
.L231:
	.align	2, 0
.L230:
	.word	gEnemyParty
	.word	gBlockRecvBuffer
	.word	gBattleCommunication
.L196:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1586
	b	.L180	@long jump
.LCB1586:
	bl	BitmaskAllOtherLinkPlayers
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L232
	mov	r2, #0xc8
	bl	SendBlock
	ldr	r1, .L232+0x4
	b	.L217
.L233:
	.align	2, 0
.L232:
	.word	gPlayerParty+0xc8
	.word	gBattleCommunication
.L198:
	bl	GetBlockReceivedStatus
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0x3
	beq	.LCB1615
	b	.L180	@long jump
.LCB1615:
	bl	ResetBlockReceivedFlags
	ldr	r0, .L234
	lsl	r1, r5, #0x8
	ldr	r2, .L234+0x4
	add	r1, r1, r2
	mov	r2, #0xc8
	bl	memcpy
	ldr	r1, .L234+0x8
	b	.L217
.L235:
	.align	2, 0
.L234:
	.word	gEnemyParty+0xc8
	.word	gBlockRecvBuffer
	.word	gBattleCommunication
.L200:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1643
	b	.L180	@long jump
.LCB1643:
	bl	BitmaskAllOtherLinkPlayers
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L236
	mov	r2, #0xc8
	bl	SendBlock
	ldr	r1, .L236+0x4
	b	.L217
.L237:
	.align	2, 0
.L236:
	.word	gPlayerParty+0x190
	.word	gBattleCommunication
.L202:
	bl	GetBlockReceivedStatus
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0x3
	bne	.L180	@cond_branch
	bl	ResetBlockReceivedFlags
	ldr	r4, .L238
	lsl	r1, r5, #0x8
	ldr	r0, .L238+0x4
	add	r1, r1, r0
	add	r0, r4, #0
	mov	r2, #0xc8
	bl	memcpy
	ldr	r1, .L238+0x8
	add	r0, r4, r1
	bl	TryCorrectShedinjaLanguage
	ldr	r1, .L238+0xc
	add	r0, r4, r1
	bl	TryCorrectShedinjaLanguage
	add	r0, r4, #0
	sub	r0, r0, #0xc8
	bl	TryCorrectShedinjaLanguage
	add	r0, r4, #0
	sub	r0, r0, #0x64
	bl	TryCorrectShedinjaLanguage
	add	r0, r4, #0
	bl	TryCorrectShedinjaLanguage
	add	r0, r4, #0
	add	r0, r0, #0x64
	bl	TryCorrectShedinjaLanguage
	ldr	r1, .L238+0x10
	b	.L217
.L239:
	.align	2, 0
.L238:
	.word	gEnemyParty+0x190
	.word	gBlockRecvBuffer
	.word	-0x190
	.word	-0x12c
	.word	gBattleCommunication
.L204:
	bl	InitBattleControllers
	ldr	r0, .L240
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	strb	r2, [r0, #0x2]
	b	.L180
.L241:
	.align	2, 0
.L240:
	.word	gBattleCommunication
.L205:
	ldr	r0, .L242
	add	r1, r0, #0x1
	bl	BattleInitAllSprites
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L180	@cond_branch
	ldr	r2, .L242+0x4
	ldr	r1, .L242+0x8
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, .L242+0xc
	str	r0, [r1]
	ldr	r0, .L242+0x10
	bl	SetMainCallback2
	ldr	r2, .L242+0x14
	ldr	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L180	@cond_branch
	mov	r0, #0x20
	orr	r1, r1, r0
	str	r1, [r2]
	b	.L180
.L243:
	.align	2, 0
.L242:
	.word	gBattleCommunication+0x1
	.word	gPreBattleCallback1
	.word	gMain
	.word	BattleMainCB1
	.word	BattleMainCB2
	.word	gBattleTypeFlags
.L210:
	ldr	r0, .L244
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0, #0x1]
.L213:
	ldr	r1, .L244
	ldrb	r0, [r1, #0x1]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L180	@cond_branch
.L217:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L180:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L245:
	.align	2, 0
.L244:
	.word	gBattleCommunication
.Lfe7:
	.size	 CB2_HandleStartBattle,.Lfe7-CB2_HandleStartBattle
	.align	2, 0
	.type	 PrepareOwnMultiPartnerBuffer,function
	.thumb_func
PrepareOwnMultiPartnerBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, .L263
	mov	r9, r1
	mov	r0, #0x18
	add	r0, r0, r9
	mov	sl, r0
.L250:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	ldr	r0, .L263+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, r8
	lsl	r5, r1, #0x5
	mov	r1, r9
	add	r6, r5, r1
	strh	r0, [r6]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	strh	r0, [r6, #0x2]
	mov	r0, r9
	add	r0, r0, #0x4
	add	r7, r5, r0
	add	r0, r4, #0
	mov	r1, #0x2
	add	r2, r7, #0
	bl	GetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	strb	r0, [r6, #0xf]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r6, #0x10]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r6, #0x12]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	mov	r1, r9
	add	r1, r1, #0x14
	add	r1, r5, r1
	str	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r5, r5, sl
	str	r0, [r5]
	add	r0, r4, #0
	bl	GetMonGender
	strb	r0, [r6, #0x1c]
	add	r0, r7, #0
	bl	StripExtCtrlCodes
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetMonData
	mov	r4, r8
	add	r4, r4, #0x1
	cmp	r0, #0x1
	beq	.L249	@cond_branch
	add	r2, r7, #0
	mov	r1, #0x0
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L253	@cond_branch
.L254:
	add	r1, r1, #0x1
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L254	@cond_branch
.L253:
	cmp	r1, #0x5
	bgt	.L262	@cond_branch
	mov	r3, #0x0
.L259:
	add	r0, r2, r1
	strb	r3, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x5
	ble	.L259	@cond_branch
.L262:
	add	r1, r2, r1
	mov	r0, #0xff
	strb	r0, [r1]
.L249:
	mov	r8, r4
	cmp	r4, #0x2
	ble	.L250	@cond_branch
	ldr	r0, .L263+0x8
	ldr	r0, [r0]
	mov	r1, #0xc2
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r1, .L263
	mov	r2, #0x60
	bl	memcpy
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L264:
	.align	2, 0
.L263:
	.word	gMultiPartnerParty
	.word	gPlayerParty
	.word	gBattleStruct
.Lfe8:
	.size	 PrepareOwnMultiPartnerBuffer,.Lfe8-PrepareOwnMultiPartnerBuffer
	.align	2, 0
	.type	 CB2_PreInitMultiBattle,function
	.thumb_func
CB2_PreInitMultiBattle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L293
	ldr	r0, [r4]
	add	r0, r0, #0xb5
	strb	r6, [r0]
	ldr	r0, [r4]
	mov	r1, #0xb0
	add	r1, r1, r0
	mov	r9, r1
	add	r0, r0, #0xae
	mov	r8, r0
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	ldr	r5, .L293+0x4
	ldrb	r0, [r5]
	cmp	r0, #0x1
	beq	.L269	@cond_branch
	cmp	r0, #0x1
	bgt	.L291	@cond_branch
	cmp	r0, #0
	beq	.L267	@cond_branch
	b	.L266
.L294:
	.align	2, 0
.L293:
	.word	gBattleStruct
	.word	gBattleCommunication
.L291:
	cmp	r0, #0x2
	beq	.L280	@cond_branch
	cmp	r0, #0x3
	bne	.LCB2013
	b	.L284	@long jump
.LCB2013:
	b	.L266
.L267:
	ldr	r0, .L295
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB2024
	b	.L266	@long jump
.LCB2024:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2030
	b	.L266	@long jump
.LCB2030:
	bl	PrepareOwnMultiPartnerBuffer
	bl	BitmaskAllOtherLinkPlayers
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	mov	r2, #0xc2
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	mov	r2, #0x60
	bl	SendBlock
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L266
.L296:
	.align	2, 0
.L295:
	.word	gReceivedRemoteLinkPlayers
.L269:
	bl	GetBlockReceivedStatus
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0xf
	beq	.LCB2066
	b	.L266	@long jump
.LCB2066:
	bl	ResetBlockReceivedFlags
	mov	r4, #0x0
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r5, r0, #0x2
	mov	r7, #0x0
.L274:
	cmp	r4, r6
	beq	.L273	@cond_branch
	ldr	r2, .L297
	add	r0, r7, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L292	@cond_branch
	add	r0, r5, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L277	@cond_branch
	b	.L273
.L298:
	.align	2, 0
.L297:
	.word	gLinkPlayers
.L292:
	add	r0, r5, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L273	@cond_branch
.L277:
	lsl	r1, r4, #0x8
	ldr	r0, .L299
	add	r1, r1, r0
	ldr	r0, .L299+0x4
	mov	r2, #0x60
	bl	memcpy
.L273:
	add	r7, r7, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L274	@cond_branch
	ldr	r1, .L299+0x8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L299+0xc
	ldr	r0, [r1, #0x8]
	mov	r2, r9
	str	r0, [r2]
	ldr	r0, .L299+0x10
	ldr	r0, [r0]
	mov	r2, r8
	strh	r0, [r2]
	ldr	r0, .L299+0x14
	str	r0, [r1, #0x8]
	bl	ShowPartyMenuToShowcaseMultiBattleParty
	b	.L266
.L300:
	.align	2, 0
.L299:
	.word	gBlockRecvBuffer
	.word	gMultiPartnerParty
	.word	gBattleCommunication
	.word	gMain
	.word	gBattleTypeFlags
	.word	CB2_PreInitMultiBattle
.L280:
	ldr	r0, .L301
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L266	@cond_branch
	mov	r0, #0x3
	strb	r0, [r5]
	ldr	r0, .L301+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L282	@cond_branch
	bl	SetLinkStandbyCallback
	b	.L266
.L302:
	.align	2, 0
.L301:
	.word	gPaletteFade
	.word	gWirelessCommType
.L282:
	bl	SetCloseLinkCallback
	b	.L266
.L284:
	ldr	r0, .L303
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L285	@cond_branch
	bl	IsLinkRfuTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L266	@cond_branch
	ldr	r1, .L303+0x4
	mov	r2, r8
	ldrh	r0, [r2]
	str	r0, [r1]
	ldr	r1, .L303+0x8
	mov	r2, r9
	ldr	r0, [r2]
	str	r0, [r1, #0x8]
	ldr	r0, .L303+0xc
	bl	SetMainCallback2
	b	.L266
.L304:
	.align	2, 0
.L303:
	.word	gWirelessCommType
	.word	gBattleTypeFlags
	.word	gMain
	.word	CB2_InitBattleInternal
.L285:
	ldr	r0, .L305
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L266	@cond_branch
	ldr	r1, .L305+0x4
	mov	r2, r8
	ldrh	r0, [r2]
	str	r0, [r1]
	ldr	r1, .L305+0x8
	mov	r2, r9
	ldr	r0, [r2]
	str	r0, [r1, #0x8]
	ldr	r0, .L305+0xc
	bl	SetMainCallback2
.L266:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gReceivedRemoteLinkPlayers
	.word	gBattleTypeFlags
	.word	gMain
	.word	CB2_InitBattleInternal
.Lfe9:
	.size	 CB2_PreInitMultiBattle,.Lfe9-CB2_PreInitMultiBattle
	.align	2, 0
	.type	 CB2_HandleStartMultiBattle,function
	.thumb_func
CB2_HandleStartMultiBattle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L428
	ldr	r0, [r0]
	add	r0, r0, #0xb5
	strb	r7, [r0]
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	ldr	r0, .L428+0x4
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bls	.LCB2289
	b	.L308	@long jump
.LCB2289:
	lsl	r0, r0, #0x2
	ldr	r1, .L428+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L429:
	.align	2, 0
.L428:
	.word	gBattleStruct
	.word	gBattleCommunication
	.word	.L419
	.align	2, 0
	.align	2, 0
.L419:
	.word	.L309
	.word	.L312
	.word	.L316
	.word	.L332
	.word	.L334
	.word	.L415
	.word	.L417
	.word	.L371
	.word	.L373
	.word	.L415
	.word	.L417
	.word	.L410
	.word	.L411
.L309:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L310	@cond_branch
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	bl	BattleInterfaceSetWindowPals
	ldr	r1, .L430
	mov	r0, #0x1
	strb	r0, [r1]
.L310:
	ldr	r0, .L430+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB2335
	b	.L308	@long jump
.LCB2335:
	bl	LoadWirelessStatusIndicatorSpriteGfx
	b	.L308
.L431:
	.align	2, 0
.L430:
	.word	gBattleCommunication
	.word	gWirelessCommType
.L312:
	ldr	r0, .L432
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB2352
	b	.L308	@long jump
.LCB2352:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L314	@cond_branch
	ldr	r4, .L432+0x4
	ldr	r0, [r4]
	mov	r5, #0xc2
	lsl	r5, r5, #0x1
	add	r0, r0, r5
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r4]
	ldr	r2, .L432+0x8
	add	r1, r0, r2
	mov	r0, #0x2
	strb	r0, [r1]
	bl	BufferPartyVsScreenHealth_AtStart
	bl	SetPlayerBerryDataInBattleStruct
	bl	BitmaskAllOtherLinkPlayers
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	add	r1, r1, r5
	mov	r2, #0x20
	bl	SendBlock
	ldr	r1, .L432+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L314:
	ldr	r0, .L432+0x10
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB2396
	b	.L308	@long jump
.LCB2396:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	CreateWirelessStatusIndicatorSprite
	b	.L308
.L433:
	.align	2, 0
.L432:
	.word	gReceivedRemoteLinkPlayers
	.word	gBattleStruct
	.word	0x185
	.word	gBattleCommunication
	.word	gWirelessCommType
.L316:
	bl	GetBlockReceivedStatus
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0xf
	beq	.LCB2420
	b	.L308	@long jump
.LCB2420:
	bl	ResetBlockReceivedFlags
	mov	r0, #0x4
	add	r1, r7, #0
	bl	LinkBattleComputeBattleTypeFlags
	bl	SetAllPlayersBerryData
	bl	SetDeoxysStats
	ldr	r0, .L434
	ldr	r1, .L434+0x4
	mov	r2, #0x96
	lsl	r2, r2, #0x1
	bl	memcpy
	ldr	r0, .L434+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L434+0xc
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	mov	r0, #0x87
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	mov	r0, #0x5a
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0x12]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x10]
	add	r2, r1, #0
	ldr	r0, .L434+0x10
	add	r3, r0, #0x2
	ldr	r5, .L434+0x14
	mov	r4, #0x3f
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	mov	r6, #0x3
.L321:
	ldrh	r0, [r5, #0x18]
	cmp	r0, #0x1
	beq	.L324	@cond_branch
	cmp	r0, #0x1
	bgt	.L329	@cond_branch
	cmp	r0, #0
	beq	.L323	@cond_branch
	b	.L320
.L435:
	.align	2, 0
.L434:
	.word	gDecompressionBuffer
	.word	gPlayerParty
	.word	InitLinkBattleVsScreen
	.word	gTasks
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
.L329:
	cmp	r0, #0x2
	beq	.L325	@cond_branch
	cmp	r0, #0x3
	beq	.L326	@cond_branch
	b	.L320
.L323:
	ldrh	r0, [r3]
	add	r1, r4, #0
	and	r1, r1, r0
	b	.L423
.L324:
	ldrh	r0, [r3]
	add	r1, r4, #0
	and	r1, r1, r0
	b	.L424
.L325:
	ldrh	r0, [r3]
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x6
.L423:
	ldrh	r0, [r2, #0xe]
	orr	r1, r1, r0
	strh	r1, [r2, #0xe]
	b	.L320
.L326:
	ldrh	r0, [r3]
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x6
.L424:
	ldrh	r0, [r2, #0x10]
	orr	r1, r1, r0
	strh	r1, [r2, #0x10]
.L320:
	add	r3, r3, r7
	add	r5, r5, #0x1c
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L321	@cond_branch
	bl	ZeroPlayerPartyMons
	bl	ZeroEnemyPartyMons
	ldr	r1, .L436
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L332:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2560
	b	.L308	@long jump
.LCB2560:
	bl	BitmaskAllOtherLinkPlayers
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L436+0x4
	mov	r2, #0xc8
	bl	SendBlock
	ldr	r1, .L436
	b	.L425
.L437:
	.align	2, 0
.L436:
	.word	gBattleCommunication
	.word	gDecompressionBuffer
.L334:
	bl	GetBlockReceivedStatus
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0xf
	beq	.LCB2589
	b	.L308	@long jump
.LCB2589:
	bl	ResetBlockReceivedFlags
	mov	r6, #0x0
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	mov	r8, r0
	ldr	r4, .L438
	mov	r5, #0x0
.L339:
	cmp	r6, r7
	bne	.L340	@cond_branch
	ldr	r0, .L438+0x4
	add	r0, r5, r0
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x2
	bgt	.L348	@cond_branch
	cmp	r0, #0x1
	bge	.L345	@cond_branch
	cmp	r0, #0
	beq	.L343	@cond_branch
	b	.L338
.L439:
	.align	2, 0
.L438:
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
.L348:
	cmp	r0, #0x3
	bne	.L338	@cond_branch
.L343:
	ldr	r0, .L440
	b	.L426
.L441:
	.align	2, 0
.L440:
	.word	gPlayerParty
.L345:
	ldr	r0, .L442
	b	.L426
.L443:
	.align	2, 0
.L442:
	.word	gPlayerParty+0x12c
.L340:
	ldr	r2, .L444
	add	r0, r5, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L421	@cond_branch
	mov	r1, r8
	add	r0, r1, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L351	@cond_branch
	b	.L350
.L445:
	.align	2, 0
.L444:
	.word	gLinkPlayers
.L421:
	mov	r1, r8
	add	r0, r1, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L350	@cond_branch
.L351:
	add	r0, r5, r2
	ldrh	r2, [r0, #0x18]
	cmp	r2, #0x2
	bgt	.L360	@cond_branch
	cmp	r2, #0x1
	bge	.L357	@cond_branch
	cmp	r2, #0
	beq	.L355	@cond_branch
	b	.L338
.L360:
	cmp	r2, #0x3
	bne	.L338	@cond_branch
.L355:
	ldr	r0, .L446
	b	.L426
.L447:
	.align	2, 0
.L446:
	.word	gPlayerParty
.L357:
	ldr	r0, .L448
	b	.L426
.L449:
	.align	2, 0
.L448:
	.word	gPlayerParty+0x12c
.L350:
	add	r0, r5, r2
	ldrh	r2, [r0, #0x18]
	cmp	r2, #0x2
	bgt	.L369	@cond_branch
	cmp	r2, #0x1
	bge	.L366	@cond_branch
	cmp	r2, #0
	beq	.L364	@cond_branch
	b	.L338
.L369:
	cmp	r2, #0x3
	bne	.L338	@cond_branch
.L364:
	ldr	r0, .L450
.L426:
	add	r1, r4, #0
	mov	r2, #0xc8
	bl	memcpy
	b	.L338
.L451:
	.align	2, 0
.L450:
	.word	gEnemyParty
.L366:
	ldr	r0, .L452
	add	r1, r4, #0
	mov	r2, #0xc8
	bl	memcpy
.L338:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r4, r4, r2
	add	r5, r5, #0x1c
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L339	@cond_branch
	ldr	r1, .L452+0x4
	b	.L425
.L453:
	.align	2, 0
.L452:
	.word	gEnemyParty+0x12c
	.word	gBattleCommunication
.L371:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2814
	b	.L308	@long jump
.LCB2814:
	bl	BitmaskAllOtherLinkPlayers
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L454
	mov	r2, #0x64
	bl	SendBlock
	ldr	r1, .L454+0x4
	b	.L425
.L455:
	.align	2, 0
.L454:
	.word	gDecompressionBuffer+0xc8
	.word	gBattleCommunication
.L373:
	bl	GetBlockReceivedStatus
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0xf
	beq	.LCB2843
	b	.L308	@long jump
.LCB2843:
	bl	ResetBlockReceivedFlags
	mov	r6, #0x0
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	mov	r8, r0
	ldr	r4, .L456
	mov	r5, #0x0
.L378:
	cmp	r6, r7
	bne	.L379	@cond_branch
	ldr	r0, .L456+0x4
	add	r0, r5, r0
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x2
	bgt	.L387	@cond_branch
	cmp	r0, #0x1
	bge	.L384	@cond_branch
	cmp	r0, #0
	beq	.L382	@cond_branch
	b	.L377
.L457:
	.align	2, 0
.L456:
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
.L387:
	cmp	r0, #0x3
	bne	.L377	@cond_branch
.L382:
	ldr	r0, .L458
	b	.L427
.L459:
	.align	2, 0
.L458:
	.word	gPlayerParty+0xc8
.L384:
	ldr	r0, .L460
	b	.L427
.L461:
	.align	2, 0
.L460:
	.word	gPlayerParty+0x1f4
.L379:
	ldr	r2, .L462
	add	r0, r5, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L422	@cond_branch
	mov	r1, r8
	add	r0, r1, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L390	@cond_branch
	b	.L389
.L463:
	.align	2, 0
.L462:
	.word	gLinkPlayers
.L422:
	mov	r1, r8
	add	r0, r1, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L389	@cond_branch
.L390:
	add	r0, r5, r2
	ldrh	r2, [r0, #0x18]
	cmp	r2, #0x2
	bgt	.L399	@cond_branch
	cmp	r2, #0x1
	bge	.L396	@cond_branch
	cmp	r2, #0
	beq	.L394	@cond_branch
	b	.L377
.L399:
	cmp	r2, #0x3
	bne	.L377	@cond_branch
.L394:
	ldr	r0, .L464
	b	.L427
.L465:
	.align	2, 0
.L464:
	.word	gPlayerParty+0xc8
.L396:
	ldr	r0, .L466
	b	.L427
.L467:
	.align	2, 0
.L466:
	.word	gPlayerParty+0x1f4
.L389:
	add	r0, r5, r2
	ldrh	r2, [r0, #0x18]
	cmp	r2, #0x2
	bgt	.L408	@cond_branch
	cmp	r2, #0x1
	bge	.L405	@cond_branch
	cmp	r2, #0
	beq	.L403	@cond_branch
	b	.L377
.L408:
	cmp	r2, #0x3
	bne	.L377	@cond_branch
.L403:
	ldr	r0, .L468
.L427:
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
	b	.L377
.L469:
	.align	2, 0
.L468:
	.word	gEnemyParty+0xc8
.L405:
	ldr	r0, .L470
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
.L377:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r4, r4, r2
	add	r5, r5, #0x1c
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L378	@cond_branch
	ldr	r4, .L470+0x4
	add	r0, r4, #0
	bl	TryCorrectShedinjaLanguage
	add	r0, r4, #0
	add	r0, r0, #0x64
	bl	TryCorrectShedinjaLanguage
	add	r0, r4, #0
	add	r0, r0, #0xc8
	bl	TryCorrectShedinjaLanguage
	mov	r1, #0x96
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	TryCorrectShedinjaLanguage
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	add	r0, r4, r2
	bl	TryCorrectShedinjaLanguage
	mov	r1, #0xfa
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	TryCorrectShedinjaLanguage
	ldr	r4, .L470+0x8
	add	r0, r4, #0
	bl	TryCorrectShedinjaLanguage
	add	r0, r4, #0
	add	r0, r0, #0x64
	bl	TryCorrectShedinjaLanguage
	add	r0, r4, #0
	add	r0, r0, #0xc8
	bl	TryCorrectShedinjaLanguage
	mov	r2, #0x96
	lsl	r2, r2, #0x1
	add	r0, r4, r2
	bl	TryCorrectShedinjaLanguage
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	TryCorrectShedinjaLanguage
	mov	r2, #0xfa
	lsl	r2, r2, #0x1
	add	r0, r4, r2
	bl	TryCorrectShedinjaLanguage
	ldr	r1, .L470+0xc
	b	.L425
.L471:
	.align	2, 0
.L470:
	.word	gEnemyParty+0x1f4
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattleCommunication
.L410:
	bl	InitBattleControllers
	ldr	r0, .L472
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	strb	r2, [r0, #0x2]
	b	.L308
.L473:
	.align	2, 0
.L472:
	.word	gBattleCommunication
.L411:
	ldr	r0, .L474
	add	r1, r0, #0x1
	bl	BattleInitAllSprites
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L308	@cond_branch
	ldr	r2, .L474+0x4
	ldr	r1, .L474+0x8
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, .L474+0xc
	str	r0, [r1]
	ldr	r0, .L474+0x10
	bl	SetMainCallback2
	ldr	r2, .L474+0x14
	ldr	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L308	@cond_branch
	mov	r0, #0x20
	orr	r1, r1, r0
	str	r1, [r2]
	b	.L308
.L475:
	.align	2, 0
.L474:
	.word	gBattleCommunication+0x1
	.word	gPreBattleCallback1
	.word	gMain
	.word	BattleMainCB1
	.word	BattleMainCB2
	.word	gBattleTypeFlags
.L415:
	ldr	r0, .L476
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0, #0x1]
.L417:
	ldr	r1, .L476
	ldrb	r0, [r1, #0x1]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L308	@cond_branch
.L425:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L308:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L477:
	.align	2, 0
.L476:
	.word	gBattleCommunication
.Lfe10:
	.size	 CB2_HandleStartMultiBattle,.Lfe10-CB2_HandleStartMultiBattle
	.align	2, 0
	.globl	BattleMainCB2
	.type	 BattleMainCB2,function
	.thumb_func
BattleMainCB2:
	push	{lr}
	add	sp, sp, #-0x4
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	RunTextPrinters
	bl	UpdatePaletteFade
	bl	RunTasks
	ldr	r0, .L480
	ldrh	r1, [r0, #0x2c]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L479	@cond_branch
	ldr	r0, .L480+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L479	@cond_branch
	ldr	r2, .L480+0x8
	ldr	r1, .L480+0xc
	mov	r0, #0x3
	strb	r0, [r1]
	mov	r0, #0x3
	strh	r0, [r2]
	bl	ResetPaletteFadeControl
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L480+0x10
	bl	SetMainCallback2
.L479:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L481:
	.align	2, 0
.L480:
	.word	gMain
	.word	gBattleTypeFlags
	.word	gSpecialVar_Result
	.word	gBattleOutcome
	.word	CB2_QuitPokedudeBattle
.Lfe11:
	.size	 BattleMainCB2,.Lfe11-BattleMainCB2
	.align	2, 0
	.globl	FreeRestoreBattleData
	.type	 FreeRestoreBattleData,function
	.thumb_func
FreeRestoreBattleData:
	push	{lr}
	ldr	r1, .L483
	ldr	r0, .L483+0x4
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r2, .L483+0x8
	mov	r0, #0x3
	strb	r0, [r2, #0x15]
	ldr	r0, .L483+0xc
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	bl	ZeroEnemyPartyMons
	mov	r0, #0x53
	bl	m4aSongNumStop
	bl	FreeMonSpritesGfx
	bl	FreeBattleSpritesData
	bl	FreeBattleResources
	pop	{r0}
	bx	r0
.L484:
	.align	2, 0
.L483:
	.word	gMain
	.word	gPreBattleCallback1
	.word	gScanlineEffect
	.word	0x439
.Lfe12:
	.size	 FreeRestoreBattleData,.Lfe12-FreeRestoreBattleData
	.align	2, 0
	.type	 CB2_QuitPokedudeBattle,function
	.thumb_func
CB2_QuitPokedudeBattle:
	push	{lr}
	bl	UpdatePaletteFade
	ldr	r0, .L487
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L486	@cond_branch
	bl	FreeRestoreBattleData
	bl	FreeAllWindowBuffers
	ldr	r0, .L487+0x4
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L486:
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	gPaletteFade
	.word	gMain
.Lfe13:
	.size	 CB2_QuitPokedudeBattle,.Lfe13-CB2_QuitPokedudeBattle
	.align	2, 0
	.type	 SpriteCB_UnusedDebugSprite,function
	.thumb_func
SpriteCB_UnusedDebugSprite:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldr	r1, .L490
	str	r1, [r0, #0x1c]
	bx	lr
.L491:
	.align	2, 0
.L490:
	.word	SpriteCB_UnusedDebugSprite_Step
.Lfe14:
	.size	 SpriteCB_UnusedDebugSprite,.Lfe14-SpriteCB_UnusedDebugSprite
	.align	2, 0
	.type	 SpriteCB_UnusedDebugSprite_Step,function
	.thumb_func
SpriteCB_UnusedDebugSprite_Step:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r0, #0x2e
	ldrsh	r6, [r5, r0]
	cmp	r6, #0x1
	beq	.L495	@cond_branch
	cmp	r6, #0x1
	bgt	.L508	@cond_branch
	cmp	r6, #0
	beq	.L494	@cond_branch
	b	.L493
.L508:
	cmp	r6, #0x2
	beq	.L503	@cond_branch
	b	.L493
.L494:
	ldr	r4, .L509
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	str	r0, [r4]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	strh	r6, [r5, #0x30]
	ldr	r0, .L509+0x4
	strh	r0, [r5, #0x32]
	strh	r6, [r5, #0x34]
	mov	r0, #0x1
	strh	r0, [r5, #0x36]
.L495:
	ldrh	r0, [r5, #0x36]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x36]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L493	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5, #0x36]
	mov	r1, #0x30
	ldrsh	r2, [r5, r1]
	mov	r3, #0x34
	ldrsh	r0, [r5, r3]
	lsl	r0, r0, #0x5
	add	r2, r2, r0
	mov	r3, #0x32
	ldrsh	r1, [r5, r3]
	sub	r1, r1, r0
	mov	r3, #0x0
	ldr	r0, .L509
	mov	ip, r0
	lsl	r7, r2, #0x1
	mov	r4, #0x3d
	lsl	r6, r1, #0x1
.L500:
	mov	r1, ip
	ldr	r0, [r1]
	lsl	r2, r3, #0x1
	add	r1, r7, r0
	add	r1, r2, r1
	strh	r4, [r1]
	add	r0, r6, r0
	add	r2, r2, r0
	strh	r4, [r2]
	add	r3, r3, #0x2
	cmp	r3, #0x1d
	ble	.L500	@cond_branch
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L493	@cond_branch
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	mov	r0, #0x20
	strh	r0, [r5, #0x30]
	b	.L493
.L510:
	.align	2, 0
.L509:
	.word	sUnknownDebugSpriteDataBuffer
	.word	0x281
.L503:
	ldrh	r0, [r5, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bne	.L493	@cond_branch
	ldr	r4, .L511
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L505	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	r1, #0x0
	bl	memset
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L505:
	ldr	r0, .L511+0x4
	bl	SetMainCallback2
.L493:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	sUnknownDebugSpriteDataBuffer
	.word	CB2_InitBattle
.Lfe15:
	.size	 SpriteCB_UnusedDebugSprite_Step,.Lfe15-SpriteCB_UnusedDebugSprite_Step
	.align	2, 0
	.type	 CreateNPCTrainerParty,function
	.thumb_func
CreateNPCTrainerParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	str	r0, [sp, #0x10]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp, #0x14]
	mov	r0, #0x0
	mov	r9, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L514	@cond_branch
	mov	r0, #0x0
	b	.L568
.L514:
	ldr	r0, .L570
	ldr	r0, [r0]
	ldr	r1, .L570+0x4
	and	r0, r0, r1
	ldr	r1, [sp, #0x14]
	lsl	r1, r1, #0x2
	str	r1, [sp, #0x20]
	cmp	r0, #0x8
	beq	.LCB3557
	b	.L515	@long jump
.LCB3557:
	bl	ZeroEnemyPartyMons
	mov	r2, #0x0
	str	r2, [sp, #0x18]
	ldr	r2, .L570+0x8
	ldr	r1, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r0, r1, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldr	r4, [sp, #0x18]
	b	.L569
.L571:
	.align	2, 0
.L570:
	.word	gBattleTypeFlags
	.word	0x80908
	.word	gTrainers
.L519:
	ldr	r3, [sp, #0x14]
	add	r0, r1, r3
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrb	r0, [r1, #0x18]
	cmp	r0, #0x1
	bne	.L520	@cond_branch
	mov	r4, #0x80
	mov	sl, r4
	b	.L521
.L520:
	ldrb	r1, [r1, #0x2]
	mov	r0, #0x80
	and	r0, r0, r1
	mov	r1, #0x88
	mov	sl, r1
	cmp	r0, #0
	beq	.L521	@cond_branch
	mov	r2, #0x78
	mov	sl, r2
.L521:
	mov	r6, #0x0
	ldr	r0, .L572
	ldr	r2, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r3, r0, #0x4
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r4, r0, #0
	ldr	r0, [sp, #0x18]
	add	r0, r0, #0x1
	str	r0, [sp, #0x1c]
	cmp	r1, #0xff
	beq	.L525	@cond_branch
.L527:
	ldr	r0, [sp, #0x14]
	add	r1, r2, r0
	lsl	r1, r1, #0x3
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L527	@cond_branch
.L525:
	add	r2, r4, #0
	ldr	r1, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r0, r1, r3
	lsl	r1, r0, #0x3
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L536	@cond_branch
	cmp	r0, #0x1
	bgt	.L566	@cond_branch
	cmp	r0, #0
	beq	.L530	@cond_branch
	b	.L518
.L573:
	.align	2, 0
.L572:
	.word	gTrainers
.L566:
	cmp	r0, #0x2
	bne	.LCB3684
	b	.L547	@long jump
.LCB3684:
	cmp	r0, #0x3
	bne	.LCB3686
	b	.L553	@long jump
.LCB3686:
	b	.L518
.L530:
	add	r0, r2, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r4, [r0]
	mov	r6, #0x0
	ldr	r0, [sp, #0x18]
	lsl	r2, r0, #0x3
	add	r0, r2, r4
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xb
	mul	r0, r0, r1
	ldr	r1, .L574
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r5, r2, #0
	cmp	r0, #0xff
	beq	.L532	@cond_branch
	add	r3, r1, #0
	mov	r7, #0xb
.L534:
	add	r0, r2, r4
	ldrh	r0, [r0, #0x4]
	mov	r1, r0
	mul	r1, r1, r7
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L534	@cond_branch
.L532:
	mov	r2, r9
	lsl	r0, r2, #0x8
	add	sl, sl, r0
	add	r4, r5, r4
	ldrh	r1, [r4]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	mov	r1, #0xff
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, [sp, #0x18]
	mov	r1, #0x64
	mov	r0, r3
	mul	r0, r0, r1
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldrh	r1, [r4, #0x4]
	ldrb	r2, [r4, #0x2]
	mov	r3, #0x1
	str	r3, [sp]
	mov	r3, sl
	str	r3, [sp, #0x4]
	mov	r3, #0x2
	str	r3, [sp, #0x8]
	mov	r3, #0x0
	str	r3, [sp, #0xc]
	add	r3, r6, #0
	bl	CreateMon
	b	.L518
.L575:
	.align	2, 0
.L574:
	.word	gSpeciesNames
.L536:
	add	r0, r2, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r7, [r0]
	mov	r6, #0x0
	ldr	r4, [sp, #0x18]
	lsl	r2, r4, #0x4
	add	r0, r2, r7
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xb
	mul	r0, r0, r1
	ldr	r1, .L576
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r8, r2
	cmp	r0, #0xff
	beq	.L538	@cond_branch
	add	r3, r1, #0
	mov	r4, #0xb
.L540:
	add	r0, r2, r7
	ldrh	r0, [r0, #0x4]
	mov	r1, r0
	mul	r1, r1, r4
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L540	@cond_branch
.L538:
	mov	r2, r9
	lsl	r0, r2, #0x8
	add	sl, sl, r0
	mov	r3, r8
	add	r4, r3, r7
	ldrh	r1, [r4]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	mov	r1, #0xff
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, [sp, #0x18]
	mov	r1, #0x64
	mov	r5, r0
	mul	r5, r5, r1
	ldr	r2, [sp, #0x10]
	add	r5, r2, r5
	ldrh	r1, [r4, #0x4]
	ldrb	r2, [r4, #0x2]
	mov	r0, #0x1
	str	r0, [sp]
	mov	r3, sl
	str	r3, [sp, #0x4]
	mov	r0, #0x2
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	add	r3, r6, #0
	bl	CreateMon
	mov	r6, #0x0
	mov	r0, r8
	add	r0, r0, #0x6
	add	r4, r7, r0
.L545:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r6, #0
	add	r1, r1, #0x11
	ldrh	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L576+0x4
	add	r2, r2, r0
	add	r0, r5, #0
	bl	SetMonData
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L545	@cond_branch
	b	.L518
.L577:
	.align	2, 0
.L576:
	.word	gSpeciesNames
	.word	gBattleMoves+0x4
.L547:
	add	r0, r2, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r4, [r0]
	mov	r6, #0x0
	ldr	r0, [sp, #0x18]
	lsl	r2, r0, #0x3
	add	r0, r2, r4
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xb
	mul	r0, r0, r1
	ldr	r1, .L578
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r5, r2, #0
	cmp	r0, #0xff
	beq	.L549	@cond_branch
	add	r3, r1, #0
	mov	r7, #0xb
.L551:
	add	r0, r2, r4
	ldrh	r0, [r0, #0x4]
	mov	r1, r0
	mul	r1, r1, r7
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L551	@cond_branch
.L549:
	mov	r2, r9
	lsl	r0, r2, #0x8
	add	sl, sl, r0
	add	r5, r5, r4
	ldrh	r1, [r5]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	mov	r1, #0xff
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, [sp, #0x18]
	mov	r0, #0x64
	mov	r4, r3
	mul	r4, r4, r0
	ldr	r1, [sp, #0x10]
	add	r4, r1, r4
	ldrh	r1, [r5, #0x4]
	ldrb	r2, [r5, #0x2]
	mov	r0, #0x1
	str	r0, [sp]
	mov	r3, sl
	str	r3, [sp, #0x4]
	mov	r0, #0x2
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	add	r3, r6, #0
	bl	CreateMon
	add	r5, r5, #0x6
	add	r0, r4, #0
	mov	r1, #0xc
	add	r2, r5, #0
	bl	SetMonData
	b	.L518
.L579:
	.align	2, 0
.L578:
	.word	gSpeciesNames
.L553:
	add	r0, r4, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r7, [r0]
	mov	r6, #0x0
	ldr	r4, [sp, #0x18]
	lsl	r2, r4, #0x4
	add	r0, r2, r7
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xb
	mul	r0, r0, r1
	ldr	r1, .L580
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r8, r2
	cmp	r0, #0xff
	beq	.L555	@cond_branch
	add	r3, r1, #0
	mov	r4, #0xb
.L557:
	add	r0, r2, r7
	ldrh	r0, [r0, #0x4]
	mov	r1, r0
	mul	r1, r1, r4
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L557	@cond_branch
.L555:
	mov	r2, r9
	lsl	r0, r2, #0x8
	add	sl, sl, r0
	mov	r3, r8
	add	r5, r3, r7
	ldrh	r1, [r5]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	mov	r1, #0xff
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, [sp, #0x18]
	mov	r1, #0x64
	mov	r4, r0
	mul	r4, r4, r1
	ldr	r2, [sp, #0x10]
	add	r4, r2, r4
	ldrh	r1, [r5, #0x4]
	ldrb	r2, [r5, #0x2]
	mov	r0, #0x1
	str	r0, [sp]
	mov	r3, sl
	str	r3, [sp, #0x4]
	mov	r0, #0x2
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	add	r3, r6, #0
	bl	CreateMon
	add	r5, r5, #0x6
	add	r0, r4, #0
	mov	r1, #0xc
	add	r2, r5, #0
	bl	SetMonData
	mov	r6, #0x0
	add	r5, r4, #0
	mov	r0, r8
	add	r0, r0, #0x8
	add	r4, r7, r0
.L562:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r6, #0
	add	r1, r1, #0x11
	ldrh	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L580+0x4
	add	r2, r2, r0
	add	r0, r5, #0
	bl	SetMonData
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L562	@cond_branch
.L518:
	ldr	r4, [sp, #0x1c]
	str	r4, [sp, #0x18]
	ldr	r2, .L580+0x8
	ldr	r1, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r0, r1, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r0, r0, #0x20
.L569:
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.LCB4148
	b	.L519	@long jump
.LCB4148:
	ldr	r2, .L580+0xc
	ldr	r1, .L580+0x8
	ldr	r4, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r0, r4, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
.L515:
	ldr	r0, .L580+0x8
	ldr	r4, [sp, #0x20]
	ldr	r2, [sp, #0x14]
	add	r1, r4, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
.L568:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L581:
	.align	2, 0
.L580:
	.word	gSpeciesNames
	.word	gBattleMoves+0x4
	.word	gTrainers
	.word	gBattleTypeFlags
.Lfe16:
	.size	 CreateNPCTrainerParty,.Lfe16-CreateNPCTrainerParty
	.align	2, 0
	.type	 HBlankCB_Battle,function
	.thumb_func
HBlankCB_Battle:
	push	{lr}
	ldr	r0, .L584
	ldrh	r0, [r0]
	sub	r0, r0, #0x6f
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x30
	bhi	.L583	@cond_branch
	ldr	r1, .L584+0x4
	mov	r2, #0x98
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	strh	r0, [r1]
.L583:
	pop	{r0}
	bx	r0
.L585:
	.align	2, 0
.L584:
	.word	0x4000006
	.word	0x4000008
.Lfe17:
	.size	 HBlankCB_Battle,.Lfe17-HBlankCB_Battle
	.align	2, 0
	.globl	VBlankCB_Battle
	.type	 VBlankCB_Battle,function
	.thumb_func
VBlankCB_Battle:
	push	{lr}
	bl	Random
	ldr	r0, .L587
	ldrh	r1, [r0]
	mov	r0, #0x10
	bl	SetGpuReg
	ldr	r0, .L587+0x4
	ldrh	r1, [r0]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, .L587+0x8
	ldrh	r1, [r0]
	mov	r0, #0x14
	bl	SetGpuReg
	ldr	r0, .L587+0xc
	ldrh	r1, [r0]
	mov	r0, #0x16
	bl	SetGpuReg
	ldr	r0, .L587+0x10
	ldrh	r1, [r0]
	mov	r0, #0x18
	bl	SetGpuReg
	ldr	r0, .L587+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1a
	bl	SetGpuReg
	ldr	r0, .L587+0x18
	ldrh	r1, [r0]
	mov	r0, #0x1c
	bl	SetGpuReg
	ldr	r0, .L587+0x1c
	ldrh	r1, [r0]
	mov	r0, #0x1e
	bl	SetGpuReg
	ldr	r0, .L587+0x20
	ldrh	r1, [r0]
	mov	r0, #0x40
	bl	SetGpuReg
	ldr	r0, .L587+0x24
	ldrh	r1, [r0]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L587+0x28
	ldrh	r1, [r0]
	mov	r0, #0x42
	bl	SetGpuReg
	ldr	r0, .L587+0x2c
	ldrh	r1, [r0]
	mov	r0, #0x46
	bl	SetGpuReg
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe18:
	.size	 VBlankCB_Battle,.Lfe18-VBlankCB_Battle
	.align	2, 0
	.globl	SpriteCB_VsLetterDummy
	.type	 SpriteCB_VsLetterDummy,function
	.thumb_func
SpriteCB_VsLetterDummy:
	bx	lr
.Lfe19:
	.size	 SpriteCB_VsLetterDummy,.Lfe19-SpriteCB_VsLetterDummy
	.align	2, 0
	.type	 SpriteCB_VsLetter,function
	.thumb_func
SpriteCB_VsLetter:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L591	@cond_branch
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	ldrh	r1, [r5, #0x30]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	b	.L592
.L591:
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	asr	r0, r0, #0x8
	ldrh	r1, [r5, #0x30]
	sub	r1, r1, r0
	strh	r1, [r5, #0x20]
.L592:
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r5, #0x32]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L593	@cond_branch
	ldr	r4, .L594
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	FreeSpriteOamMatrix
	add	r0, r5, #0
	bl	DestroySprite
.L593:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L595:
	.align	2, 0
.L594:
	.word	0x2710
.Lfe20:
	.size	 SpriteCB_VsLetter,.Lfe20-SpriteCB_VsLetter
	.align	2, 0
	.globl	SpriteCB_VsLetterInit
	.type	 SpriteCB_VsLetterInit,function
	.thumb_func
SpriteCB_VsLetterInit:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L597
	str	r0, [r4, #0x1c]
	mov	r0, #0x61
	bl	PlaySE
	pop	{r4}
	pop	{r0}
	bx	r0
.L598:
	.align	2, 0
.L597:
	.word	SpriteCB_VsLetter
.Lfe21:
	.size	 SpriteCB_VsLetterInit,.Lfe21-SpriteCB_VsLetterInit
	.align	2, 0
	.type	 BufferPartyVsScreenHealth_AtEnd,function
	.thumb_func
BufferPartyVsScreenHealth_AtEnd:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	ldr	r0, .L634
	ldr	r0, [r0]
	add	r0, r0, #0xb5
	ldrb	r2, [r0]
	ldr	r0, .L634+0x4
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L600	@cond_branch
	ldr	r1, .L634+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x1
	beq	.L605	@cond_branch
	cmp	r0, #0x1
	bgt	.L608	@cond_branch
	cmp	r0, #0
	beq	.L600	@cond_branch
	b	.L609
.L635:
	.align	2, 0
.L634:
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	gLinkPlayers
.L608:
	cmp	r0, #0x2
	beq	.L600	@cond_branch
	cmp	r0, #0x3
	bne	.L609	@cond_branch
.L605:
	ldr	r0, .L636
	str	r0, [sp, #0x4]
	ldr	r1, .L636+0x4
	str	r1, [sp, #0x8]
	b	.L609
.L637:
	.align	2, 0
.L636:
	.word	gEnemyParty
	.word	gPlayerParty
.L600:
	ldr	r2, .L638
	str	r2, [sp, #0x4]
	ldr	r3, .L638+0x4
	str	r3, [sp, #0x8]
.L609:
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, [sp]
	lsl	r1, r1, #0x2
	str	r1, [sp, #0xc]
	mov	r2, #0xce
	lsl	r2, r2, #0x1
	mov	sl, r2
	mov	r9, r0
.L613:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	ldr	r3, [sp, #0x4]
	add	r4, r3, r4
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L612	@cond_branch
	cmp	r5, sl
	beq	.L615	@cond_branch
	cmp	r6, #0
	beq	.L615	@cond_branch
	cmp	r1, #0
	bne	.L615	@cond_branch
	mov	r0, #0x1
	mov	r2, r9
	lsl	r0, r0, r2
	orr	r7, r7, r0
.L615:
	cmp	r5, #0
	beq	.L612	@cond_branch
	cmp	r6, #0
	beq	.L617	@cond_branch
	cmp	r5, sl
	beq	.L618	@cond_branch
	cmp	r1, #0
	beq	.L617	@cond_branch
.L618:
	mov	r0, #0x2
	mov	r3, r9
	lsl	r0, r0, r3
	orr	r7, r7, r0
.L617:
	cmp	r5, #0
	beq	.L612	@cond_branch
	cmp	r5, sl
	beq	.L612	@cond_branch
	cmp	r6, #0
	bne	.L612	@cond_branch
	mov	r0, #0x3
	mov	r1, r9
	lsl	r0, r0, r1
	orr	r7, r7, r0
.L612:
	mov	r2, #0x2
	add	r9, r9, r2
	mov	r3, #0x1
	add	r8, r8, r3
	mov	r0, r8
	cmp	r0, #0x5
	ble	.L613	@cond_branch
	ldr	r1, .L638+0x8
	ldr	r2, [sp, #0xc]
	ldr	r3, [sp]
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r7, [r0, #0xe]
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	mov	sl, r1
	mov	r9, r0
.L625:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	ldr	r2, [sp, #0x8]
	add	r4, r2, r4
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L624	@cond_branch
	cmp	r5, sl
	beq	.L627	@cond_branch
	cmp	r6, #0
	beq	.L627	@cond_branch
	cmp	r1, #0
	bne	.L627	@cond_branch
	mov	r0, #0x1
	mov	r3, r9
	lsl	r0, r0, r3
	orr	r7, r7, r0
.L627:
	cmp	r5, #0
	beq	.L624	@cond_branch
	cmp	r6, #0
	beq	.L629	@cond_branch
	cmp	r5, sl
	beq	.L630	@cond_branch
	cmp	r1, #0
	beq	.L629	@cond_branch
.L630:
	mov	r0, #0x2
	mov	r1, r9
	lsl	r0, r0, r1
	orr	r7, r7, r0
.L629:
	cmp	r5, #0
	beq	.L624	@cond_branch
	cmp	r5, sl
	beq	.L624	@cond_branch
	cmp	r6, #0
	bne	.L624	@cond_branch
	mov	r0, #0x3
	mov	r2, r9
	lsl	r0, r0, r2
	orr	r7, r7, r0
.L624:
	mov	r3, #0x2
	add	r9, r9, r3
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L625	@cond_branch
	ldr	r1, .L638+0x8
	ldr	r2, [sp, #0xc]
	ldr	r3, [sp]
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r7, [r0, #0x10]
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L639:
	.align	2, 0
.L638:
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gTasks
.Lfe22:
	.size	 BufferPartyVsScreenHealth_AtEnd,.Lfe22-BufferPartyVsScreenHealth_AtEnd
	.align	2, 0
	.globl	CB2_InitEndLinkBattle
	.type	 CB2_InitEndLinkBattle,function
	.thumb_func
CB2_InitEndLinkBattle:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	str	r0, [sp]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L652
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	ldr	r4, .L652+0x4
	mov	r0, #0x44
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L652+0x8
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r0, .L652+0xc
	strh	r4, [r0]
	bl	ScanlineEffect_Clear
	ldr	r0, .L652+0x10
	mov	r3, #0xf0
	mov	r1, #0xf0
	lsl	r1, r1, #0x3
	add	r2, r0, r1
	mov	r1, #0x4f
.L644:
	strh	r3, [r0]
	strh	r3, [r2]
	add	r2, r2, #0x2
	add	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L644	@cond_branch
	mov	r1, #0x50
	ldr	r0, .L652+0x10
	ldr	r3, .L652+0x14
	mov	r4, #0x82
	lsl	r4, r4, #0x4
	add	r2, r0, r4
	add	r0, r0, #0xa0
.L649:
	strh	r3, [r0]
	strh	r3, [r2]
	add	r2, r2, #0x2
	add	r0, r0, #0x2
	add	r1, r1, #0x1
	cmp	r1, #0x9f
	ble	.L649	@cond_branch
	bl	ResetPaletteFade
	ldr	r0, .L652+0x18
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r0, .L652+0x1c
	strh	r4, [r0]
	ldr	r0, .L652+0x20
	strh	r4, [r0]
	ldr	r0, .L652+0x24
	strh	r4, [r0]
	ldr	r0, .L652+0x28
	strh	r4, [r0]
	ldr	r0, .L652+0x2c
	strh	r4, [r0]
	ldr	r0, .L652+0x30
	strh	r4, [r0]
	ldr	r0, .L652+0x34
	strh	r4, [r0]
	bl	InitBattleBgsVideo
	ldr	r0, .L652+0x38
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadCompressedPalette
	bl	LoadBattleMenuWindowGfx
	bl	ResetSpriteData
	bl	ResetTasks
	bl	DrawBattleEntryBackground
	mov	r0, #0x4a
	mov	r1, #0x37
	bl	SetGpuReg
	bl	FreeAllSpritePalettes
	ldr	r1, .L652+0x3c
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, .L652+0x40
	bl	SetVBlankCallback
	ldr	r0, .L652+0x44
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L652+0x48
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x87
	lsl	r2, r2, #0x1
	strh	r2, [r1, #0xa]
	mov	r2, #0x5a
	strh	r2, [r1, #0xc]
	mov	r2, #0x1
	strh	r2, [r1, #0x12]
	bl	BufferPartyVsScreenHealth_AtEnd
	ldr	r0, .L652+0x4c
	bl	SetMainCallback2
	ldr	r0, .L652+0x50
	strb	r4, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	0x5006000
	.word	0x5051
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gScanlineEffectRegBuffers
	.word	0xff10
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattleTextboxPalette
	.word	gReservedSpritePaletteCount
	.word	VBlankCB_Battle
	.word	InitLinkBattleVsScreen
	.word	gTasks
	.word	CB2_EndLinkBattle
	.word	gBattleCommunication
.Lfe23:
	.size	 CB2_InitEndLinkBattle,.Lfe23-CB2_InitEndLinkBattle
	.align	2, 0
	.type	 CB2_EndLinkBattle,function
	.thumb_func
CB2_EndLinkBattle:
	push	{lr}
	bl	EndLinkBattleInSteps
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	bl	RunTasks
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 CB2_EndLinkBattle,.Lfe24-CB2_EndLinkBattle
	.align	2, 0
	.type	 EndLinkBattleInSteps,function
	.thumb_func
EndLinkBattleInSteps:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L666
	ldrb	r0, [r4]
	cmp	r0, #0x1
	beq	.L658	@cond_branch
	cmp	r0, #0x1
	bgt	.L664	@cond_branch
	cmp	r0, #0
	beq	.L657	@cond_branch
	b	.L656
.L667:
	.align	2, 0
.L666:
	.word	gBattleCommunication
.L664:
	cmp	r0, #0x2
	beq	.L660	@cond_branch
	b	.L656
.L657:
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0xff
	strb	r0, [r4, #0x1]
	b	.L665
.L658:
	ldrb	r0, [r4, #0x1]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x1]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L656	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L665:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L656
.L660:
	ldr	r0, .L668
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L656	@cond_branch
	ldr	r0, .L668+0x4
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
	bl	TrySetQuestLogLinkBattleEvent
	bl	FreeMonSpritesGfx
	bl	FreeBattleSpritesData
	bl	FreeBattleResources
.L656:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L669:
	.align	2, 0
.L668:
	.word	gPaletteFade
	.word	gMain
.Lfe25:
	.size	 EndLinkBattleInSteps,.Lfe25-EndLinkBattleInSteps
	.align	2, 0
	.globl	GetBattleBgTemplateData
	.type	 GetBattleBgTemplateData,function
	.thumb_func
GetBattleBgTemplateData:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	cmp	r1, #0x6
	bhi	.L671	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L681
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L682:
	.align	2, 0
.L681:
	.word	.L679
	.align	2, 0
	.align	2, 0
.L679:
	.word	.L672
	.word	.L673
	.word	.L674
	.word	.L675
	.word	.L676
	.word	.L677
	.word	.L678
.L672:
	ldr	r0, .L683
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	b	.L671
.L684:
	.align	2, 0
.L683:
	.word	gBattleBgTemplates
.L673:
	ldr	r0, .L685
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	b	.L671
.L686:
	.align	2, 0
.L685:
	.word	gBattleBgTemplates
.L674:
	ldr	r0, .L687
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	b	.L671
.L688:
	.align	2, 0
.L687:
	.word	gBattleBgTemplates
.L675:
	ldr	r0, .L689
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1e
	b	.L671
.L690:
	.align	2, 0
.L689:
	.word	gBattleBgTemplates
.L676:
	ldr	r0, .L691
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1f
	b	.L671
.L692:
	.align	2, 0
.L691:
	.word	gBattleBgTemplates
.L677:
	ldr	r0, .L693
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	b	.L671
.L694:
	.align	2, 0
.L693:
	.word	gBattleBgTemplates
.L678:
	ldr	r0, .L695
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	lsl	r0, r0, #0x8
	lsr	r0, r0, #0x16
.L671:
	pop	{r1}
	bx	r1
.L696:
	.align	2, 0
.L695:
	.word	gBattleBgTemplates
.Lfe26:
	.size	 GetBattleBgTemplateData,.Lfe26-GetBattleBgTemplateData
	.align	2, 0
	.type	 TryCorrectShedinjaLanguage,function
	.thumb_func
TryCorrectShedinjaLanguage:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	add	r5, sp, #0xc
	mov	r0, #0x1
	strb	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldr	r1, .L700
	cmp	r0, r1
	bne	.L698	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetMonData
	ldrb	r1, [r5]
	cmp	r0, r1
	beq	.L698	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	ldr	r1, .L700+0x4
	mov	r0, sp
	bl	StringCompareWithoutExtCtrlCodes
	cmp	r0, #0
	bne	.L698	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x3
	add	r2, r5, #0
	bl	SetMonData
.L698:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L701:
	.align	2, 0
.L700:
	.word	0x12f
	.word	sText_ShedinjaJpnName
.Lfe27:
	.size	 TryCorrectShedinjaLanguage,.Lfe27-TryCorrectShedinjaLanguage
	.align	2, 0
	.globl	SpriteCB_EnemyMon
	.type	 SpriteCB_EnemyMon,function
	.thumb_func
SpriteCB_EnemyMon:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r1, .L703
	str	r1, [r0, #0x1c]
	mov	r1, #0x0
	bl	StartSpriteAnimIfDifferent
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	ldr	r1, .L703+0x4
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0xa
	mov	r3, #0xa
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L704:
	.align	2, 0
.L703:
	.word	SpriteCB_MoveWildMonToRight
	.word	0x2108
.Lfe28:
	.size	 SpriteCB_EnemyMon,.Lfe28-SpriteCB_EnemyMon
	.align	2, 0
	.type	 SpriteCB_MoveWildMonToRight,function
	.thumb_func
SpriteCB_MoveWildMonToRight:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L708
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L706	@cond_branch
	ldrh	r0, [r2, #0x24]
	add	r0, r0, #0x2
	strh	r0, [r2, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L706	@cond_branch
	ldr	r0, .L708+0x4
	str	r0, [r2, #0x1c]
	ldrh	r0, [r2, #0x32]
	mov	r1, #0x19
	bl	PlayCry_Normal
.L706:
	pop	{r0}
	bx	r0
.L709:
	.align	2, 0
.L708:
	.word	gIntroSlideFlags
	.word	SpriteCB_WildMonShowHealthbox
.Lfe29:
	.size	 SpriteCB_MoveWildMonToRight,.Lfe29-SpriteCB_MoveWildMonToRight
	.align	2, 0
	.type	 SpriteCB_WildMonShowHealthbox,function
	.thumb_func
SpriteCB_WildMonShowHealthbox:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L711	@cond_branch
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	StartHealthboxSlideIn
	ldr	r1, .L712
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldr	r0, .L712+0x4
	str	r0, [r4, #0x1c]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnimIfDifferent
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	ldr	r1, .L712+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0xa
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L711:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L713:
	.align	2, 0
.L712:
	.word	gHealthboxSpriteIds
	.word	SpriteCallbackDummy_2
	.word	0x2108
.Lfe30:
	.size	 SpriteCB_WildMonShowHealthbox,.Lfe30-SpriteCB_WildMonShowHealthbox
	.align	2, 0
	.globl	SpriteCallbackDummy_2
	.type	 SpriteCallbackDummy_2,function
	.thumb_func
SpriteCallbackDummy_2:
	bx	lr
.Lfe31:
	.size	 SpriteCallbackDummy_2,.Lfe31-SpriteCallbackDummy_2
	.align	2, 0
	.type	 SpriteCB_InitFlicker,function
	.thumb_func
SpriteCB_InitFlicker:
	mov	r1, #0x6
	strh	r1, [r0, #0x34]
	mov	r1, #0x1
	strh	r1, [r0, #0x36]
	ldr	r1, .L716
	str	r1, [r0, #0x1c]
	bx	lr
.L717:
	.align	2, 0
.L716:
	.word	SpriteCB_Flicker
.Lfe32:
	.size	 SpriteCB_InitFlicker,.Lfe32-SpriteCB_InitFlicker
	.align	2, 0
	.type	 SpriteCB_Flicker,function
	.thumb_func
SpriteCB_Flicker:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x36]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x36]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L719	@cond_branch
	mov	r0, #0x8
	strh	r0, [r3, #0x36]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r4, #0x5
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bne	.L719	@cond_branch
	ldrb	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldr	r0, .L721
	str	r0, [r3, #0x1c]
	ldr	r0, .L721+0x4
	str	r2, [r0]
.L719:
	pop	{r4}
	pop	{r0}
	bx	r0
.L722:
	.align	2, 0
.L721:
	.word	SpriteCallbackDummy_2
	.word	sFlickerArray
.Lfe33:
	.size	 SpriteCB_Flicker,.Lfe33-SpriteCB_Flicker
	.align	2, 0
	.globl	SpriteCB_FaintOpponentMon
	.type	 SpriteCB_FaintOpponentMon,function
	.thumb_func
SpriteCB_FaintOpponentMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L736
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r6, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L724	@cond_branch
	add	r4, r0, #0
	b	.L725
.L737:
	.align	2, 0
.L736:
	.word	gBattleSpritesDataPtr
.L724:
	mov	r0, r9
	ldrh	r4, [r0, #0x32]
.L725:
	ldr	r1, .L738
	lsl	r0, r6, #0x1
	add	r5, r0, r1
	ldrh	r0, [r5]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r7, .L738+0x4
	add	r0, r0, r7
	mov	r1, #0x0
	bl	GetMonData
	cmp	r4, #0xc9
	bne	.L726	@cond_branch
	ldrh	r0, [r5]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L727	@cond_branch
	mov	r0, #0xc9
	b	.L728
.L739:
	.align	2, 0
.L738:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L727:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L728:
	ldr	r1, .L740
	lsl	r0, r0, #0x2
	b	.L734
.L741:
	.align	2, 0
.L740:
	.word	gMonFrontPicCoords
.L726:
	ldr	r0, .L742
	cmp	r4, r0
	bne	.L730	@cond_branch
	ldr	r0, .L742+0x4
	ldr	r1, .L742+0x8
	add	r1, r6, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L729
.L743:
	.align	2, 0
.L742:
	.word	0x181
	.word	gCastformFrontSpriteCoords
	.word	gBattleMonForms
.L730:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bls	.L732	@cond_branch
	ldr	r0, .L744
	b	.L735
.L745:
	.align	2, 0
.L744:
	.word	gMonFrontPicCoords
.L732:
	ldr	r1, .L746
	lsl	r0, r4, #0x2
.L734:
	add	r0, r0, r1
.L735:
	ldrb	r0, [r0, #0x1]
.L729:
	lsr	r1, r0, #0x3
	mov	r0, #0x8
	sub	r0, r0, r1
	mov	r1, r9
	strh	r0, [r1, #0x34]
	mov	r0, #0x1
	strh	r0, [r1, #0x36]
	ldr	r0, .L746+0x4
	str	r0, [r1, #0x1c]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L747:
	.align	2, 0
.L746:
	.word	gMonFrontPicCoords
	.word	SpriteCB_AnimFaintOpponent
.Lfe34:
	.size	 SpriteCB_FaintOpponentMon,.Lfe34-SpriteCB_FaintOpponentMon
	.align	2, 0
	.type	 SpriteCB_AnimFaintOpponent,function
	.thumb_func
SpriteCB_AnimFaintOpponent:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L749	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L750	@cond_branch
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	b	.L749
.L750:
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	ldr	r1, .L757
	ldr	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r1, r1, #0x4
	add	r1, r1, r0
	ldr	r2, .L757+0x4
	mov	r3, #0x2e
	ldrsh	r0, [r4, r3]
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0xb
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	mov	r2, #0x0
	mov	r0, #0xff
.L755:
	strb	r2, [r1]
	add	r1, r1, #0x1
	sub	r0, r0, #0x1
	cmp	r0, #0
	bge	.L755	@cond_branch
	ldr	r0, .L757+0x4
	mov	r3, #0x2e
	ldrsh	r1, [r4, r3]
	add	r1, r1, r0
	ldrb	r1, [r1]
	add	r0, r4, #0
	bl	StartSpriteAnim
.L749:
	pop	{r4}
	pop	{r0}
	bx	r0
.L758:
	.align	2, 0
.L757:
	.word	gMonSpritesGfxPtr
	.word	gBattleMonForms
.Lfe35:
	.size	 SpriteCB_AnimFaintOpponent,.Lfe35-SpriteCB_AnimFaintOpponent
	.align	2, 0
	.globl	SpriteCB_ShowAsMoveTarget
	.type	 SpriteCB_ShowAsMoveTarget,function
	.thumb_func
SpriteCB_ShowAsMoveTarget:
	mov	r1, #0x8
	strh	r1, [r0, #0x34]
	add	r1, r0, #0
	add	r1, r1, #0x3e
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	strh	r1, [r0, #0x36]
	ldr	r1, .L760
	str	r1, [r0, #0x1c]
	bx	lr
.L761:
	.align	2, 0
.L760:
	.word	SpriteCB_BlinkVisible
.Lfe36:
	.size	 SpriteCB_ShowAsMoveTarget,.Lfe36-SpriteCB_ShowAsMoveTarget
	.align	2, 0
	.type	 SpriteCB_BlinkVisible,function
	.thumb_func
SpriteCB_BlinkVisible:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L763	@cond_branch
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	mov	r0, #0x8
	strh	r0, [r3, #0x34]
.L763:
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 SpriteCB_BlinkVisible,.Lfe37-SpriteCB_BlinkVisible
	.align	2, 0
	.globl	SpriteCB_HideAsMoveTarget
	.type	 SpriteCB_HideAsMoveTarget,function
	.thumb_func
SpriteCB_HideAsMoveTarget:
	mov	r1, #0x3e
	add	r1, r1, r0
	mov	ip, r1
	mov	r1, #0x1
	ldrh	r2, [r0, #0x36]
	and	r2, r2, r1
	lsl	r2, r2, #0x2
	mov	r1, ip
	ldrb	r3, [r1]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r3
	orr	r1, r1, r2
	mov	r2, ip
	strb	r1, [r2]
	mov	r1, #0x0
	strh	r1, [r0, #0x36]
	ldr	r1, .L765
	str	r1, [r0, #0x1c]
	bx	lr
.L766:
	.align	2, 0
.L765:
	.word	SpriteCallbackDummy_2
.Lfe38:
	.size	 SpriteCB_HideAsMoveTarget,.Lfe38-SpriteCB_HideAsMoveTarget
	.align	2, 0
	.globl	SpriteCB_AllyMon
	.type	 SpriteCB_AllyMon,function
	.thumb_func
SpriteCB_AllyMon:
	ldr	r1, .L768
	str	r1, [r0, #0x1c]
	bx	lr
.L769:
	.align	2, 0
.L768:
	.word	oac_poke_ally_
.Lfe39:
	.size	 SpriteCB_AllyMon,.Lfe39-SpriteCB_AllyMon
	.align	2, 0
	.type	 oac_poke_ally_,function
	.thumb_func
oac_poke_ally_:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L773
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L771	@cond_branch
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, #0x2
	strh	r0, [r2, #0x24]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L771	@cond_branch
	ldr	r0, .L773+0x4
	str	r0, [r2, #0x1c]
	strh	r1, [r2, #0x30]
.L771:
	pop	{r0}
	bx	r0
.L774:
	.align	2, 0
.L773:
	.word	gIntroSlideFlags
	.word	SpriteCB_Idle
.Lfe40:
	.size	 oac_poke_ally_,.Lfe40-oac_poke_ally_
	.align	2, 0
	.globl	SetIdleSpriteCallback
	.type	 SetIdleSpriteCallback,function
	.thumb_func
SetIdleSpriteCallback:
	ldr	r1, .L776
	str	r1, [r0, #0x1c]
	bx	lr
.L777:
	.align	2, 0
.L776:
	.word	SpriteCB_Idle
.Lfe41:
	.size	 SetIdleSpriteCallback,.Lfe41-SetIdleSpriteCallback
	.align	2, 0
	.type	 SpriteCB_Idle,function
	.thumb_func
SpriteCB_Idle:
	bx	lr
.Lfe42:
	.size	 SpriteCB_Idle,.Lfe42-SpriteCB_Idle
	.align	2, 0
	.globl	SpriteCB_FaintSlideAnim
	.type	 SpriteCB_FaintSlideAnim,function
	.thumb_func
SpriteCB_FaintSlideAnim:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L781
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L780	@cond_branch
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x26]
	add	r0, r0, r1
	strh	r0, [r2, #0x26]
.L780:
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	gIntroSlideFlags
.Lfe43:
	.size	 SpriteCB_FaintSlideAnim,.Lfe43-SpriteCB_FaintSlideAnim
	.align	2, 0
	.globl	DoBounceEffect
	.type	 DoBounceEffect,function
	.thumb_func
DoBounceEffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	cmp	r1, #0
	beq	.L788	@cond_branch
	ldr	r0, .L795
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r2, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	b	.L793
.L796:
	.align	2, 0
.L795:
	.word	gBattleSpritesDataPtr
.L788:
	ldr	r0, .L797
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r2, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
.L793:
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	bne	.L783	@cond_branch
	ldr	r0, .L797+0x4
	bl	CreateInvisibleSpriteWithCallback
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r8
	cmp	r0, #0x1
	bne	.L791	@cond_branch
	ldr	r0, .L797+0x8
	add	r0, r4, r0
	ldrb	r7, [r0]
	ldr	r2, .L797
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	add	r1, r6, r4
	lsl	r1, r1, #0x2
	add	r0, r1, r0
	strb	r5, [r0, #0x2]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r2, .L797+0xc
	lsl	r3, r5, #0x4
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x80
	b	.L794
.L798:
	.align	2, 0
.L797:
	.word	gBattleSpritesDataPtr
	.word	SpriteCB_BounceEffect
	.word	gHealthboxSpriteIds
	.word	gSprites
.L791:
	ldr	r0, .L799
	add	r0, r4, r0
	ldrb	r7, [r0]
	ldr	r2, .L799+0x4
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	add	r1, r6, r4
	lsl	r1, r1, #0x2
	add	r0, r1, r0
	strb	r5, [r0, #0x3]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r2, .L799+0x8
	lsl	r3, r5, #0x4
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0xc0
.L794:
	strh	r1, [r0, #0x2e]
	add	r4, r2, #0
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, r9
	lsl	r0, r2, #0x18
	asr	r0, r0, #0x18
	mov	r2, #0x0
	strh	r0, [r1, #0x30]
	mov	r3, sl
	lsl	r0, r3, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x32]
	strh	r7, [r1, #0x34]
	mov	r0, r8
	strh	r0, [r1, #0x36]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x24]
	strh	r2, [r0, #0x26]
.L783:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L800:
	.align	2, 0
.L799:
	.word	gBattlerSpriteIds
	.word	gBattleSpritesDataPtr
	.word	gSprites
.Lfe44:
	.size	 DoBounceEffect,.Lfe44-DoBounceEffect
	.align	2, 0
	.globl	EndBounceEffect
	.type	 EndBounceEffect,function
	.thumb_func
EndBounceEffect:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	bne	.L802	@cond_branch
	ldr	r6, .L807
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r5, r0, #0x2
	add	r3, r5, r1
	ldrb	r1, [r3]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L801	@cond_branch
	ldr	r2, .L807+0x4
	ldrb	r1, [r3, #0x2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x34]
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	DestroySprite
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r5, r1
	ldrb	r2, [r1]
	mov	r0, #0x3
	neg	r0, r0
	b	.L806
.L808:
	.align	2, 0
.L807:
	.word	gBattleSpritesDataPtr
	.word	gSprites
.L802:
	ldr	r6, .L809
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r5, r0, #0x2
	add	r3, r5, r1
	ldrb	r1, [r3]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L801	@cond_branch
	ldr	r2, .L809+0x4
	ldrb	r1, [r3, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x34]
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	DestroySprite
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r5, r1
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
.L806:
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L809+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x24]
	strh	r0, [r1, #0x26]
.L801:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L810:
	.align	2, 0
.L809:
	.word	gBattleSpritesDataPtr
	.word	gSprites
.Lfe45:
	.size	 EndBounceEffect,.Lfe45-EndBounceEffect
	.align	2, 0
	.type	 SpriteCB_BounceEffect,function
	.thumb_func
SpriteCB_BounceEffect:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L812	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	b	.L813
.L812:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
.L813:
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldr	r2, .L814
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r4, #0x32]
	add	r0, r0, r2
	strh	r0, [r1, #0x26]
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x2e]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L815:
	.align	2, 0
.L814:
	.word	gSprites
.Lfe46:
	.size	 SpriteCB_BounceEffect,.Lfe46-SpriteCB_BounceEffect
	.align	2, 0
	.globl	SpriteCB_PlayerThrowInit
	.type	 SpriteCB_PlayerThrowInit,function
	.thumb_func
SpriteCB_PlayerThrowInit:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L817
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L818:
	.align	2, 0
.L817:
	.word	SpriteCB_PlayerThrowUpdate
.Lfe47:
	.size	 SpriteCB_PlayerThrowInit,.Lfe47-SpriteCB_PlayerThrowInit
	.align	2, 0
	.globl	UpdatePlayerPosInThrowAnim
	.type	 UpdatePlayerPosInThrowAnim,function
	.thumb_func
UpdatePlayerPosInThrowAnim:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r0, #0x3f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L820	@cond_branch
	ldr	r1, .L821
	add	r0, r2, #0
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	add	r0, r0, #0x28
	strb	r1, [r0]
.L820:
	pop	{r0}
	bx	r0
.L822:
	.align	2, 0
.L821:
	.word	sPlayerThrowXTranslation
.Lfe48:
	.size	 UpdatePlayerPosInThrowAnim,.Lfe48-UpdatePlayerPosInThrowAnim
	.align	2, 0
	.type	 SpriteCB_PlayerThrowUpdate,function
	.thumb_func
SpriteCB_PlayerThrowUpdate:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdatePlayerPosInThrowAnim
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L824	@cond_branch
	ldr	r0, .L825
	str	r0, [r4, #0x1c]
.L824:
	pop	{r4}
	pop	{r0}
	bx	r0
.L826:
	.align	2, 0
.L825:
	.word	SpriteCB_Idle
.Lfe49:
	.size	 SpriteCB_PlayerThrowUpdate,.Lfe49-SpriteCB_PlayerThrowUpdate
	.align	2, 0
	.globl	BeginBattleIntroDummy
	.type	 BeginBattleIntroDummy,function
	.thumb_func
BeginBattleIntroDummy:
	bx	lr
.Lfe50:
	.size	 BeginBattleIntroDummy,.Lfe50-BeginBattleIntroDummy
	.align	2, 0
	.globl	BeginBattleIntro
	.type	 BeginBattleIntro,function
	.thumb_func
BeginBattleIntro:
	push	{lr}
	bl	BattleStartClearSetData
	ldr	r1, .L829
	mov	r0, #0x0
	strb	r0, [r1, #0x1]
	ldr	r1, .L829+0x4
	ldr	r0, .L829+0x8
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L830:
	.align	2, 0
.L829:
	.word	gBattleCommunication
	.word	gBattleMainFunc
	.word	BattleIntroGetMonsData
.Lfe51:
	.size	 BeginBattleIntro,.Lfe51-BeginBattleIntro
	.align	2, 0
	.type	 BattleMainCB1,function
	.thumb_func
BattleMainCB1:
	push	{r4, r5, lr}
	ldr	r0, .L837
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r1, .L837+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L837+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L833	@cond_branch
	ldr	r5, .L837+0xc
	add	r4, r1, #0
.L835:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	_call_via_r0
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L837+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L835	@cond_branch
.L833:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L838:
	.align	2, 0
.L837:
	.word	gBattleMainFunc
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattlerControllerFuncs
.Lfe52:
	.size	 BattleMainCB1,.Lfe52-BattleMainCB1
	.align	2, 0
	.type	 BattleStartClearSetData,function
	.thumb_func
BattleStartClearSetData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	bl	TurnValuesCleanUp
	bl	SpecialStatusesClear
	mov	r2, #0x0
	mov	r3, #0x0
	ldr	r0, .L887
	mov	sl, r0
	ldr	r1, .L887+0x4
	mov	ip, r1
	ldr	r0, .L887+0x8
	mov	r9, r0
	ldr	r1, .L887+0xc
	mov	r8, r1
	ldr	r4, .L887+0x10
	mov	r5, #0x0
	ldr	r7, .L887+0x14
	ldr	r6, .L887+0x18
.L843:
	ldr	r0, .L887+0x1c
	add	r0, r5, r0
	str	r3, [r0]
	mov	r1, #0x0
.L847:
	add	r0, r4, r1
	strb	r3, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x1b
	bls	.L847	@cond_branch
	mov	r0, #0x2
	strb	r0, [r4, #0x16]
	ldr	r1, .L887+0x20
	add	r0, r2, r1
	strb	r3, [r0]
	mov	r0, r8
	strh	r3, [r0]
	mov	r1, r9
	strh	r3, [r1]
	mov	r0, ip
	strh	r3, [r0]
	mov	r1, sl
	strh	r3, [r1]
	ldr	r0, .L887+0x24
	add	r1, r2, r0
	mov	r0, #0xff
	strb	r0, [r1]
	strh	r3, [r6]
	strh	r3, [r7]
	ldr	r1, .L887+0x28
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r0, r0, r5
	str	r3, [r0]
	mov	r0, #0x2
	add	sl, sl, r0
	add	ip, ip, r0
	add	r9, r9, r0
	add	r8, r8, r0
	add	r4, r4, #0x1c
	add	r5, r5, #0x4
	add	r7, r7, #0x2
	add	r6, r6, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L843	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L887+0x2c
	ldr	r4, .L887+0x30
	mov	r2, #0x1
.L853:
	strh	r5, [r4]
	mov	r1, #0x0
.L857:
	add	r0, r3, r1
	strb	r5, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0xb
	bls	.L857	@cond_branch
	add	r3, r3, #0xc
	add	r4, r4, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L853	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L887+0x34
	strb	r1, [r2]
	ldr	r0, .L887+0x38
	strb	r1, [r0]
	ldr	r2, .L887+0x3c
	strh	r1, [r2]
	ldr	r1, .L887+0x40
	mov	r2, #0x0
	mov	r3, #0x0
.L863:
	add	r0, r1, r2
	strb	r3, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x2b
	bls	.L863	@cond_branch
	mov	r0, #0x0
	ldr	r1, .L887+0x44
	str	r0, [r1]
	ldr	r2, .L887+0x48
	ldr	r0, [r2]
	ldr	r1, .L887+0x4c
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L865	@cond_branch
	ldr	r1, .L887+0x50
	ldr	r0, [r1]
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L865	@cond_branch
	mov	r0, #0x80
	ldr	r2, .L887+0x44
	str	r0, [r2]
.L865:
	ldr	r1, .L887+0x50
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x15]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1f
	mov	r1, #0x0
	ldr	r2, .L887+0x54
	strb	r0, [r2, #0x1d]
	ldr	r0, .L887+0x58
	strb	r1, [r0]
	ldr	r2, .L887+0x5c
	strb	r1, [r2]
	ldr	r0, .L887+0x60
	str	r1, [r0]
	mov	r2, #0x0
	ldr	r0, .L887+0x64
	strh	r1, [r0]
	ldr	r1, .L887+0x28
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0x20
	strb	r2, [r0]
	ldr	r0, [r1]
	ldr	r0, [r0, #0xc]
	add	r0, r0, #0x20
	strb	r2, [r0]
	ldr	r1, .L887+0x68
	mov	r2, #0x0
	add	r0, r1, #0x7
.L869:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L869	@cond_branch
	mov	r2, #0x0
	mov	r9, r2
	ldr	r0, .L887+0x6c
	strh	r2, [r0]
	mov	r0, #0x0
	ldr	r1, .L887+0x70
	str	r0, [r1]
	ldr	r2, .L887+0x74
	strh	r0, [r2]
	mov	r1, r9
	ldr	r0, .L887+0x54
	strb	r1, [r0, #0x18]
	strb	r1, [r0, #0x19]
	ldr	r2, .L887+0x78
	strb	r1, [r2]
	ldr	r0, .L887+0x7c
	strb	r1, [r0]
	ldr	r7, .L887+0x80
	ldr	r0, [r7]
	add	r0, r0, #0x6c
	strb	r1, [r0]
	ldr	r0, [r7]
	add	r0, r0, #0x79
	strb	r1, [r0]
	ldr	r0, [r7]
	add	r0, r0, #0x7a
	strb	r1, [r0]
	ldr	r0, .L887+0x84
	mov	r1, #0xb
	bl	GetMonData
	ldr	r4, [r7]
	add	r4, r4, #0x7c
	ldr	r1, .L887+0x88
	mov	r8, r1
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r0, [r1, #0x8]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r6, .L887+0x8c
	add	r1, r6, #0
	bl	__divsi3
	strb	r0, [r4]
	ldr	r0, .L887+0x84
	mov	r1, #0xb
	bl	GetMonData
	ldr	r4, [r7]
	add	r4, r4, #0x7b
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r0, [r1, #0x18]
	mul	r0, r0, r5
	add	r1, r6, #0
	bl	__divsi3
	strb	r0, [r4]
	ldr	r0, [r7]
	add	r1, r0, #0
	add	r1, r1, #0x7b
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bhi	.L871	@cond_branch
	mov	r0, #0x2
	strb	r0, [r1]
.L871:
	ldr	r0, [r7]
	mov	r2, r9
	strb	r2, [r0, #0x12]
	ldr	r0, [r7]
	add	r0, r0, #0x4a
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r2, #0x0
	add	r4, r7, #0
	ldr	r5, .L887+0x90
	add	r3, r4, #0
	mov	r1, #0x0
.L875:
	ldr	r0, [r3]
	add	r0, r2, r0
	add	r0, r0, #0x98
	strb	r1, [r0]
	ldr	r0, [r3]
	add	r0, r2, r0
	add	r0, r0, #0xb8
	strb	r1, [r0]
	ldr	r0, [r3]
	add	r0, r2, r0
	add	r0, r0, #0xc8
	strb	r1, [r0]
	ldr	r0, [r3]
	add	r0, r2, r0
	add	r0, r0, #0xd0
	strb	r1, [r0]
	ldr	r0, [r3]
	add	r0, r2, r0
	add	r0, r0, #0xe0
	strb	r1, [r0]
	ldr	r0, [r3]
	add	r0, r2, r0
	add	r0, r0, #0xe8
	strb	r1, [r0]
	ldr	r0, [r3]
	add	r0, r2, r0
	add	r0, r0, #0xf0
	strb	r1, [r0]
	ldr	r0, [r3]
	add	r0, r2, r0
	add	r0, r0, #0xf8
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L875	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x92
	mov	r1, #0x6
	strb	r1, [r0]
	ldr	r0, [r4]
	add	r0, r0, #0x93
	strb	r1, [r0]
	ldr	r0, [r4]
	add	r0, r0, #0xdf
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L887+0x90
	mov	r1, #0x0
	mov	r2, #0xa
	add	r0, r0, #0x40
.L880:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L880	@cond_branch
	mov	r1, #0x0
	strb	r1, [r5, #0x13]
	strb	r1, [r5]
	strb	r1, [r5, #0x1]
	strb	r1, [r5, #0x2]
	strb	r1, [r5, #0x3]
	strb	r1, [r5, #0x4]
	ldrb	r2, [r5, #0x5]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	mov	r2, #0x3
	neg	r2, r2
	and	r0, r0, r2
	strb	r0, [r5, #0x5]
	strh	r1, [r5, #0x20]
	strh	r1, [r5, #0x22]
	strh	r1, [r5, #0x24]
	strh	r1, [r5, #0x6]
	strh	r1, [r5, #0x26]
	strh	r1, [r5, #0x28]
	mov	r2, #0x0
	add	r4, r5, #0
	add	r4, r4, #0x8
	mov	r3, #0x0
	add	r1, r5, #0
	add	r1, r1, #0x14
.L885:
	add	r0, r2, r4
	strb	r3, [r0]
	strb	r3, [r1]
	strb	r3, [r1, #0x16]
	add	r1, r1, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x9
	ble	.L885	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L888:
	.align	2, 0
.L887:
	.word	gLastResultingMoves
	.word	gLastHitByType
	.word	gLastLandedMoves
	.word	gLastMoves
	.word	gDisableStructs
	.word	gLastPrintedMoves
	.word	gLockedMoves
	.word	gStatuses3
	.word	sUnusedBattlersArray
	.word	gLastHitBy
	.word	gBattleResources
	.word	gSideTimers
	.word	gSideStatuses
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	gHitMarker
	.word	gBattleTypeFlags
	.word	0x10002
	.word	gSaveBlock2Ptr
	.word	gBattleScripting
	.word	gMultiHitCounter
	.word	gBattleOutcome
	.word	gBattleControllerExecFlags
	.word	gPaydayMoney
	.word	gBattleCommunication
	.word	gPauseCounterBattle
	.word	gBattleMoveDamage
	.word	gIntroSlideFlags
	.word	gLeveledUpInBattle
	.word	gAbsentBattlerFlags
	.word	gBattleStruct
	.word	gEnemyParty
	.word	gBaseStats
	.word	0x4fb
	.word	gBattleResults
.Lfe53:
	.size	 BattleStartClearSetData,.Lfe53-BattleStartClearSetData
	.align	2, 0
	.globl	SwitchInClearSetData
	.type	 SwitchInClearSetData,function
	.thumb_func
SwitchInClearSetData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	ldr	r4, .L931
	ldr	r5, .L931+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, sp
	add	r0, r0, r4
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldmia	r0!, {r2, r3, r7}
	stmia	r1!, {r2, r3, r7}
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r2, .L931+0x8
	ldr	r3, .L931+0xc
	ldrh	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	r9, r4
	mov	ip, r5
	ldr	r6, .L931+0x10
	mov	sl, r6
	cmp	r0, #0x7f
	beq	.L930	@cond_branch
	mov	r5, #0x0
	mov	r4, ip
	mov	r3, #0x58
	ldr	r2, .L931+0x14
	add	r2, r2, #0x18
	mov	r1, #0x6
.L894:
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r5, r0
	add	r0, r0, r2
	strb	r1, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x7
	ble	.L894	@cond_branch
	mov	r5, #0x0
	ldr	r7, .L931+0x18
	ldrb	r7, [r7]
	cmp	r5, r7
	bge	.L890	@cond_branch
	ldr	r0, .L931+0x1c
	mov	r8, r0
	ldr	r3, .L931
	ldr	r4, .L931+0x10
.L899:
	mov	r0, #0x58
	mul	r0, r0, r5
	mov	r1, r8
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L900	@cond_branch
	ldrb	r0, [r3, #0x14]
	ldr	r6, .L931+0x4
	ldrb	r6, [r6]
	cmp	r0, r6
	bne	.L900	@cond_branch
	ldr	r0, .L931+0x20
	and	r1, r1, r0
	str	r1, [r2]
.L900:
	ldr	r1, [r4]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L898	@cond_branch
	ldrb	r0, [r3, #0x15]
	ldr	r7, .L931+0x4
	ldrb	r7, [r7]
	cmp	r0, r7
	bne	.L898	@cond_branch
	mov	r0, #0x19
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r3, #0x15]
.L898:
	add	r3, r3, #0x1c
	add	r4, r4, #0x4
	add	r5, r5, #0x1
	ldr	r0, .L931+0x18
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L899	@cond_branch
.L890:
	ldr	r1, .L931+0xc
	ldrh	r0, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L931+0x8
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, #0x7f
	bne	.L903	@cond_branch
.L930:
	mov	r3, ip
	ldrb	r1, [r3]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	ldr	r0, .L931+0x14
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L931+0x24
	and	r0, r0, r1
	str	r0, [r2]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	ldr	r0, [r1]
	ldr	r2, .L931+0x28
	and	r0, r0, r2
	str	r0, [r1]
	mov	r5, #0x0
	ldr	r6, .L931+0x18
	ldrb	r6, [r6]
	cmp	r5, r6
	bge	.L910	@cond_branch
	mov	r7, ip
	mov	r6, #0x0
.L907:
	ldrb	r0, [r7]
	bl	GetBattlerSide
	add	r4, r0, #0
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L906	@cond_branch
	ldr	r1, .L931+0x10
	lsl	r0, r5, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L906	@cond_branch
	ldr	r0, .L931
	add	r0, r6, r0
	ldrb	r0, [r0, #0x15]
	ldrb	r3, [r7]
	cmp	r0, r3
	bne	.L906	@cond_branch
	mov	r0, #0x19
	neg	r0, r0
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	str	r1, [r2]
.L906:
	add	r6, r6, #0x1c
	add	r5, r5, #0x1
	ldr	r0, .L931+0x18
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L907	@cond_branch
	ldr	r6, .L931
	mov	r9, r6
	ldr	r7, .L931+0x4
	mov	ip, r7
	b	.L910
.L932:
	.align	2, 0
.L931:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gStatuses3
	.word	gBattleMons
	.word	gBattlersCount
	.word	gBattleMons+0x50
	.word	-0x4000001
	.word	0x15100007
	.word	0x3043f
.L903:
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L933
	add	r1, r1, #0x50
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
	mov	r2, ip
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	str	r1, [r0]
.L910:
	mov	r5, #0x0
	ldr	r7, .L933+0x4
	ldr	r3, .L933+0x8
	mov	sl, r3
	ldr	r6, .L933+0xc
	ldrb	r6, [r6]
	cmp	r5, r6
	bge	.L912	@cond_branch
	ldr	r0, .L933+0x10
	mov	r8, r0
	ldr	r6, .L933+0x14
	ldr	r4, .L933+0x18
.L914:
	mov	r0, #0x58
	mul	r0, r0, r5
	mov	r1, r8
	add	r3, r0, r1
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	lsl	r2, r0, #0x10
	ldr	r1, [r3]
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L915	@cond_branch
	bic	r1, r1, r2
	str	r1, [r3]
.L915:
	ldr	r1, [r3]
	mov	r0, #0xe0
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L913	@cond_branch
	ldr	r0, [r7]
	add	r0, r5, r0
	ldrb	r0, [r0, #0x14]
	ldrb	r2, [r4]
	cmp	r0, r2
	bne	.L913	@cond_branch
	ldr	r0, .L933+0x1c
	and	r1, r1, r0
	str	r1, [r3]
.L913:
	add	r5, r5, #0x1
	ldr	r3, .L933+0xc
	ldrb	r3, [r3]
	cmp	r5, r3
	blt	.L914	@cond_branch
.L912:
	mov	r6, ip
	ldrb	r0, [r6]
	add	r0, r0, sl
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r0, [r6]
	ldr	r2, .L933+0x20
	add	r0, r0, r2
	strb	r1, [r0]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r3, r9
	add	r1, r0, r3
	mov	r5, #0x0
	mov	r2, #0x0
.L921:
	add	r0, r1, r5
	strb	r2, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x1b
	bls	.L921	@cond_branch
	ldr	r6, .L933+0x24
	ldrh	r0, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L933+0x28
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x7f
	bne	.L923	@cond_branch
	mov	r2, ip
	ldrb	r1, [r2]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	mov	r1, sp
	ldrb	r1, [r1, #0xa]
	strb	r1, [r0, #0xa]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	mov	r1, sp
	ldrb	r1, [r1, #0x15]
	strb	r1, [r0, #0x15]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	mov	r0, sp
	ldrb	r2, [r0, #0xf]
	lsl	r2, r2, #0x1c
	mov	r4, #0xf
	lsr	r2, r2, #0x1c
	ldrb	r3, [r1, #0xf]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xf]
	mov	r3, ip
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	mov	r1, sp
	ldrb	r1, [r1, #0xf]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	ldrb	r2, [r0, #0xf]
	and	r4, r4, r2
	orr	r4, r4, r1
	strb	r4, [r0, #0xf]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	mov	r1, sp
	ldrb	r1, [r1, #0x14]
	strb	r1, [r0, #0x14]
.L923:
	mov	r0, #0x0
	ldr	r6, .L933+0x2c
	strb	r0, [r6]
	mov	r0, ip
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	mov	r2, #0x0
	mov	r1, #0x2
	strb	r1, [r0, #0x16]
	mov	r1, ip
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	ldr	r3, .L933+0x30
	add	r0, r0, r3
	mov	r3, #0x0
	strh	r2, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	ldr	r6, .L933+0x34
	add	r0, r0, r6
	strh	r2, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	ldr	r1, .L933+0x38
	add	r0, r0, r1
	strh	r2, [r0]
	mov	r6, ip
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	ldr	r1, .L933+0x3c
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	ldr	r6, .L933+0x40
	add	r0, r0, r6
	strh	r2, [r0]
	mov	r1, ip
	ldrb	r0, [r1]
	ldr	r2, .L933+0x44
	add	r0, r0, r2
	mov	r1, #0xff
	strb	r1, [r0]
	mov	r6, ip
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x98
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x99
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe0
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe1
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe2
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe3
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe4
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe5
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe6
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r7]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe7
	strb	r3, [r0]
	mov	r5, #0x0
	ldr	r0, .L933+0xc
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L925	@cond_branch
	add	r4, r7, #0
.L927:
	ldrb	r1, [r6]
	cmp	r5, r1
	beq	.L928	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r5, #0x1
	add	r0, r1, r0
	add	r0, r0, #0x98
	strb	r3, [r0]
	ldr	r0, [r4]
	add	r1, r1, r0
	add	r1, r1, #0x99
	strb	r3, [r1]
.L928:
	ldrb	r0, [r6]
	ldr	r1, [r4]
	lsl	r0, r0, #0x1
	lsl	r2, r5, #0x3
	add	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0xe0
	strb	r3, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0xe1
	strb	r3, [r0]
	add	r5, r5, #0x1
	ldr	r2, .L933+0xc
	ldrb	r2, [r2]
	cmp	r5, r2
	blt	.L927	@cond_branch
.L925:
	mov	r3, ip
	ldrb	r0, [r3]
	ldr	r1, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	mov	r2, #0x0
	strb	r2, [r0]
	ldrb	r0, [r3]
	ldr	r1, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	strb	r2, [r0]
	ldr	r6, .L933+0x48
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r7, .L933+0x24
	strh	r0, [r7]
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L934:
	.align	2, 0
.L933:
	.word	gBattleMons
	.word	gBattleStruct
	.word	gActionSelectionCursor
	.word	gBattlersCount
	.word	gBattleMons+0x50
	.word	gBitTable
	.word	gActiveBattler
	.word	-0xe001
	.word	gMoveSelectionCursor
	.word	gCurrentMove
	.word	gBattleMoves
	.word	gMoveResultFlags
	.word	gLastMoves
	.word	gLastLandedMoves
	.word	gLastHitByType
	.word	gLastResultingMoves
	.word	gLastPrintedMoves
	.word	gLastHitBy
	.word	gBattleResources
.Lfe54:
	.size	 SwitchInClearSetData,.Lfe54-SwitchInClearSetData
	.align	2, 0
	.globl	FaintClearSetData
	.type	 FaintClearSetData,function
	.thumb_func
FaintClearSetData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r3, #0x0
	ldr	r7, .L960
	ldr	r6, .L960+0x4
	ldr	r0, .L960+0x8
	mov	r8, r0
	ldr	r1, .L960+0xc
	mov	r9, r1
	ldr	r2, .L960+0x10
	mov	ip, r2
	add	r5, r7, #0
	mov	r4, #0x58
	ldr	r2, .L960+0x14
	add	r2, r2, #0x18
	mov	r1, #0x6
.L939:
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r3, r0
	add	r0, r0, r2
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x7
	ble	.L939	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r2, .L960+0x14
	add	r2, r2, #0x50
	add	r0, r0, r2
	mov	r1, #0x0
	str	r1, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	str	r1, [r0]
	mov	r3, #0x0
	ldr	r0, .L960+0x18
	ldrb	r0, [r0]
	cmp	r3, r0
	bge	.L942	@cond_branch
	add	r4, r2, #0
	mov	r5, #0x0
	ldr	r6, .L960+0x1c
.L944:
	ldr	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L945	@cond_branch
	ldr	r2, .L960+0x20
	add	r0, r5, r2
	ldrb	r0, [r0, #0x14]
	ldrb	r2, [r7]
	cmp	r0, r2
	bne	.L945	@cond_branch
	ldr	r0, .L960+0x24
	and	r1, r1, r0
	str	r1, [r4]
.L945:
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	lsl	r2, r0, #0x10
	ldr	r1, [r4]
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L946	@cond_branch
	bic	r1, r1, r2
	str	r1, [r4]
.L946:
	ldr	r1, [r4]
	mov	r0, #0xe0
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L943	@cond_branch
	ldr	r2, .L960+0x28
	ldr	r0, [r2]
	add	r0, r3, r0
	ldrb	r0, [r0, #0x14]
	ldrb	r2, [r7]
	cmp	r0, r2
	bne	.L943	@cond_branch
	ldr	r0, .L960+0x2c
	and	r1, r1, r0
	str	r1, [r4]
.L943:
	add	r4, r4, #0x58
	add	r5, r5, #0x1c
	add	r3, r3, #0x1
	ldr	r0, .L960+0x18
	ldrb	r0, [r0]
	cmp	r3, r0
	blt	.L944	@cond_branch
.L942:
	ldrb	r0, [r7]
	add	r0, r0, r8
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r0, [r7]
	add	r0, r0, r9
	strb	r1, [r0]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L960+0x20
	add	r1, r0, r2
	mov	r3, #0x0
	mov	r2, #0x0
.L952:
	add	r0, r1, r3
	strb	r2, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x1b
	bls	.L952	@cond_branch
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	mov	r9, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1]
	mov	r0, #0x3
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1]
	mov	r6, #0x5
	neg	r6, r6
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	mov	sl, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1]
	mov	r5, #0x21
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1]
	mov	r4, #0x41
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1, #0x1]
	mov	r0, r9
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1, #0x1]
	mov	r0, r8
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1, #0x1]
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, ip
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x19
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	ldrb	r1, [r0, #0x1]
	and	r5, r5, r1
	strb	r5, [r0, #0x1]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	ldrb	r1, [r0, #0x1]
	and	r3, r3, r1
	strb	r3, [r0, #0x1]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	ldrb	r1, [r0, #0x2]
	mov	r2, r9
	and	r2, r2, r1
	strb	r2, [r0, #0x2]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	ldrb	r1, [r0, #0x2]
	mov	r2, r8
	and	r2, r2, r1
	strb	r2, [r0, #0x2]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	ldrb	r1, [r0, #0x2]
	and	r6, r6, r1
	strb	r6, [r0, #0x2]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	ldrb	r1, [r0, #0x2]
	mov	r2, sl
	and	r2, r2, r1
	strb	r2, [r0, #0x2]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L960+0x20
	add	r0, r0, r1
	mov	r2, #0x0
	mov	r1, #0x2
	strb	r1, [r0, #0x16]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L960+0x30
	add	r0, r0, r1
	mov	r3, #0x0
	strh	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L960+0x34
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L960+0x38
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L960+0x3c
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L960+0x40
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r0, [r7]
	ldr	r2, .L960+0x44
	add	r0, r0, r2
	mov	r1, #0xff
	strb	r1, [r0]
	ldrb	r0, [r7]
	ldr	r2, .L960+0x28
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x98
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x99
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe0
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe1
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe2
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe3
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe4
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe5
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe6
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	add	r0, r0, #0xe7
	strb	r3, [r0]
	mov	r3, #0x0
	ldr	r0, .L960+0x18
	ldrb	r0, [r0]
	cmp	r3, r0
	bge	.L955	@cond_branch
	add	r6, r7, #0
	add	r5, r2, #0
	mov	r4, #0x0
.L957:
	ldrb	r1, [r6]
	cmp	r3, r1
	beq	.L958	@cond_branch
	ldr	r0, [r5]
	lsl	r1, r3, #0x1
	add	r0, r1, r0
	add	r0, r0, #0x98
	strb	r4, [r0]
	ldr	r0, [r5]
	add	r1, r1, r0
	add	r1, r1, #0x99
	strb	r4, [r1]
.L958:
	ldrb	r0, [r6]
	ldr	r1, [r5]
	lsl	r0, r0, #0x1
	lsl	r2, r3, #0x3
	add	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0xe0
	strb	r4, [r0]
	ldrb	r0, [r6]
	ldr	r1, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0xe1
	strb	r4, [r0]
	add	r3, r3, #0x1
	ldr	r2, .L960+0x18
	ldrb	r2, [r2]
	cmp	r3, r2
	blt	.L957	@cond_branch
.L955:
	ldr	r1, .L960+0x48
	ldr	r0, [r1]
	ldr	r1, [r0, #0x4]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	str	r0, [r1]
	ldrb	r0, [r7]
	mov	r3, #0x58
	mov	r1, r0
	mul	r1, r1, r3
	ldr	r2, .L960+0x14
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r2, .L960+0x4c
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	add	r1, r1, #0x21
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r3
	ldr	r0, .L960+0x14
	add	r1, r1, r0
	ldrh	r2, [r1]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r2, .L960+0x4c
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	add	r1, r1, #0x22
	strb	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L961:
	.align	2, 0
.L960:
	.word	gActiveBattler
	.word	gStatuses3
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattlersCount
	.word	gBitTable
	.word	gDisableStructs
	.word	-0x4000001
	.word	gBattleStruct
	.word	-0xe001
	.word	gLastMoves
	.word	gLastLandedMoves
	.word	gLastHitByType
	.word	gLastResultingMoves
	.word	gLastPrintedMoves
	.word	gLastHitBy
	.word	gBattleResources
	.word	gBaseStats
.Lfe55:
	.size	 FaintClearSetData,.Lfe55-FaintClearSetData
	.align	2, 0
	.type	 BattleIntroGetMonsData,function
	.thumb_func
BattleIntroGetMonsData:
	push	{r4, r5, lr}
	ldr	r5, .L971
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L964	@cond_branch
	cmp	r0, #0x1
	beq	.L965	@cond_branch
	b	.L963
.L972:
	.align	2, 0
.L971:
	.word	gBattleCommunication
.L964:
	ldr	r4, .L973
	ldrb	r0, [r5, #0x1]
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BtlController_EmitGetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L963
.L974:
	.align	2, 0
.L973:
	.word	gActiveBattler
.L965:
	ldr	r0, .L975
	ldr	r2, [r0]
	cmp	r2, #0
	bne	.L963	@cond_branch
	ldrb	r0, [r5, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x1]
	ldr	r1, .L975+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L967	@cond_branch
	ldr	r1, .L975+0x8
	ldr	r0, .L975+0xc
	str	r0, [r1]
	b	.L963
.L976:
	.align	2, 0
.L975:
	.word	gBattleControllerExecFlags
	.word	gBattlersCount
	.word	gBattleMainFunc
	.word	BattleIntroPrepareBackgroundSlide
.L967:
	strb	r2, [r5]
.L963:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 BattleIntroGetMonsData,.Lfe56-BattleIntroGetMonsData
	.align	2, 0
	.type	 BattleIntroPrepareBackgroundSlide,function
	.thumb_func
BattleIntroPrepareBackgroundSlide:
	push	{r4, r5, lr}
	ldr	r0, .L979
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L978	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r4, .L979+0x4
	strb	r0, [r4]
	ldr	r0, .L979+0x8
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitIntroSlide
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L979+0xc
	ldr	r0, .L979+0x10
	str	r0, [r1]
	ldr	r0, .L979+0x14
	strb	r5, [r0]
	strb	r5, [r0, #0x1]
.L978:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L980:
	.align	2, 0
.L979:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattleTerrain
	.word	gBattleMainFunc
	.word	BattleIntroDrawTrainersOrMonsSprites
	.word	gBattleCommunication
.Lfe57:
	.size	 BattleIntroPrepareBackgroundSlide,.Lfe57-BattleIntroPrepareBackgroundSlide
	.align	2, 0
	.type	 BattleIntroDrawTrainersOrMonsSprites,function
	.thumb_func
BattleIntroDrawTrainersOrMonsSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L1017
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.LCB8425
	b	.L981	@long jump
.LCB8425:
	ldr	r2, .L1017+0x4
	strb	r1, [r2]
	ldr	r0, .L1017+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.LCB8434
	b	.L984	@long jump
.LCB8434:
	mov	r7, #0x58
	ldr	r0, .L1017+0xc
	mov	r8, r0
	mov	r9, r2
	mov	r1, #0x48
	add	r1, r1, r8
	mov	sl, r1
.L986:
	ldr	r0, .L1017+0x10
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L987	@cond_branch
	ldr	r4, .L1017+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L987	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r7
	mov	r2, r8
	add	r3, r0, r2
	mov	r2, #0x0
	mov	r1, #0x0
.L991:
	add	r0, r3, r2
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x57
	bls	.L991	@cond_branch
	b	.L993
.L1018:
	.align	2, 0
.L1017:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattleTypeFlags
.L987:
	mov	r1, r9
	ldrb	r0, [r1]
	mul	r0, r0, r7
	mov	r2, r8
	add	r3, r0, r2
	mov	r2, #0x0
	ldr	r6, .L1019
	ldr	r5, .L1019+0x4
	ldr	r4, .L1019+0x8
.L997:
	add	r0, r3, r2
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x57
	bls	.L997	@cond_branch
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r2, r0
	mul	r2, r2, r7
	add	r2, r2, r8
	ldrh	r1, [r2]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x6]
	add	r2, r2, #0x21
	strb	r0, [r2]
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r2, r0
	mul	r2, r2, r7
	add	r2, r2, r8
	ldrh	r1, [r2]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x7]
	add	r2, r2, #0x22
	strb	r0, [r2]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r8
	ldrh	r0, [r1]
	ldrb	r1, [r1, #0x17]
	lsr	r1, r1, #0x7
	bl	GetAbilityBySpecies
	mov	r2, r9
	ldrb	r1, [r2]
	mul	r1, r1, r7
	add	r1, r1, r8
	add	r1, r1, #0x20
	strb	r0, [r1]
	ldrb	r0, [r2]
	bl	GetBattlerSide
	ldr	r1, .L1019+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, #0xa8
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldrh	r0, [r0, #0x28]
	strh	r0, [r1]
	mov	r2, #0x0
	ldr	r4, .L1019+0x8
	mov	r5, #0x58
	ldr	r1, .L1019+0x10
	add	r6, r4, #0
	mov	r0, #0x18
	neg	r0, r0
	add	r0, r0, r1
	mov	ip, r0
	mov	r3, #0x6
.L1002:
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r2, r0
	add	r0, r0, r1
	strb	r3, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L1002	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r7
	mov	r0, ip
	add	r0, r0, #0x50
	add	r1, r1, r0
	mov	r0, #0x0
	str	r0, [r1]
.L993:
	ldr	r4, .L1019+0x8
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1004	@cond_branch
	mov	r0, #0x0
	bl	BtlController_EmitDrawTrainerPic
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1004:
	ldr	r5, .L1019+0x14
	ldr	r0, [r5]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1005	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1006	@cond_branch
	mov	r0, #0x0
	bl	BtlController_EmitDrawTrainerPic
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1006:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1008	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L1019+0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1008	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r4]
	mul	r1, r1, r7
	add	r1, r1, sl
	ldr	r2, [r1]
	mov	r1, #0x2
	bl	HandleSetPokedexFlag
	b	.L1008
.L1020:
	.align	2, 0
.L1019:
	.word	gBaseStats
	.word	gBattleBufferB
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons+0x18
	.word	gBattleTypeFlags
	.word	0x1aa02
.L1005:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1008	@cond_branch
	ldr	r1, [r5]
	mov	r2, #0xa0
	lsl	r2, r2, #0x8
	and	r2, r2, r1
	cmp	r2, #0
	beq	.L1010	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r2, r0
	beq	.L1012	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r4]
	mul	r1, r1, r7
	add	r1, r1, sl
	ldr	r2, [r1]
	mov	r1, #0x2
	bl	HandleSetPokedexFlag
	b	.L1012
.L1010:
	ldr	r0, .L1021
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1012	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r4]
	mul	r1, r1, r7
	add	r1, r1, sl
	ldr	r2, [r1]
	mov	r1, #0x2
	bl	HandleSetPokedexFlag
.L1012:
	mov	r0, #0x0
	bl	BtlController_EmitLoadMonSprite
	mov	r1, r9
	ldrb	r0, [r1]
	bl	MarkBattlerForControllerExec
.L1008:
	ldr	r0, .L1021+0x4
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L985	@cond_branch
	ldr	r4, .L1021+0x8
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L1015	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L985	@cond_branch
.L1015:
	mov	r0, #0x0
	bl	BtlController_EmitDrawTrainerPic
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L985:
	mov	r2, r9
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	ldr	r1, .L1021+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.LCB8825
	b	.L986	@long jump
.LCB8825:
.L984:
	ldr	r1, .L1021+0x10
	ldr	r0, .L1021+0x14
	str	r0, [r1]
.L981:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1022:
	.align	2, 0
.L1021:
	.word	0x1aa02
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattleMainFunc
	.word	BattleIntroDrawPartySummaryScreens
.Lfe58:
	.size	 BattleIntroDrawTrainersOrMonsSprites,.Lfe58-BattleIntroDrawTrainersOrMonsSprites
	.align	2, 0
	.type	 BattleIntroDrawPartySummaryScreens,function
	.thumb_func
BattleIntroDrawPartySummaryScreens:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x30
	ldr	r0, .L1055
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB8857
	b	.L1023	@long jump
.LCB8857:
	ldr	r0, .L1055+0x4
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8863
	b	.L1025	@long jump
.LCB8863:
	mov	r7, #0x0
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r6, r8
	mov	r5, sp
.L1029:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L1055+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L1031	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L1030	@cond_branch
.L1031:
	ldr	r0, .L1055+0xc
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L1051
.L1056:
	.align	2, 0
.L1055:
	.word	gBattleControllerExecFlags
	.word	gBattleTypeFlags
	.word	gEnemyParty
	.word	0xffff
.L1030:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L1051:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L1029	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r4, .L1057
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x80
	bl	BtlController_EmitDrawPartyStatusSummary
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	mov	r7, #0x0
	mov	r6, r8
	mov	r5, sp
.L1037:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L1057+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L1039	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L1038	@cond_branch
.L1039:
	ldr	r0, .L1057+0x8
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L1052
.L1058:
	.align	2, 0
.L1057:
	.word	gActiveBattler
	.word	gPlayerParty
	.word	0xffff
.L1038:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L1052:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L1037	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r4, .L1059
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x80
	bl	BtlController_EmitDrawPartyStatusSummary
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1059+0x4
	ldr	r0, .L1059+0x8
	b	.L1053
.L1060:
	.align	2, 0
.L1059:
	.word	gActiveBattler
	.word	gBattleMainFunc
	.word	BattleIntroPrintTrainerWantsToBattle
.L1025:
	mov	r7, #0x0
	add	r6, sp, #0x4
	mov	r5, sp
.L1046:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L1061
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L1048	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L1047	@cond_branch
.L1048:
	ldr	r0, .L1061+0x4
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L1054
.L1062:
	.align	2, 0
.L1061:
	.word	gPlayerParty
	.word	0xffff
.L1047:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L1054:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L1046	@cond_branch
	ldr	r1, .L1063
	ldr	r0, .L1063+0x4
.L1053:
	str	r0, [r1]
.L1023:
	add	sp, sp, #0x30
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1064:
	.align	2, 0
.L1063:
	.word	gBattleMainFunc
	.word	BattleIntroPrintWildMonAttacked
.Lfe59:
	.size	 BattleIntroDrawPartySummaryScreens,.Lfe59-BattleIntroDrawPartySummaryScreens
	.align	2, 0
	.type	 BattleIntroPrintTrainerWantsToBattle,function
	.thumb_func
BattleIntroPrintTrainerWantsToBattle:
	push	{lr}
	ldr	r0, .L1067
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1066	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r1, .L1067+0x4
	strb	r0, [r1]
	ldrb	r1, [r1]
	mov	r0, #0x0
	bl	PrepareStringBattle
	ldr	r1, .L1067+0x8
	ldr	r0, .L1067+0xc
	str	r0, [r1]
.L1066:
	pop	{r0}
	bx	r0
.L1068:
	.align	2, 0
.L1067:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattleMainFunc
	.word	BattleIntroPrintOpponentSendsOut
.Lfe60:
	.size	 BattleIntroPrintTrainerWantsToBattle,.Lfe60-BattleIntroPrintTrainerWantsToBattle
	.align	2, 0
	.type	 BattleIntroPrintWildMonAttacked,function
	.thumb_func
BattleIntroPrintWildMonAttacked:
	push	{lr}
	ldr	r0, .L1072
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1070	@cond_branch
	ldr	r1, .L1072+0x4
	ldr	r0, .L1072+0x8
	str	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	PrepareStringBattle
	ldr	r0, .L1072+0xc
	ldr	r0, [r0]
	mov	r1, #0xa0
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, r1
	bne	.L1070	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r1, .L1072+0x10
	strb	r0, [r1, #0x17]
	ldr	r0, .L1072+0x14
	bl	BattleScriptExecute
.L1070:
	pop	{r0}
	bx	r0
.L1073:
	.align	2, 0
.L1072:
	.word	gBattleControllerExecFlags
	.word	gBattleMainFunc
	.word	BattleIntroPrintPlayerSendsOut
	.word	gBattleTypeFlags
	.word	gBattleScripting
	.word	BattleScript_SilphScopeUnveiled
.Lfe61:
	.size	 BattleIntroPrintWildMonAttacked,.Lfe61-BattleIntroPrintWildMonAttacked
	.align	2, 0
	.type	 BattleIntroPrintOpponentSendsOut,function
	.thumb_func
BattleIntroPrintOpponentSendsOut:
	push	{lr}
	ldr	r0, .L1076
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1075	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	PrepareStringBattle
	ldr	r1, .L1076+0x4
	ldr	r0, .L1076+0x8
	str	r0, [r1]
.L1075:
	pop	{r0}
	bx	r0
.L1077:
	.align	2, 0
.L1076:
	.word	gBattleControllerExecFlags
	.word	gBattleMainFunc
	.word	BattleIntroOpponentSendsOutMonAnimation
.Lfe62:
	.size	 BattleIntroPrintOpponentSendsOut,.Lfe62-BattleIntroPrintOpponentSendsOut
	.align	2, 0
	.type	 BattleIntroOpponentSendsOutMonAnimation,function
	.thumb_func
BattleIntroOpponentSendsOutMonAnimation:
	push	{r4, lr}
	ldr	r0, .L1087
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L1079	@cond_branch
	ldr	r2, .L1087+0x4
	strb	r1, [r2]
	ldr	r0, .L1087+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L1081	@cond_branch
	add	r4, r2, #0
.L1083:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1084	@cond_branch
	mov	r0, #0x0
	bl	BtlController_EmitIntroTrainerBallThrow
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1084:
	ldr	r0, .L1087+0xc
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1082	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L1082	@cond_branch
	mov	r0, #0x0
	bl	BtlController_EmitIntroTrainerBallThrow
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1082:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1087+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1083	@cond_branch
.L1081:
	ldr	r1, .L1087+0x10
	ldr	r0, .L1087+0x14
	str	r0, [r1]
.L1079:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1088:
	.align	2, 0
.L1087:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	BattleIntroRecordMonsToDex
.Lfe63:
	.size	 BattleIntroOpponentSendsOutMonAnimation,.Lfe63-BattleIntroOpponentSendsOutMonAnimation
	.align	2, 0
	.type	 BattleIntroRecordMonsToDex,function
	.thumb_func
BattleIntroRecordMonsToDex:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1097
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L1090	@cond_branch
	ldr	r2, .L1097+0x4
	strb	r1, [r2]
	ldr	r0, .L1097+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L1092	@cond_branch
	add	r4, r2, #0
	ldr	r6, .L1097+0xc
	mov	r5, #0x58
	add	r7, r6, #0
	add	r7, r7, #0x48
.L1094:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1093	@cond_branch
	ldr	r0, .L1097+0x10
	ldr	r0, [r0]
	ldr	r1, .L1097+0x14
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1093	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r4]
	mul	r1, r1, r5
	add	r1, r1, r7
	ldr	r2, [r1]
	mov	r1, #0x2
	bl	HandleSetPokedexFlag
.L1093:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1097+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1094	@cond_branch
.L1092:
	ldr	r1, .L1097+0x18
	ldr	r0, .L1097+0x1c
	str	r0, [r1]
.L1090:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1098:
	.align	2, 0
.L1097:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	0x1aa02
	.word	gBattleMainFunc
	.word	BattleIntroPrintPlayerSendsOut
.Lfe64:
	.size	 BattleIntroRecordMonsToDex,.Lfe64-BattleIntroRecordMonsToDex
	.align	2, 0
	.type	 Unused_AutoProgressToIntro,function
	.thumb_func
Unused_AutoProgressToIntro:
	push	{lr}
	ldr	r0, .L1101
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1100	@cond_branch
	ldr	r1, .L1101+0x4
	ldr	r0, .L1101+0x8
	str	r0, [r1]
.L1100:
	pop	{r0}
	bx	r0
.L1102:
	.align	2, 0
.L1101:
	.word	gBattleControllerExecFlags
	.word	gBattleMainFunc
	.word	BattleIntroPrintPlayerSendsOut
.Lfe65:
	.size	 Unused_AutoProgressToIntro,.Lfe65-Unused_AutoProgressToIntro
	.align	2, 0
	.type	 BattleIntroPrintPlayerSendsOut,function
	.thumb_func
BattleIntroPrintPlayerSendsOut:
	push	{lr}
	ldr	r0, .L1106
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1104	@cond_branch
	ldr	r0, .L1106+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1105	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	PrepareStringBattle
.L1105:
	ldr	r1, .L1106+0x8
	ldr	r0, .L1106+0xc
	str	r0, [r1]
.L1104:
	pop	{r0}
	bx	r0
.L1107:
	.align	2, 0
.L1106:
	.word	gBattleControllerExecFlags
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	BattleIntroPlayerSendsOutMonAnimation
.Lfe66:
	.size	 BattleIntroPrintPlayerSendsOut,.Lfe66-BattleIntroPrintPlayerSendsOut
	.align	2, 0
	.type	 BattleIntroPlayerSendsOutMonAnimation,function
	.thumb_func
BattleIntroPlayerSendsOutMonAnimation:
	push	{r4, lr}
	ldr	r0, .L1117
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L1108	@cond_branch
	ldr	r2, .L1117+0x4
	strb	r1, [r2]
	ldr	r0, .L1117+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L1111	@cond_branch
	add	r4, r2, #0
.L1113:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1114	@cond_branch
	mov	r0, #0x0
	bl	BtlController_EmitIntroTrainerBallThrow
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1114:
	ldr	r0, .L1117+0xc
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1112	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L1112	@cond_branch
	mov	r0, #0x0
	bl	BtlController_EmitIntroTrainerBallThrow
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1112:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1117+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1113	@cond_branch
.L1111:
	ldr	r2, .L1117+0x10
	ldr	r0, [r2]
	add	r0, r0, #0x4c
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0xd9
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0xb6
	strb	r1, [r0]
	ldr	r1, .L1117+0x14
	ldr	r0, .L1117+0x18
	str	r0, [r1]
.L1108:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1118:
	.align	2, 0
.L1117:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	gBattleMainFunc
	.word	TryDoEventsBeforeFirstTurn
.Lfe67:
	.size	 BattleIntroPlayerSendsOutMonAnimation,.Lfe67-BattleIntroPlayerSendsOutMonAnimation
	.align	2, 0
	.type	 BattleIntroSwitchInPlayerMons,function
	.thumb_func
BattleIntroSwitchInPlayerMons:
	push	{r4, r5, lr}
	ldr	r0, .L1127
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L1120	@cond_branch
	ldr	r2, .L1127+0x4
	strb	r1, [r2]
	ldr	r0, .L1127+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L1122	@cond_branch
	add	r4, r2, #0
	ldr	r5, .L1127+0xc
.L1124:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1123	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x0
	mov	r2, #0x0
	bl	BtlController_EmitSwitchInAnim
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1123:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1127+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1124	@cond_branch
.L1122:
	ldr	r2, .L1127+0x10
	ldr	r0, [r2]
	add	r0, r0, #0x4c
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0xd9
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0xb6
	strb	r1, [r0]
	ldr	r1, .L1127+0x14
	ldr	r0, .L1127+0x18
	str	r0, [r1]
.L1120:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1128:
	.align	2, 0
.L1127:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBattleMainFunc
	.word	TryDoEventsBeforeFirstTurn
.Lfe68:
	.size	 BattleIntroSwitchInPlayerMons,.Lfe68-BattleIntroSwitchInPlayerMons
	.align	2, 0
	.type	 TryDoEventsBeforeFirstTurn,function
	.thumb_func
TryDoEventsBeforeFirstTurn:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	mov	r9, r0
	ldr	r0, .L1184
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB9728
	b	.L1129	@long jump
.LCB9728:
	ldr	r0, .L1184+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4c
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1131	@cond_branch
	mov	r5, #0x0
	ldr	r1, .L1184+0x8
	add	r3, r1, #0
	ldrb	r0, [r1]
	cmp	r5, r0
	bge	.L1133	@cond_branch
	ldr	r2, .L1184+0xc
.L1135:
	add	r0, r5, r2
	strb	r5, [r0]
	add	r5, r5, #0x1
	ldrb	r0, [r1]
	cmp	r5, r0
	blt	.L1135	@cond_branch
.L1133:
	mov	r5, #0x0
	b	.L1183
.L1185:
	.align	2, 0
.L1184:
	.word	gBattleControllerExecFlags
	.word	gBattleStruct
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
.L1140:
	add	r4, r5, #0x1
	mov	r8, r4
	ldrb	r1, [r1]
	cmp	r8, r1
	bge	.L1139	@cond_branch
	ldr	r6, .L1186
	ldr	r3, .L1186+0x4
	lsl	r7, r5, #0x18
.L1144:
	add	r0, r5, r6
	ldrb	r0, [r0]
	add	r1, r4, r6
	ldrb	r1, [r1]
	mov	r2, #0x1
	str	r3, [sp, #0x4]
	bl	GetWhoStrikesFirst
	lsl	r0, r0, #0x18
	ldr	r3, [sp, #0x4]
	cmp	r0, #0
	beq	.L1143	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r7, #0x18
	bl	SwapTurnOrder
	ldr	r3, [sp, #0x4]
.L1143:
	add	r4, r4, #0x1
	ldr	r0, .L1186+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L1144	@cond_branch
.L1139:
	mov	r5, r8
.L1183:
	add	r1, r3, #0
	ldrb	r0, [r3]
	sub	r0, r0, #0x1
	cmp	r5, r0
	blt	.L1140	@cond_branch
.L1131:
	ldr	r4, .L1186+0x8
	ldr	r0, [r4]
	add	r0, r0, #0xb6
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1148	@cond_branch
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0xff
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1148	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0xb6
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L1129
.L1187:
	.align	2, 0
.L1186:
	.word	gBattlerByTurnOrder
	.word	gBattlersCount
	.word	gBattleStruct
.L1148:
	ldr	r2, .L1188
	ldr	r0, [r2]
	add	r0, r0, #0x4c
	ldr	r1, .L1188+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L1150	@cond_branch
	ldr	r5, .L1188+0x8
	add	r4, r2, #0
.L1151:
	ldr	r0, [r4]
	add	r0, r0, #0x4c
	ldrb	r0, [r0]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1152	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1152:
	ldr	r1, [r4]
	add	r1, r1, #0x4c
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB9916
	b	.L1129	@long jump
.LCB9916:
	ldr	r0, [r4]
	add	r0, r0, #0x4c
	ldr	r1, .L1188+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1151	@cond_branch
.L1150:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x9
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB9944
	b	.L1129	@long jump
.LCB9944:
	str	r0, [sp]
	mov	r0, #0xb
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB9955
	b	.L1129	@long jump
.LCB9955:
	ldr	r2, .L1188
	ldr	r0, [r2]
	add	r0, r0, #0xd9
	ldr	r1, .L1188+0x4
	ldrb	r0, [r0]
	add	r3, r1, #0
	ldrb	r1, [r3]
	cmp	r0, r1
	bcs	.L1158	@cond_branch
	ldr	r5, .L1188+0x8
	add	r4, r2, #0
.L1159:
	ldr	r0, [r4]
	add	r0, r0, #0xd9
	ldrb	r0, [r0]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x0
	mov	r2, #0x0
	str	r3, [sp, #0x4]
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	ldr	r3, [sp, #0x4]
	cmp	r0, #0
	beq	.L1160	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1160:
	ldr	r1, [r4]
	add	r1, r1, #0xd9
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, r9
	cmp	r0, #0
	bne	.L1129	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0xd9
	ldr	r1, .L1188+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1159	@cond_branch
.L1158:
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L1164	@cond_branch
	add	r5, r0, #0
.L1165:
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L1165	@cond_branch
.L1164:
	mov	r5, #0x0
	ldr	r1, .L1188
	mov	r8, r1
	mov	r7, #0x6
	ldr	r6, .L1188+0xc
	ldr	r2, .L1188+0x10
	mov	r4, #0xff
	mov	r3, #0x0
.L1171:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r5, r0
	add	r0, r0, #0x5c
	strb	r7, [r0]
	add	r1, r5, r6
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	strh	r3, [r2]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1171	@cond_branch
	mov	r0, #0x0
	bl	TurnValuesCleanUp
	bl	SpecialStatusesClear
	ldr	r0, .L1188
	ldr	r0, [r0]
	add	r0, r0, #0x91
	ldr	r1, .L1188+0x14
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldr	r1, .L1188+0x18
	ldr	r0, .L1188+0x1c
	str	r0, [r1]
	bl	ResetSentPokesToOpponentValue
	ldr	r1, .L1188+0x20
	mov	r2, #0x0
	add	r0, r1, #0x7
.L1176:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L1176	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L1188+0x4
	ldr	r2, .L1188
	ldr	r6, .L1188+0x24
	ldr	r7, .L1188+0x28
	ldrb	r0, [r3]
	cmp	r5, r0
	bge	.L1179	@cond_branch
	ldr	r0, .L1188+0x2c
	mov	r4, #0x9
	neg	r4, r4
	add	r1, r0, #0
	add	r1, r1, #0x50
.L1181:
	ldr	r0, [r1]
	and	r0, r0, r4
	str	r0, [r1]
	add	r1, r1, #0x58
	add	r5, r5, #0x1
	ldrb	r0, [r3]
	cmp	r5, r0
	blt	.L1181	@cond_branch
.L1179:
	ldr	r0, [r2]
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1]
	ldr	r0, [r2]
	mov	r3, #0xc0
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r3, r3, #0x1
	add	r0, r0, r3
	strb	r1, [r0]
	mov	r1, #0x0
	strb	r1, [r6, #0x14]
	ldr	r0, [r2]
	add	r0, r0, #0x4d
	strb	r1, [r0]
	ldr	r0, [r2]
	strb	r1, [r0, #0x3]
	strb	r1, [r7]
	bl	Random
	ldr	r1, .L1188+0x30
	strh	r0, [r1]
.L1129:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1189:
	.align	2, 0
.L1188:
	.word	gBattleStruct
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
	.word	gChosenActionByBattler
	.word	gChosenMoveByBattler
	.word	gAbsentBattlerFlags
	.word	gBattleMainFunc
	.word	HandleTurnActionSelectionState
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gRandomTurnNumber
.Lfe69:
	.size	 TryDoEventsBeforeFirstTurn,.Lfe69-TryDoEventsBeforeFirstTurn
	.align	2, 0
	.type	 HandleEndTurn_ContinueBattle,function
	.thumb_func
HandleEndTurn_ContinueBattle:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1203
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1191	@cond_branch
	ldr	r1, .L1203+0x4
	ldr	r0, .L1203+0x8
	str	r0, [r1]
	ldr	r3, .L1203+0xc
	ldr	r1, .L1203+0x10
	mov	r2, #0x0
	add	r0, r1, #0x7
.L1195:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L1195	@cond_branch
	mov	r4, #0x0
	ldrb	r3, [r3]
	cmp	r4, r3
	bge	.L1198	@cond_branch
	ldr	r5, .L1203+0x14
	add	r6, r5, #0
	add	r6, r6, #0x4c
.L1200:
	mov	r0, #0x58
	mov	r2, r4
	mul	r2, r2, r0
	add	r1, r5, #0
	add	r1, r1, #0x50
	add	r1, r2, r1
	ldr	r3, [r1]
	sub	r0, r0, #0x61
	and	r3, r3, r0
	str	r3, [r1]
	add	r2, r2, r6
	ldr	r0, [r2]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1199	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L1199	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	CancelMultiTurnMoves
.L1199:
	add	r4, r4, #0x1
	ldr	r0, .L1203+0xc
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L1200	@cond_branch
.L1198:
	ldr	r2, .L1203+0x18
	ldr	r0, [r2]
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1]
	ldr	r0, [r2]
	mov	r3, #0xc0
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r3, r3, #0x1
	add	r0, r0, r3
	strb	r1, [r0]
	ldr	r0, [r2]
	strb	r1, [r0, #0x3]
	ldr	r0, .L1203+0x1c
	strb	r1, [r0]
.L1191:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1204:
	.align	2, 0
.L1203:
	.word	gBattleControllerExecFlags
	.word	gBattleMainFunc
	.word	BattleTurnPassed
	.word	gBattlersCount
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gBattleStruct
	.word	gMoveResultFlags
.Lfe70:
	.size	 HandleEndTurn_ContinueBattle,.Lfe70-HandleEndTurn_ContinueBattle
	.align	2, 0
	.globl	BattleTurnPassed
	.type	 BattleTurnPassed,function
	.thumb_func
BattleTurnPassed:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x1
	bl	TurnValuesCleanUp
	ldr	r0, .L1228
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1206	@cond_branch
	bl	DoFieldEndTurnEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10334
	b	.L1205	@long jump
.LCB10334:
	bl	DoBattlerEndTurnEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10340
	b	.L1205	@long jump
.LCB10340:
.L1206:
	bl	HandleFaintedMonActions
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB10347
	b	.L1205	@long jump
.LCB10347:
	ldr	r0, .L1228+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4d
	strb	r1, [r0]
	bl	HandleWishPerishSongOnTurnEnd
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L1205	@cond_branch
	mov	r0, #0x0
	bl	TurnValuesCleanUp
	ldr	r2, .L1228+0x8
	ldr	r0, [r2]
	ldr	r1, .L1228+0xc
	and	r0, r0, r1
	ldr	r1, .L1228+0x10
	and	r0, r0, r1
	ldr	r1, .L1228+0x14
	and	r0, r0, r1
	ldr	r1, .L1228+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1228+0x1c
	strb	r4, [r0, #0x18]
	strb	r4, [r0, #0x19]
	strb	r4, [r0, #0x14]
	ldr	r0, .L1228+0x20
	str	r4, [r0]
	ldr	r0, .L1228+0x24
	strb	r4, [r0]
	ldr	r1, .L1228+0x28
	mov	r2, #0x0
	add	r0, r1, #0x4
.L1214:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L1214	@cond_branch
	ldr	r0, .L1228
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1216	@cond_branch
	ldr	r1, .L1228+0x2c
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r1, .L1228+0x30
	ldr	r0, .L1228+0x34
	str	r0, [r1]
	b	.L1205
.L1229:
	.align	2, 0
.L1228:
	.word	gBattleOutcome
	.word	gBattleStruct
	.word	gHitMarker
	.word	-0x201
	.word	-0x80001
	.word	-0x400001
	.word	-0x100001
	.word	gBattleScripting
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
	.word	gBattleCommunication
	.word	gCurrentActionFuncId
	.word	gBattleMainFunc
	.word	RunTurnActionsFunctions
.L1216:
	ldr	r1, .L1230
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0xfe
	bhi	.L1217	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x13]
.L1217:
	mov	r2, #0x0
	ldr	r4, .L1230+0x4
	ldr	r0, .L1230+0x8
	mov	r8, r0
	ldr	r1, .L1230+0xc
	mov	sl, r1
	ldr	r0, .L1230+0x10
	mov	ip, r0
	ldr	r1, .L1230+0x14
	mov	r9, r1
	ldrb	r0, [r4]
	cmp	r2, r0
	bge	.L1219	@cond_branch
	ldr	r7, .L1230+0x18
	mov	r6, #0xff
	mov	r5, #0x0
	ldr	r3, .L1230+0x1c
.L1221:
	add	r1, r2, r7
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	strh	r5, [r3]
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	ldrb	r1, [r4]
	cmp	r2, r1
	blt	.L1221	@cond_branch
.L1219:
	mov	r2, #0x0
	ldr	r3, .L1230+0x8
	mov	r1, #0x6
.L1226:
	ldr	r0, [r3]
	add	r0, r2, r0
	add	r0, r0, #0x5c
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1226	@cond_branch
	mov	r2, r8
	ldr	r0, [r2]
	add	r0, r0, #0x91
	mov	r2, ip
	ldrb	r1, [r2]
	strb	r1, [r0]
	mov	r0, r9
	mov	r1, sl
	str	r0, [r1]
	bl	Random
	ldr	r1, .L1230+0x20
	strh	r0, [r1]
.L1205:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1231:
	.align	2, 0
.L1230:
	.word	gBattleResults
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gBattleMainFunc
	.word	gAbsentBattlerFlags
	.word	HandleTurnActionSelectionState
	.word	gChosenActionByBattler
	.word	gChosenMoveByBattler
	.word	gRandomTurnNumber
.Lfe71:
	.size	 BattleTurnPassed,.Lfe71-BattleTurnPassed
	.align	2, 0
	.globl	IsRunningFromBattleImpossible
	.type	 IsRunningFromBattleImpossible,function
	.thumb_func
IsRunningFromBattleImpossible:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L1257
	ldr	r0, .L1257+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L1233	@cond_branch
	ldr	r1, .L1257+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x7]
	b	.L1234
.L1258:
	.align	2, 0
.L1257:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gEnigmaBerries
.L1233:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L1234:
	ldr	r1, .L1259
	ldr	r3, .L1259+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	cmp	r2, #0x25
	bne	.LCB10583
	b	.L1252	@long jump
.LCB10583:
	ldr	r0, .L1259+0x8
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB10589
	b	.L1252	@long jump
.LCB10589:
	ldr	r1, .L1259+0xc
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x32
	bne	.LCB10600
	b	.L1252	@long jump
.LCB10600:
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r0, .L1259+0x10
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L1238	@cond_branch
	mov	r7, #0x0
.L1240:
	lsr	r4, r7, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L1241	@cond_branch
	ldr	r1, .L1259+0xc
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r1
	add	r2, r0, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	cmp	r0, #0x17
	bne	.LCB10634
	b	.L1250	@long jump
.LCB10634:
.L1241:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L1239	@cond_branch
	ldr	r3, .L1259+0xc
	ldr	r0, .L1259+0x4
	ldrb	r0, [r0]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1a
	beq	.L1239	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1239	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1239	@cond_branch
	mov	r0, r5
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r2, r0, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	cmp	r0, #0x47
	bne	.LCB10679
	b	.L1251	@long jump
.LCB10679:
.L1239:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r7, r7, r0
	add	r5, r5, #0x1
	ldr	r0, .L1259+0x10
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L1240	@cond_branch
.L1238:
	ldr	r4, .L1259+0x4
	ldrb	r1, [r4]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xf
	mov	r2, #0x2a
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L1244	@cond_branch
	ldr	r6, .L1259+0xc
	ldrb	r0, [r4]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r1, r0, r6
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x8
	beq	.L1245	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L1244	@cond_branch
.L1245:
	ldr	r0, .L1259+0x14
	sub	r1, r5, #0x1
	strb	r1, [r0, #0x17]
	ldr	r2, .L1259+0x18
	mov	r0, r1
	mul	r0, r0, r3
	add	r0, r0, r6
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r1, .L1259+0x1c
	mov	r0, #0x2
	b	.L1254
.L1260:
	.align	2, 0
.L1259:
	.word	gPotentialItemEffectBattler
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleMons
	.word	gBattlersCount
	.word	gBattleScripting
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L1244:
	ldr	r1, .L1261
	ldr	r0, .L1261+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1261+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1247	@cond_branch
	ldr	r1, .L1261+0xc
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1246	@cond_branch
.L1247:
	ldr	r1, .L1261+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	mov	r0, #0x1
	b	.L1249
.L1262:
	.align	2, 0
.L1261:
	.word	gBattleMons
	.word	gActiveBattler
	.word	0x400e000
	.word	gStatuses3
	.word	gBattleCommunication
.L1246:
	ldr	r0, .L1263
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1248	@cond_branch
.L1252:
	mov	r0, #0x0
	b	.L1249
.L1264:
	.align	2, 0
.L1263:
	.word	gBattleTypeFlags
.L1250:
	ldr	r0, .L1265
	strb	r5, [r0, #0x17]
	ldr	r1, .L1265+0x4
	ldrb	r0, [r2]
	strb	r0, [r1]
	ldr	r1, .L1265+0x8
	mov	r0, #0x2
	b	.L1254
.L1266:
	.align	2, 0
.L1265:
	.word	gBattleScripting
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L1251:
	ldr	r0, .L1267
	strb	r5, [r0, #0x17]
	ldr	r1, .L1267+0x4
	ldrb	r0, [r2]
	strb	r0, [r1]
	ldr	r1, .L1267+0x8
	mov	r0, #0x2
	b	.L1254
.L1268:
	.align	2, 0
.L1267:
	.word	gBattleScripting
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L1248:
	ldr	r1, .L1269
	mov	r0, #0x1
.L1254:
	strb	r0, [r1, #0x5]
.L1249:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1270:
	.align	2, 0
.L1269:
	.word	gBattleCommunication
.Lfe72:
	.size	 IsRunningFromBattleImpossible,.Lfe72-IsRunningFromBattleImpossible
	.align	2, 0
	.globl	UpdatePartyOwnerOnSwitch_NonMulti
	.type	 UpdatePartyOwnerOnSwitch_NonMulti,function
	.thumb_func
UpdatePartyOwnerOnSwitch_NonMulti:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r3, #0x0
	ldr	r0, .L1289
	mov	r8, r0
	ldr	r1, .L1289+0x4
	mov	ip, r1
	ldr	r7, .L1289+0x8
	lsl	r0, r5, #0x1
	add	r4, r0, r5
	add	r6, r0, #0
.L1275:
	mov	r0, ip
	add	r2, r3, r0
	ldr	r1, [r7]
	add	r0, r4, r3
	add	r0, r0, r1
	add	r0, r0, #0x60
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L1275	@cond_branch
	mov	r1, r8
	add	r0, r6, r1
	ldrb	r0, [r0]
	bl	GetPartyIdFromBattlePartyId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r7, .L1289+0x8
	ldr	r0, [r7]
	add	r0, r5, r0
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	bl	GetPartyIdFromBattlePartyId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SwitchPartyMonSlots
	ldr	r0, .L1289+0xc
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1277	@cond_branch
	mov	r3, #0x0
	add	r4, r7, #0
	add	r6, r6, r5
	mov	r0, #0x2
	add	r1, r5, #0
	eor	r1, r1, r0
	ldr	r7, .L1289+0x4
	lsl	r0, r1, #0x1
	add	r5, r0, r1
.L1281:
	ldr	r0, [r4]
	add	r1, r6, r3
	add	r1, r1, r0
	add	r1, r1, #0x60
	add	r2, r3, r7
	ldrb	r0, [r2]
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r0, r5, r3
	add	r0, r0, r1
	add	r0, r0, #0x60
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L1281	@cond_branch
	b	.L1283
.L1290:
	.align	2, 0
.L1289:
	.word	gBattlerPartyIndexes
	.word	gBattlePartyCurrentOrder
	.word	gBattleStruct
	.word	gBattleTypeFlags
.L1277:
	mov	r3, #0x0
	add	r2, r6, r5
	ldr	r4, .L1291
.L1287:
	ldr	r0, [r7]
	add	r1, r2, r3
	add	r1, r1, r0
	add	r1, r1, #0x60
	add	r0, r3, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L1287	@cond_branch
.L1283:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1292:
	.align	2, 0
.L1291:
	.word	gBattlePartyCurrentOrder
.Lfe73:
	.size	 UpdatePartyOwnerOnSwitch_NonMulti,.Lfe73-UpdatePartyOwnerOnSwitch_NonMulti
	.align	2, 0
	.type	 HandleTurnActionSelectionState,function
	.thumb_func
HandleTurnActionSelectionState:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	ldr	r0, .L1399
	mov	r1, #0x0
	strb	r1, [r0, #0x4]
	ldr	r0, .L1399+0x4
	strb	r1, [r0]
	ldr	r0, .L1399+0x8
	add	r2, r0, #0
	ldrb	r0, [r2]
	cmp	r1, r0
	bcc	.LCB11046
	bl	.L1295	@far jump
.LCB11046:
.L1297:
	ldr	r4, .L1399+0x4
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1399
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bls	.LCB11063
	bl	.L1296	@far jump
.LCB11063:
	lsl	r0, r0, #0x2
	ldr	r1, .L1399+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1400:
	.align	2, 0
.L1399:
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattlersCount
	.word	.L1387
	.align	2, 0
	.align	2, 0
.L1387:
	.word	.L1299
	.word	.L1309
	.word	.L1346
	.word	.L1374
	.word	.L1379
	.word	.L1381
	.word	.L1385
.L1299:
	ldr	r0, .L1401
	ldrb	r1, [r0]
	ldr	r4, .L1401+0x4
	ldr	r0, [r4]
	add	r1, r1, r0
	add	r1, r1, #0x5c
	mov	r0, #0x6
	strb	r0, [r1]
	ldr	r0, .L1401+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1301	@cond_branch
	mov	r1, #0x2
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1301	@cond_branch
	eor	r5, r5, r1
	add	r0, r5, #0
	bl	GetBattlerAtPosition
	ldr	r1, [r4]
	add	r1, r1, #0x91
	ldrb	r1, [r1]
	ldr	r2, .L1401+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1301	@cond_branch
	ldr	r4, .L1401+0x10
	add	r0, r5, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x4
	beq	.LCB11136
	bl	.L1296	@far jump
.LCB11136:
.L1301:
	ldr	r0, .L1401+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x91
	ldrb	r3, [r0]
	ldr	r1, .L1401+0xc
	ldr	r4, .L1401
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L1302	@cond_branch
	ldr	r0, .L1401+0x14
	add	r0, r2, r0
	mov	r1, #0xd
	strb	r1, [r0]
	ldr	r0, .L1401+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1303	@cond_branch
	ldr	r0, .L1401+0x10
	ldrb	r1, [r4]
	add	r1, r1, r0
	mov	r0, #0x4
	strb	r0, [r1]
	bl	.L1296	@ far jump
.L1402:
	.align	2, 0
.L1401:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	gBitTable
	.word	gBattleCommunication
	.word	gChosenActionByBattler
.L1303:
	ldr	r0, .L1403
	ldrb	r1, [r4]
	add	r1, r1, r0
	mov	r0, #0x3
	strb	r0, [r1]
	bl	.L1296	@ far jump
.L1404:
	.align	2, 0
.L1403:
	.word	gBattleCommunication
.L1302:
	ldr	r1, .L1405
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1307	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1306	@cond_branch
.L1307:
	ldr	r0, .L1405+0x4
	add	r0, r2, r0
	strb	r3, [r0]
	ldr	r1, .L1405+0x8
	ldrb	r0, [r4]
	add	r0, r0, r1
	mov	r1, #0x3
	strb	r1, [r0]
	bl	.L1296	@ far jump
.L1406:
	.align	2, 0
.L1405:
	.word	gBattleMons
	.word	gChosenActionByBattler
	.word	gBattleCommunication
.L1306:
	ldr	r0, .L1407
	ldrb	r1, [r0]
	ldr	r0, .L1407+0x4
	ldrb	r2, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	mov	r0, #0x0
	bl	BtlController_EmitChooseAction
	bl	.L1391	@ far jump
.L1408:
	.align	2, 0
.L1407:
	.word	gChosenActionByBattler
	.word	gBattleBufferB
.L1309:
	ldr	r4, .L1409
	ldr	r1, .L1409+0x4
	ldr	r3, .L1409+0x8
	ldrb	r5, [r3]
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	lsl	r0, r2, #0x4
	mov	r1, #0xf0
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	orr	r0, r0, r2
	lsl	r1, r2, #0x8
	orr	r0, r0, r1
	lsl	r2, r2, #0xc
	orr	r0, r0, r2
	ldr	r1, [r4]
	and	r1, r1, r0
	mov	r8, r3
	cmp	r1, #0
	beq	.LCB11279
	bl	.L1296	@far jump
.LCB11279:
	ldr	r2, .L1409+0xc
	add	r2, r5, r2
	ldr	r1, .L1409+0x10
	lsl	r0, r5, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bls	.LCB11295
	b	.L1311	@long jump
.LCB11295:
	lsl	r0, r0, #0x2
	ldr	r1, .L1409+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1410:
	.align	2, 0
.L1409:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gChosenActionByBattler
	.word	gBattleBufferB
	.word	.L1340
	.align	2, 0
	.align	2, 0
.L1340:
	.word	.L1312
	.word	.L1322
	.word	.L1325
	.word	.L1311
	.word	.L1311
	.word	.L1337
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1339
.L1312:
	bl	AreAllMovesUnusable
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1313	@cond_branch
	ldr	r0, .L1411
	ldr	r3, .L1411+0x4
	ldrb	r1, [r3]
	add	r1, r1, r0
	mov	r4, #0x0
	mov	r0, #0x5
	strb	r0, [r1]
	ldrb	r1, [r3]
	ldr	r2, .L1411+0x8
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0x54
	strb	r4, [r1]
	ldrb	r1, [r3]
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0x84
	mov	r0, #0x3
	strb	r0, [r1]
	ldrb	r1, [r3]
	ldr	r2, [r2]
	add	r2, r1, r2
	ldr	r0, .L1411+0xc
	lsl	r1, r1, #0x9
	add	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2, #0xc]
	bl	.L1293	@ far jump
.L1412:
	.align	2, 0
.L1411:
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleBufferB
.L1313:
	ldr	r3, .L1413
	ldr	r5, .L1413+0x4
	ldrb	r4, [r5]
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r2, [r0, #0x6]
	cmp	r2, #0
	beq	.L1315	@cond_branch
	ldr	r1, .L1413+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r2, [r5]
	ldr	r0, .L1413+0xc
	ldr	r1, [r0]
	add	r1, r2, r1
	add	r1, r1, #0x80
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0xc]
	strb	r0, [r1]
	ldr	r1, .L1413+0x10
	ldrb	r0, [r5]
	add	r0, r0, r1
	mov	r1, #0x3
	strb	r1, [r0]
	bl	.L1293	@ far jump
.L1414:
	.align	2, 0
.L1413:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gChosenMoveByBattler
	.word	gBattleStruct
	.word	gBattleCommunication
.L1315:
	add	r2, sp, #0x4
	ldr	r3, .L1415
	mov	r1, #0x58
	mov	r0, r4
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r2, #0x10]
	ldrb	r0, [r5]
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	strb	r0, [r2, #0x12]
	ldrb	r0, [r5]
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	strb	r0, [r2, #0x13]
	mov	r4, #0x0
	mov	r1, sp
	add	r1, r1, #0xc
	str	r1, [sp, #0x18]
	add	r2, sp, #0x10
	mov	sl, r2
	mov	r8, r3
	add	r7, r5, #0
	mov	r6, #0x58
	mov	r3, #0xc
	add	r3, r3, r8
	mov	r9, r3
	add	r5, sp, #0x4
.L1320:
	lsl	r2, r4, #0x1
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r2, r0
	add	r0, r0, r9
	ldrh	r0, [r0]
	strh	r0, [r5]
	ldr	r0, [sp, #0x18]
	add	r3, r0, r4
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r4, r0
	mov	r1, r8
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r3]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r2, r2, r1
	add	r2, r2, r9
	ldrh	r0, [r2]
	add	r1, r1, r8
	add	r1, r1, #0x3b
	ldrb	r1, [r1]
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	bl	CalculatePPWithBonus
	mov	r2, sl
	add	r1, r2, r4
	strb	r0, [r1]
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1320	@cond_branch
	ldr	r0, .L1415+0x4
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x0
	add	r3, sp, #0x4
	bl	BtlController_EmitChooseMove
	b	.L1328
.L1416:
	.align	2, 0
.L1415:
	.word	gBattleMons
	.word	gBattleTypeFlags
.L1322:
	ldr	r0, .L1417
	ldr	r0, [r0]
	ldr	r1, .L1417+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1323	@cond_branch
	ldr	r1, .L1417+0x8
	mov	r3, r8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1417+0xc
	str	r1, [r0]
	ldr	r0, .L1417+0x10
	ldrb	r1, [r3]
	add	r1, r1, r0
	mov	r3, #0x0
	mov	r0, #0x5
	strb	r0, [r1]
	mov	r0, r8
	ldrb	r1, [r0]
	ldr	r2, .L1417+0x14
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0x54
	strb	r3, [r1]
	mov	r1, r8
	ldrb	r0, [r1]
	b	.L1392
.L1418:
	.align	2, 0
.L1417:
	.word	gBattleTypeFlags
	.word	0x902
	.word	gSelectionBattleScripts
	.word	BattleScript_ActionSelectionItemsCantBeUsed
	.word	gBattleCommunication
	.word	gBattleStruct
.L1323:
	ldr	r2, .L1419
	ldr	r4, .L1419+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x60
	ldr	r1, [r2]
	add	r1, r1, r0
	mov	r0, #0x0
	bl	BtlController_EmitChooseItem
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1311
.L1420:
	.align	2, 0
.L1419:
	.word	gBattleStruct
	.word	gActiveBattler
.L1325:
	ldr	r5, .L1421
	ldrb	r0, [r5]
	ldr	r3, .L1421+0x4
	ldr	r1, [r3]
	add	r1, r0, r1
	add	r1, r1, #0x58
	ldr	r2, .L1421+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r7, .L1421+0xc
	ldrb	r2, [r5]
	mov	r6, #0x58
	mov	r0, r2
	mul	r0, r0, r6
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1421+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1327	@cond_branch
	ldr	r0, .L1421+0x14
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1326	@cond_branch
.L1327:
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldr	r0, [r3]
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x6
	b	.L1393
.L1422:
	.align	2, 0
.L1421:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	0x400e000
	.word	gStatuses3
.L1326:
	str	r1, [sp]
	mov	r0, #0xc
	add	r1, r2, #0
	mov	r2, #0x17
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L1330	@cond_branch
	ldrb	r1, [r5]
	str	r4, [sp]
	mov	r0, #0xc
	mov	r2, #0x47
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L1331	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r1, r0, r7
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1331	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1331	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1a
	bne	.L1330	@cond_branch
.L1331:
	ldr	r5, .L1423
	ldrb	r1, [r5]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xf
	mov	r2, #0x2a
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L1329	@cond_branch
	ldr	r2, .L1423+0x4
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x8
	beq	.L1330	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L1329	@cond_branch
.L1330:
	sub	r1, r4, #0x1
	lsl	r1, r1, #0x4
	mov	r0, #0x4
	orr	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L1423+0x8
	ldrb	r3, [r0]
	ldr	r4, .L1423+0xc
	ldr	r0, .L1423
	ldrb	r0, [r0]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	add	r2, r2, #0x60
	ldr	r0, [r4]
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x6
	bl	BtlController_EmitChoosePokemon
	b	.L1328
.L1424:
	.align	2, 0
.L1423:
	.word	gActiveBattler
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gBattleStruct
.L1329:
	ldr	r0, .L1425
	ldrb	r1, [r0]
	mov	r8, r0
	cmp	r1, #0x2
	bne	.L1333	@cond_branch
	ldr	r0, .L1425+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L1333	@cond_branch
	ldr	r0, .L1425+0x8
	ldr	r3, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x5c
	ldrb	r2, [r0]
	mov	r0, r8
	ldrb	r1, [r0]
	b	.L1394
.L1426:
	.align	2, 0
.L1425:
	.word	gActiveBattler
	.word	gChosenActionByBattler
	.word	gBattleStruct
.L1333:
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0x3
	bne	.L1335	@cond_branch
	ldr	r0, .L1427
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x2
	bne	.L1335	@cond_branch
	ldr	r0, .L1427+0x4
	ldr	r3, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x5d
	ldrb	r2, [r0]
	ldrb	r1, [r1]
.L1394:
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x60
	add	r3, r3, r0
	str	r3, [sp]
	mov	r0, #0x0
	mov	r1, #0x0
.L1393:
	mov	r3, #0x0
	bl	BtlController_EmitChoosePokemon
	b	.L1328
.L1428:
	.align	2, 0
.L1427:
	.word	gChosenActionByBattler
	.word	gBattleStruct
.L1335:
	ldr	r2, .L1429
	ldr	r0, .L1429+0x4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, #0x60
	ldr	r0, [r2]
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x6
	mov	r3, #0x0
	bl	BtlController_EmitChoosePokemon
.L1328:
	ldr	r0, .L1429+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	b	.L1311
.L1430:
	.align	2, 0
.L1429:
	.word	gBattleStruct
	.word	gActiveBattler
.L1337:
	bl	IsPlayerPartyAndPokemonStorageFull
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1311	@cond_branch
	ldr	r1, .L1431
	ldr	r3, .L1431+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1431+0x8
	str	r1, [r0]
	ldr	r0, .L1431+0xc
	ldrb	r1, [r3]
	add	r1, r1, r0
	mov	r4, #0x0
	mov	r0, #0x5
	strb	r0, [r1]
	ldrb	r1, [r3]
	ldr	r2, .L1431+0x10
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0x54
	strb	r4, [r1]
	ldrb	r0, [r3]
	ldr	r1, [r2]
	add	r0, r0, r1
	add	r0, r0, #0x84
	strb	r4, [r0]
	b	.L1293
.L1432:
	.align	2, 0
.L1431:
	.word	gSelectionBattleScripts
	.word	gActiveBattler
	.word	BattleScript_PrintFullBox
	.word	gBattleCommunication
	.word	gBattleStruct
.L1339:
	ldr	r4, .L1433
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r4
	mov	r5, #0x0
	mov	r0, #0x6
	strb	r0, [r1]
	ldrb	r0, [r2]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	strb	r5, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitEndBounceEffect
	mov	r3, r8
	ldrb	r0, [r3]
	bl	MarkBattlerForControllerExec
	b	.L1293
.L1434:
	.align	2, 0
.L1433:
	.word	gBattleCommunication
.L1311:
	ldr	r0, .L1435
	ldr	r0, [r0]
	mov	r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0x8
	bne	.L1342	@cond_branch
	ldr	r0, .L1435+0x4
	ldr	r4, .L1435+0x8
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x3
	bne	.L1342	@cond_branch
	ldr	r0, .L1435+0xc
	bl	BattleScriptExecute
	ldr	r1, .L1435+0x10
	ldrb	r0, [r4]
	add	r0, r0, r1
	b	.L1395
.L1436:
	.align	2, 0
.L1435:
	.word	gBattleTypeFlags
	.word	gBattleBufferB
	.word	gActiveBattler
	.word	BattleScript_PrintCantRunFromTrainer
	.word	gBattleCommunication
.L1342:
	bl	IsRunningFromBattleImpossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1344	@cond_branch
	ldr	r0, .L1437
	ldr	r4, .L1437+0x4
	ldrb	r2, [r4]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x3
	bne	.L1344	@cond_branch
	ldr	r1, .L1437+0x8
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r1, .L1437+0xc
	str	r1, [r0]
	ldr	r0, .L1437+0x10
	ldrb	r1, [r4]
	add	r1, r1, r0
	mov	r3, #0x0
	mov	r0, #0x5
	strb	r0, [r1]
	ldrb	r1, [r4]
	ldr	r2, .L1437+0x14
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0x54
	strb	r3, [r1]
	ldrb	r0, [r4]
.L1392:
	ldr	r1, [r2]
	add	r0, r0, r1
	add	r0, r0, #0x84
	strb	r3, [r0]
	b	.L1293
.L1438:
	.align	2, 0
.L1437:
	.word	gBattleBufferB
	.word	gActiveBattler
	.word	gSelectionBattleScripts
	.word	BattleScript_PrintCantEscapeFromBattle
	.word	gBattleCommunication
	.word	gBattleStruct
.L1344:
	ldr	r2, .L1439
	ldr	r0, .L1439+0x4
	ldrb	r1, [r0]
	add	r1, r1, r2
	b	.L1396
.L1440:
	.align	2, 0
.L1439:
	.word	gBattleCommunication
	.word	gActiveBattler
.L1346:
	ldr	r4, .L1441
	ldr	r1, .L1441+0x4
	ldr	r3, .L1441+0x8
	ldrb	r5, [r3]
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	lsl	r0, r2, #0x4
	mov	r1, #0xf0
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	orr	r0, r0, r2
	lsl	r1, r2, #0x8
	orr	r0, r0, r1
	lsl	r2, r2, #0xc
	orr	r0, r0, r2
	ldr	r1, [r4]
	and	r1, r1, r0
	mov	r8, r3
	cmp	r1, #0
	beq	.LCB12075
	b	.L1296	@long jump
.LCB12075:
	ldr	r1, .L1441+0xc
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r3, r1, #0
	cmp	r0, #0x9
	bls	.LCB12082
	b	.L1296	@long jump
.LCB12082:
	lsl	r0, r0, #0x2
	ldr	r1, .L1441+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1442:
	.align	2, 0
.L1441:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gChosenActionByBattler
	.word	.L1372
	.align	2, 0
	.align	2, 0
.L1372:
	.word	.L1349
	.word	.L1358
	.word	.L1361
	.word	.L1365
	.word	.L1366
	.word	.L1367
	.word	.L1369
	.word	.L1369
	.word	.L1370
	.word	.L1371
.L1349:
	ldr	r0, .L1443
	mov	r1, r8
	ldrb	r4, [r1]
	lsl	r1, r4, #0x9
	add	r2, r0, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r7, r0, #0
	cmp	r1, #0x9
	bgt	.L1352	@cond_branch
	cmp	r1, #0x3
	blt	.L1352	@cond_branch
	add	r0, r4, r3
	strb	r1, [r0]
	b	.L1293
.L1444:
	.align	2, 0
.L1443:
	.word	gBattleBufferB
.L1352:
	add	r3, r7, #0
	mov	r5, r8
	ldrb	r4, [r5]
	lsl	r1, r4, #0x9
	add	r6, r3, #0x2
	add	r0, r1, r6
	ldrb	r2, [r0]
	add	r3, r3, #0x3
	mov	r9, r3
	add	r1, r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldr	r0, .L1445
	cmp	r2, r0
	bne	.L1353	@cond_branch
	ldr	r0, .L1445+0x4
	add	r0, r4, r0
	b	.L1395
.L1446:
	.align	2, 0
.L1445:
	.word	0xffff
	.word	gBattleCommunication
.L1353:
	bl	TrySetCantSelectMoveBattleScript
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1355	@cond_branch
	ldr	r0, .L1447
	ldrb	r1, [r5]
	add	r1, r1, r0
	mov	r3, #0x0
	mov	r0, #0x5
	strb	r0, [r1]
	ldrb	r1, [r5]
	ldr	r2, .L1447+0x4
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0x54
	strb	r3, [r1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r7, #0x1
	add	r0, r0, r1
	strb	r3, [r0]
	ldrb	r1, [r5]
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0x84
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L1293
.L1448:
	.align	2, 0
.L1447:
	.word	gBattleCommunication
	.word	gBattleStruct
.L1355:
	mov	r2, r8
	ldrb	r0, [r2]
	ldr	r4, .L1449
	ldr	r1, [r4]
	add	r1, r0, r1
	add	r1, r1, #0x80
	lsl	r0, r0, #0x9
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L1449+0x4
	ldrb	r2, [r2]
	lsl	r5, r2, #0x1
	add	r5, r5, r0
	ldr	r3, .L1449+0x8
	ldr	r4, [r4]
	add	r0, r2, r4
	add	r0, r0, #0x80
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r5]
	mov	r3, r8
	ldrb	r0, [r3]
	add	r4, r0, r4
	lsl	r0, r0, #0x9
	add	r0, r0, r9
	ldrb	r0, [r0]
	strb	r0, [r4, #0xc]
	ldr	r0, .L1449+0xc
	ldrb	r1, [r3]
	b	.L1397
.L1450:
	.align	2, 0
.L1449:
	.word	gBattleStruct
	.word	gChosenMoveByBattler
	.word	gBattleMons
	.word	gBattleCommunication
.L1358:
	ldr	r2, .L1451
	ldr	r5, .L1451+0x4
	ldrb	r4, [r5]
	lsl	r1, r4, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	cmp	r3, #0
	bne	.LCB12264
	b	.L1398	@long jump
.LCB12264:
	ldr	r0, .L1451+0x8
	strh	r3, [r0]
	ldr	r0, .L1451+0xc
	ldrb	r1, [r5]
	b	.L1397
.L1452:
	.align	2, 0
.L1451:
	.word	gBattleBufferB
	.word	gActiveBattler
	.word	gLastUsedItem
	.word	gBattleCommunication
.L1361:
	ldr	r6, .L1453
	ldr	r7, .L1453+0x4
	ldrb	r2, [r7]
	lsl	r0, r2, #0x9
	add	r1, r6, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	cmp	r1, #0x6
	bne	.L1362	@cond_branch
	ldr	r0, .L1453+0x8
	add	r0, r2, r0
.L1395:
	mov	r1, #0x0
	strb	r1, [r0]
	b	.L1296
.L1454:
	.align	2, 0
.L1453:
	.word	gBattleBufferB
	.word	gActiveBattler
	.word	gBattleCommunication
.L1362:
	ldr	r0, .L1455
	mov	ip, r0
	ldr	r0, [r0]
	add	r0, r2, r0
	add	r0, r0, #0x5c
	strb	r1, [r0]
	ldr	r0, .L1455+0x4
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1364	@cond_branch
	ldrb	r0, [r7]
	mov	r1, ip
	ldr	r2, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r2, [r1]
	mov	r0, #0xf
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r2, ip
	ldr	r1, [r2]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	add	r2, r2, r1
	add	r2, r2, #0x60
	lsl	r0, r0, #0x9
	add	r5, r6, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r3, #0xf0
	add	r0, r3, #0
	and	r0, r0, r1
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r1, [r7]
	mov	r0, ip
	ldr	r2, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x61
	lsl	r1, r1, #0x9
	add	r6, r6, #0x3
	add	r1, r1, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r0, [r7]
	mov	r4, #0x2
	eor	r0, r0, r4
	mov	r1, ip
	ldr	r2, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r2, [r1]
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	eor	r0, r0, r4
	mov	r1, ip
	ldr	r2, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r0, r0, r5
	ldrb	r0, [r0]
	and	r3, r3, r0
	lsr	r3, r3, #0x4
	ldrb	r0, [r1]
	orr	r3, r3, r0
	strb	r3, [r1]
	ldrb	r0, [r7]
	eor	r4, r4, r0
	mov	r2, ip
	ldr	r0, [r2]
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	add	r1, r1, r0
	add	r1, r1, #0x62
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
.L1364:
	ldr	r0, .L1455+0x8
	ldrb	r1, [r7]
	b	.L1397
.L1456:
	.align	2, 0
.L1455:
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L1365:
	ldr	r2, .L1457
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1457+0x4
	ldr	r0, .L1457+0x8
	ldrb	r1, [r0]
	add	r1, r1, r2
	b	.L1396
.L1458:
	.align	2, 0
.L1457:
	.word	gHitMarker
	.word	gBattleCommunication
	.word	gActiveBattler
.L1366:
	ldr	r2, .L1459
	ldr	r0, .L1459+0x4
	ldrb	r1, [r0]
	add	r1, r1, r2
	b	.L1396
.L1460:
	.align	2, 0
.L1459:
	.word	gBattleCommunication
	.word	gActiveBattler
.L1367:
	ldr	r2, .L1461
	ldr	r0, .L1461+0x4
	ldrb	r1, [r0]
	add	r1, r1, r2
	b	.L1396
.L1462:
	.align	2, 0
.L1461:
	.word	gBattleCommunication
	.word	gActiveBattler
.L1369:
	ldr	r2, .L1463
	ldr	r0, .L1463+0x4
	ldrb	r1, [r0]
	add	r1, r1, r2
	b	.L1396
.L1464:
	.align	2, 0
.L1463:
	.word	gBattleCommunication
	.word	gActiveBattler
.L1370:
	ldr	r2, .L1465
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1465+0x4
	ldr	r0, .L1465+0x8
	ldrb	r1, [r0]
	add	r1, r1, r2
	b	.L1396
.L1466:
	.align	2, 0
.L1465:
	.word	gHitMarker
	.word	gBattleCommunication
	.word	gActiveBattler
.L1371:
	ldr	r2, .L1467
	ldr	r0, .L1467+0x4
	ldrb	r1, [r0]
	add	r1, r1, r2
	b	.L1396
.L1468:
	.align	2, 0
.L1467:
	.word	gBattleCommunication
	.word	gActiveBattler
.L1374:
	ldr	r3, .L1469
	ldr	r4, .L1469+0x4
	ldr	r0, .L1469+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r2, [r0]
	lsl	r1, r2, #0x4
	mov	r0, #0xf0
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	orr	r1, r1, r2
	lsl	r0, r2, #0x8
	orr	r1, r1, r0
	lsl	r2, r2, #0xc
	orr	r1, r1, r2
	ldr	r0, [r3]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB12547
	b	.L1296	@long jump
.LCB12547:
	ldr	r0, .L1469+0xc
	ldr	r0, [r0]
	mov	r1, #0x41
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L1377	@cond_branch
	mov	r1, #0x2
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1377	@cond_branch
	add	r0, r5, #0
	eor	r0, r0, r1
	bl	GetBattlerAtPosition
	ldr	r1, .L1469+0x10
	ldr	r1, [r1]
	add	r1, r1, #0x91
	ldrb	r1, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1376	@cond_branch
.L1377:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	b	.L1378
.L1470:
	.align	2, 0
.L1469:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L1376:
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitLinkStandbyMsg
.L1378:
	ldr	r4, .L1471
.L1391:
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, .L1471+0x4
	ldrb	r1, [r4]
.L1397:
	add	r1, r1, r0
.L1396:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L1296
.L1472:
	.align	2, 0
.L1471:
	.word	gActiveBattler
	.word	gBattleCommunication
.L1379:
	ldr	r3, .L1473
	ldr	r1, .L1473+0x4
	ldr	r0, .L1473+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	lsl	r1, r2, #0x4
	mov	r0, #0xf0
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	orr	r1, r1, r2
	lsl	r0, r2, #0x8
	orr	r1, r1, r0
	lsl	r2, r2, #0xc
	orr	r1, r1, r2
	ldr	r0, [r3]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1296	@cond_branch
	ldr	r1, .L1473+0xc
	ldrb	r0, [r1, #0x4]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L1296
.L1474:
	.align	2, 0
.L1473:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleCommunication
.L1381:
	ldr	r5, .L1475
	ldrb	r2, [r5]
	ldr	r0, .L1475+0x4
	ldr	r0, [r0]
	add	r1, r2, r0
	add	r0, r1, #0
	add	r0, r0, #0x54
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1382	@cond_branch
	ldr	r0, .L1475+0x8
	add	r0, r2, r0
	add	r1, r1, #0x84
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L1296
.L1476:
	.align	2, 0
.L1475:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleCommunication
.L1382:
	ldr	r0, .L1477
	strb	r2, [r0]
	ldr	r7, .L1477+0x4
	ldr	r6, .L1477+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r4, [r0]
	str	r4, [r7]
	ldr	r3, .L1477+0xc
	ldr	r1, .L1477+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	lsl	r1, r2, #0x4
	mov	r0, #0xf0
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	orr	r1, r1, r2
	lsl	r0, r2, #0x8
	orr	r1, r1, r0
	lsl	r2, r2, #0xc
	orr	r1, r1, r2
	ldr	r0, [r3]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1384	@cond_branch
	ldr	r0, .L1477+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
.L1384:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r7]
	str	r1, [r0]
	b	.L1296
.L1478:
	.align	2, 0
.L1477:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gSelectionBattleScripts
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gBattleScriptingCommandsTable
.L1385:
	ldr	r3, .L1479
	ldr	r1, .L1479+0x4
	ldr	r0, .L1479+0x8
	ldrb	r4, [r0]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	lsl	r0, r2, #0x4
	mov	r1, #0xf0
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	orr	r0, r0, r2
	lsl	r1, r2, #0x8
	orr	r0, r0, r1
	lsl	r2, r2, #0xc
	orr	r0, r0, r2
	ldr	r3, [r3]
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L1296	@cond_branch
.L1398:
	ldr	r0, .L1479+0xc
	add	r0, r4, r0
	strb	r3, [r0]
.L1296:
	ldr	r0, .L1479+0x8
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L1479+0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r0, #0
	ldrb	r3, [r2]
	cmp	r1, r3
	bcs	.LCB12789
	bl	.L1297	@far jump
.LCB12789:
.L1295:
	ldr	r0, .L1479+0xc
	ldrb	r0, [r0, #0x4]
	ldrb	r2, [r2]
	cmp	r0, r2
	bne	.L1293	@cond_branch
	ldr	r1, .L1479+0x14
	ldr	r0, .L1479+0x18
	str	r0, [r1]
.L1293:
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1480:
	.align	2, 0
.L1479:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleCommunication
	.word	gBattlersCount
	.word	gBattleMainFunc
	.word	SetActionsAndBattlersTurnOrder
.Lfe74:
	.size	 HandleTurnActionSelectionState,.Lfe74-HandleTurnActionSelectionState
	.align	2, 0
	.globl	SwapTurnOrder
	.type	 SwapTurnOrder,function
	.thumb_func
SwapTurnOrder:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1482
	add	r4, r0, r2
	ldrb	r5, [r4]
	add	r2, r1, r2
	ldrb	r3, [r2]
	strb	r3, [r4]
	strb	r5, [r2]
	ldr	r2, .L1482+0x4
	add	r0, r0, r2
	ldrb	r5, [r0]
	add	r1, r1, r2
	ldrb	r2, [r1]
	strb	r2, [r0]
	strb	r5, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1483:
	.align	2, 0
.L1482:
	.word	gActionsByTurnOrder
	.word	gBattlerByTurnOrder
.Lfe75:
	.size	 SwapTurnOrder,.Lfe75-SwapTurnOrder
	.align	2, 0
	.globl	GetWhoStrikesFirst
	.type	 GetWhoStrikesFirst,function
	.thumb_func
GetWhoStrikesFirst:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1485	@cond_branch
	ldr	r1, [sp, #0x8]
	str	r1, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1485	@cond_branch
	ldr	r1, .L1531
	mov	r0, #0x58
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r3, [r0]
	cmp	r3, #0x21
	bne	.L1488	@cond_branch
	ldr	r0, .L1531+0x4
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1487	@cond_branch
.L1488:
	cmp	r3, #0x22
	bne	.L1486	@cond_branch
	ldr	r0, .L1531+0x4
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1486	@cond_branch
.L1487:
	mov	r3, #0x2
	b	.L1489
.L1532:
	.align	2, 0
.L1531:
	.word	gBattleMons
	.word	gBattleWeather
.L1486:
	mov	r3, #0x1
.L1489:
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r2, .L1533
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r2, [r0]
	cmp	r2, #0x21
	bne	.L1492	@cond_branch
	ldr	r0, .L1533+0x4
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1491	@cond_branch
.L1492:
	cmp	r2, #0x22
	bne	.L1529	@cond_branch
	ldr	r0, .L1533+0x4
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1529	@cond_branch
.L1491:
	mov	r7, #0x2
	b	.L1494
.L1534:
	.align	2, 0
.L1533:
	.word	gBattleMons
	.word	gBattleWeather
.L1485:
	mov	r3, #0x1
.L1529:
	mov	r7, #0x1
.L1494:
	ldr	r1, .L1535
	mov	r0, #0x58
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r4, r0, r1
	ldrh	r0, [r4, #0x6]
	mul	r3, r3, r0
	ldr	r2, .L1535+0x4
	mov	r1, #0x1b
	ldrsb	r1, [r4, r1]
	lsl	r1, r1, #0x1
	add	r0, r1, r2
	ldrb	r0, [r0]
	mul	r0, r0, r3
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	__divsi3
	mov	r8, r0
	ldrh	r0, [r4, #0x2e]
	cmp	r0, #0xaf
	bne	.L1495	@cond_branch
	ldr	r1, .L1535+0x8
	mov	r3, r9
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r6, [r0, #0x7]
	ldrb	r5, [r0, #0x1a]
	b	.L1496
.L1536:
	.align	2, 0
.L1535:
	.word	gBattleMons
	.word	gStatStageRatios
	.word	gEnigmaBerries
.L1495:
	ldrh	r0, [r4, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrh	r0, [r4, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L1496:
	ldr	r0, .L1537
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1497	@cond_branch
	ldr	r0, .L1537+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1497	@cond_branch
	mov	r0, r9
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1497	@cond_branch
	mov	r0, #0x6e
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	mov	r1, #0x64
	bl	__udivsi3
	mov	r8, r0
.L1497:
	cmp	r6, #0x18
	bne	.L1498	@cond_branch
	mov	r2, r8
	lsr	r2, r2, #0x1
	mov	r8, r2
.L1498:
	ldr	r1, .L1537+0x8
	mov	r0, #0x58
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1499	@cond_branch
	mov	r0, r8
	lsr	r0, r0, #0x2
	mov	r8, r0
.L1499:
	cmp	r6, #0x1a
	bne	.L1500	@cond_branch
	ldr	r0, .L1537+0xc
	ldrh	r4, [r0]
	lsl	r0, r5, #0x10
	sub	r0, r0, r5
	mov	r1, #0x64
	bl	__divsi3
	cmp	r4, r0
	bge	.L1500	@cond_branch
	mov	r1, #0x1
	neg	r1, r1
	mov	r8, r1
.L1500:
	ldr	r1, .L1537+0x8
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r4, r0, r1
	ldrh	r0, [r4, #0x6]
	mov	r3, r0
	mul	r3, r3, r7
	ldr	r2, .L1537+0x10
	mov	r1, #0x1b
	ldrsb	r1, [r4, r1]
	lsl	r1, r1, #0x1
	add	r0, r1, r2
	ldrb	r0, [r0]
	mul	r0, r0, r3
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	__divsi3
	add	r7, r0, #0
	ldrh	r0, [r4, #0x2e]
	cmp	r0, #0xaf
	bne	.L1501	@cond_branch
	ldr	r1, .L1537+0x14
	mov	r3, sl
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r6, [r0, #0x7]
	ldrb	r5, [r0, #0x1a]
	b	.L1502
.L1538:
	.align	2, 0
.L1537:
	.word	gBattleTypeFlags
	.word	0x822
	.word	gBattleMons
	.word	gRandomTurnNumber
	.word	gStatStageRatios
	.word	gEnigmaBerries
.L1501:
	ldrh	r0, [r4, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrh	r0, [r4, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L1502:
	ldr	r0, .L1539
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1503	@cond_branch
	ldr	r0, .L1539+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1503	@cond_branch
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1503	@cond_branch
	mov	r0, #0x6e
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__udivsi3
	add	r7, r0, #0
.L1503:
	cmp	r6, #0x18
	bne	.L1504	@cond_branch
	lsr	r7, r7, #0x1
.L1504:
	ldr	r2, .L1539+0x8
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1505	@cond_branch
	lsr	r7, r7, #0x2
.L1505:
	cmp	r6, #0x1a
	bne	.L1506	@cond_branch
	ldr	r0, .L1539+0xc
	ldrh	r4, [r0]
	lsl	r0, r5, #0x10
	sub	r0, r0, r5
	mov	r1, #0x64
	bl	__divsi3
	cmp	r4, r0
	bge	.L1506	@cond_branch
	mov	r7, #0x1
	neg	r7, r7
.L1506:
	ldr	r2, [sp, #0x4]
	cmp	r2, #0
	beq	.L1507	@cond_branch
	mov	r3, #0x0
	b	.L1513
.L1540:
	.align	2, 0
.L1539:
	.word	gBattleTypeFlags
	.word	0x822
	.word	gBattleMons
	.word	gRandomTurnNumber
.L1507:
	ldr	r0, .L1541
	mov	r3, r9
	add	r1, r3, r0
	ldrb	r1, [r1]
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L1509	@cond_branch
	ldr	r0, .L1541+0x4
	lsl	r1, r3, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1510	@cond_branch
	mov	r3, #0xa5
	b	.L1512
.L1542:
	.align	2, 0
.L1541:
	.word	gChosenActionByBattler
	.word	gProtectStructs
.L1510:
	ldr	r0, .L1543
	ldr	r0, [r0]
	add	r0, r0, r9
	add	r0, r0, #0x80
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x58
	mov	r3, r9
	mul	r3, r3, r1
	add	r1, r3, #0
	add	r0, r0, r1
	ldr	r1, .L1543+0x4
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r3, [r0]
	b	.L1512
.L1544:
	.align	2, 0
.L1543:
	.word	gBattleStruct
	.word	gBattleMons
.L1509:
	mov	r3, #0x0
.L1512:
	mov	r1, sl
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1513	@cond_branch
	ldr	r0, .L1545
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1514	@cond_branch
	mov	r2, #0xa5
	b	.L1508
.L1546:
	.align	2, 0
.L1545:
	.word	gProtectStructs
.L1514:
	ldr	r0, .L1547
	ldr	r0, [r0]
	add	r0, r0, sl
	add	r0, r0, #0x80
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x58
	mov	r2, sl
	mul	r2, r2, r1
	add	r1, r2, #0
	add	r0, r0, r1
	ldr	r1, .L1547+0x4
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r2, [r0]
	b	.L1508
.L1548:
	.align	2, 0
.L1547:
	.word	gBattleStruct
	.word	gBattleMons
.L1513:
	mov	r2, #0x0
.L1508:
	ldr	r4, .L1549
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x7
	ldrsb	r1, [r0, r1]
	lsl	r3, r2, #0x1
	cmp	r1, #0
	bne	.L1518	@cond_branch
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x7]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L1517	@cond_branch
.L1518:
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x7]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r1, r0
	bne	.L1519	@cond_branch
	cmp	r8, r7
	bne	.L1520	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1520	@cond_branch
	mov	r3, #0x2
	b	.L1530
.L1550:
	.align	2, 0
.L1549:
	.word	gBattleMoves
.L1520:
	cmp	r8, r7
	bcs	.L1525	@cond_branch
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	b	.L1525
.L1519:
	cmp	r1, r0
	bge	.L1525	@cond_branch
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	b	.L1525
.L1517:
	cmp	r8, r7
	bne	.L1526	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1526	@cond_branch
	mov	r2, #0x2
	str	r2, [sp, #0x8]
	b	.L1525
.L1526:
	cmp	r8, r7
	bcs	.L1525	@cond_branch
	mov	r3, #0x1
.L1530:
	str	r3, [sp, #0x8]
.L1525:
	ldr	r0, [sp, #0x8]
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 GetWhoStrikesFirst,.Lfe76-GetWhoStrikesFirst
	.align	2, 0
	.type	 SetActionsAndBattlersTurnOrder,function
	.thumb_func
SetActionsAndBattlersTurnOrder:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r3, #0x0
	ldr	r0, .L1604
	ldr	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1552	@cond_branch
	ldr	r0, .L1604+0x4
	strb	r3, [r0]
	ldr	r4, .L1604+0x8
	mov	r8, r0
	ldrb	r0, [r4]
	cmp	r3, r0
	bcc	.LCB13509
	b	.L1558	@long jump
.LCB13509:
	ldr	r7, .L1604+0xc
	ldr	r6, .L1604+0x10
	mov	r2, r8
	ldr	r5, .L1604+0x14
.L1556:
	add	r1, r3, r7
	ldrb	r0, [r2]
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r3, r5
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r3, r3, #0x1
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4]
	cmp	r0, r1
	bcc	.L1556	@cond_branch
	b	.L1558
.L1605:
	.align	2, 0
.L1604:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gActionsByTurnOrder
	.word	gChosenActionByBattler
	.word	gBattlerByTurnOrder
.L1552:
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1559	@cond_branch
	ldr	r0, .L1606
	strb	r3, [r0]
	ldr	r1, .L1606+0x4
	mov	r8, r0
	add	r2, r1, #0
	ldrb	r2, [r2]
	cmp	r3, r2
	bcs	.L1566	@cond_branch
	ldr	r0, .L1606+0x8
	ldrb	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0x3
	beq	.L1601	@cond_branch
.L1562:
	mov	r7, r8
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	strb	r0, [r7]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1606+0x4
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L1566	@cond_branch
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.L1562	@cond_branch
	b	.L1601
.L1607:
	.align	2, 0
.L1606:
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gChosenActionByBattler
.L1559:
	ldr	r0, .L1608
	ldrb	r0, [r0]
	ldr	r2, .L1608+0x4
	mov	r8, r2
	cmp	r0, #0x3
	bne	.L1566	@cond_branch
	strb	r3, [r2]
.L1601:
	mov	r3, #0x5
.L1566:
	cmp	r3, #0x5
	bne	.L1568	@cond_branch
	ldr	r6, .L1608+0x8
	ldr	r1, .L1608
	mov	r3, r8
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r6]
	ldr	r2, .L1608+0xc
	ldrb	r0, [r3]
	strb	r0, [r2]
	mov	r3, #0x1
	mov	r5, #0x0
	add	r4, r1, #0
	ldr	r7, .L1608+0x10
	mov	sl, r7
	ldr	r0, .L1608+0x14
	mov	ip, r0
	ldr	r1, .L1608+0x18
	mov	r9, r1
	ldr	r7, .L1608+0x1c
	ldrb	r7, [r7]
	cmp	r5, r7
	bge	.L1570	@cond_branch
	add	r7, r6, #0
	add	r6, r4, #0
	add	r4, r2, #0
	ldr	r2, .L1608+0x1c
.L1572:
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L1571	@cond_branch
	add	r1, r3, r7
	add	r0, r5, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, r4
	strb	r5, [r0]
	add	r3, r3, #0x1
.L1571:
	add	r5, r5, #0x1
	ldrb	r1, [r2]
	cmp	r5, r1
	blt	.L1572	@cond_branch
.L1570:
	mov	r2, ip
	mov	r3, sl
	str	r2, [r3]
	mov	r7, r9
	ldr	r0, [r7]
	b	.L1602
.L1609:
	.align	2, 0
.L1608:
	.word	gChosenActionByBattler
	.word	gActiveBattler
	.word	gActionsByTurnOrder
	.word	gBattlerByTurnOrder
	.word	gBattleMainFunc
	.word	CheckFocusPunch_ClearVarsBeforeTurnStarts
	.word	gBattleStruct
	.word	gBattlersCount
.L1568:
	mov	r0, #0x0
	mov	r1, r8
	strb	r0, [r1]
	ldr	r2, .L1610
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L1577	@cond_branch
	ldr	r6, .L1610+0x4
	mov	r2, r8
	ldr	r5, .L1610+0x8
	ldr	r4, .L1610+0xc
.L1579:
	ldrb	r0, [r2]
	add	r0, r0, r6
	ldrb	r1, [r0]
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1578	@cond_branch
	add	r0, r3, r5
	strb	r1, [r0]
	add	r1, r3, r4
	mov	r7, r8
	ldrb	r0, [r7]
	strb	r0, [r1]
	add	r3, r3, #0x1
.L1578:
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1610
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1579	@cond_branch
.L1577:
	mov	r0, #0x0
	mov	r2, r8
	strb	r0, [r2]
	ldr	r7, .L1610
	ldrb	r0, [r7]
	cmp	r0, #0
	beq	.L1583	@cond_branch
	ldr	r6, .L1610+0x4
	ldr	r5, .L1610+0x8
	ldr	r4, .L1610+0xc
.L1585:
	ldrb	r0, [r2]
	add	r0, r0, r6
	ldrb	r1, [r0]
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L1584	@cond_branch
	add	r0, r3, r5
	strb	r1, [r0]
	add	r1, r3, r4
	mov	r7, r8
	ldrb	r0, [r7]
	strb	r0, [r1]
	add	r3, r3, #0x1
.L1584:
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1610
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1585	@cond_branch
.L1583:
	mov	r5, #0x0
	b	.L1603
.L1611:
	.align	2, 0
.L1610:
	.word	gBattlersCount
	.word	gChosenActionByBattler
	.word	gActionsByTurnOrder
	.word	gBattlerByTurnOrder
.L1591:
	add	r4, r5, #0x1
	add	r7, r4, #0
	ldrb	r1, [r1]
	cmp	r7, r1
	bge	.L1590	@cond_branch
	ldr	r6, .L1612
	lsl	r2, r5, #0x18
	mov	r8, r2
.L1595:
	ldr	r0, .L1612+0x4
	add	r1, r5, r0
	ldrb	r3, [r1]
	add	r0, r4, r0
	ldrb	r1, [r0]
	add	r0, r5, r6
	ldrb	r2, [r0]
	cmp	r2, #0x1
	beq	.L1594	@cond_branch
	add	r0, r4, r6
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1594	@cond_branch
	cmp	r2, #0x2
	beq	.L1594	@cond_branch
	cmp	r0, #0x2
	beq	.L1594	@cond_branch
	add	r0, r3, #0
	mov	r2, #0x0
	bl	GetWhoStrikesFirst
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1594	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r3, r8
	lsr	r0, r3, #0x18
	bl	SwapTurnOrder
.L1594:
	add	r4, r4, #0x1
	ldr	r0, .L1612+0x8
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L1595	@cond_branch
.L1590:
	add	r5, r7, #0
.L1603:
	ldr	r1, .L1612+0x8
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	cmp	r5, r0
	blt	.L1591	@cond_branch
.L1558:
	ldr	r1, .L1612+0xc
	ldr	r0, .L1612+0x10
	str	r0, [r1]
	ldr	r0, .L1612+0x14
	ldr	r0, [r0]
.L1602:
	add	r0, r0, #0x48
	mov	r1, #0x0
	strb	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1613:
	.align	2, 0
.L1612:
	.word	gActionsByTurnOrder
	.word	gBattlerByTurnOrder
	.word	gBattlersCount
	.word	gBattleMainFunc
	.word	CheckFocusPunch_ClearVarsBeforeTurnStarts
	.word	gBattleStruct
.Lfe77:
	.size	 SetActionsAndBattlersTurnOrder,.Lfe77-SetActionsAndBattlersTurnOrder
	.align	2, 0
	.type	 TurnValuesCleanUp,function
	.thumb_func
TurnValuesCleanUp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L1631
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1631+0x4
	ldrb	r2, [r0]
	add	r5, r1, #0
	cmp	r2, #0
	beq	.L1616	@cond_branch
	ldr	r7, .L1631+0x8
	add	r6, r5, #0
	ldr	r0, .L1631+0xc
	mov	ip, r0
	ldr	r1, .L1631+0x10
	mov	r8, r1
	mov	sl, r8
.L1618:
	mov	r2, r9
	cmp	r2, #0
	beq	.L1619	@cond_branch
	ldrb	r1, [r6]
	lsl	r1, r1, #0x4
	add	r1, r1, r7
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x4
	add	r1, r1, r7
	ldrb	r2, [r1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	b	.L1620
.L1632:
	.align	2, 0
.L1631:
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gProtectStructs
	.word	gBattleMons+0x50
	.word	gDisableStructs
.L1619:
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r2, r0, r7
	mov	r1, #0x0
	mov	r4, sl
	mov	r3, #0x0
.L1624:
	add	r0, r2, r1
	strb	r3, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0xf
	bls	.L1624	@cond_branch
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r4
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0
	beq	.L1626	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x16]
.L1626:
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r4
	ldrb	r0, [r1, #0x19]
	cmp	r0, #0
	beq	.L1620	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x19]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0
	bne	.L1620	@cond_branch
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r2, r2, ip
	ldr	r0, [r2]
	ldr	r1, .L1633
	and	r0, r0, r1
	str	r0, [r2]
.L1620:
	ldrb	r2, [r5]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	bne	.L1617	@cond_branch
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r2, r2, ip
	ldr	r0, [r2]
	ldr	r1, .L1633+0x4
	and	r0, r0, r1
	str	r0, [r2]
.L1617:
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1633+0x8
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1618	@cond_branch
.L1616:
	mov	r0, #0x0
	ldr	r2, .L1633+0xc
	strb	r0, [r2, #0x8]
	strb	r0, [r2, #0x14]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1634:
	.align	2, 0
.L1633:
	.word	-0x400001
	.word	-0x1000001
	.word	gBattlersCount
	.word	gSideTimers
.Lfe78:
	.size	 TurnValuesCleanUp,.Lfe78-TurnValuesCleanUp
	.align	2, 0
	.type	 SpecialStatusesClear,function
	.thumb_func
SpecialStatusesClear:
	push	{r4, r5, r6, lr}
	ldr	r2, .L1646
	mov	r0, #0x0
	strb	r0, [r2]
	ldr	r0, .L1646+0x4
	ldrb	r1, [r0]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L1637	@cond_branch
	add	r3, r2, #0
	mov	r4, #0x0
	ldr	r5, .L1646+0x8
.L1639:
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r5
	mov	r1, #0x0
.L1643:
	add	r0, r2, r1
	strb	r4, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x13
	bls	.L1643	@cond_branch
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r6]
	cmp	r0, r1
	bcc	.L1639	@cond_branch
.L1637:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1647:
	.align	2, 0
.L1646:
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gSpecialStatuses
.Lfe79:
	.size	 SpecialStatusesClear,.Lfe79-SpecialStatusesClear
	.align	2, 0
	.type	 CheckFocusPunch_ClearVarsBeforeTurnStarts,function
	.thumb_func
CheckFocusPunch_ClearVarsBeforeTurnStarts:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1655
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1649	@cond_branch
	ldr	r2, .L1655+0x4
	ldr	r0, [r2]
	add	r0, r0, #0x48
	ldr	r1, .L1655+0x8
	ldrb	r0, [r0]
	mov	ip, r2
	add	r6, r1, #0
	ldrb	r1, [r6]
	cmp	r0, r1
	bcs	.L1649	@cond_branch
	ldr	r5, .L1655+0xc
	ldr	r4, .L1655+0x10
	mov	r7, #0x84
	lsl	r7, r7, #0x1
.L1652:
	ldr	r1, [r2]
	add	r1, r1, #0x48
	ldrb	r0, [r1]
	strb	r0, [r4]
	strb	r0, [r5]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L1655+0x14
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r7
	bne	.L1650	@cond_branch
	ldr	r1, .L1655+0x18
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1650	@cond_branch
	ldr	r2, .L1655+0x1c
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x18]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L1650	@cond_branch
	ldr	r0, .L1655+0x20
	lsl	r1, r3, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1650	@cond_branch
	ldr	r0, .L1655+0x24
	bl	BattleScriptExecute
	b	.L1648
.L1656:
	.align	2, 0
.L1655:
	.word	gHitMarker
	.word	gBattleStruct
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gChosenMoveByBattler
	.word	gBattleMons
	.word	gDisableStructs
	.word	gProtectStructs
	.word	BattleScript_FocusPunchSetUp
.L1650:
	mov	r2, ip
	ldr	r0, [r2]
	add	r0, r0, #0x48
	ldrb	r0, [r0]
	ldrb	r1, [r6]
	cmp	r0, r1
	bcc	.L1652	@cond_branch
.L1649:
	bl	TryClearRageStatuses
	ldr	r1, .L1657
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1657+0x4
	ldr	r0, .L1657+0x8
	mov	r3, #0x0
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L1657+0xc
	mov	r2, #0x0
	strh	r3, [r0]
	ldr	r0, .L1657+0x10
	ldr	r0, [r0]
	strb	r2, [r0, #0x13]
	ldr	r1, .L1657+0x14
	ldr	r0, .L1657+0x18
	str	r0, [r1]
	ldr	r0, .L1657+0x1c
	strb	r2, [r0, #0x3]
	strb	r2, [r0, #0x4]
	ldr	r0, .L1657+0x20
	strb	r2, [r0, #0x16]
	ldr	r0, .L1657+0x24
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0x20
	strb	r2, [r0]
.L1648:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1658:
	.align	2, 0
.L1657:
	.word	gCurrentTurnActionNumber
	.word	gCurrentActionFuncId
	.word	gActionsByTurnOrder
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleMainFunc
	.word	RunTurnActionsFunctions
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gBattleResources
.Lfe80:
	.size	 CheckFocusPunch_ClearVarsBeforeTurnStarts,.Lfe80-CheckFocusPunch_ClearVarsBeforeTurnStarts
	.align	2, 0
	.type	 RunTurnActionsFunctions,function
	.thumb_func
RunTurnActionsFunctions:
	push	{r4, r5, r6, lr}
	ldr	r6, .L1664
	ldrb	r0, [r6]
	ldr	r2, .L1664+0x4
	cmp	r0, #0
	beq	.L1660	@cond_branch
	mov	r0, #0xc
	strb	r0, [r2]
.L1660:
	ldr	r5, .L1664+0x8
	ldr	r0, [r5]
	add	r0, r0, #0x4b
	ldr	r4, .L1664+0xc
	ldrb	r1, [r4]
	strb	r1, [r0]
	ldr	r1, .L1664+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L1664+0x14
	ldrb	r1, [r4]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L1661	@cond_branch
	ldr	r2, .L1664+0x18
	ldr	r0, [r2]
	ldr	r1, .L1664+0x1c
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L1664+0x20
	ldr	r2, .L1664+0x24
	ldrb	r1, [r6]
	mov	r0, #0x7f
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3]
	b	.L1662
.L1665:
	.align	2, 0
.L1664:
	.word	gBattleOutcome
	.word	gCurrentActionFuncId
	.word	gBattleStruct
	.word	gCurrentTurnActionNumber
	.word	sTurnActionsFuncsTable
	.word	gBattlersCount
	.word	gHitMarker
	.word	-0x100001
	.word	gBattleMainFunc
	.word	sEndTurnFuncsTable
.L1661:
	ldr	r0, [r5]
	add	r0, r0, #0x4b
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L1662	@cond_branch
	ldr	r2, .L1666
	ldr	r0, [r2]
	ldr	r1, .L1666+0x4
	and	r0, r0, r1
	ldr	r1, .L1666+0x8
	and	r0, r0, r1
	str	r0, [r2]
.L1662:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1667:
	.align	2, 0
.L1666:
	.word	gHitMarker
	.word	-0x201
	.word	-0x80001
.Lfe81:
	.size	 RunTurnActionsFunctions,.Lfe81-RunTurnActionsFunctions
	.align	2, 0
	.type	 HandleEndTurn_BattleWon,function
	.thumb_func
HandleEndTurn_BattleWon:
	push	{r4, lr}
	ldr	r1, .L1686
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1686+0x4
	ldr	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1669	@cond_branch
	ldr	r1, .L1686+0x8
	ldr	r4, .L1686+0xc
	ldrb	r0, [r4]
	strb	r0, [r1]
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L1686+0x10
	strb	r0, [r1]
	ldr	r1, .L1686+0x14
	ldr	r0, .L1686+0x18
	str	r0, [r1]
	ldrb	r1, [r4]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r4]
	b	.L1670
.L1687:
	.align	2, 0
.L1686:
	.word	gCurrentActionFuncId
	.word	gBattleTypeFlags
	.word	gBattleTextBuff1
	.word	gBattleOutcome
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LinkBattleWonOrLost
.L1669:
	ldr	r0, .L1688
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1671	@cond_branch
	bl	BattleStopLowHpSound
	mov	r0, #0x9b
	lsl	r0, r0, #0x1
	bl	PlayBGM
	ldr	r1, .L1688+0x4
	ldr	r0, .L1688+0x8
	b	.L1685
.L1689:
	.align	2, 0
.L1688:
	.word	0x80900
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BattleTowerTrainerBattleWon
.L1671:
	mov	r0, #0xa
	and	r1, r1, r0
	cmp	r1, #0x8
	bne	.L1673	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r1, .L1690
	ldr	r0, .L1690+0x4
	str	r0, [r1]
	ldr	r2, .L1690+0x8
	ldr	r0, .L1690+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	sub	r0, r0, #0x53
	cmp	r0, #0x7
	bhi	.L1682	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1690+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1691:
	.align	2, 0
.L1690:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LocalTrainerBattleWon
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
	.word	.L1683
	.align	2, 0
	.align	2, 0
.L1683:
	.word	.L1682
	.word	.L1676
	.word	.L1682
	.word	.L1682
	.word	.L1682
	.word	.L1682
	.word	.L1682
	.word	.L1676
.L1676:
	mov	r0, #0x9c
	lsl	r0, r0, #0x1
	bl	PlayBGM
	b	.L1670
.L1682:
	mov	r0, #0x9b
	lsl	r0, r0, #0x1
	bl	PlayBGM
	b	.L1670
.L1673:
	ldr	r1, .L1692
	ldr	r0, .L1692+0x4
.L1685:
	str	r0, [r1]
.L1670:
	ldr	r1, .L1692+0x8
	ldr	r0, .L1692+0xc
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1693:
	.align	2, 0
.L1692:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PayDayMoneyAndPickUpItems
	.word	gBattleMainFunc
	.word	HandleEndTurn_FinishBattle
.Lfe82:
	.size	 HandleEndTurn_BattleWon,.Lfe82-HandleEndTurn_BattleWon
	.align	2, 0
	.type	 HandleEndTurn_BattleLost,function
	.thumb_func
HandleEndTurn_BattleLost:
	push	{r4, lr}
	ldr	r1, .L1701
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1701+0x4
	ldr	r1, [r0]
	mov	r4, #0x2
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1695	@cond_branch
	ldr	r1, .L1701+0x8
	ldr	r4, .L1701+0xc
	ldrb	r0, [r4]
	strb	r0, [r1]
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L1701+0x10
	strb	r0, [r1]
	ldr	r1, .L1701+0x14
	ldr	r0, .L1701+0x18
	str	r0, [r1]
	ldrb	r1, [r4]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r4]
	b	.L1696
.L1702:
	.align	2, 0
.L1701:
	.word	gCurrentActionFuncId
	.word	gBattleTypeFlags
	.word	gBattleTextBuff1
	.word	gBattleOutcome
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LinkBattleWonOrLost
.L1695:
	mov	r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1697	@cond_branch
	bl	GetTrainerBattleMode
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	bne	.L1697	@cond_branch
	bl	GetRivalBattleFlags
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1698	@cond_branch
	ldr	r1, .L1703
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L1699
.L1704:
	.align	2, 0
.L1703:
	.word	gBattleCommunication
.L1698:
	ldr	r0, .L1705
	strb	r4, [r0, #0x5]
.L1699:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r1, .L1705+0x4
	strb	r0, [r1]
	b	.L1700
.L1706:
	.align	2, 0
.L1705:
	.word	gBattleCommunication
	.word	gBattlerAttacker
.L1697:
	ldr	r1, .L1707
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
.L1700:
	ldr	r1, .L1707+0x4
	ldr	r0, .L1707+0x8
	str	r0, [r1]
.L1696:
	ldr	r1, .L1707+0xc
	ldr	r0, .L1707+0x10
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1708:
	.align	2, 0
.L1707:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LocalBattleLost
	.word	gBattleMainFunc
	.word	HandleEndTurn_FinishBattle
.Lfe83:
	.size	 HandleEndTurn_BattleLost,.Lfe83-HandleEndTurn_BattleLost
	.align	2, 0
	.type	 HandleEndTurn_RanFromBattle,function
	.thumb_func
HandleEndTurn_RanFromBattle:
	push	{lr}
	ldr	r1, .L1716
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1716+0x4
	ldr	r0, .L1716+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r0, #0x1
	beq	.L1712	@cond_branch
	cmp	r0, #0x2
	beq	.L1713	@cond_branch
	ldr	r1, .L1716+0xc
	ldr	r0, .L1716+0x10
	b	.L1715
.L1717:
	.align	2, 0
.L1716:
	.word	gCurrentActionFuncId
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_GotAwaySafely
.L1712:
	ldr	r1, .L1718
	ldr	r0, .L1718+0x4
	b	.L1715
.L1719:
	.align	2, 0
.L1718:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SmokeBallEscape
.L1713:
	ldr	r1, .L1720
	ldr	r0, .L1720+0x4
.L1715:
	str	r0, [r1]
	ldr	r1, .L1720+0x8
	ldr	r0, .L1720+0xc
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1721:
	.align	2, 0
.L1720:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RanAwayUsingMonAbility
	.word	gBattleMainFunc
	.word	HandleEndTurn_FinishBattle
.Lfe84:
	.size	 HandleEndTurn_RanFromBattle,.Lfe84-HandleEndTurn_RanFromBattle
	.align	2, 0
	.type	 HandleEndTurn_MonFled,function
	.thumb_func
HandleEndTurn_MonFled:
	ldr	r1, .L1723
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1723+0x4
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	ldr	r2, .L1723+0x8
	ldrb	r0, [r2]
	strb	r0, [r1, #0x2]
	ldr	r3, .L1723+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1723+0x10
	ldr	r0, .L1723+0x14
	str	r0, [r1]
	ldr	r1, .L1723+0x18
	ldr	r0, .L1723+0x1c
	str	r0, [r1]
	bx	lr
.L1724:
	.align	2, 0
.L1723:
	.word	gCurrentActionFuncId
	.word	gBattleTextBuff1
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WildMonFled
	.word	gBattleMainFunc
	.word	HandleEndTurn_FinishBattle
.Lfe85:
	.size	 HandleEndTurn_MonFled,.Lfe85-HandleEndTurn_MonFled
	.align	2, 0
	.type	 HandleEndTurn_FinishBattle,function
	.thumb_func
HandleEndTurn_FinishBattle:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1739
	ldrb	r0, [r0]
	sub	r0, r0, #0xb
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1726	@cond_branch
	ldr	r0, .L1739+0x4
	ldr	r1, [r0]
	ldr	r0, .L1739+0x8
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1727	@cond_branch
	ldr	r2, .L1739+0xc
	strb	r1, [r2]
	ldr	r0, .L1739+0x10
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L1727	@cond_branch
	add	r4, r2, #0
	ldr	r6, .L1739+0x14
	mov	r5, #0x58
	add	r7, r6, #0
	add	r7, r7, #0x30
.L1731:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1730	@cond_branch
	ldr	r2, .L1739+0x18
	ldrh	r0, [r2, #0x6]
	cmp	r0, #0
	bne	.L1733	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r2, #0x6]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r7
	add	r0, r2, #0
	add	r0, r0, #0x8
	bl	StringCopy
	b	.L1730
.L1740:
	.align	2, 0
.L1739:
	.word	gCurrentActionFuncId
	.word	gBattleTypeFlags
	.word	0x80b92
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattleResults
.L1733:
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r2, #0x26]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r7
	add	r0, r2, #0
	add	r0, r0, #0x14
	bl	StringCopy
.L1730:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1741
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1731	@cond_branch
.L1727:
	bl	TrySetQuestLogBattleEvent
	ldr	r0, .L1741+0x4
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1736	@cond_branch
	bl	ClearRematchStateByTrainerId
.L1736:
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	mov	r0, #0x5
	bl	FadeOutMapMusic
	ldr	r1, .L1741+0x8
	ldr	r0, .L1741+0xc
	str	r0, [r1]
	ldr	r1, .L1741+0x10
	ldr	r0, .L1741+0x14
	str	r0, [r1]
	b	.L1737
.L1742:
	.align	2, 0
.L1741:
	.word	gBattlersCount
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	FreeResetData_ReturnToOvOrDoEvolutions
	.word	gCB2_AfterEvolution
	.word	BattleMainCB2
.L1726:
	ldr	r0, .L1743
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1737	@cond_branch
	ldr	r1, .L1743+0x4
	ldr	r0, .L1743+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
.L1737:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1744:
	.align	2, 0
.L1743:
	.word	gBattleControllerExecFlags
	.word	gBattleScriptingCommandsTable
	.word	gBattlescriptCurrInstr
.Lfe86:
	.size	 HandleEndTurn_FinishBattle,.Lfe86-HandleEndTurn_FinishBattle
	.align	2, 0
	.type	 FreeResetData_ReturnToOvOrDoEvolutions,function
	.thumb_func
FreeResetData_ReturnToOvOrDoEvolutions:
	push	{lr}
	ldr	r0, .L1752
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1746	@cond_branch
	bl	ResetSpriteData
	ldr	r0, .L1752+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1748	@cond_branch
	ldr	r0, .L1752+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1747	@cond_branch
.L1748:
	ldr	r1, .L1752+0xc
	ldr	r0, .L1752+0x10
	b	.L1751
.L1753:
	.align	2, 0
.L1752:
	.word	gPaletteFade
	.word	gLeveledUpInBattle
	.word	gBattleOutcome
	.word	gBattleMainFunc
	.word	ReturnFromBattleToOverworld
.L1747:
	ldr	r1, .L1754
	ldr	r0, .L1754+0x4
.L1751:
	str	r0, [r1]
	bl	FreeAllWindowBuffers
	ldr	r0, .L1754+0x8
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1746	@cond_branch
	bl	FreeMonSpritesGfx
	bl	FreeBattleSpritesData
	bl	FreeBattleResources
.L1746:
	pop	{r0}
	bx	r0
.L1755:
	.align	2, 0
.L1754:
	.word	gBattleMainFunc
	.word	TryEvolvePokemon
	.word	gBattleTypeFlags
.Lfe87:
	.size	 FreeResetData_ReturnToOvOrDoEvolutions,.Lfe87-FreeResetData_ReturnToOvOrDoEvolutions
	.align	2, 0
	.type	 TryEvolvePokemon,function
	.thumb_func
TryEvolvePokemon:
	push	{r4, r5, lr}
	ldr	r0, .L1768
	ldrb	r1, [r0]
	add	r3, r0, #0
	cmp	r1, #0
	beq	.L1758	@cond_branch
.L1759:
	mov	r5, #0x0
.L1763:
	ldrb	r2, [r3]
	ldr	r0, .L1768+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1762	@cond_branch
	bic	r2, r2, r1
	strb	r2, [r3]
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L1768+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetEvolutionTargetSpecies
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0
	beq	.L1762	@cond_branch
	ldr	r0, .L1768+0xc
	ldr	r1, .L1768+0x10
	str	r1, [r0]
	lsl	r3, r5, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	add	r1, r2, #0
	mov	r2, #0x81
	bl	EvolutionScene
	b	.L1756
.L1769:
	.align	2, 0
.L1768:
	.word	gLeveledUpInBattle
	.word	gBitTable
	.word	gPlayerParty
	.word	gBattleMainFunc
	.word	WaitForEvoSceneToFinish
.L1762:
	add	r5, r5, #0x1
	ldr	r3, .L1770
	cmp	r5, #0x5
	ble	.L1763	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L1759	@cond_branch
.L1758:
	ldr	r1, .L1770+0x4
	ldr	r0, .L1770+0x8
	str	r0, [r1]
.L1756:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1771:
	.align	2, 0
.L1770:
	.word	gLeveledUpInBattle
	.word	gBattleMainFunc
	.word	ReturnFromBattleToOverworld
.Lfe88:
	.size	 TryEvolvePokemon,.Lfe88-TryEvolvePokemon
	.align	2, 0
	.type	 WaitForEvoSceneToFinish,function
	.thumb_func
WaitForEvoSceneToFinish:
	push	{lr}
	ldr	r0, .L1774
	ldr	r1, [r0, #0x4]
	ldr	r0, .L1774+0x4
	cmp	r1, r0
	bne	.L1773	@cond_branch
	ldr	r1, .L1774+0x8
	ldr	r0, .L1774+0xc
	str	r0, [r1]
.L1773:
	pop	{r0}
	bx	r0
.L1775:
	.align	2, 0
.L1774:
	.word	gMain
	.word	BattleMainCB2
	.word	gBattleMainFunc
	.word	TryEvolvePokemon
.Lfe89:
	.size	 WaitForEvoSceneToFinish,.Lfe89-WaitForEvoSceneToFinish
	.align	2, 0
	.type	 ReturnFromBattleToOverworld,function
	.thumb_func
ReturnFromBattleToOverworld:
	push	{r4, r5, r6, lr}
	ldr	r6, .L1783
	ldr	r0, [r6]
	mov	r5, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1777	@cond_branch
	ldr	r4, .L1783+0x4
	add	r0, r4, #0
	bl	RandomlyGivePartyPokerus
	add	r0, r4, #0
	bl	PartySpreadPokerus
.L1777:
	ldr	r4, [r6]
	add	r0, r4, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1779	@cond_branch
	ldr	r0, .L1783+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1778	@cond_branch
.L1779:
	ldr	r1, .L1783+0xc
	ldr	r5, .L1783+0x10
	ldrb	r0, [r5]
	strh	r0, [r1]
	ldr	r3, .L1783+0x14
	ldr	r0, .L1783+0x18
	add	r2, r3, r0
	ldrb	r1, [r2]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L1783+0x1c
	ldr	r0, [r0]
	str	r0, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L1780	@cond_branch
	ldr	r0, .L1783+0x20
	bl	UpdateRoamerHPStatus
	ldrb	r1, [r5]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1782	@cond_branch
	cmp	r1, #0x7
	bne	.L1780	@cond_branch
.L1782:
	bl	SetRoamerInactive
.L1780:
	mov	r0, #0x53
	bl	m4aSongNumStop
	ldr	r0, .L1783+0x14
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L1778:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1784:
	.align	2, 0
.L1783:
	.word	gBattleTypeFlags
	.word	gPlayerParty
	.word	gReceivedRemoteLinkPlayers
	.word	gSpecialVar_Result
	.word	gBattleOutcome
	.word	gMain
	.word	0x439
	.word	gPreBattleCallback1
	.word	gEnemyParty
.Lfe90:
	.size	 ReturnFromBattleToOverworld,.Lfe90-ReturnFromBattleToOverworld
	.align	2, 0
	.globl	RunBattleScriptCommands_PopCallbacksStack
	.type	 RunBattleScriptCommands_PopCallbacksStack,function
	.thumb_func
RunBattleScriptCommands_PopCallbacksStack:
	push	{lr}
	ldr	r0, .L1790
	ldrb	r0, [r0]
	sub	r0, r0, #0xb
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1786	@cond_branch
	ldr	r3, .L1790+0x4
	ldr	r0, [r3]
	ldr	r0, [r0, #0xc]
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1787	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L1787:
	ldr	r2, .L1790+0x8
	ldr	r0, [r3]
	ldr	r1, [r0, #0xc]
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	b	.L1788
.L1791:
	.align	2, 0
.L1790:
	.word	gCurrentActionFuncId
	.word	gBattleResources
	.word	gBattleMainFunc
.L1786:
	ldr	r0, .L1792
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1788	@cond_branch
	ldr	r1, .L1792+0x4
	ldr	r0, .L1792+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
.L1788:
	pop	{r0}
	bx	r0
.L1793:
	.align	2, 0
.L1792:
	.word	gBattleControllerExecFlags
	.word	gBattleScriptingCommandsTable
	.word	gBattlescriptCurrInstr
.Lfe91:
	.size	 RunBattleScriptCommands_PopCallbacksStack,.Lfe91-RunBattleScriptCommands_PopCallbacksStack
	.align	2, 0
	.globl	RunBattleScriptCommands
	.type	 RunBattleScriptCommands,function
	.thumb_func
RunBattleScriptCommands:
	push	{lr}
	ldr	r0, .L1796
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1795	@cond_branch
	ldr	r1, .L1796+0x4
	ldr	r0, .L1796+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
.L1795:
	pop	{r0}
	bx	r0
.L1797:
	.align	2, 0
.L1796:
	.word	gBattleControllerExecFlags
	.word	gBattleScriptingCommandsTable
	.word	gBattlescriptCurrInstr
.Lfe92:
	.size	 RunBattleScriptCommands,.Lfe92-RunBattleScriptCommands
	.align	2, 0
	.type	 HandleAction_UseMove,function
	.thumb_func
HandleAction_UseMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r0, #0x4
	str	r0, [sp]
	ldr	r6, .L1857
	ldr	r1, .L1857+0x4
	ldr	r0, .L1857+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r6]
	ldr	r1, .L1857+0xc
	ldr	r3, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x91
	ldrb	r2, [r0]
	ldr	r1, .L1857+0x10
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1799	@cond_branch
	ldr	r1, .L1857+0x14
	mov	r0, #0xc
	b	.L1851
.L1858:
	.align	2, 0
.L1857:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattleStruct
	.word	gBitTable
	.word	gCurrentActionFuncId
.L1799:
	ldr	r1, .L1859
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L1859+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0xe]
	add	r0, r3, #0
	add	r0, r0, #0xb7
	strb	r2, [r0]
	ldr	r0, .L1859+0x8
	strb	r2, [r0]
	ldr	r0, .L1859+0xc
	strb	r2, [r0]
	ldr	r0, .L1859+0x10
	strb	r2, [r0, #0x6]
	ldr	r2, .L1859+0x14
	ldr	r3, .L1859+0x18
	mov	r9, r3
	ldrb	r0, [r6]
	ldr	r4, .L1859+0x1c
	ldr	r1, [r4]
	add	r0, r0, r1
	add	r0, r0, #0x80
	ldrb	r0, [r0]
	strb	r0, [r3]
	strb	r0, [r2]
	ldr	r1, .L1859+0x20
	ldrb	r4, [r6]
	lsl	r0, r4, #0x4
	add	r3, r0, r1
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1d
	mov	r8, r2
	cmp	r0, #0
	bge	.L1800	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r2, .L1859+0x24
	ldr	r1, .L1859+0x28
	mov	r0, #0xa5
	strh	r0, [r1]
	strh	r0, [r2]
	ldr	r2, .L1859+0x2c
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0xa5
	mov	r1, #0x0
	bl	GetMoveTarget
	ldrb	r1, [r6]
	ldr	r3, .L1859+0x1c
	ldr	r2, [r3]
	b	.L1852
.L1860:
	.align	2, 0
.L1859:
	.word	gCritMultiplier
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gMultiHitCounter
	.word	gBattleCommunication
	.word	gCurrMovePos
	.word	gChosenMovePos
	.word	gBattleStruct
	.word	gProtectStructs
	.word	gCurrentMove
	.word	gChosenMove
	.word	gHitMarker
.L1800:
	ldr	r0, .L1861
	mov	r1, #0x58
	mov	r5, r4
	mul	r5, r5, r1
	add	r1, r0, #0
	add	r1, r1, #0x50
	add	r1, r5, r1
	ldr	r2, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r1, r1, r2
	mov	sl, r0
	cmp	r1, #0
	bne	.L1803	@cond_branch
	mov	r7, #0x80
	lsl	r7, r7, #0xf
	and	r7, r7, r2
	cmp	r7, #0
	beq	.L1802	@cond_branch
.L1803:
	ldr	r3, .L1861+0x4
	ldr	r2, .L1861+0x8
	ldr	r1, .L1861+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
	strh	r0, [r3]
	b	.L1801
.L1862:
	.align	2, 0
.L1861:
	.word	gBattleMons
	.word	gCurrentMove
	.word	gChosenMove
	.word	gLockedMoves
.L1802:
	ldr	r3, .L1863
	mov	ip, r3
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrh	r4, [r0, #0x6]
	add	r2, r4, #0
	cmp	r2, #0
	beq	.L1807	@cond_branch
	ldrb	r3, [r0, #0xc]
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	mov	r5, sl
	add	r5, r5, #0xc
	add	r0, r0, r5
	ldrh	r1, [r0]
	cmp	r2, r1
	bne	.L1805	@cond_branch
	ldr	r2, .L1863+0x4
	ldr	r0, .L1863+0x8
	strh	r4, [r0]
	strh	r4, [r2]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r0, [r0, #0xc]
	mov	r4, r9
	strb	r0, [r4]
	mov	r1, r8
	strb	r0, [r1]
	ldrh	r0, [r2]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldrb	r1, [r6]
	ldr	r3, .L1863+0xc
	ldr	r2, [r3]
	b	.L1852
.L1864:
	.align	2, 0
.L1863:
	.word	gDisableStructs
	.word	gCurrentMove
	.word	gChosenMove
	.word	gBattleStruct
.L1805:
	cmp	r2, #0
	beq	.L1807	@cond_branch
	cmp	r2, r1
	beq	.L1807	@cond_branch
	mov	r4, r9
	strb	r3, [r4]
	mov	r0, r8
	strb	r3, [r0]
	ldr	r3, .L1865
	ldr	r2, .L1865+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldrb	r1, [r6]
	mov	r4, #0x58
	mul	r1, r1, r4
	add	r0, r0, r1
	add	r0, r0, r5
	ldrh	r0, [r0]
	strh	r0, [r2]
	strh	r0, [r3]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	mov	r2, #0x0
	strh	r7, [r0, #0x6]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	strb	r2, [r0, #0xc]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r2, [r1, #0xe]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldrh	r0, [r3]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldrb	r1, [r6]
	ldr	r3, .L1865+0x8
	ldr	r2, [r3]
	b	.L1852
.L1866:
	.align	2, 0
.L1865:
	.word	gCurrentMove
	.word	gChosenMove
	.word	gBattleStruct
.L1807:
	mov	r4, r8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	ldr	r4, .L1867
	ldrb	r2, [r4]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r0, r0, r1
	mov	r1, sl
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldr	r1, .L1867+0x4
	lsl	r2, r2, #0x1
	add	r2, r2, r1
	ldrh	r3, [r0]
	ldrh	r2, [r2]
	cmp	r3, r2
	beq	.L1809	@cond_branch
	ldr	r1, .L1867+0x8
	ldr	r0, .L1867+0xc
	strh	r3, [r0]
	strh	r3, [r1]
	ldrh	r0, [r1]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldrb	r1, [r4]
	ldr	r2, .L1867+0x10
	ldr	r2, [r2]
.L1852:
	add	r1, r1, r2
	strb	r0, [r1, #0xc]
	b	.L1801
.L1868:
	.align	2, 0
.L1867:
	.word	gBattlerAttacker
	.word	gChosenMoveByBattler
	.word	gCurrentMove
	.word	gChosenMove
	.word	gBattleStruct
.L1809:
	ldr	r1, .L1869
	ldr	r0, .L1869+0x4
	strh	r3, [r0]
	strh	r3, [r1]
.L1801:
	ldr	r0, .L1869+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1811	@cond_branch
	ldr	r0, .L1869+0xc
	ldr	r1, .L1869
	ldrh	r1, [r1]
	strh	r1, [r0, #0x22]
	b	.L1812
.L1870:
	.align	2, 0
.L1869:
	.word	gCurrentMove
	.word	gChosenMove
	.word	gBattlerAttacker
	.word	gBattleResults
.L1811:
	ldr	r0, .L1871
	ldr	r1, .L1871+0x4
	ldrh	r1, [r1]
	strh	r1, [r0, #0x24]
.L1812:
	ldr	r4, .L1871+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L1871+0xc
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	ldrb	r0, [r5, #0x8]
	add	r3, r4, #0
	cmp	r0, #0
	beq	.L1813	@cond_branch
	ldr	r2, .L1871+0x10
	ldr	r0, .L1871+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	bne	.L1813	@cond_branch
	ldrb	r0, [r3]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5, #0x9]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1813	@cond_branch
	ldr	r1, .L1871+0x14
	ldrb	r2, [r5, #0x9]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L1813	@cond_branch
	ldr	r0, .L1871+0x18
	strb	r2, [r0]
	b	.L1814
.L1872:
	.align	2, 0
.L1871:
	.word	gBattleResults
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattlerTarget
.L1813:
	ldr	r2, .L1873
	ldr	r1, [r2]
	mov	r0, #0x1
	and	r1, r1, r0
	ldr	r3, .L1873+0x4
	add	r7, r2, #0
	cmp	r1, #0
	bne	.LCB15934
	b	.L1838	@long jump
.LCB15934:
	ldr	r1, .L1873+0x8
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x8]
	cmp	r5, #0
	beq	.LCB15945
	b	.L1815	@long jump
.LCB15945:
	ldr	r2, .L1873+0xc
	ldr	r0, .L1873+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L1816	@cond_branch
	ldrb	r0, [r4, #0x6]
	cmp	r0, #0x10
	bne	.LCB15963
	b	.L1815	@long jump
.LCB15963:
.L1816:
	ldr	r3, .L1873+0x14
	ldr	r2, .L1873+0x4
	ldrb	r6, [r2]
	ldr	r0, .L1873+0x18
	ldr	r0, [r0]
	add	r0, r6, r0
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r3, r2, #0
	cmp	r0, #0x1f
	bne	.LCB15981
	b	.L1815	@long jump
.LCB15981:
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0xd
	beq	.LCB15986
	b	.L1815	@long jump
.LCB15986:
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L1873+0x1c
	strb	r5, [r1]
	ldr	r0, .L1873+0x20
	ldrb	r0, [r0]
	cmp	r5, r0
	bcs	.L1818	@cond_branch
	add	r4, r1, #0
.L1820:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L1819	@cond_branch
	ldr	r0, .L1873+0x4
	ldrb	r1, [r0]
	ldr	r0, .L1873+0x18
	ldr	r0, [r0]
	add	r1, r1, r0
	ldrb	r0, [r1, #0xc]
	ldrb	r1, [r4]
	cmp	r0, r1
	beq	.L1819	@cond_branch
	ldr	r1, .L1873+0x14
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1f
	bne	.L1819	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [sp]
	cmp	r0, r3
	bcs	.L1819	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerTurnOrderNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
.L1819:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1873+0x20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1820	@cond_branch
.L1818:
	ldr	r4, [sp]
	cmp	r4, #0x4
	beq	.LCB16073
	b	.L1823	@long jump
.LCB16073:
	ldr	r2, .L1873+0xc
	ldr	r0, .L1873+0x24
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L1824	@cond_branch
	ldr	r0, .L1873+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1825	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1826	@cond_branch
	mov	r0, #0x1
	b	.L1853
.L1874:
	.align	2, 0
.L1873:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gChosenMove
.L1826:
	mov	r0, #0x3
	b	.L1853
.L1825:
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1829	@cond_branch
	mov	r0, #0x0
	b	.L1853
.L1829:
	mov	r0, #0x2
.L1853:
	bl	GetBattlerAtPosition
	ldr	r1, .L1875
	strb	r0, [r1]
	b	.L1831
.L1876:
	.align	2, 0
.L1875:
	.word	gBattlerTarget
.L1824:
	ldr	r2, .L1877
	ldr	r0, .L1877+0x4
	ldrb	r0, [r0]
	ldr	r1, .L1877+0x8
	ldr	r1, [r1]
	add	r0, r0, r1
	ldrb	r0, [r0, #0xc]
	strb	r0, [r2]
.L1831:
	ldr	r7, .L1877+0xc
	ldrb	r0, [r7]
	ldr	r1, .L1877+0x10
	mov	r8, r1
	ldr	r5, .L1877
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB16183
	b	.L1814	@long jump
.LCB16183:
	ldr	r6, .L1877+0x4
	ldrb	r0, [r6]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1833	@cond_branch
	ldrb	r0, [r5]
	b	.L1854
.L1878:
	.align	2, 0
.L1877:
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L1833:
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	strb	r0, [r5]
	ldrb	r1, [r7]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	b	.L1855
.L1823:
	ldr	r4, .L1879
	ldr	r0, .L1879+0x4
	ldr	r3, [sp]
	add	r0, r3, r0
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrb	r0, [r4]
	ldr	r2, .L1879+0x8
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x20
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	ldr	r2, .L1879+0xc
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L1879+0x10
	ldrb	r0, [r4]
	strb	r0, [r1]
	b	.L1814
.L1880:
	.align	2, 0
.L1879:
	.word	gActiveBattler
	.word	gBattlerByTurnOrder
	.word	gBattleMons
	.word	gSpecialStatuses
	.word	gBattlerTarget
.L1815:
	ldr	r0, [r7]
	mov	r4, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1838	@cond_branch
	ldr	r2, .L1881
	ldr	r0, .L1881+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1838	@cond_branch
	ldrb	r0, [r3]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1839	@cond_branch
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1840	@cond_branch
	mov	r0, #0x1
	b	.L1856
.L1882:
	.align	2, 0
.L1881:
	.word	gBattleMoves
	.word	gChosenMove
.L1840:
	mov	r0, #0x3
	b	.L1856
.L1839:
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1843	@cond_branch
	mov	r0, #0x0
	b	.L1856
.L1843:
	mov	r0, #0x2
.L1856:
	bl	GetBattlerAtPosition
	ldr	r1, .L1883
	strb	r0, [r1]
	ldr	r0, .L1883+0x4
	ldrb	r1, [r0]
	ldr	r2, .L1883+0x8
	ldr	r5, .L1883
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1814	@cond_branch
	ldr	r0, .L1883+0xc
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1814	@cond_branch
	ldrb	r0, [r5]
	b	.L1854
.L1884:
	.align	2, 0
.L1883:
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerAttacker
.L1838:
	ldr	r5, .L1885
	add	r2, r3, #0
	ldrb	r0, [r2]
	ldr	r1, .L1885+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	ldrb	r0, [r0, #0xc]
	strb	r0, [r5]
	ldr	r6, .L1885+0x8
	ldrb	r1, [r6]
	ldr	r7, .L1885+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1814	@cond_branch
	ldrb	r0, [r2]
	str	r3, [sp, #0x4]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	ldr	r3, [sp, #0x4]
	cmp	r4, r0
	beq	.L1848	@cond_branch
	ldrb	r0, [r5]
	b	.L1854
.L1886:
	.align	2, 0
.L1885:
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L1848:
	ldrb	r0, [r3]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	strb	r0, [r5]
	ldrb	r1, [r6]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
.L1855:
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1814	@cond_branch
	add	r0, r2, #0
.L1854:
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	strb	r0, [r5]
.L1814:
	ldr	r4, .L1887
	ldr	r3, .L1887+0x4
	ldr	r2, .L1887+0x8
	ldr	r0, .L1887+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r1, .L1887+0x10
	mov	r0, #0xa
.L1851:
	strb	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1888:
	.align	2, 0
.L1887:
	.word	gBattlescriptCurrInstr
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gCurrentActionFuncId
.Lfe93:
	.size	 HandleAction_UseMove,.Lfe93-HandleAction_UseMove
	.align	2, 0
	.type	 HandleAction_Switch,function
	.thumb_func
HandleAction_Switch:
	push	{r4, lr}
	ldr	r3, .L1891
	ldr	r1, .L1891+0x4
	ldr	r0, .L1891+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r3]
	ldr	r0, .L1891+0xc
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r0, .L1891+0x10
	strh	r2, [r0]
	ldr	r1, .L1891+0x14
	ldrb	r0, [r3]
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r1, .L1891+0x18
	ldrb	r0, [r3]
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r2, .L1891+0x1c
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x7
	strb	r0, [r2, #0x1]
	ldrb	r4, [r3]
	strb	r4, [r2, #0x2]
	ldrb	r0, [r3]
	ldr	r1, .L1891+0x20
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x58
	ldrb	r0, [r0]
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	ldr	r0, .L1891+0x24
	strb	r4, [r0, #0x17]
	ldr	r1, .L1891+0x28
	ldr	r0, .L1891+0x2c
	str	r0, [r1]
	ldr	r1, .L1891+0x30
	mov	r0, #0xa
	strb	r0, [r1]
	ldr	r1, .L1891+0x34
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xfe
	bhi	.L1890	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L1890:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1892:
	.align	2, 0
.L1891:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	gBattleTextBuff1
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ActionSwitch
	.word	gCurrentActionFuncId
	.word	gBattleResults
.Lfe94:
	.size	 HandleAction_Switch,.Lfe94-HandleAction_Switch
	.align	2, 0
	.type	 HandleAction_UseItem,function
	.thumb_func
HandleAction_UseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L1928
	ldr	r2, .L1928+0x4
	ldr	r1, .L1928+0x8
	ldr	r0, .L1928+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	strb	r0, [r4]
	ldr	r0, .L1928+0x10
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1928+0x14
	strh	r1, [r0]
	ldrb	r0, [r4]
	bl	ClearFuryCutterDestinyBondGrudge
	ldr	r5, .L1928+0x18
	ldr	r2, .L1928+0x1c
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	strh	r3, [r5]
	add	r1, r3, #0
	cmp	r1, #0xc
	bhi	.L1894	@cond_branch
	ldr	r2, .L1928+0x20
	ldr	r1, .L1928+0x24
	ldrh	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r2]
	b	.L1926
.L1929:
	.align	2, 0
.L1928:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gLastUsedItem
	.word	gBattleBufferB
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForBallThrow
.L1894:
	add	r0, r3, #0
	sub	r0, r0, #0x50
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L1896	@cond_branch
	ldr	r0, .L1930
	ldr	r1, .L1930+0x4
	ldr	r1, [r1]
	str	r1, [r0]
	ldr	r1, .L1930+0x8
	mov	sl, r1
	b	.L1895
.L1931:
	.align	2, 0
.L1930:
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForRunningByItem
	.word	gCurrentActionFuncId
.L1896:
	mov	r0, #0xaf
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L1898	@cond_branch
	ldr	r0, .L1932
	ldr	r1, .L1932+0x4
	ldr	r1, [r1, #0x4]
	str	r1, [r0]
	ldr	r2, .L1932+0x8
	mov	sl, r2
	b	.L1895
.L1933:
	.align	2, 0
.L1932:
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForRunningByItem
	.word	gCurrentActionFuncId
.L1898:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1900	@cond_branch
	ldr	r0, .L1934
	ldr	r1, .L1934+0x4
	ldr	r1, [r1]
	str	r1, [r0]
.L1926:
	ldr	r0, .L1934+0x8
	mov	sl, r0
	b	.L1895
.L1935:
	.align	2, 0
.L1934:
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L1900:
	ldr	r3, .L1936
	ldrb	r0, [r4]
	strb	r0, [r3, #0x17]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r2, .L1936+0x4
	ldr	r1, [r2]
	add	r0, r0, r1
	add	r0, r0, #0xc4
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	mov	r8, r4
	ldr	r1, .L1936+0x8
	mov	r9, r1
	ldr	r6, .L1936+0xc
	mov	ip, r3
	add	r7, r2, #0
	ldr	r2, .L1936+0x10
	mov	sl, r2
	cmp	r0, #0x4
	bls	.LCB16777
	b	.L1902	@long jump
.LCB16777:
	lsl	r0, r0, #0x2
	ldr	r1, .L1936+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1937:
	.align	2, 0
.L1936:
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
	.word	.L1923
	.align	2, 0
	.align	2, 0
.L1923:
	.word	.L1902
	.word	.L1902
	.word	.L1905
	.word	.L1913
	.word	.L1920
.L1905:
	ldr	r5, .L1938
	mov	r0, #0x0
	strb	r0, [r5, #0x5]
	ldr	r2, .L1938+0x4
	ldrb	r0, [r2]
	lsr	r0, r0, #0x1
	ldr	r1, [r7]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L1925	@cond_branch
	mov	r0, #0x3e
	and	r0, r0, r1
	ldr	r1, .L1938+0x8
	mov	r9, r1
	ldr	r6, .L1938+0xc
	ldr	r2, .L1938+0x10
	mov	sl, r2
	cmp	r0, #0
	bne	.LCB16836
	b	.L1902	@long jump
.LCB16836:
	mov	r0, #0x5
	strb	r0, [r5, #0x5]
	b	.L1902
.L1939:
	.align	2, 0
.L1938:
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L1925:
	ldr	r0, .L1940
	mov	r9, r0
	ldr	r6, .L1940+0x4
	ldr	r1, .L1940+0x8
	mov	sl, r1
	mov	r4, r8
	add	r3, r7, #0
	add	r2, r5, #0
.L1911:
	ldrb	r1, [r4]
	lsr	r1, r1, #0x1
	ldr	r0, [r3]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r2, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r2, #0x5]
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1911	@cond_branch
	b	.L1902
.L1941:
	.align	2, 0
.L1940:
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L1913:
	ldr	r3, .L1942
	mov	r0, #0x4
	strb	r0, [r3, #0x5]
	ldr	r2, .L1942+0x4
	ldrb	r0, [r2]
	lsr	r0, r0, #0x1
	ldr	r1, [r7]
	add	r0, r0, r1
	add	r6, r0, #0
	add	r6, r6, #0xc6
	ldrb	r1, [r6]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r8, r2
	cmp	r5, #0
	beq	.L1914	@cond_branch
	mov	r0, #0x5
	strb	r0, [r3, #0x5]
	ldr	r2, .L1942+0x8
	mov	r9, r2
	ldr	r6, .L1942+0xc
	ldr	r0, .L1942+0x10
	mov	sl, r0
	b	.L1902
.L1943:
	.align	2, 0
.L1942:
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L1914:
	ldr	r3, .L1944
	mov	r4, #0xfd
	strb	r4, [r3]
	mov	r0, #0x5
	strb	r0, [r3, #0x1]
	mov	r2, #0x1
	strb	r2, [r3, #0x2]
	mov	r0, #0xff
	strb	r0, [r3, #0x3]
	ldr	r1, .L1944+0x4
	strb	r4, [r1]
	strb	r5, [r1, #0x1]
	mov	r0, #0xd2
	strb	r0, [r1, #0x2]
	strb	r5, [r1, #0x3]
	sub	r0, r0, #0xd3
	strb	r0, [r1, #0x4]
	ldrb	r0, [r6]
	and	r2, r2, r0
	ldr	r1, .L1944+0x8
	mov	r9, r1
	ldr	r6, .L1944+0xc
	ldr	r0, .L1944+0x10
	mov	sl, r0
	cmp	r2, #0
	bne	.L1917	@cond_branch
	mov	r5, r8
	add	r4, r7, #0
	add	r2, r3, #0
.L1918:
	ldrb	r1, [r5]
	lsr	r1, r1, #0x1
	ldr	r0, [r4]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r2, #0x2]
	add	r0, r0, #0x1
	strb	r0, [r2, #0x2]
	ldrb	r0, [r5]
	lsr	r0, r0, #0x1
	ldr	r1, [r4]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1918	@cond_branch
.L1917:
	ldrb	r0, [r3, #0x2]
	add	r0, r0, #0xe
	mov	r1, #0x0
	mov	r2, ip
	strb	r0, [r2, #0x10]
	strb	r1, [r2, #0x11]
	b	.L1902
.L1945:
	.align	2, 0
.L1944:
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.L1920:
	ldr	r0, .L1946
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1921	@cond_branch
	ldr	r1, .L1946+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L1927
.L1947:
	.align	2, 0
.L1946:
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L1921:
	ldr	r0, .L1948
	strb	r1, [r0, #0x5]
.L1927:
	ldr	r0, .L1948+0x4
	mov	r8, r0
	ldr	r1, .L1948+0x8
	mov	r9, r1
	ldr	r6, .L1948+0xc
	ldr	r2, .L1948+0x10
	mov	sl, r2
.L1902:
	mov	r1, r8
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	ldr	r1, [r7]
	add	r0, r0, r1
	add	r0, r0, #0xc4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r2, r9
	str	r0, [r2]
.L1895:
	mov	r0, #0xa
	mov	r1, sl
	strb	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1949:
	.align	2, 0
.L1948:
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForUsingItem
	.word	gCurrentActionFuncId
.Lfe95:
	.size	 HandleAction_UseItem,.Lfe95-HandleAction_UseItem
	.align	2, 0
	.globl	TryRunFromBattle
	.type	 TryRunFromBattle,function
	.thumb_func
TryRunFromBattle:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r6, #0x0
	ldr	r1, .L1966
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L1951	@cond_branch
	ldr	r1, .L1966+0x4
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x7]
	b	.L1952
.L1967:
	.align	2, 0
.L1966:
	.word	gBattleMons
	.word	gEnigmaBerries
.L1951:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L1952:
	ldr	r0, .L1968
	strb	r4, [r0]
	cmp	r1, #0x25
	bne	.L1953	@cond_branch
	ldr	r2, .L1968+0x4
	ldr	r1, .L1968+0x8
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r2]
	ldr	r0, .L1968+0xc
	lsl	r2, r4, #0x4
	add	r2, r2, r0
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x19
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	b	.L1965
.L1969:
	.align	2, 0
.L1968:
	.word	gPotentialItemEffectBattler
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gProtectStructs
.L1953:
	ldr	r7, .L1970
	mov	r2, #0x58
	mov	r0, r4
	mul	r0, r0, r2
	add	r5, r0, r7
	add	r0, r5, #0
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, #0x32
	bne	.L1955	@cond_branch
	ldr	r0, .L1970+0x4
	strb	r1, [r0]
	ldr	r0, .L1970+0x8
	lsl	r2, r4, #0x4
	add	r2, r2, r0
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x19
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	b	.L1965
.L1971:
	.align	2, 0
.L1970:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gProtectStructs
.L1955:
	ldr	r0, .L1972
	ldr	r3, [r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x8
	and	r0, r0, r3
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	cmp	r0, r1
	bne	.L1957	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1954	@cond_branch
.L1965:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L1954
.L1973:
	.align	2, 0
.L1972:
	.word	gBattleTypeFlags
.L1957:
	mov	r0, #0x1
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L1960	@cond_branch
	mov	r1, #0x1
	add	r0, r4, #0
	eor	r0, r0, r1
	mul	r0, r0, r2
	add	r2, r0, r7
	ldrh	r0, [r5, #0x6]
	ldrh	r1, [r2, #0x6]
	cmp	r0, r1
	bcs	.L1961	@cond_branch
	lsl	r0, r0, #0x7
	ldrh	r1, [r2, #0x6]
	bl	__divsi3
	add	r4, r0, #0
	ldr	r0, .L1974
	ldr	r0, [r0]
	add	r0, r0, #0x6c
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r4, r1
	bls	.L1960	@cond_branch
.L1961:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L1960:
	ldr	r0, .L1974
	ldr	r1, [r0]
	add	r1, r1, #0x6c
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L1954:
	cmp	r6, #0
	beq	.L1964	@cond_branch
	ldr	r1, .L1974+0x4
	ldr	r0, .L1974+0x8
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L1974+0xc
	mov	r0, #0x4
	strb	r0, [r1]
.L1964:
	add	r0, r6, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1975:
	.align	2, 0
.L1974:
	.word	gBattleStruct
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattleOutcome
.Lfe96:
	.size	 TryRunFromBattle,.Lfe96-TryRunFromBattle
	.align	2, 0
	.type	 HandleAction_Run,function
	.thumb_func
HandleAction_Run:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1995
	ldr	r1, .L1995+0x4
	ldr	r5, .L1995+0x8
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r0, .L1995+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1977	@cond_branch
	ldr	r0, .L1995+0x10
	ldrb	r1, [r0]
	strb	r1, [r5]
	ldr	r2, .L1995+0x14
	mov	r0, #0x0
	strb	r0, [r2]
	lsl	r1, r1, #0x18
	cmp	r1, #0
	beq	.L1979	@cond_branch
	add	r4, r2, #0
	ldr	r6, .L1995+0x18
	ldr	r5, .L1995+0x1c
.L1981:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1982	@cond_branch
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.L1980	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x2
	b	.L1993
.L1996:
	.align	2, 0
.L1995:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattleTypeFlags
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gChosenActionByBattler
	.word	gBattleOutcome
.L1982:
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.L1980	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x1
.L1993:
	orr	r0, r0, r1
	strb	r0, [r5]
.L1980:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1997
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1981	@cond_branch
.L1979:
	ldr	r0, .L1997+0x4
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1987
.L1998:
	.align	2, 0
.L1997:
	.word	gBattlersCount
	.word	gBattleOutcome
.L1977:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1988	@cond_branch
	ldrb	r0, [r4]
	bl	TryRunFromBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1987	@cond_branch
	ldrb	r0, [r4]
	bl	ClearFuryCutterDestinyBondGrudge
	ldr	r1, .L1999
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
	ldr	r1, .L1999+0x4
	ldr	r0, .L1999+0x8
	str	r0, [r1]
	ldr	r1, .L1999+0xc
	mov	r0, #0xa
	b	.L1994
.L2000:
	.align	2, 0
.L1999:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PrintFailedToRunString
	.word	gCurrentActionFuncId
.L1988:
	ldr	r1, .L2001
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2001+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1991	@cond_branch
	ldr	r1, .L2001+0x8
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	ldr	r1, .L2001+0xc
	ldr	r0, .L2001+0x10
	str	r0, [r1]
	ldr	r1, .L2001+0x14
	mov	r0, #0xa
	b	.L1994
.L2002:
	.align	2, 0
.L2001:
	.word	gBattleMons
	.word	0x400e000
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PrintFailedToRunString
	.word	gCurrentActionFuncId
.L1991:
	ldr	r0, .L2003
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r1, .L2003+0x4
	mov	r0, #0x6
.L1994:
	strb	r0, [r1]
.L1987:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2004:
	.align	2, 0
.L2003:
	.word	gBattlersCount
	.word	gBattleOutcome
.Lfe97:
	.size	 HandleAction_Run,.Lfe97-HandleAction_Run
	.align	2, 0
	.type	 HandleAction_WatchesCarefully,function
	.thumb_func
HandleAction_WatchesCarefully:
	push	{r4, r5, lr}
	ldr	r2, .L2014
	ldr	r1, .L2014+0x4
	ldr	r0, .L2014+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r0, .L2014+0xc
	mov	r5, #0x0
	strh	r5, [r0]
	ldr	r0, .L2014+0x10
	strh	r5, [r0]
	ldr	r4, .L2014+0x14
	ldr	r1, [r4]
	add	r2, r1, #0
	add	r2, r2, #0x79
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L2006	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r2]
	ldr	r0, [r4]
	add	r0, r0, #0x79
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2007	@cond_branch
	ldr	r0, .L2014+0x18
	mov	r1, #0xb
	bl	GetMonData
	ldr	r4, [r4]
	add	r4, r4, #0x7c
	ldr	r2, .L2014+0x1c
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x8]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2014+0x20
	bl	__divsi3
	strb	r0, [r4]
	b	.L2010
.L2015:
	.align	2, 0
.L2014:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleStruct
	.word	gEnemyParty
	.word	gBaseStats
	.word	0x4fb
.L2007:
	ldr	r1, .L2016
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2009
.L2017:
	.align	2, 0
.L2016:
	.word	gBattleCommunication
.L2006:
	add	r1, r1, #0x7a
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L2010	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x7a
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2010	@cond_branch
	ldr	r1, .L2018
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L2009
.L2019:
	.align	2, 0
.L2018:
	.word	gBattleCommunication
.L2010:
	ldr	r0, .L2020
	strb	r5, [r0, #0x5]
.L2009:
	ldr	r1, .L2020+0x4
	ldr	r0, .L2020+0x8
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r1, .L2020+0xc
	mov	r0, #0xa
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2021:
	.align	2, 0
.L2020:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForSafariActions
	.word	gCurrentActionFuncId
.Lfe98:
	.size	 HandleAction_WatchesCarefully,.Lfe98-HandleAction_WatchesCarefully
	.align	2, 0
	.type	 HandleAction_SafariZoneBallThrow,function
	.thumb_func
HandleAction_SafariZoneBallThrow:
	ldr	r2, .L2023
	ldr	r1, .L2023+0x4
	ldr	r0, .L2023+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r0, .L2023+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L2023+0x10
	strh	r1, [r0]
	ldr	r1, .L2023+0x14
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L2023+0x18
	mov	r0, #0x5
	strh	r0, [r1]
	ldr	r1, .L2023+0x1c
	ldr	r0, .L2023+0x20
	ldr	r0, [r0, #0x14]
	str	r0, [r1]
	ldr	r1, .L2023+0x24
	mov	r0, #0xa
	strb	r0, [r1]
	bx	lr
.L2024:
	.align	2, 0
.L2023:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gNumSafariBalls
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForBallThrow
	.word	gCurrentActionFuncId
.Lfe99:
	.size	 HandleAction_SafariZoneBallThrow,.Lfe99-HandleAction_SafariZoneBallThrow
	.align	2, 0
	.type	 HandleAction_ThrowBait,function
	.thumb_func
HandleAction_ThrowBait:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L2028
	ldr	r1, .L2028+0x4
	ldr	r0, .L2028+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r0, .L2028+0xc
	mov	r7, #0x0
	strh	r7, [r0]
	ldr	r0, .L2028+0x10
	strh	r7, [r0]
	bl	Random
	ldr	r6, .L2028+0x14
	ldr	r5, [r6]
	add	r5, r5, #0x7a
	ldrb	r4, [r5]
	add	r4, r4, #0x2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	add	r0, r0, r4
	strb	r0, [r5]
	ldr	r0, [r6]
	add	r1, r0, #0
	add	r1, r1, #0x7a
	ldrb	r0, [r1]
	cmp	r0, #0x6
	bls	.L2026	@cond_branch
	mov	r0, #0x6
	strb	r0, [r1]
.L2026:
	ldr	r0, [r6]
	add	r0, r0, #0x79
	strb	r7, [r0]
	ldr	r1, [r6]
	add	r1, r1, #0x7c
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r1, r0, #0
	add	r1, r1, #0x7c
	ldrb	r0, [r1]
	cmp	r0, #0x2
	bhi	.L2027	@cond_branch
	mov	r0, #0x3
	strb	r0, [r1]
.L2027:
	ldr	r1, .L2028+0x18
	ldr	r0, .L2028+0x1c
	ldr	r0, [r0, #0x8]
	str	r0, [r1]
	ldr	r1, .L2028+0x20
	mov	r0, #0xa
	strb	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2029:
	.align	2, 0
.L2028:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForSafariActions
	.word	gCurrentActionFuncId
.Lfe100:
	.size	 HandleAction_ThrowBait,.Lfe100-HandleAction_ThrowBait
	.align	2, 0
	.type	 HandleAction_ThrowRock,function
	.thumb_func
HandleAction_ThrowRock:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L2033
	ldr	r1, .L2033+0x4
	ldr	r0, .L2033+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r0, .L2033+0xc
	mov	r7, #0x0
	strh	r7, [r0]
	ldr	r0, .L2033+0x10
	strh	r7, [r0]
	bl	Random
	ldr	r6, .L2033+0x14
	ldr	r5, [r6]
	add	r5, r5, #0x79
	ldrb	r4, [r5]
	add	r4, r4, #0x2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	add	r0, r0, r4
	strb	r0, [r5]
	ldr	r0, [r6]
	add	r1, r0, #0
	add	r1, r1, #0x79
	ldrb	r0, [r1]
	cmp	r0, #0x6
	bls	.L2031	@cond_branch
	mov	r0, #0x6
	strb	r0, [r1]
.L2031:
	ldr	r0, [r6]
	add	r0, r0, #0x7a
	strb	r7, [r0]
	ldr	r1, [r6]
	add	r1, r1, #0x7c
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r1, r0, #0
	add	r1, r1, #0x7c
	ldrb	r0, [r1]
	cmp	r0, #0x14
	bls	.L2032	@cond_branch
	mov	r0, #0x14
	strb	r0, [r1]
.L2032:
	ldr	r1, .L2033+0x18
	ldr	r0, .L2033+0x1c
	ldr	r0, [r0, #0x4]
	str	r0, [r1]
	ldr	r1, .L2033+0x20
	mov	r0, #0xa
	strb	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2034:
	.align	2, 0
.L2033:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForSafariActions
	.word	gCurrentActionFuncId
.Lfe101:
	.size	 HandleAction_ThrowRock,.Lfe101-HandleAction_ThrowRock
	.align	2, 0
	.type	 HandleAction_SafariZoneRun,function
	.thumb_func
HandleAction_SafariZoneRun:
	push	{r4, lr}
	ldr	r2, .L2036
	ldr	r1, .L2036+0x4
	ldr	r4, .L2036+0x8
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x11
	bl	PlaySE
	ldr	r0, .L2036+0xc
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L2036+0x10
	mov	r0, #0x4
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2037:
	.align	2, 0
.L2036:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattleOutcome
.Lfe102:
	.size	 HandleAction_SafariZoneRun,.Lfe102-HandleAction_SafariZoneRun
	.align	2, 0
	.type	 HandleAction_OldManBallThrow,function
	.thumb_func
HandleAction_OldManBallThrow:
	ldr	r3, .L2039
	ldr	r1, .L2039+0x4
	ldr	r0, .L2039+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	strb	r2, [r3]
	ldr	r0, .L2039+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L2039+0x10
	strh	r1, [r0]
	ldr	r1, .L2039+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	ldr	r2, .L2039+0x18
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L2039+0x1c
	ldr	r0, .L2039+0x20
	ldr	r0, [r0, #0xc]
	str	r0, [r1]
	ldr	r1, .L2039+0x24
	mov	r0, #0xa
	strb	r0, [r1]
	ldr	r1, .L2039+0x28
	mov	r0, #0xc
	strb	r0, [r1, #0x1]
	bx	lr
.L2040:
	.align	2, 0
.L2039:
	.word	gBattlerAttacker
	.word	gBattlerByTurnOrder
	.word	gCurrentTurnActionNumber
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattleTextBuff1
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
	.word	gBattlescriptsForSafariActions
	.word	gCurrentActionFuncId
	.word	gActionsByTurnOrder
.Lfe103:
	.size	 HandleAction_OldManBallThrow,.Lfe103-HandleAction_OldManBallThrow
	.align	2, 0
	.type	 HandleAction_TryFinish,function
	.thumb_func
HandleAction_TryFinish:
	push	{lr}
	bl	HandleFaintedMonActions
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L2042	@cond_branch
	ldr	r0, .L2043
	ldr	r0, [r0]
	add	r0, r0, #0x4d
	strb	r1, [r0]
	ldr	r1, .L2043+0x4
	mov	r0, #0xc
	strb	r0, [r1]
.L2042:
	pop	{r0}
	bx	r0
.L2044:
	.align	2, 0
.L2043:
	.word	gBattleStruct
	.word	gCurrentActionFuncId
.Lfe104:
	.size	 HandleAction_TryFinish,.Lfe104-HandleAction_TryFinish
	.align	2, 0
	.type	 HandleAction_NothingIsFainted,function
	.thumb_func
HandleAction_NothingIsFainted:
	ldr	r1, .L2046
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r3, .L2046+0x4
	ldr	r2, .L2046+0x8
	ldrb	r0, [r1]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	ldr	r2, .L2046+0xc
	ldr	r0, [r2]
	ldr	r1, .L2046+0x10
	and	r0, r0, r1
	str	r0, [r2]
	bx	lr
.L2047:
	.align	2, 0
.L2046:
	.word	gCurrentTurnActionNumber
	.word	gCurrentActionFuncId
	.word	gActionsByTurnOrder
	.word	gHitMarker
	.word	-0xe176d51
.Lfe105:
	.size	 HandleAction_NothingIsFainted,.Lfe105-HandleAction_NothingIsFainted
	.align	2, 0
	.type	 HandleAction_ActionFinished,function
	.thumb_func
HandleAction_ActionFinished:
	push	{r4, r5, lr}
	ldr	r1, .L2049
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r3, .L2049+0x4
	ldr	r2, .L2049+0x8
	ldrb	r0, [r1]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	bl	SpecialStatusesClear
	ldr	r2, .L2049+0xc
	ldr	r0, [r2]
	ldr	r1, .L2049+0x10
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2049+0x14
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L2049+0x18
	mov	r4, #0x0
	str	r4, [r0]
	ldr	r0, .L2049+0x1c
	strb	r1, [r0]
	ldr	r5, .L2049+0x20
	strb	r1, [r5, #0x18]
	strb	r1, [r5, #0x19]
	ldr	r2, .L2049+0x24
	ldr	r3, .L2049+0x28
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	strh	r4, [r0]
	ldr	r2, .L2049+0x2c
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	strh	r4, [r0]
	ldr	r0, .L2049+0x30
	ldr	r0, [r0]
	strb	r1, [r0, #0x13]
	ldr	r0, .L2049+0x34
	strh	r4, [r0]
	strb	r1, [r5, #0x14]
	ldr	r0, .L2049+0x38
	strb	r1, [r0, #0x3]
	strb	r1, [r0, #0x4]
	strb	r1, [r5, #0x16]
	ldr	r0, .L2049+0x3c
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0x20
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2050:
	.align	2, 0
.L2049:
	.word	gCurrentTurnActionNumber
	.word	gCurrentActionFuncId
	.word	gActionsByTurnOrder
	.word	gHitMarker
	.word	-0xe176d51
	.word	gCurrentMove
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
	.word	gBattleScripting
	.word	gLastLandedMoves
	.word	gBattlerAttacker
	.word	gLastHitByType
	.word	gBattleStruct
	.word	gDynamicBasePower
	.word	gBattleCommunication
	.word	gBattleResources
.Lfe106:
	.size	 HandleAction_ActionFinished,.Lfe106-HandleAction_ActionFinished
	.comm	gBattleResults, 68	@ 68
	.comm	gHealthboxSpriteIds, 4	@ 4
	.comm	gBattlerControllerFuncs, 16	@ 16
	.comm	gPreBattleCallback1, 4	@ 4
	.comm	gBattleMainFunc, 4	@ 4
	.comm	gBattleControllerData, 4	@ 4
	.comm	gMultiUsePlayerCursor, 4	@ 1
	.comm	gNumberOfMovesToChoose, 4	@ 1
	.comm	gLeveledUpInBattle, 4	@ 1
.text
	.align	2, 0 @ Don't pad with nop

