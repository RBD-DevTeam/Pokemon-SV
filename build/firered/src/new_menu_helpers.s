@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sScheduledBgCopiesToVram,object
	.size	 sScheduledBgCopiesToVram,4
sScheduledBgCopiesToVram:
	.byte	0x0
	.space	3
	.align	1, 0
	.type	 sTempTileDataBufferCursor,object
	.size	 sTempTileDataBufferCursor,2
sTempTileDataBufferCursor:
	.short	0x0
	.align	2, 0
	.type	 sTempTileDataBuffers,object
	.size	 sTempTileDataBuffers,128
sTempTileDataBuffers:
	.word	0x0
	.space	124
	.type	 sStartMenuWindowId,object
	.size	 sStartMenuWindowId,1
sStartMenuWindowId:
	.byte	0x0
	.section .rodata
	.align	1, 0
	.type	 sUnusedWindow_Gfx,object
sUnusedWindow_Gfx:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xff00
	.short	0x0
	.short	0xfff0
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xffff
	.short	0xffff
	.short	0xefff
	.short	0xeeee
	.short	0xdddf
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xeedd
	.short	0xeddd
	.short	0xeedd
	.short	0xbedd
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xffff
	.short	0xffff
	.short	0xeeee
	.short	0xeeee
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xeeee
	.short	0xeeee
	.short	0xbbbb
	.short	0xbbbb
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xffff
	.short	0xffff
	.short	0xeeee
	.short	0xfffe
	.short	0xdddd
	.short	0xfddd
	.short	0xdddd
	.short	0xdddd
	.short	0xddde
	.short	0xddee
	.short	0xddeb
	.short	0xddee
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xff
	.short	0x0
	.short	0xfff
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xfff0
	.short	0x0
	.short	0xff00
	.short	0x0
	.short	0xff00
	.short	0x0
	.short	0xfff0
	.short	0x0
	.short	0xdfff
	.short	0x0
	.short	0xdfff
	.short	0x0
	.short	0xdfff
	.short	0xddde
	.short	0xabed
	.short	0xdddf
	.short	0xabed
	.short	0xeeef
	.short	0xabee
	.short	0xdddf
	.short	0xabed
	.short	0xdddd
	.short	0xabed
	.short	0xdddd
	.short	0xabed
	.short	0xdddd
	.short	0xabed
	.short	0xdddd
	.short	0xabed
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xdeba
	.short	0xeddd
	.short	0xdeba
	.short	0xfddd
	.short	0xeeba
	.short	0xfeee
	.short	0xdeba
	.short	0xfddd
	.short	0xdeba
	.short	0xdddd
	.short	0xdeba
	.short	0xdddd
	.short	0xdeba
	.short	0xdddd
	.short	0xdeba
	.short	0xdddd
	.short	0xffff
	.short	0x0
	.short	0xfff
	.short	0x0
	.short	0xff
	.short	0x0
	.short	0xff
	.short	0x0
	.short	0xfff
	.short	0x0
	.short	0xfffd
	.short	0x0
	.short	0xfffd
	.short	0x0
	.short	0xfffd
	.short	0x0
	.short	0x0
	.short	0xdfff
	.short	0x0
	.short	0xfff0
	.short	0x0
	.short	0xff00
	.short	0x0
	.short	0xf000
	.short	0x0
	.short	0xf000
	.short	0x0
	.short	0xff00
	.short	0x0
	.short	0xfff0
	.short	0x0
	.short	0xfff0
	.short	0xdddd
	.short	0xabed
	.short	0xdddd
	.short	0xabed
	.short	0xdddf
	.short	0xabed
	.short	0xefff
	.short	0xabee
	.short	0xdeff
	.short	0xabed
	.short	0xddff
	.short	0xabed
	.short	0xdddf
	.short	0xabed
	.short	0xdddf
	.short	0xabed
	.short	0xdeba
	.short	0xdddd
	.short	0xdeba
	.short	0xdddd
	.short	0xdeba
	.short	0xfddd
	.short	0xeeba
	.short	0xfffe
	.short	0xdeba
	.short	0xffed
	.short	0xdeba
	.short	0xffdd
	.short	0xdeba
	.short	0xfddd
	.short	0xdeba
	.short	0xfddd
	.short	0xfffd
	.short	0x0
	.short	0xfff
	.short	0x0
	.short	0xff
	.short	0x0
	.short	0xf
	.short	0x0
	.short	0xf
	.short	0x0
	.short	0xff
	.short	0x0
	.short	0xfff
	.short	0x0
	.short	0xfff
	.short	0x0
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xfff0
	.short	0x0
	.short	0xff00
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xeedd
	.short	0xbedd
	.short	0xeedd
	.short	0xeddd
	.short	0xdddd
	.short	0xdddd
	.short	0xdddf
	.short	0xdddd
	.short	0xefff
	.short	0xeeee
	.short	0xffff
	.short	0xffff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xbbbb
	.short	0xbbbb
	.short	0xeeee
	.short	0xeeee
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xeeee
	.short	0xeeee
	.short	0xffff
	.short	0xffff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xddeb
	.short	0xddee
	.short	0xddde
	.short	0xddee
	.short	0xdddd
	.short	0xdddd
	.short	0xdddd
	.short	0xfddd
	.short	0xeeee
	.short	0xfffe
	.short	0xffff
	.short	0xffff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xffff
	.short	0x0
	.short	0xfff
	.short	0x0
	.short	0xff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sUnusedWindow_Gfx,640
	.globl	gMenuMessageWindow_Gfx
	.align	1, 0
	.type	 gMenuMessageWindow_Gfx,object
gMenuMessageWindow_Gfx:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xf000
	.short	0x0
	.short	0xcef0
	.short	0xf000
	.short	0xccce
	.short	0xcf00
	.short	0xbccc
	.short	0xccf0
	.short	0xaabc
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xffff
	.short	0xffff
	.short	0xcccc
	.short	0xcccc
	.short	0xcccc
	.short	0xcccc
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xf
	.short	0x0
	.short	0xfec
	.short	0x0
	.short	0xeccc
	.short	0xf
	.short	0xcccb
	.short	0xfc
	.short	0xcbaa
	.short	0xfcc
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xf000
	.short	0x0
	.short	0xe000
	.short	0x0
	.short	0xcf00
	.short	0x0
	.short	0xce00
	.short	0x0
	.short	0xccf0
	.short	0x0
	.short	0xccf0
	.short	0x0
	.short	0xccf0
	.short	0xcccf
	.short	0xaaaa
	.short	0xaccc
	.short	0xaaaa
	.short	0xaacc
	.short	0xaaaa
	.short	0xaabc
	.short	0xaaaa
	.short	0xaaac
	.short	0xaaaa
	.short	0xaaab
	.short	0xaaaa
	.short	0xaaab
	.short	0xaaaa
	.short	0xdaaa
	.short	0xaaad
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xfccc
	.short	0xaaaa
	.short	0xccca
	.short	0xaaaa
	.short	0xccaa
	.short	0xaaaa
	.short	0xcbaa
	.short	0xaaaa
	.short	0xcaaa
	.short	0xaaaa
	.short	0xbaaa
	.short	0xaaaa
	.short	0xbaaa
	.short	0xdaaa
	.short	0xaaad
	.short	0x0
	.short	0x0
	.short	0xf
	.short	0x0
	.short	0xe
	.short	0x0
	.short	0xfc
	.short	0x0
	.short	0xec
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0x0
	.short	0xccf0
	.short	0x0
	.short	0xccf0
	.short	0x0
	.short	0xccf0
	.short	0x0
	.short	0xccf0
	.short	0x0
	.short	0xccf0
	.short	0x0
	.short	0xccf0
	.short	0x0
	.short	0xccf0
	.short	0x0
	.short	0xccf0
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xddaa
	.short	0xaadd
	.short	0xfcc
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0xfcc
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xccf0
	.short	0xaabc
	.short	0xcf00
	.short	0xbccc
	.short	0xf000
	.short	0xccce
	.short	0x0
	.short	0xcef0
	.short	0x0
	.short	0xf000
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xaaaa
	.short	0xcccc
	.short	0xcccc
	.short	0xcccc
	.short	0xcccc
	.short	0xffff
	.short	0xffff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xcbaa
	.short	0xfcc
	.short	0xcccb
	.short	0xfc
	.short	0xeccc
	.short	0xf
	.short	0xfec
	.short	0x0
	.short	0xf
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gMenuMessageWindow_Gfx,576
	.globl	gStandardMenuPalette
	.align	1, 0
	.type	 gStandardMenuPalette,object
gStandardMenuPalette:
	.short	0x7fff
	.short	0x7fff
	.short	0x318c
	.short	0x675a
	.short	0x43c
	.short	0x3aff
	.short	0x664
	.short	0x4bd2
	.short	0x6546
	.short	0x7b14
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gStandardMenuPalette,32
	.type	 sTextSpeedFrameDelays,object
sTextSpeedFrameDelays:
	.byte	0x8
	.byte	0x4
	.byte	0x1
	.size	 sTextSpeedFrameDelays,3
	.align	2, 0
	.type	 sStandardTextBox_WindowTemplates,object
sStandardTextBox_WindowTemplates:
	.byte	0x0
	.byte	0x2
	.byte	0xf
	.byte	0x1a
	.byte	0x4
	.byte	0xf
	.short	0x198
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sStandardTextBox_WindowTemplates,16
	.align	2, 0
	.type	 sYesNo_WindowTemplate,object
	.size	 sYesNo_WindowTemplate,8
sYesNo_WindowTemplate:
	.byte	0x0
	.byte	0x15
	.byte	0x9
	.byte	0x6
	.byte	0x4
	.byte	0xf
	.short	0x125
	.align	2, 0
	.type	 gFontInfos,object
	.size	 gFontInfos,96
gFontInfos:
	.word	Font0Func
	.byte	0x8
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x31
	.space	2
	.word	Font1Func
	.byte	0x8
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x31
	.space	2
	.word	Font2Func
	.byte	0xa
	.byte	0xe
	.byte	0x1
	.byte	0x0
	.byte	0x20
	.byte	0x31
	.space	2
	.word	Font3Func
	.byte	0xa
	.byte	0xe
	.byte	0x1
	.byte	0x0
	.byte	0x20
	.byte	0x31
	.space	2
	.word	Font4Func
	.byte	0xa
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x31
	.space	2
	.word	Font5Func
	.byte	0xa
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x31
	.space	2
	.word	Font6Func
	.byte	0x8
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x20
	.byte	0x31
	.space	2
	.word	0x0
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x10
	.byte	0xf2
	.space	2
	.type	 gMenuCursorDimensions,object
gMenuCursorDimensions:
	.byte	0x8
	.byte	0xd
	.byte	0x8
	.byte	0xe
	.byte	0x8
	.byte	0xe
	.byte	0x8
	.byte	0xe
	.byte	0x8
	.byte	0xe
	.byte	0x8
	.byte	0xe
	.byte	0x8
	.byte	0x10
	.byte	0x0
	.byte	0x0
	.size	 gMenuCursorDimensions,16
.text
	.align	2, 0
	.globl	ClearScheduledBgCopiesToVram
	.type	 ClearScheduledBgCopiesToVram,function
	.thumb_func
ClearScheduledBgCopiesToVram:
	push	{lr}
	ldr	r0, .L3
	mov	r1, #0x0
	mov	r2, #0x4
	bl	memset
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sScheduledBgCopiesToVram
.Lfe1:
	.size	 ClearScheduledBgCopiesToVram,.Lfe1-ClearScheduledBgCopiesToVram
	.align	2, 0
	.globl	ScheduleBgCopyTilemapToVram
	.type	 ScheduleBgCopyTilemapToVram,function
	.thumb_func
ScheduleBgCopyTilemapToVram:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L6
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	sScheduledBgCopiesToVram
.Lfe2:
	.size	 ScheduleBgCopyTilemapToVram,.Lfe2-ScheduleBgCopyTilemapToVram
	.align	2, 0
	.globl	DoScheduledBgTilemapCopiesToVram
	.type	 DoScheduledBgTilemapCopiesToVram,function
	.thumb_func
DoScheduledBgTilemapCopiesToVram:
	push	{r4, lr}
	ldr	r4, .L13
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L9	@cond_branch
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	strb	r0, [r4]
.L9:
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	bne	.L10	@cond_branch
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
.L10:
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x1
	bne	.L11	@cond_branch
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	strb	r0, [r4, #0x2]
.L11:
	ldrb	r0, [r4, #0x3]
	cmp	r0, #0x1
	bne	.L12	@cond_branch
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	strb	r0, [r4, #0x3]
.L12:
	pop	{r4}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	sScheduledBgCopiesToVram
.Lfe3:
	.size	 DoScheduledBgTilemapCopiesToVram,.Lfe3-DoScheduledBgTilemapCopiesToVram
	.align	2, 0
	.globl	ResetTempTileDataBuffers
	.type	 ResetTempTileDataBuffers,function
	.thumb_func
ResetTempTileDataBuffers:
	push	{lr}
	ldr	r3, .L21
	ldr	r1, .L21+0x4
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0x7c
.L19:
	str	r2, [r0]
	sub	r0, r0, #0x4
	cmp	r0, r1
	bge	.L19	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3]
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	sTempTileDataBufferCursor
	.word	sTempTileDataBuffers
.Lfe4:
	.size	 ResetTempTileDataBuffers,.Lfe4-ResetTempTileDataBuffers
	.align	2, 0
	.globl	FreeTempTileDataBuffersIfPossible
	.type	 FreeTempTileDataBuffersIfPossible,function
	.thumb_func
FreeTempTileDataBuffersIfPossible:
	push	{r4, r5, r6, lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L24	@cond_branch
	ldr	r1, .L33
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L25	@cond_branch
	mov	r4, #0x0
	ldrh	r1, [r1]
	cmp	r4, r1
	bge	.L27	@cond_branch
	ldr	r5, .L33+0x4
	mov	r6, #0x0
.L29:
	ldr	r0, [r5]
	bl	Free
	stmia	r5!, {r6}
	add	r4, r4, #0x1
	ldr	r0, .L33
	ldrh	r0, [r0]
	cmp	r4, r0
	blt	.L29	@cond_branch
.L27:
	ldr	r1, .L33
	mov	r0, #0x0
	strh	r0, [r1]
.L25:
	mov	r0, #0x0
	b	.L32
.L34:
	.align	2, 0
.L33:
	.word	sTempTileDataBufferCursor
	.word	sTempTileDataBuffers
.L24:
	mov	r0, #0x1
.L32:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 FreeTempTileDataBuffersIfPossible,.Lfe5-FreeTempTileDataBuffersIfPossible
	.align	2, 0
	.globl	DecompressAndCopyTileDataToVram
	.type	 DecompressAndCopyTileDataToVram,function
	.thumb_func
DecompressAndCopyTileDataToVram:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r9, r3
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r6, .L40
	ldrh	r0, [r6]
	cmp	r0, #0x1f
	bhi	.L36	@cond_branch
	add	r0, r4, #0
	add	r1, sp, #0x4
	bl	MallocAndDecompress
	add	r4, r0, #0
	cmp	r5, #0
	bne	.L37	@cond_branch
	ldr	r5, [sp, #0x4]
.L37:
	cmp	r4, #0
	beq	.L38	@cond_branch
	lsl	r2, r5, #0x10
	lsr	r2, r2, #0x10
	str	r7, [sp]
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, r9
	bl	CopyDecompressedTileDataToVram
	ldr	r2, .L40+0x4
	ldrh	r0, [r6]
	add	r1, r0, #0x1
	strh	r1, [r6]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xe
	add	r0, r0, r2
	str	r4, [r0]
.L38:
	add	r0, r4, #0
	b	.L39
.L41:
	.align	2, 0
.L40:
	.word	sTempTileDataBufferCursor
	.word	sTempTileDataBuffers
.L36:
	mov	r0, #0x0
.L39:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 DecompressAndCopyTileDataToVram,.Lfe6-DecompressAndCopyTileDataToVram
	.align	2, 0
	.globl	DecompressAndCopyTileDataToVram2
	.type	 DecompressAndCopyTileDataToVram2,function
	.thumb_func
DecompressAndCopyTileDataToVram2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	add	r4, r1, #0
	add	r6, r2, #0
	ldr	r1, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r9, r3
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r5, .L47
	ldrh	r0, [r5]
	cmp	r0, #0x1f
	bhi	.L43	@cond_branch
	add	r0, r4, #0
	add	r1, sp, #0x4
	bl	MallocAndDecompress
	add	r4, r0, #0
	ldr	r0, [sp, #0x4]
	cmp	r0, r6
	bls	.L44	@cond_branch
	str	r6, [sp, #0x4]
.L44:
	cmp	r4, #0
	beq	.L45	@cond_branch
	ldr	r2, [sp, #0x4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r7, [sp]
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, r9
	bl	CopyDecompressedTileDataToVram
	ldr	r2, .L47+0x4
	ldrh	r0, [r5]
	add	r1, r0, #0x1
	strh	r1, [r5]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xe
	add	r0, r0, r2
	str	r4, [r0]
.L45:
	add	r0, r4, #0
	b	.L46
.L48:
	.align	2, 0
.L47:
	.word	sTempTileDataBufferCursor
	.word	sTempTileDataBuffers
.L43:
	mov	r0, #0x0
.L46:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 DecompressAndCopyTileDataToVram2,.Lfe7-DecompressAndCopyTileDataToVram2
	.align	2, 0
	.globl	DecompressAndLoadBgGfxUsingHeap
	.type	 DecompressAndLoadBgGfxUsingHeap,function
	.thumb_func
DecompressAndLoadBgGfxUsingHeap:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	add	r5, r2, #0
	ldr	r2, [sp, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r9, r3
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r1, #0
	add	r1, sp, #0x4
	bl	MallocAndDecompress
	add	r6, r0, #0
	cmp	r5, #0
	bne	.L50	@cond_branch
	ldr	r5, [sp, #0x4]
.L50:
	cmp	r6, #0
	beq	.L51	@cond_branch
	ldr	r0, .L52
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r2, r5, #0x10
	lsr	r2, r2, #0x10
	str	r7, [sp]
	mov	r0, r8
	add	r1, r6, #0
	mov	r3, r9
	bl	CopyDecompressedTileDataToVram
	ldr	r2, .L52+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r6, #0
	bl	SetWordTaskArg
.L51:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	TaskFreeBufAfterCopyingTileDataToVram
	.word	gTasks
.Lfe8:
	.size	 DecompressAndLoadBgGfxUsingHeap,.Lfe8-DecompressAndLoadBgGfxUsingHeap
	.align	2, 0
	.globl	DecompressAndLoadBgGfxUsingHeap2
	.type	 DecompressAndLoadBgGfxUsingHeap2,function
	.thumb_func
DecompressAndLoadBgGfxUsingHeap2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r4, r2, #0
	ldr	r2, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r8, r3
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	add	r0, r1, #0
	add	r1, sp, #0x4
	bl	MallocAndDecompress
	add	r5, r0, #0
	ldr	r0, [sp, #0x4]
	cmp	r0, r4
	bls	.L55	@cond_branch
	str	r4, [sp, #0x4]
.L55:
	cmp	r5, #0
	beq	.L56	@cond_branch
	ldr	r0, .L57
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r2, [sp, #0x4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r6, [sp]
	add	r0, r7, #0
	add	r1, r5, #0
	mov	r3, r8
	bl	CopyDecompressedTileDataToVram
	ldr	r2, .L57+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r5, #0
	bl	SetWordTaskArg
.L56:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	TaskFreeBufAfterCopyingTileDataToVram
	.word	gTasks
.Lfe9:
	.size	 DecompressAndLoadBgGfxUsingHeap2,.Lfe9-DecompressAndLoadBgGfxUsingHeap2
	.align	2, 0
	.type	 TaskFreeBufAfterCopyingTileDataToVram,function
	.thumb_func
TaskFreeBufAfterCopyingTileDataToVram:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L61
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	bl	WaitDma3Request
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L60	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetWordTaskArg
	bl	Free
	add	r0, r4, #0
	bl	DestroyTask
.L60:
	pop	{r4}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gTasks
.Lfe10:
	.size	 TaskFreeBufAfterCopyingTileDataToVram,.Lfe10-TaskFreeBufAfterCopyingTileDataToVram
	.align	2, 0
	.globl	MallocAndDecompress
	.type	 MallocAndDecompress,function
	.thumb_func
MallocAndDecompress:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrb	r0, [r5, #0x1]
	strb	r0, [r1]
	ldrb	r0, [r5, #0x2]
	strb	r0, [r1, #0x1]
	ldrb	r0, [r5, #0x3]
	strb	r0, [r1, #0x2]
	mov	r0, #0x0
	strb	r0, [r1, #0x3]
	ldr	r0, [r1]
	bl	Alloc
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L64	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	LZ77UnCompWram
.L64:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 MallocAndDecompress,.Lfe11-MallocAndDecompress
	.align	2, 0
	.type	 CopyDecompressedTileDataToVram,function
	.thumb_func
CopyDecompressedTileDataToVram:
	push	{r4, lr}
	add	r4, r1, #0
	ldr	r1, [sp, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0
	beq	.L69	@cond_branch
	cmp	r1, #0x1
	beq	.L66	@cond_branch
.L69:
	add	r1, r4, #0
	bl	LoadBgTiles
	b	.L73
.L66:
	add	r1, r4, #0
	bl	LoadBgTilemap
.L73:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 CopyDecompressedTileDataToVram,.Lfe12-CopyDecompressedTileDataToVram
	.align	2, 0
	.globl	SetBgTilemapPalette
	.type	 SetBgTilemapPalette,function
	.thumb_func
SetBgTilemapPalette:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r5, r2, #0
	ldr	r4, [sp, #0x28]
	ldr	r2, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x4]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	bl	GetBgTilemapBuffer
	mov	r8, r0
	add	r0, r5, r4
	cmp	r5, r0
	bge	.L76	@cond_branch
	mov	r9, r0
.L78:
	ldr	r3, [sp]
	ldr	r1, [sp, #0x4]
	add	r0, r3, r1
	add	r7, r5, #0x1
	cmp	r3, r0
	bge	.L77	@cond_branch
	lsl	r6, r5, #0x5
	ldr	r1, .L85
	mov	ip, r1
	mov	r1, sl
	lsl	r5, r1, #0xc
	add	r4, r0, #0
.L82:
	add	r1, r6, r3
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r2, [r1]
	mov	r0, ip
	and	r0, r0, r2
	orr	r0, r0, r5
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	blt	.L82	@cond_branch
.L77:
	lsl	r0, r7, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r9
	blt	.L78	@cond_branch
.L76:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	0xfff
.Lfe13:
	.size	 SetBgTilemapPalette,.Lfe13-SetBgTilemapPalette
	.align	2, 0
	.globl	CopyToBufferFromBgTilemap
	.type	 CopyToBufferFromBgTilemap,function
	.thumb_func
CopyToBufferFromBgTilemap:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	sl, r1
	ldr	r1, [sp, #0x24]
	ldr	r4, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp]
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	bl	GetBgTilemapBuffer
	add	r7, r0, #0
	mov	r0, #0x0
	cmp	r0, r8
	bcs	.L89	@cond_branch
.L91:
	mov	r2, #0x0
	add	r6, r0, #0x1
	cmp	r2, r5
	bcs	.L90	@cond_branch
	mov	r4, r0
	mul	r4, r4, r5
	ldr	r1, [sp]
	add	r0, r0, r1
	lsl	r3, r0, #0x5
.L95:
	add	r1, r4, r2
	lsl	r1, r1, #0x1
	add	r1, r1, sl
	add	r0, r3, r2
	add	r0, r0, r9
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r5
	bcc	.L95	@cond_branch
.L90:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r8
	bcc	.L91	@cond_branch
.L89:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 CopyToBufferFromBgTilemap,.Lfe14-CopyToBufferFromBgTilemap
	.align	2, 0
	.globl	ResetBgPositions
	.type	 ResetBgPositions,function
	.thumb_func
ResetBgPositions:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 ResetBgPositions,.Lfe15-ResetBgPositions
	.align	2, 0
	.globl	InitStandardTextBoxWindows
	.type	 InitStandardTextBoxWindows,function
	.thumb_func
InitStandardTextBoxWindows:
	push	{lr}
	ldr	r0, .L100
	bl	InitWindows
	ldr	r1, .L100+0x4
	mov	r0, #0xff
	strb	r0, [r1]
	bl	MapNamePopupWindowIdSetDummy
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	sStandardTextBox_WindowTemplates
	.word	sStartMenuWindowId
.Lfe16:
	.size	 InitStandardTextBoxWindows,.Lfe16-InitStandardTextBoxWindows
	.align	2, 0
	.globl	FreeAllOverworldWindowBuffers
	.type	 FreeAllOverworldWindowBuffers,function
	.thumb_func
FreeAllOverworldWindowBuffers:
	push	{lr}
	bl	FreeAllWindowBuffers
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 FreeAllOverworldWindowBuffers,.Lfe17-FreeAllOverworldWindowBuffers
	.align	2, 0
	.globl	InitTextBoxGfxAndPrinters
	.type	 InitTextBoxGfxAndPrinters,function
	.thumb_func
InitTextBoxGfxAndPrinters:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	bl	DeactivateAllTextPrinters
	bl	LoadStdWindowFrameGfx
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 InitTextBoxGfxAndPrinters,.Lfe18-InitTextBoxGfxAndPrinters
	.align	2, 0
	.globl	RunTextPrinters_CheckPrinter0Active
	.type	 RunTextPrinters_CheckPrinter0Active,function
	.thumb_func
RunTextPrinters_CheckPrinter0Active:
	push	{lr}
	bl	RunTextPrinters
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 RunTextPrinters_CheckPrinter0Active,.Lfe19-RunTextPrinters_CheckPrinter0Active
	.align	2, 0
	.globl	AddTextPrinterParameterized2
	.type	 AddTextPrinterParameterized2,function
	.thumb_func
AddTextPrinterParameterized2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r7, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	mov	r8, r4
	ldr	r5, [sp, #0x30]
	ldr	r6, [sp, #0x34]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	str	r2, [sp]
	mov	r2, sp
	mov	r4, #0x0
	strb	r0, [r2, #0x4]
	mov	r0, sp
	strb	r1, [r0, #0x5]
	strb	r4, [r0, #0x6]
	mov	r1, #0x1
	strb	r1, [r0, #0x7]
	strb	r4, [r0, #0x8]
	strb	r1, [r0, #0x9]
	strb	r1, [r0, #0xa]
	strb	r1, [r0, #0xb]
	mov	r4, sp
	ldrb	r2, [r4, #0xc]
	sub	r1, r1, #0x11
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r4, #0xc]
	mov	r0, sp
	mov	r2, r8
	lsl	r2, r2, #0x4
	mov	r4, #0xf
	strb	r2, [r0, #0xc]
	mov	r2, sp
	and	r5, r5, r4
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	orr	r1, r1, r5
	strb	r1, [r2, #0xd]
	mov	r0, sp
	lsr	r6, r6, #0x14
	and	r1, r1, r4
	orr	r1, r1, r6
	strb	r1, [r0, #0xd]
	ldr	r2, .L106
	ldrb	r1, [r2]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, sp
	add	r1, r3, #0
	add	r2, r7, #0
	bl	AddTextPrinter
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L107:
	.align	2, 0
.L106:
	.word	gTextFlags
.Lfe20:
	.size	 AddTextPrinterParameterized2,.Lfe20-AddTextPrinterParameterized2
	.align	2, 0
	.globl	AddTextPrinterDiffStyle
	.type	 AddTextPrinterDiffStyle,function
	.thumb_func
AddTextPrinterDiffStyle:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	ldr	r3, .L113
	mov	r4, #0x1
	and	r0, r0, r4
	ldrb	r2, [r3]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3]
	bl	ContextNpcGetTextColor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L109	@cond_branch
	bl	GetTextSpeedSetting
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r2, .L113+0x4
	str	r5, [sp]
	mov	r0, #0x8
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x4
	bl	AddTextPrinterParameterized2
	b	.L110
.L114:
	.align	2, 0
.L113:
	.word	gTextFlags
	.word	gStringVar4
.L109:
	cmp	r0, #0x1
	bne	.L111	@cond_branch
	bl	GetTextSpeedSetting
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r2, .L115
	str	r5, [sp]
	mov	r0, #0x4
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x5
	bl	AddTextPrinterParameterized2
	b	.L110
.L116:
	.align	2, 0
.L115:
	.word	gStringVar4
.L111:
	bl	GetTextSpeedSetting
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r2, .L117
	str	r5, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	AddTextPrinterParameterized2
.L110:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L118:
	.align	2, 0
.L117:
	.word	gStringVar4
.Lfe21:
	.size	 AddTextPrinterDiffStyle,.Lfe21-AddTextPrinterDiffStyle
	.align	2, 0
	.globl	AddTextPrinterForMessage
	.type	 AddTextPrinterForMessage,function
	.thumb_func
AddTextPrinterForMessage:
	push	{r4, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L120
	mov	r4, #0x1
	and	r0, r0, r4
	ldrb	r2, [r3]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3]
	bl	GetTextSpeedSetting
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r2, .L120+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	AddTextPrinterParameterized2
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	gTextFlags
	.word	gStringVar4
.Lfe22:
	.size	 AddTextPrinterForMessage,.Lfe22-AddTextPrinterForMessage
	.align	2, 0
	.globl	AddTextPrinterWithCustomSpeedForMessage
	.type	 AddTextPrinterWithCustomSpeedForMessage,function
	.thumb_func
AddTextPrinterWithCustomSpeedForMessage:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r4, .L123
	mov	r5, #0x1
	and	r0, r0, r5
	ldrb	r2, [r4]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4]
	ldr	r2, .L123+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	AddTextPrinterParameterized2
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L124:
	.align	2, 0
.L123:
	.word	gTextFlags
	.word	gStringVar4
.Lfe23:
	.size	 AddTextPrinterWithCustomSpeedForMessage,.Lfe23-AddTextPrinterWithCustomSpeedForMessage
	.align	2, 0
	.globl	LoadStdWindowFrameGfx
	.type	 LoadStdWindowFrameGfx,function
	.thumb_func
LoadStdWindowFrameGfx:
	push	{lr}
	ldr	r0, .L128
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L126	@cond_branch
	ldr	r2, .L128+0x4
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	LoadQuestLogWindowTiles
	b	.L127
.L129:
	.align	2, 0
.L128:
	.word	gQuestLogState
	.word	gTextFlags
.L126:
	bl	Menu_LoadStdPal
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xf0
	bl	LoadMenuMessageWindowGfx
.L127:
	mov	r1, #0x85
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xe0
	bl	LoadUserWindowGfx
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 LoadStdWindowFrameGfx,.Lfe24-LoadStdWindowFrameGfx
	.align	2, 0
	.globl	DrawDialogueFrame
	.type	 DrawDialogueFrame,function
	.thumb_func
DrawDialogueFrame:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L132
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L131	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L131:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	WindowFunc_DrawDialogueFrame
.Lfe25:
	.size	 DrawDialogueFrame,.Lfe25-DrawDialogueFrame
	.align	2, 0
	.globl	DrawStdWindowFrame
	.type	 DrawStdWindowFrame,function
	.thumb_func
DrawStdWindowFrame:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L136
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	cmp	r4, #0x1
	bne	.L135	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L135:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L137:
	.align	2, 0
.L136:
	.word	WindowFunc_DrawStandardFrame
.Lfe26:
	.size	 DrawStdWindowFrame,.Lfe26-DrawStdWindowFrame
	.align	2, 0
	.globl	ClearDialogWindowAndFrame
	.type	 ClearDialogWindowAndFrame,function
	.thumb_func
ClearDialogWindowAndFrame:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L141
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	ClearWindowTilemap
	cmp	r4, #0x1
	bne	.L139	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L139:
	ldr	r0, .L141+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L140	@cond_branch
	bl	CommitQuestLogWindow1
.L140:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	WindowFunc_ClearDialogWindowAndFrame
	.word	gQuestLogState
.Lfe27:
	.size	 ClearDialogWindowAndFrame,.Lfe27-ClearDialogWindowAndFrame
	.align	2, 0
	.globl	ClearStdWindowAndFrame
	.type	 ClearStdWindowAndFrame,function
	.thumb_func
ClearStdWindowAndFrame:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L145
	add	r0, r5, #0
	bl	CallWindowFunction
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	ClearWindowTilemap
	cmp	r4, #0x1
	bne	.L144	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
.L144:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L146:
	.align	2, 0
.L145:
	.word	WindowFunc_ClearStdWindowAndFrame
.Lfe28:
	.size	 ClearStdWindowAndFrame,.Lfe28-ClearStdWindowAndFrame
	.align	2, 0
	.type	 WindowFunc_DrawStandardFrame,function
	.thumb_func
WindowFunc_DrawStandardFrame:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	add	r4, r2, #0
	ldr	r2, [sp, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x14]
	mov	r3, #0x85
	lsl	r3, r3, #0x2
	lsr	r0, r1, #0x18
	str	r0, [sp, #0xc]
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r2, r2, r1
	mov	r8, r2
	lsr	r2, r2, #0x18
	lsr	r0, r4, #0x18
	mov	r9, r0
	mov	r0, #0xff
	lsl	r0, r0, #0x18
	add	r4, r4, r0
	lsr	r4, r4, #0x18
	mov	r5, #0x1
	str	r5, [sp]
	str	r5, [sp, #0x4]
	mov	r6, #0xe
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r1, r3, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L153
	ldr	r2, [sp, #0x10]
	str	r2, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0xc]
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L153+0x4
	ldr	r3, [sp, #0xc]
	ldr	r2, [sp, #0x10]
	add	r0, r3, r2
	lsl	r0, r0, #0x18
	mov	sl, r0
	lsr	r2, r0, #0x18
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	mov	r5, r9
	ldr	r0, [sp, #0x14]
	add	r0, r0, r9
	cmp	r9, r0
	bge	.L149	@cond_branch
	mov	r3, r8
	str	r3, [sp, #0x18]
	mov	r6, #0x1
	mov	r0, #0xe
	mov	r8, r0
.L151:
	lsl	r4, r5, #0x18
	lsr	r4, r4, #0x18
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r2, r8
	str	r2, [sp, #0x8]
	add	r0, r7, #0
	ldr	r1, .L153+0x8
	ldr	r3, [sp, #0x18]
	lsr	r2, r3, #0x18
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	str	r6, [sp]
	str	r6, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	add	r0, r7, #0
	ldr	r1, .L153+0xc
	mov	r3, sl
	lsr	r2, r3, #0x18
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	add	r5, r5, #0x1
	ldr	r0, [sp, #0x14]
	add	r0, r0, r9
	cmp	r5, r0
	blt	.L151	@cond_branch
.L149:
	ldr	r1, .L153+0x10
	ldr	r2, [sp, #0xc]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, [sp, #0x14]
	add	r4, r4, r9
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r5, #0x1
	str	r5, [sp]
	str	r5, [sp, #0x4]
	mov	r6, #0xe
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L153+0x14
	ldr	r0, [sp, #0x10]
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0xc]
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	mov	r1, #0x87
	lsl	r1, r1, #0x2
	ldr	r3, [sp, #0xc]
	ldr	r0, [sp, #0x10]
	add	r2, r3, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r4, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L154:
	.align	2, 0
.L153:
	.word	0x215
	.word	0x216
	.word	0x217
	.word	0x219
	.word	0x21a
	.word	0x21b
.Lfe29:
	.size	 WindowFunc_DrawStandardFrame,.Lfe29-WindowFunc_DrawStandardFrame
	.align	2, 0
	.type	 WindowFunc_DrawDialogueFrame,function
	.thumb_func
WindowFunc_DrawDialogueFrame:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x10]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x14]
	bl	IsMsgSignpost
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L157	@cond_branch
	ldr	r0, .L159
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.LCB1678
	b	.L156	@long jump
.LCB1678:
.L157:
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	ldr	r0, [sp, #0xc]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r5, [sp, #0x10]
	sub	r5, r5, #0x1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r6, #0xf
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x4
	ldr	r2, [sp, #0xc]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x8
	ldr	r0, [sp, #0x14]
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0xc]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0xc
	ldr	r2, [sp, #0xc]
	ldr	r0, [sp, #0x14]
	add	r2, r2, r0
	mov	r8, r2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x18]
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r1, #0x81
	lsl	r1, r1, #0x2
	add	r8, r8, r4
	mov	r2, r8
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	ldr	r3, [sp, #0x10]
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x14
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	ldr	r3, [sp, #0x10]
	bl	FillBgTilemapBufferRect
	mov	r1, #0x82
	lsl	r1, r1, #0x2
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x18]
	ldr	r3, [sp, #0x10]
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	ldr	r3, [sp, #0x10]
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x1c
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x20
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r1, #0x83
	lsl	r1, r1, #0x2
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x18]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x24
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x28
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x2
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x2c
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x30
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x18]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x34
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x38
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x3c
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x40
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x18]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x44
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r1, #0xa0
	lsl	r1, r1, #0x4
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x48
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x4c
	ldr	r0, [sp, #0x14]
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0xc]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x50
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x18]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L159+0x54
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	b	.L158
.L160:
	.align	2, 0
.L159:
	.word	gQuestLogState
	.word	0x201
	.word	0x202
	.word	0x203
	.word	0x205
	.word	0x206
	.word	0x209
	.word	0x20a
	.word	0x20b
	.word	0x20d
	.word	0xa0a
	.word	0xa0b
	.word	0xa0c
	.word	0xa0d
	.word	0xa05
	.word	0xa06
	.word	0xa08
	.word	0xa09
	.word	0xa01
	.word	0xa02
	.word	0xa03
	.word	0xa04
.L156:
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	ldr	r2, [sp, #0xc]
	sub	r2, r2, #0x2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	ldr	r5, [sp, #0x10]
	sub	r5, r5, #0x1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r4, #0x1
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r6, #0xf
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161
	ldr	r0, [sp, #0xc]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x4
	ldr	r2, [sp, #0x14]
	str	r2, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0xc]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x8
	ldr	r0, [sp, #0xc]
	ldr	r2, [sp, #0x14]
	add	r0, r0, r2
	mov	r8, r0
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x1c]
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r1, #0x81
	lsl	r1, r1, #0x2
	add	r8, r8, r4
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0xc
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	ldr	r3, [sp, #0x10]
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x10
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	ldr	r3, [sp, #0x10]
	bl	FillBgTilemapBufferRect
	mov	r1, #0x82
	lsl	r1, r1, #0x2
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x1c]
	ldr	r3, [sp, #0x10]
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x14
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	ldr	r3, [sp, #0x10]
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x18
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x1c
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r1, #0x83
	lsl	r1, r1, #0x2
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x1c]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x20
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x24
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x2
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x28
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x2c
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x1c]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x30
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x34
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x38
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x3c
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x1c]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x40
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	mov	r1, #0xa0
	lsl	r1, r1, #0x4
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, sl
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x44
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r9
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x48
	ldr	r2, [sp, #0x14]
	str	r2, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0xc]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x4c
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	ldr	r2, [sp, #0x1c]
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	ldr	r1, .L161+0x50
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	add	r0, r7, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
.L158:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	0x201
	.word	0x202
	.word	0x203
	.word	0x205
	.word	0x206
	.word	0x209
	.word	0x20a
	.word	0x20b
	.word	0x20d
	.word	0xa05
	.word	0xa06
	.word	0xa08
	.word	0xa09
	.word	0xa0a
	.word	0xa0b
	.word	0xa0c
	.word	0xa0d
	.word	0xa01
	.word	0xa02
	.word	0xa03
	.word	0xa04
.Lfe30:
	.size	 WindowFunc_DrawDialogueFrame,.Lfe30-WindowFunc_DrawDialogueFrame
	.align	2, 0
	.type	 WindowFunc_ClearStdWindowAndFrame,function
	.thumb_func
WindowFunc_ClearStdWindowAndFrame:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsl	r1, r1, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r3, r3, r2
	lsr	r3, r3, #0x18
	str	r3, [sp]
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	mov	r1, #0xe
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 WindowFunc_ClearStdWindowAndFrame,.Lfe31-WindowFunc_ClearStdWindowAndFrame
	.align	2, 0
	.type	 WindowFunc_ClearDialogWindowAndFrame,function
	.thumb_func
WindowFunc_ClearDialogWindowAndFrame:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsl	r1, r1, #0x18
	mov	r2, #0xfe
	lsl	r2, r2, #0x18
	add	r4, r4, r2
	lsr	r4, r4, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r5, r5, r2
	lsr	r5, r5, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x13
	add	r3, r3, r2
	lsr	r3, r3, #0x18
	str	r3, [sp]
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	mov	r1, #0xe
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	FillBgTilemapBufferRect
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 WindowFunc_ClearDialogWindowAndFrame,.Lfe32-WindowFunc_ClearDialogWindowAndFrame
	.align	2, 0
	.globl	EraseFieldMessageBox
	.type	 EraseFieldMessageBox,function
	.thumb_func
EraseFieldMessageBox:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	cmp	r4, #0x1
	bne	.L166	@cond_branch
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
.L166:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 EraseFieldMessageBox,.Lfe33-EraseFieldMessageBox
	.align	2, 0
	.globl	SetStdWindowBorderStyle
	.type	 SetStdWindowBorderStyle,function
	.thumb_func
SetStdWindowBorderStyle:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x85
	lsl	r2, r2, #0x2
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 SetStdWindowBorderStyle,.Lfe34-SetStdWindowBorderStyle
	.align	2, 0
	.globl	LoadMessageBoxAndFrameGfx
	.type	 LoadMessageBoxAndFrameGfx,function
	.thumb_func
LoadMessageBoxAndFrameGfx:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L171
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L169	@cond_branch
	ldr	r2, .L171+0x4
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	LoadQuestLogWindowTiles
	b	.L170
.L172:
	.align	2, 0
.L171:
	.word	gQuestLogState
	.word	gTextFlags
.L169:
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	add	r0, r4, #0
	mov	r2, #0xf0
	bl	LoadMenuMessageWindowGfx
.L170:
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r3, #0xf
	bl	DrawDialogFrameWithCustomTileAndPalette
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 LoadMessageBoxAndFrameGfx,.Lfe35-LoadMessageBoxAndFrameGfx
	.align	2, 0
	.globl	Menu_LoadStdPal
	.type	 Menu_LoadStdPal,function
	.thumb_func
Menu_LoadStdPal:
	push	{lr}
	ldr	r0, .L174
	mov	r1, #0xe0
	mov	r2, #0x14
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L175:
	.align	2, 0
.L174:
	.word	gStandardMenuPalette
.Lfe36:
	.size	 Menu_LoadStdPal,.Lfe36-Menu_LoadStdPal
	.align	2, 0
	.globl	Menu_LoadStdPalAt
	.type	 Menu_LoadStdPalAt,function
	.thumb_func
Menu_LoadStdPalAt:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L177
	mov	r2, #0x14
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L178:
	.align	2, 0
.L177:
	.word	gStandardMenuPalette
.Lfe37:
	.size	 Menu_LoadStdPalAt,.Lfe37-Menu_LoadStdPalAt
	.align	2, 0
	.type	 GetStdMenuPalette,function
	.thumb_func
GetStdMenuPalette:
	ldr	r0, .L180
	bx	lr
.L181:
	.align	2, 0
.L180:
	.word	gStandardMenuPalette
.Lfe38:
	.size	 GetStdMenuPalette,.Lfe38-GetStdMenuPalette
	.align	2, 0
	.type	 GetStdPalColor,function
	.thumb_func
GetStdPalColor:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xf
	bls	.L183	@cond_branch
	mov	r1, #0x0
.L183:
	ldr	r0, .L184
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	pop	{r1}
	bx	r1
.L185:
	.align	2, 0
.L184:
	.word	gStandardMenuPalette
.Lfe39:
	.size	 GetStdPalColor,.Lfe39-GetStdPalColor
	.align	2, 0
	.globl	DisplayItemMessageOnField
	.type	 DisplayItemMessageOnField,function
	.thumb_func
DisplayItemMessageOnField:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r4, r1, #0
	add	r6, r2, #0
	mov	r8, r3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	LoadStdWindowFrameGfx
	bl	GetTextSpeedSetting
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	str	r4, [sp]
	str	r0, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r3, #0xf
	bl	DisplayMessageAndContinueTask
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 DisplayItemMessageOnField,.Lfe40-DisplayItemMessageOnField
	.align	2, 0
	.globl	DisplayYesNoMenuDefaultYes
	.type	 DisplayYesNoMenuDefaultYes,function
	.thumb_func
DisplayYesNoMenuDefaultYes:
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r0, .L188
	mov	r1, #0x85
	lsl	r1, r1, #0x2
	str	r1, [sp]
	mov	r1, #0xe
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	CreateYesNoMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L189:
	.align	2, 0
.L188:
	.word	sYesNo_WindowTemplate
.Lfe41:
	.size	 DisplayYesNoMenuDefaultYes,.Lfe41-DisplayYesNoMenuDefaultYes
	.align	2, 0
	.globl	DisplayYesNoMenuDefaultNo
	.type	 DisplayYesNoMenuDefaultNo,function
	.thumb_func
DisplayYesNoMenuDefaultNo:
	push	{lr}
	add	sp, sp, #-0xc
	ldr	r0, .L191
	mov	r1, #0x85
	lsl	r1, r1, #0x2
	str	r1, [sp]
	mov	r1, #0xe
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	CreateYesNoMenu
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	sYesNo_WindowTemplate
.Lfe42:
	.size	 DisplayYesNoMenuDefaultNo,.Lfe42-DisplayYesNoMenuDefaultNo
	.align	2, 0
	.globl	GetTextSpeedSetting
	.type	 GetTextSpeedSetting,function
	.thumb_func
GetTextSpeedSetting:
	push	{lr}
	ldr	r3, .L195
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x14]
	lsl	r0, r1, #0x1d
	lsr	r0, r0, #0x1d
	cmp	r0, #0x2
	bls	.L194	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x14]
.L194:
	ldr	r1, .L195+0x4
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x14]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	add	r0, r0, r1
	ldrb	r0, [r0]
	pop	{r1}
	bx	r1
.L196:
	.align	2, 0
.L195:
	.word	gSaveBlock2Ptr
	.word	sTextSpeedFrameDelays
.Lfe43:
	.size	 GetTextSpeedSetting,.Lfe43-GetTextSpeedSetting
	.align	2, 0
	.globl	CreateStartMenuWindow
	.type	 CreateStartMenuWindow,function
	.thumb_func
CreateStartMenuWindow:
	push	{r4, lr}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r4, .L199
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L198	@cond_branch
	mov	r0, #0x7
	str	r0, [sp]
	lsl	r0, r1, #0x19
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0xf
	str	r0, [sp, #0x8]
	ldr	r0, .L199+0x4
	str	r0, [sp, #0xc]
	add	r0, sp, #0x10
	mov	r1, #0x0
	mov	r2, #0x16
	mov	r3, #0x1
	bl	SetWindowTemplateFields
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r0, sp, #0x18
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	PutWindowTilemap
.L198:
	ldrb	r0, [r4]
	add	sp, sp, #0x20
	pop	{r4}
	pop	{r1}
	bx	r1
.L200:
	.align	2, 0
.L199:
	.word	sStartMenuWindowId
	.word	0x13d
.Lfe44:
	.size	 CreateStartMenuWindow,.Lfe44-CreateStartMenuWindow
	.align	2, 0
	.globl	GetStartMenuWindowId
	.type	 GetStartMenuWindowId,function
	.thumb_func
GetStartMenuWindowId:
	ldr	r0, .L202
	ldrb	r0, [r0]
	bx	lr
.L203:
	.align	2, 0
.L202:
	.word	sStartMenuWindowId
.Lfe45:
	.size	 GetStartMenuWindowId,.Lfe45-GetStartMenuWindowId
	.align	2, 0
	.globl	RemoveStartMenuWindow
	.type	 RemoveStartMenuWindow,function
	.thumb_func
RemoveStartMenuWindow:
	push	{r4, lr}
	ldr	r4, .L206
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L205	@cond_branch
	bl	RemoveWindow
	mov	r0, #0xff
	strb	r0, [r4]
.L205:
	pop	{r4}
	pop	{r0}
	bx	r0
.L207:
	.align	2, 0
.L206:
	.word	sStartMenuWindowId
.Lfe46:
	.size	 RemoveStartMenuWindow,.Lfe46-RemoveStartMenuWindow
	.align	2, 0
	.type	 GetDlgWindowBaseTileNum,function
	.thumb_func
GetDlgWindowBaseTileNum:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	bx	lr
.Lfe47:
	.size	 GetDlgWindowBaseTileNum,.Lfe47-GetDlgWindowBaseTileNum
	.align	2, 0
	.globl	GetStdWindowBaseTileNum
	.type	 GetStdWindowBaseTileNum,function
	.thumb_func
GetStdWindowBaseTileNum:
	mov	r0, #0x85
	lsl	r0, r0, #0x2
	bx	lr
.Lfe48:
	.size	 GetStdWindowBaseTileNum,.Lfe48-GetStdWindowBaseTileNum
	.align	2, 0
	.globl	DrawHelpMessageWindowWithText
	.type	 DrawHelpMessageWindowWithText,function
	.thumb_func
DrawHelpMessageWindowWithText:
	push	{r4, lr}
	add	r4, r0, #0
	bl	CreateHelpMessageWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r2, #0xf0
	bl	LoadHelpMessageWindowGfx
	add	r0, r4, #0
	mov	r1, #0x2
	bl	PrintTextOnHelpMessageWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 DrawHelpMessageWindowWithText,.Lfe49-DrawHelpMessageWindowWithText
	.align	2, 0
	.globl	DestroyHelpMessageWindow_
	.type	 DestroyHelpMessageWindow_,function
	.thumb_func
DestroyHelpMessageWindow_:
	push	{lr}
	mov	r0, #0x2
	bl	DestroyHelpMessageWindow
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 DestroyHelpMessageWindow_,.Lfe50-DestroyHelpMessageWindow_
	.align	2, 0
	.globl	LoadSignpostWindowFrameGfx
	.type	 LoadSignpostWindowFrameGfx,function
	.thumb_func
LoadSignpostWindowFrameGfx:
	push	{lr}
	bl	Menu_LoadStdPal
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xf0
	bl	LoadSignpostWindowGfx
	mov	r1, #0x85
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	mov	r2, #0xe0
	bl	LoadUserWindowGfx
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 LoadSignpostWindowFrameGfx,.Lfe51-LoadSignpostWindowFrameGfx
	.align	2, 0
	.globl	SetDefaultFontsPointer
	.type	 SetDefaultFontsPointer,function
	.thumb_func
SetDefaultFontsPointer:
	push	{lr}
	ldr	r0, .L214
	bl	SetFontsPointer
	pop	{r0}
	bx	r0
.L215:
	.align	2, 0
.L214:
	.word	gFontInfos
.Lfe52:
	.size	 SetDefaultFontsPointer,.Lfe52-SetDefaultFontsPointer
	.align	2, 0
	.globl	GetFontAttribute
	.type	 GetFontAttribute,function
	.thumb_func
GetFontAttribute:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	cmp	r1, #0x7
	bhi	.L217	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L230
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L231:
	.align	2, 0
.L230:
	.word	.L226
	.align	2, 0
	.align	2, 0
.L226:
	.word	.L218
	.word	.L219
	.word	.L220
	.word	.L221
	.word	.L222
	.word	.L223
	.word	.L224
	.word	.L225
.L218:
	ldr	r1, .L232
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x4]
	b	.L217
.L233:
	.align	2, 0
.L232:
	.word	gFontInfos
.L219:
	ldr	r1, .L234
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	b	.L217
.L235:
	.align	2, 0
.L234:
	.word	gFontInfos
.L220:
	ldr	r1, .L236
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x6]
	b	.L217
.L237:
	.align	2, 0
.L236:
	.word	gFontInfos
.L221:
	ldr	r1, .L238
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x7]
	b	.L217
.L239:
	.align	2, 0
.L238:
	.word	gFontInfos
.L222:
	ldr	r0, .L240
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x8]
	b	.L228
.L241:
	.align	2, 0
.L240:
	.word	gFontInfos
.L223:
	ldr	r0, .L242
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x8]
	b	.L229
.L243:
	.align	2, 0
.L242:
	.word	gFontInfos
.L224:
	ldr	r0, .L244
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x9]
.L228:
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	b	.L217
.L245:
	.align	2, 0
.L244:
	.word	gFontInfos
.L225:
	ldr	r0, .L246
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x9]
.L229:
	lsr	r0, r0, #0x4
.L217:
	pop	{r1}
	bx	r1
.L247:
	.align	2, 0
.L246:
	.word	gFontInfos
.Lfe53:
	.size	 GetFontAttribute,.Lfe53-GetFontAttribute
	.align	2, 0
	.globl	GetMenuCursorDimensionByFont
	.type	 GetMenuCursorDimensionByFont,function
	.thumb_func
GetMenuCursorDimensionByFont:
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L249
	lsr	r0, r0, #0x17
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	bx	lr
.L250:
	.align	2, 0
.L249:
	.word	gMenuCursorDimensions
.Lfe54:
	.size	 GetMenuCursorDimensionByFont,.Lfe54-GetMenuCursorDimensionByFont
.text
	.align	2, 0 @ Don't pad with nop

